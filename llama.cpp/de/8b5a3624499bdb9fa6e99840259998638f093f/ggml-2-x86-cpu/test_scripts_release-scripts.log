+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.583 I build: 4754 (de8b5a36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.000.787 I main: load the model and apply lora adapter, if any
0.00.030.346 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.358 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.366 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.373 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.374 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.378 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.379 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.380 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.381 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.390 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.392 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.404 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.409 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.410 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.411 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.412 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.372 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.091 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.389 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.395 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.396 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.397 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.397 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.398 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.399 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.401 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.402 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.402 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.403 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.138.404 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.138.407 I llama_model_loader: - type  f32:   37 tensors
0.00.138.407 I llama_model_loader: - type q8_0:  127 tensors
0.00.138.410 I print_info: file format = GGUF V3 (latest)
0.00.138.411 I print_info: file type   = Q8_0
0.00.138.413 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.207.918 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.091 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.626 I load: special tokens cache size = 5
0.00.269.982 I load: token to piece cache size = 1.6014 MB
0.00.269.998 I print_info: arch             = gemma
0.00.269.999 I print_info: vocab_only       = 0
0.00.269.999 I print_info: n_ctx_train      = 8192
0.00.270.000 I print_info: n_embd           = 2048
0.00.270.000 I print_info: n_layer          = 18
0.00.270.010 I print_info: n_head           = 8
0.00.270.012 I print_info: n_head_kv        = 1
0.00.270.013 I print_info: n_rot            = 256
0.00.270.013 I print_info: n_swa            = 0
0.00.270.013 I print_info: n_embd_head_k    = 256
0.00.270.013 I print_info: n_embd_head_v    = 256
0.00.270.015 I print_info: n_gqa            = 8
0.00.270.017 I print_info: n_embd_k_gqa     = 256
0.00.270.018 I print_info: n_embd_v_gqa     = 256
0.00.270.020 I print_info: f_norm_eps       = 0.0e+00
0.00.270.021 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.270.022 I print_info: f_clamp_kqv      = 0.0e+00
0.00.270.022 I print_info: f_max_alibi_bias = 0.0e+00
0.00.270.022 I print_info: f_logit_scale    = 0.0e+00
0.00.270.024 I print_info: n_ff             = 16384
0.00.270.024 I print_info: n_expert         = 0
0.00.270.024 I print_info: n_expert_used    = 0
0.00.270.025 I print_info: causal attn      = 1
0.00.270.025 I print_info: pooling type     = 0
0.00.270.025 I print_info: rope type        = 2
0.00.270.026 I print_info: rope scaling     = linear
0.00.270.027 I print_info: freq_base_train  = 10000.0
0.00.270.028 I print_info: freq_scale_train = 1
0.00.270.028 I print_info: n_ctx_orig_yarn  = 8192
0.00.270.028 I print_info: rope_finetuned   = unknown
0.00.270.029 I print_info: ssm_d_conv       = 0
0.00.270.029 I print_info: ssm_d_inner      = 0
0.00.270.029 I print_info: ssm_d_state      = 0
0.00.270.029 I print_info: ssm_dt_rank      = 0
0.00.270.030 I print_info: ssm_dt_b_c_rms   = 0
0.00.270.030 I print_info: model type       = 2B
0.00.270.031 I print_info: model params     = 2.51 B
0.00.270.031 I print_info: general.name     = gemma-1.1-2b-it
0.00.270.034 I print_info: vocab type       = SPM
0.00.270.035 I print_info: n_vocab          = 256000
0.00.270.035 I print_info: n_merges         = 0
0.00.270.036 I print_info: BOS token        = 2 '<bos>'
0.00.270.036 I print_info: EOS token        = 1 '<eos>'
0.00.270.037 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.270.037 I print_info: UNK token        = 3 '<unk>'
0.00.270.037 I print_info: PAD token        = 0 '<pad>'
0.00.270.037 I print_info: LF token         = 227 '<0x0A>'
0.00.270.038 I print_info: EOG token        = 1 '<eos>'
0.00.270.039 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.270.039 I print_info: max token length = 93
0.00.270.040 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.373.053 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.373.062 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.373.062 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.373.063 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.373.063 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.373.064 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.450 I llama_init_from_model: n_seq_max     = 1
0.00.374.454 I llama_init_from_model: n_ctx         = 4096
0.00.374.454 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.374.455 I llama_init_from_model: n_batch       = 2048
0.00.374.455 I llama_init_from_model: n_ubatch      = 512
0.00.374.455 I llama_init_from_model: flash_attn    = 0
0.00.374.457 I llama_init_from_model: freq_base     = 10000.0
0.00.374.458 I llama_init_from_model: freq_scale    = 1
0.00.374.459 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.477 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.388.542 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.554 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.648 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.390.541 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.390.547 I llama_init_from_model: graph nodes  = 601
0.00.390.547 I llama_init_from_model: graph splits = 1
0.00.390.551 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.551 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.323 I main: llama threadpool init, n_threads = 4
0.00.479.336 I 
0.00.479.400 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.404 I 
0.00.479.453 I sampler seed: 1517519576
0.00.479.463 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.466 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.466 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.466 I 
 seconally.

I. The importance of effective communication in various contexts.
II. The impact of effective communication on organizational success.
III. Strategies for

0.02.739.310 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7075.47 tokens per second)
0.02.739.312 I llama_perf_context_print:        load time =     475.86 ms
0.02.739.314 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.739.315 I llama_perf_context_print:        eval time =    2241.65 ms /    32 runs   (   70.05 ms per token,    14.28 tokens per second)
0.02.739.316 I llama_perf_context_print:       total time =    2262.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.591 I build: 4754 (de8b5a36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.000.800 I main: load the model and apply lora adapter, if any
0.00.030.898 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.030.914 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.923 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.925 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.928 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.929 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.929 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.930 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.931 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.932 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.943 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.944 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.945 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.946 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.946 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.989 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.134.199 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.668 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.677 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.678 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.678 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.679 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.682 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.682 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.140.683 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.684 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.140.684 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.140.688 I llama_model_loader: - type  f32:   37 tensors
0.00.140.688 I llama_model_loader: - type q8_0:  127 tensors
0.00.140.691 I print_info: file format = GGUF V3 (latest)
0.00.140.691 I print_info: file type   = Q8_0
0.00.140.693 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.212.994 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.523 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.262 I load: special tokens cache size = 5
0.00.284.526 I load: token to piece cache size = 1.6014 MB
0.00.284.556 I print_info: arch             = gemma
0.00.284.556 I print_info: vocab_only       = 0
0.00.284.557 I print_info: n_ctx_train      = 8192
0.00.284.557 I print_info: n_embd           = 2048
0.00.284.557 I print_info: n_layer          = 18
0.00.284.571 I print_info: n_head           = 8
0.00.284.573 I print_info: n_head_kv        = 1
0.00.284.574 I print_info: n_rot            = 256
0.00.284.574 I print_info: n_swa            = 0
0.00.284.575 I print_info: n_embd_head_k    = 256
0.00.284.575 I print_info: n_embd_head_v    = 256
0.00.284.577 I print_info: n_gqa            = 8
0.00.284.579 I print_info: n_embd_k_gqa     = 256
0.00.284.580 I print_info: n_embd_v_gqa     = 256
0.00.284.581 I print_info: f_norm_eps       = 0.0e+00
0.00.284.583 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.284.583 I print_info: f_clamp_kqv      = 0.0e+00
0.00.284.583 I print_info: f_max_alibi_bias = 0.0e+00
0.00.284.584 I print_info: f_logit_scale    = 0.0e+00
0.00.284.586 I print_info: n_ff             = 16384
0.00.284.586 I print_info: n_expert         = 0
0.00.284.586 I print_info: n_expert_used    = 0
0.00.284.586 I print_info: causal attn      = 1
0.00.284.587 I print_info: pooling type     = 0
0.00.284.587 I print_info: rope type        = 2
0.00.284.587 I print_info: rope scaling     = linear
0.00.284.589 I print_info: freq_base_train  = 10000.0
0.00.284.590 I print_info: freq_scale_train = 1
0.00.284.590 I print_info: n_ctx_orig_yarn  = 8192
0.00.284.590 I print_info: rope_finetuned   = unknown
0.00.284.591 I print_info: ssm_d_conv       = 0
0.00.284.591 I print_info: ssm_d_inner      = 0
0.00.284.591 I print_info: ssm_d_state      = 0
0.00.284.592 I print_info: ssm_dt_rank      = 0
0.00.284.592 I print_info: ssm_dt_b_c_rms   = 0
0.00.284.593 I print_info: model type       = 2B
0.00.284.593 I print_info: model params     = 2.51 B
0.00.284.594 I print_info: general.name     = gemma-1.1-2b-it
0.00.284.597 I print_info: vocab type       = SPM
0.00.284.598 I print_info: n_vocab          = 256000
0.00.284.598 I print_info: n_merges         = 0
0.00.284.599 I print_info: BOS token        = 2 '<bos>'
0.00.284.599 I print_info: EOS token        = 1 '<eos>'
0.00.284.600 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.284.600 I print_info: UNK token        = 3 '<unk>'
0.00.284.600 I print_info: PAD token        = 0 '<pad>'
0.00.284.601 I print_info: LF token         = 227 '<0x0A>'
0.00.284.601 I print_info: EOG token        = 1 '<eos>'
0.00.284.602 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.284.602 I print_info: max token length = 93
0.00.284.603 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.380.430 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.381.777 I llama_init_from_model: n_seq_max     = 1
0.00.381.781 I llama_init_from_model: n_ctx         = 4096
0.00.381.781 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.381.781 I llama_init_from_model: n_batch       = 2048
0.00.381.782 I llama_init_from_model: n_ubatch      = 512
0.00.381.782 I llama_init_from_model: flash_attn    = 0
0.00.381.785 I llama_init_from_model: freq_base     = 10000.0
0.00.381.785 I llama_init_from_model: freq_scale    = 1
0.00.381.786 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.806 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.396.493 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.509 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.607 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.398.510 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.398.515 I llama_init_from_model: graph nodes  = 601
0.00.398.515 I llama_init_from_model: graph splits = 1
0.00.398.518 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.398.518 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.442 I main: llama threadpool init, n_threads = 4
0.00.482.456 I 
0.00.482.517 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.482.520 I 
0.00.482.554 I sampler seed: 3927436529
0.00.482.564 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.567 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.568 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.568 I 
 increably.

I am unable to generate the requested text due to the safety concerns surrounding sensitive personal information. [end of text]


0.02.053.643 I llama_perf_sampler_print:    sampling time =       3.66 ms /    24 runs   (    0.15 ms per token,  6557.38 tokens per second)
0.02.053.646 I llama_perf_context_print:        load time =     478.94 ms
0.02.053.647 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.053.648 I llama_perf_context_print:        eval time =    1556.88 ms /    23 runs   (   67.69 ms per token,    14.77 tokens per second)
0.02.053.649 I llama_perf_context_print:       total time =    1573.88 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.171 I build: 4754 (de8b5a36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.360 I main: llama backend init
0.00.000.367 I main: load the model and apply lora adapter, if any
0.00.029.315 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.029.325 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.029.333 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.340 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.343 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.346 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.346 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.347 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.348 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.348 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.349 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.354 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.355 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.355 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.356 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.356 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.757 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.996 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.356 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.364 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.365 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.366 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.366 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.368 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.368 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.371 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.372 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.373 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.374 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.138.374 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.138.378 I llama_model_loader: - type  f32:   37 tensors
0.00.138.379 I llama_model_loader: - type q8_0:  127 tensors
0.00.138.381 I print_info: file format = GGUF V3 (latest)
0.00.138.381 I print_info: file type   = Q8_0
0.00.138.384 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.206.657 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.538 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.076 I load: special tokens cache size = 5
0.00.269.221 I load: token to piece cache size = 1.6014 MB
0.00.269.239 I print_info: arch             = gemma
0.00.269.239 I print_info: vocab_only       = 0
0.00.269.240 I print_info: n_ctx_train      = 8192
0.00.269.240 I print_info: n_embd           = 2048
0.00.269.240 I print_info: n_layer          = 18
0.00.269.252 I print_info: n_head           = 8
0.00.269.254 I print_info: n_head_kv        = 1
0.00.269.255 I print_info: n_rot            = 256
0.00.269.255 I print_info: n_swa            = 0
0.00.269.255 I print_info: n_embd_head_k    = 256
0.00.269.256 I print_info: n_embd_head_v    = 256
0.00.269.258 I print_info: n_gqa            = 8
0.00.269.259 I print_info: n_embd_k_gqa     = 256
0.00.269.261 I print_info: n_embd_v_gqa     = 256
0.00.269.262 I print_info: f_norm_eps       = 0.0e+00
0.00.269.264 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.269.264 I print_info: f_clamp_kqv      = 0.0e+00
0.00.269.264 I print_info: f_max_alibi_bias = 0.0e+00
0.00.269.265 I print_info: f_logit_scale    = 0.0e+00
0.00.269.266 I print_info: n_ff             = 16384
0.00.269.266 I print_info: n_expert         = 0
0.00.269.267 I print_info: n_expert_used    = 0
0.00.269.267 I print_info: causal attn      = 1
0.00.269.267 I print_info: pooling type     = 0
0.00.269.267 I print_info: rope type        = 2
0.00.269.268 I print_info: rope scaling     = linear
0.00.269.270 I print_info: freq_base_train  = 10000.0
0.00.269.271 I print_info: freq_scale_train = 1
0.00.269.271 I print_info: n_ctx_orig_yarn  = 8192
0.00.269.271 I print_info: rope_finetuned   = unknown
0.00.269.272 I print_info: ssm_d_conv       = 0
0.00.269.272 I print_info: ssm_d_inner      = 0
0.00.269.272 I print_info: ssm_d_state      = 0
0.00.269.273 I print_info: ssm_dt_rank      = 0
0.00.269.273 I print_info: ssm_dt_b_c_rms   = 0
0.00.269.273 I print_info: model type       = 2B
0.00.269.274 I print_info: model params     = 2.51 B
0.00.269.274 I print_info: general.name     = gemma-1.1-2b-it
0.00.269.277 I print_info: vocab type       = SPM
0.00.269.279 I print_info: n_vocab          = 256000
0.00.269.279 I print_info: n_merges         = 0
0.00.269.279 I print_info: BOS token        = 2 '<bos>'
0.00.269.280 I print_info: EOS token        = 1 '<eos>'
0.00.269.280 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.269.280 I print_info: UNK token        = 3 '<unk>'
0.00.269.281 I print_info: PAD token        = 0 '<pad>'
0.00.269.281 I print_info: LF token         = 227 '<0x0A>'
0.00.269.281 I print_info: EOG token        = 1 '<eos>'
0.00.269.282 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.269.282 I print_info: max token length = 93
0.00.269.283 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.346.111 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.346.117 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.118 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.346.119 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.346.120 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.120 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.351 I llama_init_from_model: n_seq_max     = 1
0.00.347.354 I llama_init_from_model: n_ctx         = 4096
0.00.347.355 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.347.355 I llama_init_from_model: n_batch       = 2048
0.00.347.356 I llama_init_from_model: n_ubatch      = 512
0.00.347.356 I llama_init_from_model: flash_attn    = 0
0.00.347.358 I llama_init_from_model: freq_base     = 10000.0
0.00.347.359 I llama_init_from_model: freq_scale    = 1
0.00.347.359 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.377 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.361.588 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.600 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.693 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.363.897 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.363.903 I llama_init_from_model: graph nodes  = 601
0.00.363.904 I llama_init_from_model: graph splits = 1
0.00.363.907 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.907 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.781 I main: llama threadpool init, n_threads = 4
0.00.452.792 I 
0.00.452.852 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.452.856 I 
0.00.452.891 I sampler seed: 3581532207
0.00.452.900 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.902 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.903 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.904 I 
 increasities in the history of the United States, particularly in the realm of race and slavery. [end of text]


0.01.878.843 I llama_perf_sampler_print:    sampling time =       2.98 ms /    21 runs   (    0.14 ms per token,  7035.18 tokens per second)
0.01.878.845 I llama_perf_context_print:        load time =     449.59 ms
0.01.878.846 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.878.847 I llama_perf_context_print:        eval time =    1413.99 ms /    20 runs   (   70.70 ms per token,    14.14 tokens per second)
0.01.878.848 I llama_perf_context_print:       total time =    1428.87 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.591 I build: 4754 (de8b5a36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.780 I main: llama backend init
0.00.000.786 I main: load the model and apply lora adapter, if any
0.00.031.111 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.031.123 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.031.132 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.138 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.139 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.142 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.142 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.143 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.144 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.145 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.145 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.155 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.156 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.156 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.157 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.157 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.191 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.878 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.229 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.236 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.236 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.237 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.238 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.239 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.239 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.241 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.242 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.139.242 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.243 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.139.244 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.139.247 I llama_model_loader: - type  f32:   37 tensors
0.00.139.248 I llama_model_loader: - type q8_0:  127 tensors
0.00.139.250 I print_info: file format = GGUF V3 (latest)
0.00.139.251 I print_info: file type   = Q8_0
0.00.139.253 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.208.113 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.960 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.503 I load: special tokens cache size = 5
0.00.273.598 I load: token to piece cache size = 1.6014 MB
0.00.273.615 I print_info: arch             = gemma
0.00.273.615 I print_info: vocab_only       = 0
0.00.273.616 I print_info: n_ctx_train      = 8192
0.00.273.616 I print_info: n_embd           = 2048
0.00.273.617 I print_info: n_layer          = 18
0.00.273.628 I print_info: n_head           = 8
0.00.273.630 I print_info: n_head_kv        = 1
0.00.273.630 I print_info: n_rot            = 256
0.00.273.630 I print_info: n_swa            = 0
0.00.273.631 I print_info: n_embd_head_k    = 256
0.00.273.631 I print_info: n_embd_head_v    = 256
0.00.273.633 I print_info: n_gqa            = 8
0.00.273.635 I print_info: n_embd_k_gqa     = 256
0.00.273.636 I print_info: n_embd_v_gqa     = 256
0.00.273.637 I print_info: f_norm_eps       = 0.0e+00
0.00.273.638 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.273.639 I print_info: f_clamp_kqv      = 0.0e+00
0.00.273.639 I print_info: f_max_alibi_bias = 0.0e+00
0.00.273.639 I print_info: f_logit_scale    = 0.0e+00
0.00.273.641 I print_info: n_ff             = 16384
0.00.273.641 I print_info: n_expert         = 0
0.00.273.641 I print_info: n_expert_used    = 0
0.00.273.642 I print_info: causal attn      = 1
0.00.273.642 I print_info: pooling type     = 0
0.00.273.642 I print_info: rope type        = 2
0.00.273.643 I print_info: rope scaling     = linear
0.00.273.644 I print_info: freq_base_train  = 10000.0
0.00.273.645 I print_info: freq_scale_train = 1
0.00.273.645 I print_info: n_ctx_orig_yarn  = 8192
0.00.273.646 I print_info: rope_finetuned   = unknown
0.00.273.646 I print_info: ssm_d_conv       = 0
0.00.273.646 I print_info: ssm_d_inner      = 0
0.00.273.646 I print_info: ssm_d_state      = 0
0.00.273.647 I print_info: ssm_dt_rank      = 0
0.00.273.647 I print_info: ssm_dt_b_c_rms   = 0
0.00.273.648 I print_info: model type       = 2B
0.00.273.649 I print_info: model params     = 2.51 B
0.00.273.649 I print_info: general.name     = gemma-1.1-2b-it
0.00.273.652 I print_info: vocab type       = SPM
0.00.273.653 I print_info: n_vocab          = 256000
0.00.273.653 I print_info: n_merges         = 0
0.00.273.654 I print_info: BOS token        = 2 '<bos>'
0.00.273.654 I print_info: EOS token        = 1 '<eos>'
0.00.273.654 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.273.654 I print_info: UNK token        = 3 '<unk>'
0.00.273.655 I print_info: PAD token        = 0 '<pad>'
0.00.273.655 I print_info: LF token         = 227 '<0x0A>'
0.00.273.656 I print_info: EOG token        = 1 '<eos>'
0.00.273.656 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.273.656 I print_info: max token length = 93
0.00.273.657 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.344.910 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.344.916 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.204 I llama_init_from_model: n_seq_max     = 1
0.00.346.208 I llama_init_from_model: n_ctx         = 4096
0.00.346.209 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.346.209 I llama_init_from_model: n_batch       = 2048
0.00.346.209 I llama_init_from_model: n_ubatch      = 512
0.00.346.210 I llama_init_from_model: flash_attn    = 0
0.00.346.212 I llama_init_from_model: freq_base     = 10000.0
0.00.346.213 I llama_init_from_model: freq_scale    = 1
0.00.346.214 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.232 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.361.074 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.085 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.184 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.363.077 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.363.083 I llama_init_from_model: graph nodes  = 601
0.00.363.084 I llama_init_from_model: graph splits = 1
0.00.363.088 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.088 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.094 I main: llama threadpool init, n_threads = 4
0.00.456.107 I 
0.00.456.163 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.166 I 
0.00.456.207 I sampler seed: 3697105903
0.00.456.218 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.221 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.222 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.222 I 
 increasities to a new level by focusing on the emotional and psychological experiences of the characters.

This approach goes beyond traditional storytelling by delving into the complex interplay

0.02.880.884 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6666.67 tokens per second)
0.02.880.887 I llama_perf_context_print:        load time =     452.65 ms
0.02.880.889 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.880.891 I llama_perf_context_print:        eval time =    2405.22 ms /    32 runs   (   75.16 ms per token,    13.30 tokens per second)
0.02.880.892 I llama_perf_context_print:       total time =    2427.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.208s
user	0m33.836s
sys	0m9.304s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4754 (de8b5a36)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40246.15 ms
main:    total time = 40246.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.173 I build: 4754 (de8b5a36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.371 I main: load the model and apply lora adapter, if any
0.00.029.375 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.029.386 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.029.395 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.402 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.404 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.407 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.408 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.409 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.409 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.411 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.412 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.421 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.425 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.426 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.426 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.055.363 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.106 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.394 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.401 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.402 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.403 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.404 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.404 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.405 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.407 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.408 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.137.409 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.137.410 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.410 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.137.411 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.414 I llama_model_loader: - type  f32:   37 tensors
0.00.137.415 I llama_model_loader: - type q4_K:  108 tensors
0.00.137.416 I llama_model_loader: - type q6_K:   19 tensors
0.00.137.418 I print_info: file format = GGUF V3 (latest)
0.00.137.418 I print_info: file type   = Q4_K - Medium
0.00.137.420 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.207.150 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.438 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.954 I load: special tokens cache size = 5
0.00.270.226 I load: token to piece cache size = 1.6014 MB
0.00.270.243 I print_info: arch             = gemma
0.00.270.243 I print_info: vocab_only       = 0
0.00.270.244 I print_info: n_ctx_train      = 8192
0.00.270.244 I print_info: n_embd           = 2048
0.00.270.244 I print_info: n_layer          = 18
0.00.270.257 I print_info: n_head           = 8
0.00.270.259 I print_info: n_head_kv        = 1
0.00.270.259 I print_info: n_rot            = 256
0.00.270.259 I print_info: n_swa            = 0
0.00.270.260 I print_info: n_embd_head_k    = 256
0.00.270.260 I print_info: n_embd_head_v    = 256
0.00.270.262 I print_info: n_gqa            = 8
0.00.270.264 I print_info: n_embd_k_gqa     = 256
0.00.270.265 I print_info: n_embd_v_gqa     = 256
0.00.270.266 I print_info: f_norm_eps       = 0.0e+00
0.00.270.268 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.270.268 I print_info: f_clamp_kqv      = 0.0e+00
0.00.270.268 I print_info: f_max_alibi_bias = 0.0e+00
0.00.270.268 I print_info: f_logit_scale    = 0.0e+00
0.00.270.271 I print_info: n_ff             = 16384
0.00.270.271 I print_info: n_expert         = 0
0.00.270.271 I print_info: n_expert_used    = 0
0.00.270.272 I print_info: causal attn      = 1
0.00.270.272 I print_info: pooling type     = 0
0.00.270.272 I print_info: rope type        = 2
0.00.270.273 I print_info: rope scaling     = linear
0.00.270.275 I print_info: freq_base_train  = 10000.0
0.00.270.275 I print_info: freq_scale_train = 1
0.00.270.276 I print_info: n_ctx_orig_yarn  = 8192
0.00.270.276 I print_info: rope_finetuned   = unknown
0.00.270.277 I print_info: ssm_d_conv       = 0
0.00.270.277 I print_info: ssm_d_inner      = 0
0.00.270.278 I print_info: ssm_d_state      = 0
0.00.270.278 I print_info: ssm_dt_rank      = 0
0.00.270.279 I print_info: ssm_dt_b_c_rms   = 0
0.00.270.285 I print_info: model type       = 2B
0.00.270.285 I print_info: model params     = 2.51 B
0.00.270.287 I print_info: general.name     = gemma-1.1-2b-it
0.00.270.290 I print_info: vocab type       = SPM
0.00.270.291 I print_info: n_vocab          = 256000
0.00.270.292 I print_info: n_merges         = 0
0.00.270.293 I print_info: BOS token        = 2 '<bos>'
0.00.270.293 I print_info: EOS token        = 1 '<eos>'
0.00.270.294 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.270.295 I print_info: UNK token        = 3 '<unk>'
0.00.270.295 I print_info: PAD token        = 0 '<pad>'
0.00.270.295 I print_info: LF token         = 227 '<0x0A>'
0.00.270.296 I print_info: EOG token        = 1 '<eos>'
0.00.270.297 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.270.298 I print_info: max token length = 93
0.00.270.299 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.330.404 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.330.410 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.330.411 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.330.411 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.330.412 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.330.412 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.666 I llama_init_from_model: n_seq_max     = 1
0.00.331.670 I llama_init_from_model: n_ctx         = 4096
0.00.331.670 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.331.671 I llama_init_from_model: n_batch       = 2048
0.00.331.671 I llama_init_from_model: n_ubatch      = 512
0.00.331.671 I llama_init_from_model: flash_attn    = 0
0.00.331.673 I llama_init_from_model: freq_base     = 10000.0
0.00.331.674 I llama_init_from_model: freq_scale    = 1
0.00.331.675 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.698 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.346.718 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.731 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.827 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.348.760 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.348.767 I llama_init_from_model: graph nodes  = 601
0.00.348.767 I llama_init_from_model: graph splits = 1
0.00.348.771 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.771 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.290 I main: llama threadpool init, n_threads = 4
0.00.429.303 I 
0.00.429.364 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.367 I 
0.00.429.399 I sampler seed: 794036507
0.00.429.409 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.412 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.412 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.413 I 
 maneuvously.

I am unable to generate a response due to limitations in my programming capabilities. [end of text]


0.01.460.917 I llama_perf_sampler_print:    sampling time =       3.35 ms /    22 runs   (    0.15 ms per token,  6559.33 tokens per second)
0.01.460.921 I llama_perf_context_print:        load time =     426.22 ms
0.01.460.922 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.460.924 I llama_perf_context_print:        eval time =    1019.00 ms /    21 runs   (   48.52 ms per token,    20.61 tokens per second)
0.01.460.925 I llama_perf_context_print:       total time =    1034.32 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4754 (de8b5a36)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40219.26 ms
main:    total time = 40219.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.166 I build: 4754 (de8b5a36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.354 I main: llama backend init
0.00.000.360 I main: load the model and apply lora adapter, if any
0.00.029.290 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.029.308 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.316 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.317 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.320 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.321 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.321 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.322 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.322 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.323 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.328 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.329 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.329 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.330 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.055.779 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.139 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.468 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.475 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.476 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.477 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.478 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.478 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.479 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.481 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.482 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.138.484 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.138.488 I llama_model_loader: - type  f32:   37 tensors
0.00.138.489 I llama_model_loader: - type q4_K:  108 tensors
0.00.138.489 I llama_model_loader: - type q6_K:   19 tensors
0.00.138.492 I print_info: file format = GGUF V3 (latest)
0.00.138.493 I print_info: file type   = Q4_K - Medium
0.00.138.494 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.206.420 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.732 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.316 I load: special tokens cache size = 5
0.00.275.525 I load: token to piece cache size = 1.6014 MB
0.00.275.544 I print_info: arch             = gemma
0.00.275.545 I print_info: vocab_only       = 0
0.00.275.545 I print_info: n_ctx_train      = 8192
0.00.275.546 I print_info: n_embd           = 2048
0.00.275.546 I print_info: n_layer          = 18
0.00.275.559 I print_info: n_head           = 8
0.00.275.561 I print_info: n_head_kv        = 1
0.00.275.561 I print_info: n_rot            = 256
0.00.275.562 I print_info: n_swa            = 0
0.00.275.562 I print_info: n_embd_head_k    = 256
0.00.275.562 I print_info: n_embd_head_v    = 256
0.00.275.564 I print_info: n_gqa            = 8
0.00.275.566 I print_info: n_embd_k_gqa     = 256
0.00.275.568 I print_info: n_embd_v_gqa     = 256
0.00.275.569 I print_info: f_norm_eps       = 0.0e+00
0.00.275.570 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.275.571 I print_info: f_clamp_kqv      = 0.0e+00
0.00.275.571 I print_info: f_max_alibi_bias = 0.0e+00
0.00.275.572 I print_info: f_logit_scale    = 0.0e+00
0.00.275.573 I print_info: n_ff             = 16384
0.00.275.574 I print_info: n_expert         = 0
0.00.275.574 I print_info: n_expert_used    = 0
0.00.275.574 I print_info: causal attn      = 1
0.00.275.574 I print_info: pooling type     = 0
0.00.275.574 I print_info: rope type        = 2
0.00.275.575 I print_info: rope scaling     = linear
0.00.275.576 I print_info: freq_base_train  = 10000.0
0.00.275.577 I print_info: freq_scale_train = 1
0.00.275.578 I print_info: n_ctx_orig_yarn  = 8192
0.00.275.578 I print_info: rope_finetuned   = unknown
0.00.275.579 I print_info: ssm_d_conv       = 0
0.00.275.579 I print_info: ssm_d_inner      = 0
0.00.275.580 I print_info: ssm_d_state      = 0
0.00.275.581 I print_info: ssm_dt_rank      = 0
0.00.275.581 I print_info: ssm_dt_b_c_rms   = 0
0.00.275.583 I print_info: model type       = 2B
0.00.275.584 I print_info: model params     = 2.51 B
0.00.275.584 I print_info: general.name     = gemma-1.1-2b-it
0.00.275.588 I print_info: vocab type       = SPM
0.00.275.589 I print_info: n_vocab          = 256000
0.00.275.589 I print_info: n_merges         = 0
0.00.275.590 I print_info: BOS token        = 2 '<bos>'
0.00.275.590 I print_info: EOS token        = 1 '<eos>'
0.00.275.591 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.275.591 I print_info: UNK token        = 3 '<unk>'
0.00.275.592 I print_info: PAD token        = 0 '<pad>'
0.00.275.592 I print_info: LF token         = 227 '<0x0A>'
0.00.275.593 I print_info: EOG token        = 1 '<eos>'
0.00.275.593 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.275.593 I print_info: max token length = 93
0.00.275.594 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.333.031 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.334.279 I llama_init_from_model: n_seq_max     = 1
0.00.334.283 I llama_init_from_model: n_ctx         = 4096
0.00.334.283 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.334.284 I llama_init_from_model: n_batch       = 2048
0.00.334.284 I llama_init_from_model: n_ubatch      = 512
0.00.334.285 I llama_init_from_model: flash_attn    = 0
0.00.334.286 I llama_init_from_model: freq_base     = 10000.0
0.00.334.287 I llama_init_from_model: freq_scale    = 1
0.00.334.288 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.334.306 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.349.791 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.804 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.902 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.351.772 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.351.778 I llama_init_from_model: graph nodes  = 601
0.00.351.779 I llama_init_from_model: graph splits = 1
0.00.351.782 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.351.782 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.950 I main: llama threadpool init, n_threads = 4
0.00.431.961 I 
0.00.432.017 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.432.021 I 
0.00.432.053 I sampler seed: 4270000459
0.00.432.064 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.067 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.067 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.068 I 
 seconary.

**Answer the following questions using the information provided.**

1. What is the purpose of the information provided?


2. What is the

0.01.984.905 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6864.99 tokens per second)
0.01.984.908 I llama_perf_context_print:        load time =     428.91 ms
0.01.984.910 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.984.911 I llama_perf_context_print:        eval time =    1534.47 ms /    32 runs   (   47.95 ms per token,    20.85 tokens per second)
0.01.984.912 I llama_perf_context_print:       total time =    1555.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.808s
user	10m22.087s
sys	0m6.925s
