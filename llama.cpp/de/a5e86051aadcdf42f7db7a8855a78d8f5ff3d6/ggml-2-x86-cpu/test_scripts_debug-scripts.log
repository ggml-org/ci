+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 3997 (dea5e860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
0.00.024.819 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.037 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.137 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.151 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.156 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.160 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.162 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.163 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.164 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.165 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.166 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.177 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.181 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.182 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.183 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.184 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.699 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.464 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.705 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.712 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.713 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.714 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.715 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.716 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.718 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.722 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.723 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.724 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.725 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.727 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.734 I llama_model_loader: - type  f32:   37 tensors
0.00.267.739 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.358 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.380 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.255 I llm_load_vocab: special tokens cache size = 5
0.00.598.973 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.042 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.043 I llm_load_print_meta: arch             = gemma
0.00.599.044 I llm_load_print_meta: vocab type       = SPM
0.00.599.045 I llm_load_print_meta: n_vocab          = 256000
0.00.599.047 I llm_load_print_meta: n_merges         = 0
0.00.599.047 I llm_load_print_meta: vocab_only       = 0
0.00.599.048 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.048 I llm_load_print_meta: n_embd           = 2048
0.00.599.049 I llm_load_print_meta: n_layer          = 18
0.00.599.111 I llm_load_print_meta: n_head           = 8
0.00.599.117 I llm_load_print_meta: n_head_kv        = 1
0.00.599.119 I llm_load_print_meta: n_rot            = 256
0.00.599.120 I llm_load_print_meta: n_swa            = 0
0.00.599.120 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.121 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.126 I llm_load_print_meta: n_gqa            = 8
0.00.599.131 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.140 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.142 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.144 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.147 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.148 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.154 I llm_load_print_meta: n_ff             = 16384
0.00.599.154 I llm_load_print_meta: n_expert         = 0
0.00.599.155 I llm_load_print_meta: n_expert_used    = 0
0.00.599.167 I llm_load_print_meta: causal attn      = 1
0.00.599.171 I llm_load_print_meta: pooling type     = 0
0.00.599.172 I llm_load_print_meta: rope type        = 2
0.00.599.173 I llm_load_print_meta: rope scaling     = linear
0.00.599.175 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.175 I llm_load_print_meta: freq_scale_train = 1
0.00.599.188 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.189 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.190 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.190 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.190 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.190 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.191 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.192 I llm_load_print_meta: model type       = 2B
0.00.599.193 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.194 I llm_load_print_meta: model params     = 2.51 B
0.00.599.197 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.198 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.198 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.199 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.199 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.200 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.200 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.200 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.206 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.207 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.208 I llm_load_print_meta: max token length = 93
0.00.707.223 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.707.234 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.707.235 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.707.235 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.707.236 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.707.237 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.712.944 I llama_new_context_with_model: n_ctx      = 8192
0.00.712.951 I llama_new_context_with_model: n_batch    = 2048
0.00.712.952 I llama_new_context_with_model: n_ubatch   = 512
0.00.712.953 I llama_new_context_with_model: flash_attn = 0
0.00.712.955 I llama_new_context_with_model: freq_base  = 10000.0
0.00.712.956 I llama_new_context_with_model: freq_scale = 1
0.00.742.038 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.742.075 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.742.189 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.295 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.745.299 I llama_new_context_with_model: graph nodes  = 601
0.00.745.300 I llama_new_context_with_model: graph splits = 1
0.00.745.316 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.606 I main: llama threadpool init, n_threads = 4
0.01.352.618 I 
0.01.352.722 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.725 I 
0.01.352.960 I sampler seed: 1397364470
0.01.352.974 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.981 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.352.984 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.984 I 
 increasels, the mischievous rascals from Norse mythology.

The mischievous rascals, known for their playful pranks and mischievous ways, were often associated with trickery

0.14.900.010 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.85 tokens per second)
0.14.900.014 I llama_perf_context_print:        load time =    1349.66 ms
0.14.900.028 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.900.030 I llama_perf_context_print:        eval time =   13452.10 ms /    32 runs   (  420.38 ms per token,     2.38 tokens per second)
0.14.900.031 I llama_perf_context_print:       total time =   13547.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.665 I build: 3997 (dea5e860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.025.538 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.649 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.662 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.663 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.667 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.669 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.670 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.671 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.672 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.673 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.683 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.687 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.688 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.689 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.690 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.543 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.015 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.385 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.393 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.394 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.395 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.397 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.399 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.400 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.404 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.405 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.406 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.407 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.408 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.417 I llama_model_loader: - type  f32:   37 tensors
0.00.269.421 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.748 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.889 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.834 I llm_load_vocab: special tokens cache size = 5
0.00.601.092 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.162 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.163 I llm_load_print_meta: arch             = gemma
0.00.601.164 I llm_load_print_meta: vocab type       = SPM
0.00.601.165 I llm_load_print_meta: n_vocab          = 256000
0.00.601.167 I llm_load_print_meta: n_merges         = 0
0.00.601.168 I llm_load_print_meta: vocab_only       = 0
0.00.601.168 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.169 I llm_load_print_meta: n_embd           = 2048
0.00.601.169 I llm_load_print_meta: n_layer          = 18
0.00.601.234 I llm_load_print_meta: n_head           = 8
0.00.601.242 I llm_load_print_meta: n_head_kv        = 1
0.00.601.243 I llm_load_print_meta: n_rot            = 256
0.00.601.243 I llm_load_print_meta: n_swa            = 0
0.00.601.244 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.244 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.249 I llm_load_print_meta: n_gqa            = 8
0.00.601.254 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.281 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.283 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.284 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.285 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.285 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.286 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.292 I llm_load_print_meta: n_ff             = 16384
0.00.601.292 I llm_load_print_meta: n_expert         = 0
0.00.601.293 I llm_load_print_meta: n_expert_used    = 0
0.00.601.294 I llm_load_print_meta: causal attn      = 1
0.00.601.294 I llm_load_print_meta: pooling type     = 0
0.00.601.295 I llm_load_print_meta: rope type        = 2
0.00.601.295 I llm_load_print_meta: rope scaling     = linear
0.00.601.296 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.297 I llm_load_print_meta: freq_scale_train = 1
0.00.601.298 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.299 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.299 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.299 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.299 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.300 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.307 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.308 I llm_load_print_meta: model type       = 2B
0.00.601.310 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.311 I llm_load_print_meta: model params     = 2.51 B
0.00.601.311 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.312 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.313 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.313 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.314 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.315 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.316 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.317 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.323 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.325 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.325 I llm_load_print_meta: max token length = 93
0.00.700.252 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.706.010 I llama_new_context_with_model: n_ctx      = 8192
0.00.706.016 I llama_new_context_with_model: n_batch    = 2048
0.00.706.017 I llama_new_context_with_model: n_ubatch   = 512
0.00.706.017 I llama_new_context_with_model: flash_attn = 0
0.00.706.020 I llama_new_context_with_model: freq_base  = 10000.0
0.00.706.021 I llama_new_context_with_model: freq_scale = 1
0.00.735.598 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.735.636 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.735.753 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.972 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.738.977 I llama_new_context_with_model: graph nodes  = 601
0.00.738.977 I llama_new_context_with_model: graph splits = 1
0.00.738.993 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.188 I main: llama threadpool init, n_threads = 4
0.01.347.201 I 
0.01.347.315 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.319 I 
0.01.347.547 I sampler seed: 2623556707
0.01.347.560 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.567 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.347.568 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.568 I 
 increasively and ominously, his grin spreading wider and wider.

**Analysis:**

The text depicts a terrifying and unsettling scene, filled with escalating fear and

0.15.001.906 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.26 tokens per second)
0.15.001.910 I llama_perf_context_print:        load time =    1344.25 ms
0.15.001.921 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.001.924 I llama_perf_context_print:        eval time =   13558.82 ms /    32 runs   (  423.71 ms per token,     2.36 tokens per second)
0.15.001.925 I llama_perf_context_print:       total time =   13654.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.692 I build: 3997 (dea5e860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.888 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.100 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.193 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.204 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.205 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.210 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.211 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.212 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.213 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.214 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.216 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.225 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.230 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.231 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.232 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.233 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.847 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.973 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.375 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.384 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.385 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.387 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.388 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.389 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.390 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.393 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.394 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.395 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.396 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.397 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.405 I llama_model_loader: - type  f32:   37 tensors
0.00.269.409 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.308 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.064 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.997 I llm_load_vocab: special tokens cache size = 5
0.00.607.126 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.194 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.195 I llm_load_print_meta: arch             = gemma
0.00.607.195 I llm_load_print_meta: vocab type       = SPM
0.00.607.196 I llm_load_print_meta: n_vocab          = 256000
0.00.607.199 I llm_load_print_meta: n_merges         = 0
0.00.607.199 I llm_load_print_meta: vocab_only       = 0
0.00.607.200 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.200 I llm_load_print_meta: n_embd           = 2048
0.00.607.201 I llm_load_print_meta: n_layer          = 18
0.00.607.263 I llm_load_print_meta: n_head           = 8
0.00.607.270 I llm_load_print_meta: n_head_kv        = 1
0.00.607.274 I llm_load_print_meta: n_rot            = 256
0.00.607.274 I llm_load_print_meta: n_swa            = 0
0.00.607.275 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.275 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.280 I llm_load_print_meta: n_gqa            = 8
0.00.607.284 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.290 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.292 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.293 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.294 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.294 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.295 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.300 I llm_load_print_meta: n_ff             = 16384
0.00.607.301 I llm_load_print_meta: n_expert         = 0
0.00.607.302 I llm_load_print_meta: n_expert_used    = 0
0.00.607.303 I llm_load_print_meta: causal attn      = 1
0.00.607.303 I llm_load_print_meta: pooling type     = 0
0.00.607.303 I llm_load_print_meta: rope type        = 2
0.00.607.304 I llm_load_print_meta: rope scaling     = linear
0.00.607.305 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.306 I llm_load_print_meta: freq_scale_train = 1
0.00.607.306 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.307 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.308 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.308 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.308 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.308 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.309 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.310 I llm_load_print_meta: model type       = 2B
0.00.607.311 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.312 I llm_load_print_meta: model params     = 2.51 B
0.00.607.334 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.335 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.336 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.336 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.337 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.338 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.338 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.339 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.345 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.347 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.347 I llm_load_print_meta: max token length = 93
0.00.706.211 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.706.221 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.706.221 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.706.222 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.706.223 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.706.224 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.711.843 I llama_new_context_with_model: n_ctx      = 8192
0.00.711.851 I llama_new_context_with_model: n_batch    = 2048
0.00.711.851 I llama_new_context_with_model: n_ubatch   = 512
0.00.711.852 I llama_new_context_with_model: flash_attn = 0
0.00.711.854 I llama_new_context_with_model: freq_base  = 10000.0
0.00.711.855 I llama_new_context_with_model: freq_scale = 1
0.00.740.923 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.740.960 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.741.073 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.744.166 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.744.169 I llama_new_context_with_model: graph nodes  = 601
0.00.744.170 I llama_new_context_with_model: graph splits = 1
0.00.744.186 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.354.197 I main: llama threadpool init, n_threads = 4
0.01.354.210 I 
0.01.354.314 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.354.318 I 
0.01.354.543 I sampler seed: 3072612783
0.01.354.555 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.354.562 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.354.563 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.354.564 I 
 increasements, a new study has found.

**Key findings:**

* Increased intracranial pressure (ICP) was significantly associated with cognitive decline, depression, and

0.14.957.999 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.40 tokens per second)
0.14.958.011 I llama_perf_context_print:        load time =    1351.28 ms
0.14.958.013 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.958.015 I llama_perf_context_print:        eval time =   13508.61 ms /    32 runs   (  422.14 ms per token,     2.37 tokens per second)
0.14.958.017 I llama_perf_context_print:       total time =   13603.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3997 (dea5e860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.765 I main: load the model and apply lora adapter, if any
0.00.024.660 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.859 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.946 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.956 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.958 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.962 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.971 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.975 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.976 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.977 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.978 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.987 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.988 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.989 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.990 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.992 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.192 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.073 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.444 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.453 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.454 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.455 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.456 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.457 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.458 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.462 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.462 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.463 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.464 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.465 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.474 I llama_model_loader: - type  f32:   37 tensors
0.00.268.478 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.406 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.497 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.400 I llm_load_vocab: special tokens cache size = 5
0.00.596.082 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.147 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.148 I llm_load_print_meta: arch             = gemma
0.00.596.149 I llm_load_print_meta: vocab type       = SPM
0.00.596.150 I llm_load_print_meta: n_vocab          = 256000
0.00.596.152 I llm_load_print_meta: n_merges         = 0
0.00.596.153 I llm_load_print_meta: vocab_only       = 0
0.00.596.153 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.154 I llm_load_print_meta: n_embd           = 2048
0.00.596.154 I llm_load_print_meta: n_layer          = 18
0.00.596.217 I llm_load_print_meta: n_head           = 8
0.00.596.226 I llm_load_print_meta: n_head_kv        = 1
0.00.596.227 I llm_load_print_meta: n_rot            = 256
0.00.596.238 I llm_load_print_meta: n_swa            = 0
0.00.596.238 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.239 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.245 I llm_load_print_meta: n_gqa            = 8
0.00.596.250 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.255 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.256 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.258 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.259 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.259 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.260 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.265 I llm_load_print_meta: n_ff             = 16384
0.00.596.266 I llm_load_print_meta: n_expert         = 0
0.00.596.266 I llm_load_print_meta: n_expert_used    = 0
0.00.596.267 I llm_load_print_meta: causal attn      = 1
0.00.596.268 I llm_load_print_meta: pooling type     = 0
0.00.596.268 I llm_load_print_meta: rope type        = 2
0.00.596.269 I llm_load_print_meta: rope scaling     = linear
0.00.596.270 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.282 I llm_load_print_meta: freq_scale_train = 1
0.00.596.286 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.287 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.287 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.287 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.287 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.288 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.288 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.289 I llm_load_print_meta: model type       = 2B
0.00.596.290 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.291 I llm_load_print_meta: model params     = 2.51 B
0.00.596.292 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.292 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.296 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.296 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.296 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.297 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.297 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.298 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.318 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.320 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.327 I llm_load_print_meta: max token length = 93
0.00.684.744 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.684.753 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.690.466 I llama_new_context_with_model: n_ctx      = 8192
0.00.690.473 I llama_new_context_with_model: n_batch    = 2048
0.00.690.474 I llama_new_context_with_model: n_ubatch   = 512
0.00.690.474 I llama_new_context_with_model: flash_attn = 0
0.00.690.476 I llama_new_context_with_model: freq_base  = 10000.0
0.00.690.477 I llama_new_context_with_model: freq_scale = 1
0.00.719.641 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.676 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.719.788 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.891 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.722.896 I llama_new_context_with_model: graph nodes  = 601
0.00.722.896 I llama_new_context_with_model: graph splits = 1
0.00.722.913 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.463 I main: llama threadpool init, n_threads = 4
0.01.332.476 I 
0.01.332.589 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.594 I 
0.01.332.842 I sampler seed: 4021349380
0.01.332.855 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.864 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.332.864 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.865 I 
 increasities. [end of text]


0.03.024.528 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   800.90 tokens per second)
0.03.024.541 I llama_perf_context_print:        load time =    1329.60 ms
0.03.024.543 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.024.544 I llama_perf_context_print:        eval time =    1678.47 ms /     4 runs   (  419.62 ms per token,     2.38 tokens per second)
0.03.024.545 I llama_perf_context_print:       total time =    1692.07 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.717s
user	3m2.580s
sys	0m9.643s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3997 (dea5e860)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198941.33 ms
main:    total time = 198941.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 3997 (dea5e860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.797 I main: load the model and apply lora adapter, if any
0.00.024.844 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.052 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.142 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.153 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.155 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.159 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.160 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.161 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.162 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.163 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.164 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.172 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.176 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.177 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.178 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.179 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.491 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.677 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.033 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.041 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.042 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.043 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.044 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.045 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.047 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.050 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.051 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.052 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.053 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.054 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.061 I llama_model_loader: - type  f32:   37 tensors
0.00.268.065 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.066 I llama_model_loader: - type q6_K:   19 tensors
0.00.440.793 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.747 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.647 I llm_load_vocab: special tokens cache size = 5
0.00.603.291 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.358 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.359 I llm_load_print_meta: arch             = gemma
0.00.603.360 I llm_load_print_meta: vocab type       = SPM
0.00.603.361 I llm_load_print_meta: n_vocab          = 256000
0.00.603.363 I llm_load_print_meta: n_merges         = 0
0.00.603.364 I llm_load_print_meta: vocab_only       = 0
0.00.603.364 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.365 I llm_load_print_meta: n_embd           = 2048
0.00.603.365 I llm_load_print_meta: n_layer          = 18
0.00.603.426 I llm_load_print_meta: n_head           = 8
0.00.603.432 I llm_load_print_meta: n_head_kv        = 1
0.00.603.433 I llm_load_print_meta: n_rot            = 256
0.00.603.433 I llm_load_print_meta: n_swa            = 0
0.00.603.434 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.435 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.440 I llm_load_print_meta: n_gqa            = 8
0.00.603.445 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.451 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.457 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.459 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.459 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.460 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.460 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.466 I llm_load_print_meta: n_ff             = 16384
0.00.603.466 I llm_load_print_meta: n_expert         = 0
0.00.603.466 I llm_load_print_meta: n_expert_used    = 0
0.00.603.468 I llm_load_print_meta: causal attn      = 1
0.00.603.469 I llm_load_print_meta: pooling type     = 0
0.00.603.470 I llm_load_print_meta: rope type        = 2
0.00.603.470 I llm_load_print_meta: rope scaling     = linear
0.00.603.472 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.473 I llm_load_print_meta: freq_scale_train = 1
0.00.603.473 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.474 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.474 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.474 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.474 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.475 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.475 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.476 I llm_load_print_meta: model type       = 2B
0.00.603.477 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.603.478 I llm_load_print_meta: model params     = 2.51 B
0.00.603.479 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.603.479 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.480 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.481 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.481 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.482 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.482 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.483 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.489 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.491 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.491 I llm_load_print_meta: max token length = 93
0.00.666.807 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.666.814 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.666.815 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.666.815 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.666.816 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.666.817 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.672.440 I llama_new_context_with_model: n_ctx      = 8192
0.00.672.447 I llama_new_context_with_model: n_batch    = 2048
0.00.672.447 I llama_new_context_with_model: n_ubatch   = 512
0.00.672.448 I llama_new_context_with_model: flash_attn = 0
0.00.672.450 I llama_new_context_with_model: freq_base  = 10000.0
0.00.672.451 I llama_new_context_with_model: freq_scale = 1
0.00.702.029 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.064 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.178 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.705.164 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.168 I llama_new_context_with_model: graph nodes  = 601
0.00.705.169 I llama_new_context_with_model: graph splits = 1
0.00.705.184 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.281.759 I main: llama threadpool init, n_threads = 4
0.01.281.771 I 
0.01.281.893 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.897 I 
0.01.282.135 I sampler seed: 1030809457
0.01.282.148 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.282.156 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.282.156 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.282.157 I 
 seconded by the sun's energy.

The sun's energy is measured in units of energy per unit of time, known as joules per second

0.12.183.625 I llama_perf_sampler_print:    sampling time =      48.86 ms /    33 runs   (    1.48 ms per token,   675.37 tokens per second)
0.12.183.632 I llama_perf_context_print:        load time =    1278.87 ms
0.12.183.634 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.183.636 I llama_perf_context_print:        eval time =   10807.86 ms /    32 runs   (  337.75 ms per token,     2.96 tokens per second)
0.12.183.638 I llama_perf_context_print:       total time =   10901.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3997 (dea5e860)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198771.70 ms
main:    total time = 198771.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 3997 (dea5e860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.024.831 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.928 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.942 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.943 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.947 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.948 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.949 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.950 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.960 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.961 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.970 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.971 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.972 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.973 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.974 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.871 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.985 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.337 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.344 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.346 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.347 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.348 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.349 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.350 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.355 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.356 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.365 I llama_model_loader: - type  f32:   37 tensors
0.00.268.369 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.370 I llama_model_loader: - type q6_K:   19 tensors
0.00.439.908 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.906 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.801 I llm_load_vocab: special tokens cache size = 5
0.00.594.782 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.850 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.854 I llm_load_print_meta: arch             = gemma
0.00.594.855 I llm_load_print_meta: vocab type       = SPM
0.00.594.856 I llm_load_print_meta: n_vocab          = 256000
0.00.594.858 I llm_load_print_meta: n_merges         = 0
0.00.594.859 I llm_load_print_meta: vocab_only       = 0
0.00.594.859 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.859 I llm_load_print_meta: n_embd           = 2048
0.00.594.860 I llm_load_print_meta: n_layer          = 18
0.00.594.927 I llm_load_print_meta: n_head           = 8
0.00.594.936 I llm_load_print_meta: n_head_kv        = 1
0.00.594.937 I llm_load_print_meta: n_rot            = 256
0.00.594.939 I llm_load_print_meta: n_swa            = 0
0.00.594.939 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.939 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.945 I llm_load_print_meta: n_gqa            = 8
0.00.594.950 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.955 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.957 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.958 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.959 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.960 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.961 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.965 I llm_load_print_meta: n_ff             = 16384
0.00.594.966 I llm_load_print_meta: n_expert         = 0
0.00.594.966 I llm_load_print_meta: n_expert_used    = 0
0.00.594.967 I llm_load_print_meta: causal attn      = 1
0.00.594.967 I llm_load_print_meta: pooling type     = 0
0.00.594.967 I llm_load_print_meta: rope type        = 2
0.00.594.969 I llm_load_print_meta: rope scaling     = linear
0.00.594.970 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.971 I llm_load_print_meta: freq_scale_train = 1
0.00.594.971 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.972 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.972 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.973 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.973 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.981 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.982 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.982 I llm_load_print_meta: model type       = 2B
0.00.594.984 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.594.985 I llm_load_print_meta: model params     = 2.51 B
0.00.594.986 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.594.986 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.987 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.987 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.988 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.988 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.989 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.990 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.996 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.997 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.998 I llm_load_print_meta: max token length = 93
0.00.657.154 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.662.762 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.769 I llama_new_context_with_model: n_batch    = 2048
0.00.662.770 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.771 I llama_new_context_with_model: flash_attn = 0
0.00.662.773 I llama_new_context_with_model: freq_base  = 10000.0
0.00.662.773 I llama_new_context_with_model: freq_scale = 1
0.00.692.063 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.692.103 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.692.215 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.309 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.313 I llama_new_context_with_model: graph nodes  = 601
0.00.695.313 I llama_new_context_with_model: graph splits = 1
0.00.695.330 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.538 I main: llama threadpool init, n_threads = 4
0.01.271.551 I 
0.01.271.658 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.662 I 
0.01.271.884 I sampler seed: 2287683429
0.01.271.896 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.903 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.271.903 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.271.904 I 
 encompessing.

**Assistant**

I understand. I will assist you with your request. Please provide me with the specific instructions and information you need. [end of text]


0.12.186.329 I llama_perf_sampler_print:    sampling time =      48.91 ms /    33 runs   (    1.48 ms per token,   674.69 tokens per second)
0.12.186.333 I llama_perf_context_print:        load time =    1268.66 ms
0.12.186.334 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.186.349 I llama_perf_context_print:        eval time =   10820.89 ms /    32 runs   (  338.15 ms per token,     2.96 tokens per second)
0.12.186.351 I llama_perf_context_print:       total time =   10914.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.130s
user	50m11.971s
sys	0m6.380s
