+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.632 I build: 4000 (de44a080) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.891 I main: llama backend init
0.00.002.019 I main: load the model and apply lora adapter, if any
0.00.022.862 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.873 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.881 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.886 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.888 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.893 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.894 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.896 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.897 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.898 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.899 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.905 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.906 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.907 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.908 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.909 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.758 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.231 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.183 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.190 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.190 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.191 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.191 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.192 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.193 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.195 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.196 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.196 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.197 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.198 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.202 I llama_model_loader: - type  f32:   37 tensors
0.00.134.203 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.923 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.024 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.647 I llm_load_vocab: special tokens cache size = 5
0.00.275.347 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.364 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.365 I llm_load_print_meta: arch             = gemma
0.00.275.366 I llm_load_print_meta: vocab type       = SPM
0.00.275.366 I llm_load_print_meta: n_vocab          = 256000
0.00.275.367 I llm_load_print_meta: n_merges         = 0
0.00.275.367 I llm_load_print_meta: vocab_only       = 0
0.00.275.368 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.368 I llm_load_print_meta: n_embd           = 2048
0.00.275.368 I llm_load_print_meta: n_layer          = 18
0.00.275.381 I llm_load_print_meta: n_head           = 8
0.00.275.382 I llm_load_print_meta: n_head_kv        = 1
0.00.275.383 I llm_load_print_meta: n_rot            = 256
0.00.275.383 I llm_load_print_meta: n_swa            = 0
0.00.275.383 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.384 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.384 I llm_load_print_meta: n_gqa            = 8
0.00.275.385 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.386 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.387 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.388 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.389 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.389 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.389 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.390 I llm_load_print_meta: n_ff             = 16384
0.00.275.390 I llm_load_print_meta: n_expert         = 0
0.00.275.391 I llm_load_print_meta: n_expert_used    = 0
0.00.275.391 I llm_load_print_meta: causal attn      = 1
0.00.275.392 I llm_load_print_meta: pooling type     = 0
0.00.275.392 I llm_load_print_meta: rope type        = 2
0.00.275.392 I llm_load_print_meta: rope scaling     = linear
0.00.275.394 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.394 I llm_load_print_meta: freq_scale_train = 1
0.00.275.395 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.395 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.395 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.396 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.396 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.396 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.396 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.397 I llm_load_print_meta: model type       = 2B
0.00.275.398 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.398 I llm_load_print_meta: model params     = 2.51 B
0.00.275.399 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.400 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.400 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.401 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.401 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.401 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.402 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.402 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.402 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.403 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.403 I llm_load_print_meta: max token length = 93
0.00.382.866 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.382.874 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.382.875 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.382.876 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.382.876 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.382.877 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.388.504 I llama_new_context_with_model: n_ctx      = 8192
0.00.388.511 I llama_new_context_with_model: n_batch    = 2048
0.00.388.511 I llama_new_context_with_model: n_ubatch   = 512
0.00.388.512 I llama_new_context_with_model: flash_attn = 0
0.00.388.515 I llama_new_context_with_model: freq_base  = 10000.0
0.00.388.516 I llama_new_context_with_model: freq_scale = 1
0.00.418.762 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.418.777 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.418.880 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.420.780 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.420.787 I llama_new_context_with_model: graph nodes  = 601
0.00.420.787 I llama_new_context_with_model: graph splits = 1
0.00.420.789 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.513.269 I main: llama threadpool init, n_threads = 4
0.00.513.283 I 
0.00.513.374 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.513.377 I 
0.00.513.429 I sampler seed: 1998592396
0.00.513.441 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.513.444 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.513.445 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.513.445 I 
 increasities, the world has lost its innocence.

This passage is a commentary on the decline of innocence in modern society. Is there evidence to support this claim

0.02.853.088 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6726.46 tokens per second)
0.02.853.091 I llama_perf_context_print:        load time =     511.22 ms
0.02.853.093 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.853.095 I llama_perf_context_print:        eval time =    2319.70 ms /    32 runs   (   72.49 ms per token,    13.79 tokens per second)
0.02.853.096 I llama_perf_context_print:       total time =    2339.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.611 I build: 4000 (de44a080) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.839 I main: llama backend init
0.00.002.017 I main: load the model and apply lora adapter, if any
0.00.022.324 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.340 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.350 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.354 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.359 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.360 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.361 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.362 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.363 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.363 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.368 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.369 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.369 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.370 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.370 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.455 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.698 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.532 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.538 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.539 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.539 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.540 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.541 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.541 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.544 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.545 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.546 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.546 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.547 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.551 I llama_model_loader: - type  f32:   37 tensors
0.00.132.552 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.946 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.383 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.938 I llm_load_vocab: special tokens cache size = 5
0.00.263.807 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.826 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.826 I llm_load_print_meta: arch             = gemma
0.00.263.827 I llm_load_print_meta: vocab type       = SPM
0.00.263.828 I llm_load_print_meta: n_vocab          = 256000
0.00.263.828 I llm_load_print_meta: n_merges         = 0
0.00.263.828 I llm_load_print_meta: vocab_only       = 0
0.00.263.829 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.829 I llm_load_print_meta: n_embd           = 2048
0.00.263.829 I llm_load_print_meta: n_layer          = 18
0.00.263.842 I llm_load_print_meta: n_head           = 8
0.00.263.843 I llm_load_print_meta: n_head_kv        = 1
0.00.263.843 I llm_load_print_meta: n_rot            = 256
0.00.263.844 I llm_load_print_meta: n_swa            = 0
0.00.263.844 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.844 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.845 I llm_load_print_meta: n_gqa            = 8
0.00.263.846 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.847 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.848 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.849 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.850 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.850 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.850 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.851 I llm_load_print_meta: n_ff             = 16384
0.00.263.852 I llm_load_print_meta: n_expert         = 0
0.00.263.852 I llm_load_print_meta: n_expert_used    = 0
0.00.263.852 I llm_load_print_meta: causal attn      = 1
0.00.263.852 I llm_load_print_meta: pooling type     = 0
0.00.263.853 I llm_load_print_meta: rope type        = 2
0.00.263.853 I llm_load_print_meta: rope scaling     = linear
0.00.263.855 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.855 I llm_load_print_meta: freq_scale_train = 1
0.00.263.856 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.856 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.856 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.857 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.857 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.857 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.857 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.858 I llm_load_print_meta: model type       = 2B
0.00.263.858 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.859 I llm_load_print_meta: model params     = 2.51 B
0.00.263.860 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.860 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.861 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.861 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.861 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.862 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.862 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.862 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.862 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.863 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.863 I llm_load_print_meta: max token length = 93
0.00.361.053 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.148 I llama_new_context_with_model: n_ctx      = 8192
0.00.366.155 I llama_new_context_with_model: n_batch    = 2048
0.00.366.155 I llama_new_context_with_model: n_ubatch   = 512
0.00.366.156 I llama_new_context_with_model: flash_attn = 0
0.00.366.159 I llama_new_context_with_model: freq_base  = 10000.0
0.00.366.160 I llama_new_context_with_model: freq_scale = 1
0.00.395.219 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.395.246 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.395.343 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.220 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.397.226 I llama_new_context_with_model: graph nodes  = 601
0.00.397.226 I llama_new_context_with_model: graph splits = 1
0.00.397.229 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.340 I main: llama threadpool init, n_threads = 4
0.00.483.353 I 
0.00.483.424 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.483.427 I 
0.00.483.469 I sampler seed: 501017656
0.00.483.481 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.483 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.484 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.485 I 
 increamically. 

I apologize for my ignorance.

I am sorry to hear that you apologize. I appreciate your humility.

I am happy to learn

0.02.751.637 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6623.85 tokens per second)
0.02.751.639 I llama_perf_context_print:        load time =     481.30 ms
0.02.751.640 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.751.642 I llama_perf_context_print:        eval time =    2247.95 ms /    32 runs   (   70.25 ms per token,    14.24 tokens per second)
0.02.751.642 I llama_perf_context_print:       total time =    2268.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.538 I build: 4000 (de44a080) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.001.833 I main: load the model and apply lora adapter, if any
0.00.022.589 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.599 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.607 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.611 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.612 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.617 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.617 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.618 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.619 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.619 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.619 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.623 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.624 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.624 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.625 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.625 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.865 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.100 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.021 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.027 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.028 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.029 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.029 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.030 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.031 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.034 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.034 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.035 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.035 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.137.036 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.040 I llama_model_loader: - type  f32:   37 tensors
0.00.137.041 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.854 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.128 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.688 I llm_load_vocab: special tokens cache size = 5
0.00.282.296 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.313 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.314 I llm_load_print_meta: arch             = gemma
0.00.282.314 I llm_load_print_meta: vocab type       = SPM
0.00.282.315 I llm_load_print_meta: n_vocab          = 256000
0.00.282.315 I llm_load_print_meta: n_merges         = 0
0.00.282.316 I llm_load_print_meta: vocab_only       = 0
0.00.282.316 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.316 I llm_load_print_meta: n_embd           = 2048
0.00.282.316 I llm_load_print_meta: n_layer          = 18
0.00.282.330 I llm_load_print_meta: n_head           = 8
0.00.282.331 I llm_load_print_meta: n_head_kv        = 1
0.00.282.331 I llm_load_print_meta: n_rot            = 256
0.00.282.332 I llm_load_print_meta: n_swa            = 0
0.00.282.333 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.333 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.334 I llm_load_print_meta: n_gqa            = 8
0.00.282.335 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.336 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.337 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.338 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.338 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.339 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.339 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.340 I llm_load_print_meta: n_ff             = 16384
0.00.282.340 I llm_load_print_meta: n_expert         = 0
0.00.282.340 I llm_load_print_meta: n_expert_used    = 0
0.00.282.341 I llm_load_print_meta: causal attn      = 1
0.00.282.342 I llm_load_print_meta: pooling type     = 0
0.00.282.342 I llm_load_print_meta: rope type        = 2
0.00.282.343 I llm_load_print_meta: rope scaling     = linear
0.00.282.344 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.345 I llm_load_print_meta: freq_scale_train = 1
0.00.282.345 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.346 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.346 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.346 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.346 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.347 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.347 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.348 I llm_load_print_meta: model type       = 2B
0.00.282.349 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.350 I llm_load_print_meta: model params     = 2.51 B
0.00.282.350 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.351 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.352 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.352 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.352 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.353 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.353 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.354 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.354 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.355 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.355 I llm_load_print_meta: max token length = 93
0.00.379.622 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.379.629 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.379.630 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.379.631 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.379.631 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.379.632 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.384.952 I llama_new_context_with_model: n_ctx      = 8192
0.00.384.959 I llama_new_context_with_model: n_batch    = 2048
0.00.384.959 I llama_new_context_with_model: n_ubatch   = 512
0.00.384.959 I llama_new_context_with_model: flash_attn = 0
0.00.384.962 I llama_new_context_with_model: freq_base  = 10000.0
0.00.384.962 I llama_new_context_with_model: freq_scale = 1
0.00.413.835 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.413.851 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.413.943 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.415.868 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.415.875 I llama_new_context_with_model: graph nodes  = 601
0.00.415.875 I llama_new_context_with_model: graph splits = 1
0.00.415.877 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.507.530 I main: llama threadpool init, n_threads = 4
0.00.507.545 I 
0.00.507.629 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.507.632 I 
0.00.507.677 I sampler seed: 874808551
0.00.507.690 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.507.693 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.507.694 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.507.695 I 
 increasively. 

I'm having a lot of trouble with [insert specific problem]. I need to find a way to resolve this issue.

I

0.02.718.895 I llama_perf_sampler_print:    sampling time =       4.59 ms /    33 runs   (    0.14 ms per token,  7186.41 tokens per second)
0.02.718.897 I llama_perf_context_print:        load time =     505.68 ms
0.02.718.899 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.718.901 I llama_perf_context_print:        eval time =    2192.10 ms /    32 runs   (   68.50 ms per token,    14.60 tokens per second)
0.02.718.902 I llama_perf_context_print:       total time =    2211.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.466 I build: 4000 (de44a080) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.672 I main: llama backend init
0.00.001.797 I main: load the model and apply lora adapter, if any
0.00.022.193 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.201 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.209 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.214 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.216 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.222 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.226 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.227 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.228 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.229 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.229 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.235 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.236 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.237 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.238 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.238 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.449 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.050 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.953 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.960 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.961 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.962 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.963 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.964 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.964 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.967 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.967 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.968 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.968 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.969 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.973 I llama_model_loader: - type  f32:   37 tensors
0.00.132.974 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.401 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.715 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.348 I llm_load_vocab: special tokens cache size = 5
0.00.274.244 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.262 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.263 I llm_load_print_meta: arch             = gemma
0.00.274.263 I llm_load_print_meta: vocab type       = SPM
0.00.274.264 I llm_load_print_meta: n_vocab          = 256000
0.00.274.264 I llm_load_print_meta: n_merges         = 0
0.00.274.264 I llm_load_print_meta: vocab_only       = 0
0.00.274.265 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.265 I llm_load_print_meta: n_embd           = 2048
0.00.274.265 I llm_load_print_meta: n_layer          = 18
0.00.274.280 I llm_load_print_meta: n_head           = 8
0.00.274.282 I llm_load_print_meta: n_head_kv        = 1
0.00.274.282 I llm_load_print_meta: n_rot            = 256
0.00.274.283 I llm_load_print_meta: n_swa            = 0
0.00.274.284 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.285 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.286 I llm_load_print_meta: n_gqa            = 8
0.00.274.288 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.289 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.290 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.292 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.292 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.293 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.295 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.297 I llm_load_print_meta: n_ff             = 16384
0.00.274.297 I llm_load_print_meta: n_expert         = 0
0.00.274.298 I llm_load_print_meta: n_expert_used    = 0
0.00.274.298 I llm_load_print_meta: causal attn      = 1
0.00.274.299 I llm_load_print_meta: pooling type     = 0
0.00.274.299 I llm_load_print_meta: rope type        = 2
0.00.274.300 I llm_load_print_meta: rope scaling     = linear
0.00.274.302 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.302 I llm_load_print_meta: freq_scale_train = 1
0.00.274.303 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.303 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.304 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.304 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.304 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.305 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.305 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.307 I llm_load_print_meta: model type       = 2B
0.00.274.307 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.308 I llm_load_print_meta: model params     = 2.51 B
0.00.274.310 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.310 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.311 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.311 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.312 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.313 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.314 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.314 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.315 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.316 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.316 I llm_load_print_meta: max token length = 93
0.00.361.161 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.361.169 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.366.514 I llama_new_context_with_model: n_ctx      = 8192
0.00.366.521 I llama_new_context_with_model: n_batch    = 2048
0.00.366.521 I llama_new_context_with_model: n_ubatch   = 512
0.00.366.522 I llama_new_context_with_model: flash_attn = 0
0.00.366.524 I llama_new_context_with_model: freq_base  = 10000.0
0.00.366.525 I llama_new_context_with_model: freq_scale = 1
0.00.395.562 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.395.576 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.395.678 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.507 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.397.514 I llama_new_context_with_model: graph nodes  = 601
0.00.397.515 I llama_new_context_with_model: graph splits = 1
0.00.397.516 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.166 I main: llama threadpool init, n_threads = 4
0.00.485.177 I 
0.00.485.260 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.485.263 I 
0.00.485.321 I sampler seed: 253719544
0.00.485.332 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.335 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.485.335 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.336 I 
 increasities and other sexually suggestive content. I am unable to provide such information. [end of text]


0.01.674.281 I llama_perf_sampler_print:    sampling time =       2.66 ms /    18 runs   (    0.15 ms per token,  6761.83 tokens per second)
0.01.674.284 I llama_perf_context_print:        load time =     483.35 ms
0.01.674.286 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.674.288 I llama_perf_context_print:        eval time =    1177.61 ms /    17 runs   (   69.27 ms per token,    14.44 tokens per second)
0.01.674.289 I llama_perf_context_print:       total time =    1189.12 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.012s
user	0m34.896s
sys	0m9.720s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4000 (de44a080)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32274.48 ms
main:    total time = 32274.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.551 I build: 4000 (de44a080) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.001.857 I main: load the model and apply lora adapter, if any
0.00.022.658 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.668 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.677 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.682 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.686 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.690 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.691 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.692 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.693 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.693 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.694 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.697 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.697 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.698 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.699 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.699 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.880 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.539 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.451 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.458 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.458 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.459 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.459 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.461 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.461 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.464 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.464 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.465 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.466 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.467 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.470 I llama_model_loader: - type  f32:   37 tensors
0.00.133.470 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.471 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.336 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.554 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.163 I llm_load_vocab: special tokens cache size = 5
0.00.272.014 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.031 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.032 I llm_load_print_meta: arch             = gemma
0.00.272.033 I llm_load_print_meta: vocab type       = SPM
0.00.272.033 I llm_load_print_meta: n_vocab          = 256000
0.00.272.034 I llm_load_print_meta: n_merges         = 0
0.00.272.034 I llm_load_print_meta: vocab_only       = 0
0.00.272.035 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.035 I llm_load_print_meta: n_embd           = 2048
0.00.272.035 I llm_load_print_meta: n_layer          = 18
0.00.272.046 I llm_load_print_meta: n_head           = 8
0.00.272.047 I llm_load_print_meta: n_head_kv        = 1
0.00.272.048 I llm_load_print_meta: n_rot            = 256
0.00.272.048 I llm_load_print_meta: n_swa            = 0
0.00.272.048 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.048 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.049 I llm_load_print_meta: n_gqa            = 8
0.00.272.050 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.051 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.052 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.053 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.053 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.054 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.054 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.055 I llm_load_print_meta: n_ff             = 16384
0.00.272.055 I llm_load_print_meta: n_expert         = 0
0.00.272.055 I llm_load_print_meta: n_expert_used    = 0
0.00.272.056 I llm_load_print_meta: causal attn      = 1
0.00.272.056 I llm_load_print_meta: pooling type     = 0
0.00.272.056 I llm_load_print_meta: rope type        = 2
0.00.272.057 I llm_load_print_meta: rope scaling     = linear
0.00.272.058 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.059 I llm_load_print_meta: freq_scale_train = 1
0.00.272.059 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.059 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.060 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.060 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.060 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.060 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.061 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.061 I llm_load_print_meta: model type       = 2B
0.00.272.062 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.062 I llm_load_print_meta: model params     = 2.51 B
0.00.272.063 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.063 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.064 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.064 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.065 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.065 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.065 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.065 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.066 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.066 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.066 I llm_load_print_meta: max token length = 93
0.00.334.908 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.334.915 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.334.916 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.334.916 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.334.917 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.334.918 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.340.227 I llama_new_context_with_model: n_ctx      = 8192
0.00.340.234 I llama_new_context_with_model: n_batch    = 2048
0.00.340.235 I llama_new_context_with_model: n_ubatch   = 512
0.00.340.235 I llama_new_context_with_model: flash_attn = 0
0.00.340.238 I llama_new_context_with_model: freq_base  = 10000.0
0.00.340.239 I llama_new_context_with_model: freq_scale = 1
0.00.368.999 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.369.013 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.369.108 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.927 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.370.934 I llama_new_context_with_model: graph nodes  = 601
0.00.370.935 I llama_new_context_with_model: graph splits = 1
0.00.370.937 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.940 I main: llama threadpool init, n_threads = 4
0.00.450.953 I 
0.00.451.029 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.451.032 I 
0.00.451.075 I sampler seed: 3720171053
0.00.451.087 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.090 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.091 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.091 I 
 seconally!

I'm so sorry, but I can't generate responses that contain offensive or sexually suggestive content. My purpose is to assist with tasks

0.02.124.562 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7000.42 tokens per second)
0.02.124.564 I llama_perf_context_print:        load time =     449.06 ms
0.02.124.566 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.124.568 I llama_perf_context_print:        eval time =    1653.21 ms /    32 runs   (   51.66 ms per token,    19.36 tokens per second)
0.02.124.569 I llama_perf_context_print:       total time =    1673.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4000 (de44a080)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32054.84 ms
main:    total time = 32054.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.568 I build: 4000 (de44a080) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.001.869 I main: load the model and apply lora adapter, if any
0.00.022.442 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.457 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.463 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.464 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.469 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.470 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.470 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.471 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.472 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.472 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.476 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.476 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.477 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.478 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.478 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.290 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.441 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.309 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.316 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.317 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.318 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.318 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.319 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.320 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.322 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.323 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.326 I llama_model_loader: - type  f32:   37 tensors
0.00.132.327 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.327 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.903 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.230 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.826 I llm_load_vocab: special tokens cache size = 5
0.00.267.829 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.846 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.846 I llm_load_print_meta: arch             = gemma
0.00.267.847 I llm_load_print_meta: vocab type       = SPM
0.00.267.848 I llm_load_print_meta: n_vocab          = 256000
0.00.267.848 I llm_load_print_meta: n_merges         = 0
0.00.267.848 I llm_load_print_meta: vocab_only       = 0
0.00.267.849 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.849 I llm_load_print_meta: n_embd           = 2048
0.00.267.849 I llm_load_print_meta: n_layer          = 18
0.00.267.861 I llm_load_print_meta: n_head           = 8
0.00.267.862 I llm_load_print_meta: n_head_kv        = 1
0.00.267.862 I llm_load_print_meta: n_rot            = 256
0.00.267.863 I llm_load_print_meta: n_swa            = 0
0.00.267.863 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.863 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.864 I llm_load_print_meta: n_gqa            = 8
0.00.267.865 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.866 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.867 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.868 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.868 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.869 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.869 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.870 I llm_load_print_meta: n_ff             = 16384
0.00.267.870 I llm_load_print_meta: n_expert         = 0
0.00.267.870 I llm_load_print_meta: n_expert_used    = 0
0.00.267.871 I llm_load_print_meta: causal attn      = 1
0.00.267.871 I llm_load_print_meta: pooling type     = 0
0.00.267.871 I llm_load_print_meta: rope type        = 2
0.00.267.872 I llm_load_print_meta: rope scaling     = linear
0.00.267.873 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.874 I llm_load_print_meta: freq_scale_train = 1
0.00.267.874 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.875 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.875 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.875 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.876 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.876 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.876 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.876 I llm_load_print_meta: model type       = 2B
0.00.267.877 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.878 I llm_load_print_meta: model params     = 2.51 B
0.00.267.878 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.879 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.879 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.880 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.880 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.880 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.881 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.881 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.882 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.882 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.883 I llm_load_print_meta: max token length = 93
0.00.330.008 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.178 I llama_new_context_with_model: n_ctx      = 8192
0.00.335.185 I llama_new_context_with_model: n_batch    = 2048
0.00.335.185 I llama_new_context_with_model: n_ubatch   = 512
0.00.335.186 I llama_new_context_with_model: flash_attn = 0
0.00.335.188 I llama_new_context_with_model: freq_base  = 10000.0
0.00.335.189 I llama_new_context_with_model: freq_scale = 1
0.00.364.315 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.364.333 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.364.427 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.309 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.366.316 I llama_new_context_with_model: graph nodes  = 601
0.00.366.316 I llama_new_context_with_model: graph splits = 1
0.00.366.318 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.372 I main: llama threadpool init, n_threads = 4
0.00.446.386 I 
0.00.446.463 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.467 I 
0.00.446.509 I sampler seed: 1435854411
0.00.446.519 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.524 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.525 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.525 I 
 seconally, the narrator's attitude towards the protagonist remains unclear. The narrator's tone is ambiguous, with flashes of both kindness and cruelty.

**

0.02.145.612 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6905.21 tokens per second)
0.02.145.614 I llama_perf_context_print:        load time =     444.48 ms
0.02.145.616 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.145.617 I llama_perf_context_print:        eval time =    1679.43 ms /    32 runs   (   52.48 ms per token,    19.05 tokens per second)
0.02.145.618 I llama_perf_context_print:       total time =    1699.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.863s
user	8m15.320s
sys	0m6.993s
