+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3952 (94008cc7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.024.898 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.106 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.200 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.212 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.213 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.218 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.221 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.222 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.223 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.224 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.225 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.236 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.238 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.239 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.240 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.241 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.009 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.599 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.931 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.940 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.941 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.942 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.943 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.944 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.945 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.949 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.950 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.951 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.952 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.953 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.962 I llama_model_loader: - type  f32:   37 tensors
0.00.275.966 I llama_model_loader: - type q8_0:  127 tensors
0.00.464.597 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.640 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.686 I llm_load_vocab: special tokens cache size = 5
0.00.647.770 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.647.841 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.647.845 I llm_load_print_meta: arch             = gemma
0.00.647.846 I llm_load_print_meta: vocab type       = SPM
0.00.647.847 I llm_load_print_meta: n_vocab          = 256000
0.00.647.849 I llm_load_print_meta: n_merges         = 0
0.00.647.850 I llm_load_print_meta: vocab_only       = 0
0.00.647.850 I llm_load_print_meta: n_ctx_train      = 8192
0.00.647.851 I llm_load_print_meta: n_embd           = 2048
0.00.647.851 I llm_load_print_meta: n_layer          = 18
0.00.647.913 I llm_load_print_meta: n_head           = 8
0.00.647.923 I llm_load_print_meta: n_head_kv        = 1
0.00.647.925 I llm_load_print_meta: n_rot            = 256
0.00.647.925 I llm_load_print_meta: n_swa            = 0
0.00.647.926 I llm_load_print_meta: n_embd_head_k    = 256
0.00.647.938 I llm_load_print_meta: n_embd_head_v    = 256
0.00.647.945 I llm_load_print_meta: n_gqa            = 8
0.00.647.950 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.647.955 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.647.957 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.647.959 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.647.959 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.647.959 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.647.960 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.647.965 I llm_load_print_meta: n_ff             = 16384
0.00.647.966 I llm_load_print_meta: n_expert         = 0
0.00.647.966 I llm_load_print_meta: n_expert_used    = 0
0.00.647.967 I llm_load_print_meta: causal attn      = 1
0.00.647.970 I llm_load_print_meta: pooling type     = 0
0.00.647.970 I llm_load_print_meta: rope type        = 2
0.00.647.971 I llm_load_print_meta: rope scaling     = linear
0.00.647.972 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.647.973 I llm_load_print_meta: freq_scale_train = 1
0.00.647.973 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.647.973 I llm_load_print_meta: rope_finetuned   = unknown
0.00.647.974 I llm_load_print_meta: ssm_d_conv       = 0
0.00.647.974 I llm_load_print_meta: ssm_d_inner      = 0
0.00.647.974 I llm_load_print_meta: ssm_d_state      = 0
0.00.647.975 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.647.975 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.647.990 I llm_load_print_meta: model type       = 2B
0.00.647.991 I llm_load_print_meta: model ftype      = Q8_0
0.00.647.992 I llm_load_print_meta: model params     = 2.51 B
0.00.647.993 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.647.994 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.647.995 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.647.996 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.647.996 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.647.997 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.647.997 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.647.998 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.648.005 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.648.006 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.648.007 I llm_load_print_meta: max token length = 93
0.00.648.179 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.748.481 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.748.490 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.748.491 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.748.491 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.748.492 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.748.492 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.754.307 I llama_new_context_with_model: n_ctx      = 8192
0.00.754.316 I llama_new_context_with_model: n_batch    = 2048
0.00.754.316 I llama_new_context_with_model: n_ubatch   = 512
0.00.754.317 I llama_new_context_with_model: flash_attn = 0
0.00.754.321 I llama_new_context_with_model: freq_base  = 10000.0
0.00.754.321 I llama_new_context_with_model: freq_scale = 1
0.00.784.363 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.784.402 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.784.523 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.785.923 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.785.927 I llama_new_context_with_model: graph nodes  = 601
0.00.785.928 I llama_new_context_with_model: graph splits = 1
0.00.785.943 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.397.571 I main: llama threadpool init, n_threads = 4
0.01.397.583 I 
0.01.397.691 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.397.695 I 
0.01.397.873 I sampler seed: 1216334366
0.01.397.885 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.397.893 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.397.894 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.397.894 I 
 increably. It is an adjective used to describe something that is remarkable or impressive.

**Example:** The victory was a remarkable achievement that will be remembered for

0.14.833.087 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.56 tokens per second)
0.14.833.102 I llama_perf_context_print:        load time =    1394.70 ms
0.14.833.104 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.833.106 I llama_perf_context_print:        eval time =   13341.10 ms /    32 runs   (  416.91 ms per token,     2.40 tokens per second)
0.14.833.108 I llama_perf_context_print:       total time =   13435.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 3952 (94008cc7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.804 I main: load the model and apply lora adapter, if any
0.00.025.105 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.208 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.225 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.230 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.235 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.236 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.237 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.238 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.239 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.240 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.248 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.249 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.250 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.251 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.252 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.127 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.723 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.082 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.090 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.092 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.092 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.093 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.094 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.095 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.099 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.100 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.101 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.102 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.276.103 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.112 I llama_model_loader: - type  f32:   37 tensors
0.00.276.116 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.310 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.108 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.167 I llm_load_vocab: special tokens cache size = 5
0.00.631.088 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.631.157 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.631.158 I llm_load_print_meta: arch             = gemma
0.00.631.158 I llm_load_print_meta: vocab type       = SPM
0.00.631.159 I llm_load_print_meta: n_vocab          = 256000
0.00.631.162 I llm_load_print_meta: n_merges         = 0
0.00.631.162 I llm_load_print_meta: vocab_only       = 0
0.00.631.163 I llm_load_print_meta: n_ctx_train      = 8192
0.00.631.163 I llm_load_print_meta: n_embd           = 2048
0.00.631.164 I llm_load_print_meta: n_layer          = 18
0.00.631.229 I llm_load_print_meta: n_head           = 8
0.00.631.236 I llm_load_print_meta: n_head_kv        = 1
0.00.631.236 I llm_load_print_meta: n_rot            = 256
0.00.631.237 I llm_load_print_meta: n_swa            = 0
0.00.631.237 I llm_load_print_meta: n_embd_head_k    = 256
0.00.631.238 I llm_load_print_meta: n_embd_head_v    = 256
0.00.631.243 I llm_load_print_meta: n_gqa            = 8
0.00.631.247 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.631.252 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.631.255 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.631.257 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.631.257 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.631.258 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.631.271 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.631.282 I llm_load_print_meta: n_ff             = 16384
0.00.631.283 I llm_load_print_meta: n_expert         = 0
0.00.631.284 I llm_load_print_meta: n_expert_used    = 0
0.00.631.284 I llm_load_print_meta: causal attn      = 1
0.00.631.284 I llm_load_print_meta: pooling type     = 0
0.00.631.285 I llm_load_print_meta: rope type        = 2
0.00.631.286 I llm_load_print_meta: rope scaling     = linear
0.00.631.287 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.631.288 I llm_load_print_meta: freq_scale_train = 1
0.00.631.289 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.631.289 I llm_load_print_meta: rope_finetuned   = unknown
0.00.631.290 I llm_load_print_meta: ssm_d_conv       = 0
0.00.631.290 I llm_load_print_meta: ssm_d_inner      = 0
0.00.631.291 I llm_load_print_meta: ssm_d_state      = 0
0.00.631.291 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.631.291 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.631.292 I llm_load_print_meta: model type       = 2B
0.00.631.296 I llm_load_print_meta: model ftype      = Q8_0
0.00.631.297 I llm_load_print_meta: model params     = 2.51 B
0.00.631.297 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.631.298 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.631.299 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.631.299 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.631.299 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.631.300 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.631.300 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.631.300 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.631.306 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.631.307 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.631.307 I llm_load_print_meta: max token length = 93
0.00.631.472 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.726.742 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.732.411 I llama_new_context_with_model: n_ctx      = 8192
0.00.732.419 I llama_new_context_with_model: n_batch    = 2048
0.00.732.419 I llama_new_context_with_model: n_ubatch   = 512
0.00.732.420 I llama_new_context_with_model: flash_attn = 0
0.00.732.423 I llama_new_context_with_model: freq_base  = 10000.0
0.00.732.424 I llama_new_context_with_model: freq_scale = 1
0.00.762.886 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.762.931 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.763.047 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.764.456 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.764.461 I llama_new_context_with_model: graph nodes  = 601
0.00.764.461 I llama_new_context_with_model: graph splits = 1
0.00.764.477 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.411.175 I main: llama threadpool init, n_threads = 4
0.01.411.190 I 
0.01.411.297 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.411.301 I 
0.01.411.479 I sampler seed: 1860401195
0.01.411.491 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.411.498 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.411.498 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.411.499 I 
 increasels and their impact on the economy.

**Introduction**

The impact of credit crunches and economic instability on the economy has been a subject of extensive

0.14.960.075 I llama_perf_sampler_print:    sampling time =      52.56 ms /    33 runs   (    1.59 ms per token,   627.81 tokens per second)
0.14.960.078 I llama_perf_context_print:        load time =    1408.28 ms
0.14.960.101 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.960.103 I llama_perf_context_print:        eval time =   13449.29 ms /    32 runs   (  420.29 ms per token,     2.38 tokens per second)
0.14.960.104 I llama_perf_context_print:       total time =   13548.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.689 I build: 3952 (94008cc7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.002.836 I main: load the model and apply lora adapter, if any
0.00.025.434 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.649 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.741 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.753 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.756 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.761 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.765 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.766 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.767 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.769 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.769 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.781 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.783 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.784 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.786 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.787 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.162.008 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.263.977 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.282.697 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.282.708 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.282.709 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.282.711 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.282.712 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.282.713 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.282.714 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.282.718 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.282.719 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.282.720 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.282.721 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.282.722 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.282.733 I llama_model_loader: - type  f32:   37 tensors
0.00.282.738 I llama_model_loader: - type q8_0:  127 tensors
0.00.487.205 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.559.045 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.560.182 I llm_load_vocab: special tokens cache size = 5
0.00.660.463 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.660.533 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.660.534 I llm_load_print_meta: arch             = gemma
0.00.660.534 I llm_load_print_meta: vocab type       = SPM
0.00.660.535 I llm_load_print_meta: n_vocab          = 256000
0.00.660.537 I llm_load_print_meta: n_merges         = 0
0.00.660.538 I llm_load_print_meta: vocab_only       = 0
0.00.660.538 I llm_load_print_meta: n_ctx_train      = 8192
0.00.660.539 I llm_load_print_meta: n_embd           = 2048
0.00.660.539 I llm_load_print_meta: n_layer          = 18
0.00.660.602 I llm_load_print_meta: n_head           = 8
0.00.660.609 I llm_load_print_meta: n_head_kv        = 1
0.00.660.610 I llm_load_print_meta: n_rot            = 256
0.00.660.610 I llm_load_print_meta: n_swa            = 0
0.00.660.610 I llm_load_print_meta: n_embd_head_k    = 256
0.00.660.611 I llm_load_print_meta: n_embd_head_v    = 256
0.00.660.615 I llm_load_print_meta: n_gqa            = 8
0.00.660.620 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.660.649 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.660.650 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.660.652 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.660.653 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.660.653 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.660.654 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.660.659 I llm_load_print_meta: n_ff             = 16384
0.00.660.660 I llm_load_print_meta: n_expert         = 0
0.00.660.660 I llm_load_print_meta: n_expert_used    = 0
0.00.660.660 I llm_load_print_meta: causal attn      = 1
0.00.660.661 I llm_load_print_meta: pooling type     = 0
0.00.660.662 I llm_load_print_meta: rope type        = 2
0.00.660.662 I llm_load_print_meta: rope scaling     = linear
0.00.660.665 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.660.666 I llm_load_print_meta: freq_scale_train = 1
0.00.660.666 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.660.666 I llm_load_print_meta: rope_finetuned   = unknown
0.00.660.667 I llm_load_print_meta: ssm_d_conv       = 0
0.00.660.667 I llm_load_print_meta: ssm_d_inner      = 0
0.00.660.675 I llm_load_print_meta: ssm_d_state      = 0
0.00.660.676 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.660.676 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.660.677 I llm_load_print_meta: model type       = 2B
0.00.660.678 I llm_load_print_meta: model ftype      = Q8_0
0.00.660.678 I llm_load_print_meta: model params     = 2.51 B
0.00.660.686 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.660.687 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.660.687 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.660.688 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.660.689 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.660.690 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.660.690 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.660.690 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.660.696 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.660.698 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.660.698 I llm_load_print_meta: max token length = 93
0.00.660.863 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.737.783 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.737.794 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.737.795 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.737.795 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.737.796 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.737.797 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.743.639 I llama_new_context_with_model: n_ctx      = 8192
0.00.743.647 I llama_new_context_with_model: n_batch    = 2048
0.00.743.648 I llama_new_context_with_model: n_ubatch   = 512
0.00.743.648 I llama_new_context_with_model: flash_attn = 0
0.00.743.651 I llama_new_context_with_model: freq_base  = 10000.0
0.00.743.652 I llama_new_context_with_model: freq_scale = 1
0.00.773.985 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.774.026 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.774.143 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.775.542 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.775.547 I llama_new_context_with_model: graph nodes  = 601
0.00.775.547 I llama_new_context_with_model: graph splits = 1
0.00.775.564 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.386.593 I main: llama threadpool init, n_threads = 4
0.01.386.607 I 
0.01.386.721 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.386.722 I 
0.01.386.904 I sampler seed: 102457520
0.01.386.916 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.386.925 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.386.925 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.386.926 I 
 increasities, and other sexually suggestive content.

I am unable to generate sexually suggestive content as it goes against my safety principles. [end of text]


0.12.694.276 I llama_perf_sampler_print:    sampling time =      41.64 ms /    28 runs   (    1.49 ms per token,   672.41 tokens per second)
0.12.694.279 I llama_perf_context_print:        load time =    1383.67 ms
0.12.694.280 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.694.296 I llama_perf_context_print:        eval time =   11227.45 ms /    27 runs   (  415.83 ms per token,     2.40 tokens per second)
0.12.694.297 I llama_perf_context_print:       total time =   11307.69 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3952 (94008cc7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.002.795 I main: load the model and apply lora adapter, if any
0.00.024.815 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.021 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.110 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.122 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.123 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.128 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.132 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.133 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.134 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.135 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.136 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.144 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.153 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.155 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.156 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.157 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.802 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.377 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.869 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.881 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.882 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.883 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.884 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.885 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.886 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.890 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.891 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.892 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.893 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.275.895 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.903 I llama_model_loader: - type  f32:   37 tensors
0.00.275.907 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.233 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.218 I llm_load_vocab: special tokens cache size = 5
0.00.642.710 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.642.779 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.642.781 I llm_load_print_meta: arch             = gemma
0.00.642.781 I llm_load_print_meta: vocab type       = SPM
0.00.642.782 I llm_load_print_meta: n_vocab          = 256000
0.00.642.784 I llm_load_print_meta: n_merges         = 0
0.00.642.785 I llm_load_print_meta: vocab_only       = 0
0.00.642.785 I llm_load_print_meta: n_ctx_train      = 8192
0.00.642.786 I llm_load_print_meta: n_embd           = 2048
0.00.642.786 I llm_load_print_meta: n_layer          = 18
0.00.642.849 I llm_load_print_meta: n_head           = 8
0.00.642.856 I llm_load_print_meta: n_head_kv        = 1
0.00.642.856 I llm_load_print_meta: n_rot            = 256
0.00.642.857 I llm_load_print_meta: n_swa            = 0
0.00.642.857 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.858 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.862 I llm_load_print_meta: n_gqa            = 8
0.00.642.867 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.871 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.873 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.642.874 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.642.875 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.642.875 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.642.876 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.642.881 I llm_load_print_meta: n_ff             = 16384
0.00.642.882 I llm_load_print_meta: n_expert         = 0
0.00.642.883 I llm_load_print_meta: n_expert_used    = 0
0.00.642.883 I llm_load_print_meta: causal attn      = 1
0.00.642.884 I llm_load_print_meta: pooling type     = 0
0.00.642.890 I llm_load_print_meta: rope type        = 2
0.00.642.890 I llm_load_print_meta: rope scaling     = linear
0.00.642.892 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.642.893 I llm_load_print_meta: freq_scale_train = 1
0.00.642.894 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.642.895 I llm_load_print_meta: rope_finetuned   = unknown
0.00.642.895 I llm_load_print_meta: ssm_d_conv       = 0
0.00.642.895 I llm_load_print_meta: ssm_d_inner      = 0
0.00.642.896 I llm_load_print_meta: ssm_d_state      = 0
0.00.642.896 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.642.896 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.642.900 I llm_load_print_meta: model type       = 2B
0.00.642.902 I llm_load_print_meta: model ftype      = Q8_0
0.00.642.902 I llm_load_print_meta: model params     = 2.51 B
0.00.642.903 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.642.904 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.642.904 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.642.905 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.642.905 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.642.906 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.642.906 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.642.907 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.642.912 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.642.914 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.642.914 I llm_load_print_meta: max token length = 93
0.00.643.082 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.713.927 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.713.939 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.719.695 I llama_new_context_with_model: n_ctx      = 8192
0.00.719.703 I llama_new_context_with_model: n_batch    = 2048
0.00.719.703 I llama_new_context_with_model: n_ubatch   = 512
0.00.719.704 I llama_new_context_with_model: flash_attn = 0
0.00.719.708 I llama_new_context_with_model: freq_base  = 10000.0
0.00.719.709 I llama_new_context_with_model: freq_scale = 1
0.00.750.663 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.750.706 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.750.822 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.250 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.255 I llama_new_context_with_model: graph nodes  = 601
0.00.752.255 I llama_new_context_with_model: graph splits = 1
0.00.752.271 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.367.561 I main: llama threadpool init, n_threads = 4
0.01.367.573 I 
0.01.367.681 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.685 I 
0.01.367.859 I sampler seed: 2844880119
0.01.367.870 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.367.878 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.367.882 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.367.882 I 
 increasities, and her own cunning manipulation of events.

In the process, she becomes disillusioned with the superficiality and hypocrisy of the upper class, and

0.14.759.504 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.17 tokens per second)
0.14.759.508 I llama_perf_context_print:        load time =    1364.68 ms
0.14.759.510 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.759.512 I llama_perf_context_print:        eval time =   13297.65 ms /    32 runs   (  415.55 ms per token,     2.41 tokens per second)
0.14.759.513 I llama_perf_context_print:       total time =   13391.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.369s
user	3m39.660s
sys	0m9.733s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3952 (94008cc7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199804.89 ms
main:    total time = 199804.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 3952 (94008cc7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.837 I main: load the model and apply lora adapter, if any
0.00.024.763 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.969 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.058 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.068 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.070 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.074 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.075 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.078 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.079 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.080 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.081 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.087 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.091 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.092 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.093 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.094 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.443 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.254 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.677 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.685 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.686 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.687 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.688 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.689 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.690 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.694 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.695 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.696 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.697 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.698 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.707 I llama_model_loader: - type  f32:   37 tensors
0.00.275.710 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.711 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.360 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.711 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.659 I llm_load_vocab: special tokens cache size = 5
0.00.612.376 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.448 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.449 I llm_load_print_meta: arch             = gemma
0.00.612.450 I llm_load_print_meta: vocab type       = SPM
0.00.612.450 I llm_load_print_meta: n_vocab          = 256000
0.00.612.453 I llm_load_print_meta: n_merges         = 0
0.00.612.454 I llm_load_print_meta: vocab_only       = 0
0.00.612.454 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.454 I llm_load_print_meta: n_embd           = 2048
0.00.612.455 I llm_load_print_meta: n_layer          = 18
0.00.612.517 I llm_load_print_meta: n_head           = 8
0.00.612.524 I llm_load_print_meta: n_head_kv        = 1
0.00.612.526 I llm_load_print_meta: n_rot            = 256
0.00.612.527 I llm_load_print_meta: n_swa            = 0
0.00.612.539 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.540 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.547 I llm_load_print_meta: n_gqa            = 8
0.00.612.551 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.557 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.562 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.576 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.577 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.578 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.578 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.584 I llm_load_print_meta: n_ff             = 16384
0.00.612.585 I llm_load_print_meta: n_expert         = 0
0.00.612.586 I llm_load_print_meta: n_expert_used    = 0
0.00.612.586 I llm_load_print_meta: causal attn      = 1
0.00.612.587 I llm_load_print_meta: pooling type     = 0
0.00.612.587 I llm_load_print_meta: rope type        = 2
0.00.612.590 I llm_load_print_meta: rope scaling     = linear
0.00.612.592 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.592 I llm_load_print_meta: freq_scale_train = 1
0.00.612.593 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.593 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.593 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.594 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.594 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.594 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.595 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.595 I llm_load_print_meta: model type       = 2B
0.00.612.596 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.612.606 I llm_load_print_meta: model params     = 2.51 B
0.00.612.607 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.612.614 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.616 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.617 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.617 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.618 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.625 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.626 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.632 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.634 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.634 I llm_load_print_meta: max token length = 93
0.00.612.802 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.672.488 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.672.499 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.672.499 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.672.500 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.672.501 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.672.501 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.678.098 I llama_new_context_with_model: n_ctx      = 8192
0.00.678.106 I llama_new_context_with_model: n_batch    = 2048
0.00.678.106 I llama_new_context_with_model: n_ubatch   = 512
0.00.678.106 I llama_new_context_with_model: flash_attn = 0
0.00.678.109 I llama_new_context_with_model: freq_base  = 10000.0
0.00.678.110 I llama_new_context_with_model: freq_scale = 1
0.00.707.694 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.707.735 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.707.850 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.709.262 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.709.268 I llama_new_context_with_model: graph nodes  = 601
0.00.709.268 I llama_new_context_with_model: graph splits = 1
0.00.709.285 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.235 I main: llama threadpool init, n_threads = 4
0.01.290.247 I 
0.01.290.356 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.360 I 
0.01.290.559 I sampler seed: 100233274
0.01.290.573 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.290.579 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.290.582 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.290.583 I 
 seconally. [end of text]


0.02.659.903 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   800.90 tokens per second)
0.02.659.906 I llama_perf_context_print:        load time =    1287.31 ms
0.02.659.908 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.659.910 I llama_perf_context_print:        eval time =    1355.43 ms /     4 runs   (  338.86 ms per token,     2.95 tokens per second)
0.02.659.911 I llama_perf_context_print:       total time =    1369.68 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3952 (94008cc7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199789.41 ms
main:    total time = 199789.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3952 (94008cc7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
0.00.024.721 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.818 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.834 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.839 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.844 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.847 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.848 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.850 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.852 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.854 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.861 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.866 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.868 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.869 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.874 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.501 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.696 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.046 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.056 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.057 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.058 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.059 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.060 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.061 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.065 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.066 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.074 I llama_model_loader: - type  f32:   37 tensors
0.00.275.078 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.079 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.943 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.431 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.455 I llm_load_vocab: special tokens cache size = 5
0.00.619.804 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.882 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.883 I llm_load_print_meta: arch             = gemma
0.00.619.884 I llm_load_print_meta: vocab type       = SPM
0.00.619.884 I llm_load_print_meta: n_vocab          = 256000
0.00.619.887 I llm_load_print_meta: n_merges         = 0
0.00.619.888 I llm_load_print_meta: vocab_only       = 0
0.00.619.888 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.888 I llm_load_print_meta: n_embd           = 2048
0.00.619.889 I llm_load_print_meta: n_layer          = 18
0.00.619.956 I llm_load_print_meta: n_head           = 8
0.00.619.963 I llm_load_print_meta: n_head_kv        = 1
0.00.619.964 I llm_load_print_meta: n_rot            = 256
0.00.619.964 I llm_load_print_meta: n_swa            = 0
0.00.619.965 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.965 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.971 I llm_load_print_meta: n_gqa            = 8
0.00.619.979 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.986 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.988 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.990 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.990 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.992 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.992 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.000 I llm_load_print_meta: n_ff             = 16384
0.00.620.000 I llm_load_print_meta: n_expert         = 0
0.00.620.007 I llm_load_print_meta: n_expert_used    = 0
0.00.620.007 I llm_load_print_meta: causal attn      = 1
0.00.620.008 I llm_load_print_meta: pooling type     = 0
0.00.620.010 I llm_load_print_meta: rope type        = 2
0.00.620.010 I llm_load_print_meta: rope scaling     = linear
0.00.620.013 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.014 I llm_load_print_meta: freq_scale_train = 1
0.00.620.014 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.015 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.016 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.017 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.017 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.018 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.019 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.021 I llm_load_print_meta: model type       = 2B
0.00.620.022 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.620.023 I llm_load_print_meta: model params     = 2.51 B
0.00.620.024 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.620.028 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.029 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.029 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.030 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.031 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.031 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.032 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.039 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.041 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.042 I llm_load_print_meta: max token length = 93
0.00.620.226 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.678.616 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.684.480 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.489 I llama_new_context_with_model: n_batch    = 2048
0.00.684.489 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.490 I llama_new_context_with_model: flash_attn = 0
0.00.684.492 I llama_new_context_with_model: freq_base  = 10000.0
0.00.684.493 I llama_new_context_with_model: freq_scale = 1
0.00.715.222 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.715.267 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.387 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.775 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.780 I llama_new_context_with_model: graph nodes  = 601
0.00.716.781 I llama_new_context_with_model: graph splits = 1
0.00.716.798 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.296.828 I main: llama threadpool init, n_threads = 4
0.01.296.843 I 
0.01.296.968 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.296.972 I 
0.01.297.154 I sampler seed: 2373344724
0.01.297.166 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.175 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.297.179 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.180 I 
 squaRED, a platform for creative professionals, has announced the launch of its first-ever AI-powered creative assistant.

**Key features of squaRED'

0.12.256.068 I llama_perf_sampler_print:    sampling time =      53.99 ms /    33 runs   (    1.64 ms per token,   611.21 tokens per second)
0.12.256.071 I llama_perf_context_print:        load time =    1293.92 ms
0.12.256.072 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.256.074 I llama_perf_context_print:        eval time =   10860.00 ms /    32 runs   (  339.37 ms per token,     2.95 tokens per second)
0.12.256.075 I llama_perf_context_print:       total time =   10959.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m57.406s
user	49m37.596s
sys	0m6.434s
