+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3908 (943d20b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.822 I main: llama backend init
0.00.002.768 I main: load the model and apply lora adapter, if any
0.00.024.723 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.926 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.022 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.033 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.036 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.041 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.042 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.044 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.045 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.046 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.048 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.054 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.055 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.056 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.057 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.058 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.163 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.569 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.017 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.026 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.027 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.028 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.029 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.031 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.032 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.036 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.038 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.039 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.040 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.041 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.061 I llama_model_loader: - type  f32:   37 tensors
0.00.271.066 I llama_model_loader: - type q8_0:  127 tensors
0.00.421.897 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.444.709 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.445.708 I llm_load_vocab: special tokens cache size = 5
0.00.541.080 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.541.141 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.541.143 I llm_load_print_meta: arch             = gemma
0.00.541.144 I llm_load_print_meta: vocab type       = SPM
0.00.541.144 I llm_load_print_meta: n_vocab          = 256000
0.00.541.147 I llm_load_print_meta: n_merges         = 0
0.00.541.148 I llm_load_print_meta: vocab_only       = 0
0.00.541.148 I llm_load_print_meta: n_ctx_train      = 8192
0.00.541.148 I llm_load_print_meta: n_embd           = 2048
0.00.541.149 I llm_load_print_meta: n_layer          = 18
0.00.541.214 I llm_load_print_meta: n_head           = 8
0.00.541.221 I llm_load_print_meta: n_head_kv        = 1
0.00.541.222 I llm_load_print_meta: n_rot            = 256
0.00.541.222 I llm_load_print_meta: n_swa            = 0
0.00.541.224 I llm_load_print_meta: n_embd_head_k    = 256
0.00.541.224 I llm_load_print_meta: n_embd_head_v    = 256
0.00.541.229 I llm_load_print_meta: n_gqa            = 8
0.00.541.234 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.541.239 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.541.240 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.541.242 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.541.242 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.541.243 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.541.243 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.541.248 I llm_load_print_meta: n_ff             = 16384
0.00.541.248 I llm_load_print_meta: n_expert         = 0
0.00.541.249 I llm_load_print_meta: n_expert_used    = 0
0.00.541.250 I llm_load_print_meta: causal attn      = 1
0.00.541.250 I llm_load_print_meta: pooling type     = 0
0.00.541.250 I llm_load_print_meta: rope type        = 2
0.00.541.251 I llm_load_print_meta: rope scaling     = linear
0.00.541.253 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.541.254 I llm_load_print_meta: freq_scale_train = 1
0.00.541.255 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.541.255 I llm_load_print_meta: rope_finetuned   = unknown
0.00.541.256 I llm_load_print_meta: ssm_d_conv       = 0
0.00.541.265 I llm_load_print_meta: ssm_d_inner      = 0
0.00.541.269 I llm_load_print_meta: ssm_d_state      = 0
0.00.541.270 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.541.270 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.541.271 I llm_load_print_meta: model type       = 2B
0.00.541.272 I llm_load_print_meta: model ftype      = Q8_0
0.00.541.273 I llm_load_print_meta: model params     = 2.51 B
0.00.541.274 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.541.274 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.541.275 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.541.275 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.541.275 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.541.276 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.541.276 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.541.277 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.541.282 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.541.284 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.541.284 I llm_load_print_meta: max token length = 93
0.00.541.460 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.641.147 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.641.158 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.641.159 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.641.160 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.641.160 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.641.161 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.646.975 I llama_new_context_with_model: n_ctx      = 8192
0.00.646.983 I llama_new_context_with_model: n_batch    = 2048
0.00.646.984 I llama_new_context_with_model: n_ubatch   = 512
0.00.646.985 I llama_new_context_with_model: flash_attn = 0
0.00.646.988 I llama_new_context_with_model: freq_base  = 10000.0
0.00.646.989 I llama_new_context_with_model: freq_scale = 1
0.00.676.814 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.676.854 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.676.967 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.678.370 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.678.375 I llama_new_context_with_model: graph nodes  = 601
0.00.678.375 I llama_new_context_with_model: graph splits = 1
0.00.678.391 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.876 I main: llama threadpool init, n_threads = 4
0.01.290.887 I 
0.01.290.994 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.998 I 
0.01.291.180 I sampler seed: 2934712157
0.01.291.191 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.291.198 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.291.199 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.291.199 I 
 increasities and the role of the female gaze.

## Deconstructing the Female Gaze and Power Dynamics:

The female gaze, a potent cultural construct,

0.14.830.686 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.32 tokens per second)
0.14.830.689 I llama_perf_context_print:        load time =    1288.02 ms
0.14.830.690 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.830.692 I llama_perf_context_print:        eval time =   13458.36 ms /    32 runs   (  420.57 ms per token,     2.38 tokens per second)
0.14.830.693 I llama_perf_context_print:       total time =   13539.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 3908 (943d20b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.024.787 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.887 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.902 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.907 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.911 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.913 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.916 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.918 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.920 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.921 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.931 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.936 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.938 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.939 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.941 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.201 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.544 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.033 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.041 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.042 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.043 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.044 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.045 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.046 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.050 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.051 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.052 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.053 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.054 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.062 I llama_model_loader: - type  f32:   37 tensors
0.00.271.067 I llama_model_loader: - type q8_0:  127 tensors
0.00.412.939 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.434.819 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.435.830 I llm_load_vocab: special tokens cache size = 5
0.00.531.065 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.531.120 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.531.122 I llm_load_print_meta: arch             = gemma
0.00.531.122 I llm_load_print_meta: vocab type       = SPM
0.00.531.123 I llm_load_print_meta: n_vocab          = 256000
0.00.531.126 I llm_load_print_meta: n_merges         = 0
0.00.531.126 I llm_load_print_meta: vocab_only       = 0
0.00.531.127 I llm_load_print_meta: n_ctx_train      = 8192
0.00.531.127 I llm_load_print_meta: n_embd           = 2048
0.00.531.127 I llm_load_print_meta: n_layer          = 18
0.00.531.194 I llm_load_print_meta: n_head           = 8
0.00.531.201 I llm_load_print_meta: n_head_kv        = 1
0.00.531.202 I llm_load_print_meta: n_rot            = 256
0.00.531.202 I llm_load_print_meta: n_swa            = 0
0.00.531.203 I llm_load_print_meta: n_embd_head_k    = 256
0.00.531.203 I llm_load_print_meta: n_embd_head_v    = 256
0.00.531.208 I llm_load_print_meta: n_gqa            = 8
0.00.531.213 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.531.218 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.531.244 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.531.247 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.531.248 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.531.248 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.531.249 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.531.255 I llm_load_print_meta: n_ff             = 16384
0.00.531.264 I llm_load_print_meta: n_expert         = 0
0.00.531.267 I llm_load_print_meta: n_expert_used    = 0
0.00.531.267 I llm_load_print_meta: causal attn      = 1
0.00.531.268 I llm_load_print_meta: pooling type     = 0
0.00.531.268 I llm_load_print_meta: rope type        = 2
0.00.531.268 I llm_load_print_meta: rope scaling     = linear
0.00.531.271 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.531.271 I llm_load_print_meta: freq_scale_train = 1
0.00.531.272 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.531.272 I llm_load_print_meta: rope_finetuned   = unknown
0.00.531.272 I llm_load_print_meta: ssm_d_conv       = 0
0.00.531.273 I llm_load_print_meta: ssm_d_inner      = 0
0.00.531.273 I llm_load_print_meta: ssm_d_state      = 0
0.00.531.273 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.531.274 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.531.275 I llm_load_print_meta: model type       = 2B
0.00.531.283 I llm_load_print_meta: model ftype      = Q8_0
0.00.531.291 I llm_load_print_meta: model params     = 2.51 B
0.00.531.292 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.531.293 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.531.293 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.531.301 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.531.309 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.531.310 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.531.311 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.531.311 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.531.318 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.531.319 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.531.320 I llm_load_print_meta: max token length = 93
0.00.531.496 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.626.143 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.632.015 I llama_new_context_with_model: n_ctx      = 8192
0.00.632.022 I llama_new_context_with_model: n_batch    = 2048
0.00.632.022 I llama_new_context_with_model: n_ubatch   = 512
0.00.632.023 I llama_new_context_with_model: flash_attn = 0
0.00.632.025 I llama_new_context_with_model: freq_base  = 10000.0
0.00.632.026 I llama_new_context_with_model: freq_scale = 1
0.00.660.664 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.660.710 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.660.822 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.662.189 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.662.194 I llama_new_context_with_model: graph nodes  = 601
0.00.662.194 I llama_new_context_with_model: graph splits = 1
0.00.662.209 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.273.756 I main: llama threadpool init, n_threads = 4
0.01.273.766 I 
0.01.273.885 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.273.893 I 
0.01.274.070 I sampler seed: 159419419
0.01.274.080 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.086 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.274.087 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.274.088 I 
 increasements and their role in the development of complex systems

**Introduction**

Complex systems are intricate networks of interacting parts that exhibit emergent properties, defying the predictions

0.14.835.436 I llama_perf_sampler_print:    sampling time =      49.43 ms /    33 runs   (    1.50 ms per token,   667.62 tokens per second)
0.14.835.464 I llama_perf_context_print:        load time =    1270.85 ms
0.14.835.466 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.835.469 I llama_perf_context_print:        eval time =   13479.68 ms /    32 runs   (  421.24 ms per token,     2.37 tokens per second)
0.14.835.474 I llama_perf_context_print:       total time =   13561.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.669 I build: 3908 (943d20b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.024.869 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.094 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.197 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.210 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.212 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.218 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.223 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.224 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.226 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.228 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.229 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.240 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.245 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.247 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.248 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.250 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.504 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.490 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.726 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.736 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.737 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.739 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.740 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.741 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.742 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.745 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.746 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.747 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.748 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.749 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.758 I llama_model_loader: - type  f32:   37 tensors
0.00.271.762 I llama_model_loader: - type q8_0:  127 tensors
0.00.426.576 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.447.933 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.449.027 I llm_load_vocab: special tokens cache size = 5
0.00.544.311 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.544.368 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.544.372 I llm_load_print_meta: arch             = gemma
0.00.544.373 I llm_load_print_meta: vocab type       = SPM
0.00.544.374 I llm_load_print_meta: n_vocab          = 256000
0.00.544.377 I llm_load_print_meta: n_merges         = 0
0.00.544.377 I llm_load_print_meta: vocab_only       = 0
0.00.544.377 I llm_load_print_meta: n_ctx_train      = 8192
0.00.544.378 I llm_load_print_meta: n_embd           = 2048
0.00.544.378 I llm_load_print_meta: n_layer          = 18
0.00.544.439 I llm_load_print_meta: n_head           = 8
0.00.544.449 I llm_load_print_meta: n_head_kv        = 1
0.00.544.449 I llm_load_print_meta: n_rot            = 256
0.00.544.450 I llm_load_print_meta: n_swa            = 0
0.00.544.450 I llm_load_print_meta: n_embd_head_k    = 256
0.00.544.450 I llm_load_print_meta: n_embd_head_v    = 256
0.00.544.455 I llm_load_print_meta: n_gqa            = 8
0.00.544.460 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.544.465 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.544.466 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.544.469 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.544.469 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.544.470 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.544.470 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.544.475 I llm_load_print_meta: n_ff             = 16384
0.00.544.476 I llm_load_print_meta: n_expert         = 0
0.00.544.484 I llm_load_print_meta: n_expert_used    = 0
0.00.544.484 I llm_load_print_meta: causal attn      = 1
0.00.544.485 I llm_load_print_meta: pooling type     = 0
0.00.544.485 I llm_load_print_meta: rope type        = 2
0.00.544.485 I llm_load_print_meta: rope scaling     = linear
0.00.544.487 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.544.488 I llm_load_print_meta: freq_scale_train = 1
0.00.544.489 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.544.489 I llm_load_print_meta: rope_finetuned   = unknown
0.00.544.490 I llm_load_print_meta: ssm_d_conv       = 0
0.00.544.490 I llm_load_print_meta: ssm_d_inner      = 0
0.00.544.490 I llm_load_print_meta: ssm_d_state      = 0
0.00.544.493 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.544.493 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.544.494 I llm_load_print_meta: model type       = 2B
0.00.544.496 I llm_load_print_meta: model ftype      = Q8_0
0.00.544.496 I llm_load_print_meta: model params     = 2.51 B
0.00.544.497 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.544.497 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.544.498 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.544.498 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.544.498 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.544.499 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.544.500 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.544.500 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.544.518 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.544.519 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.544.520 I llm_load_print_meta: max token length = 93
0.00.544.697 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.622.578 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.622.587 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.622.588 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.622.589 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.622.590 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.622.590 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.628.326 I llama_new_context_with_model: n_ctx      = 8192
0.00.628.334 I llama_new_context_with_model: n_batch    = 2048
0.00.628.335 I llama_new_context_with_model: n_ubatch   = 512
0.00.628.335 I llama_new_context_with_model: flash_attn = 0
0.00.628.338 I llama_new_context_with_model: freq_base  = 10000.0
0.00.628.338 I llama_new_context_with_model: freq_scale = 1
0.00.658.693 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.738 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.848 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.660.243 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.660.247 I llama_new_context_with_model: graph nodes  = 601
0.00.660.248 I llama_new_context_with_model: graph splits = 1
0.00.660.264 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.281.596 I main: llama threadpool init, n_threads = 4
0.01.281.608 I 
0.01.281.726 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.731 I 
0.01.281.909 I sampler seed: 2779861171
0.01.281.926 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.933 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.281.934 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.281.935 I 
 increasities. [end of text]


0.02.977.698 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.67 tokens per second)
0.02.977.715 I llama_perf_context_print:        load time =    1278.66 ms
0.02.977.717 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.977.718 I llama_perf_context_print:        eval time =    1684.47 ms /     4 runs   (  421.12 ms per token,     2.37 tokens per second)
0.02.977.719 I llama_perf_context_print:       total time =    1696.11 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 3908 (943d20b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.002.815 I main: load the model and apply lora adapter, if any
0.00.025.137 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.358 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.460 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.474 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.478 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.484 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.486 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.488 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.492 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.494 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.496 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.509 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.513 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.514 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.515 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.516 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.185 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.799 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.139 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.148 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.149 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.150 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.151 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.152 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.153 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.157 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.158 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.159 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.160 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.272.161 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.170 I llama_model_loader: - type  f32:   37 tensors
0.00.272.174 I llama_model_loader: - type q8_0:  127 tensors
0.00.427.822 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.451.435 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.452.442 I llm_load_vocab: special tokens cache size = 5
0.00.547.743 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.547.802 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.547.804 I llm_load_print_meta: arch             = gemma
0.00.547.804 I llm_load_print_meta: vocab type       = SPM
0.00.547.805 I llm_load_print_meta: n_vocab          = 256000
0.00.547.808 I llm_load_print_meta: n_merges         = 0
0.00.547.808 I llm_load_print_meta: vocab_only       = 0
0.00.547.809 I llm_load_print_meta: n_ctx_train      = 8192
0.00.547.809 I llm_load_print_meta: n_embd           = 2048
0.00.547.809 I llm_load_print_meta: n_layer          = 18
0.00.547.875 I llm_load_print_meta: n_head           = 8
0.00.547.882 I llm_load_print_meta: n_head_kv        = 1
0.00.547.882 I llm_load_print_meta: n_rot            = 256
0.00.547.882 I llm_load_print_meta: n_swa            = 0
0.00.547.883 I llm_load_print_meta: n_embd_head_k    = 256
0.00.547.883 I llm_load_print_meta: n_embd_head_v    = 256
0.00.547.888 I llm_load_print_meta: n_gqa            = 8
0.00.547.892 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.547.897 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.547.898 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.547.900 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.547.901 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.547.902 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.547.903 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.547.908 I llm_load_print_meta: n_ff             = 16384
0.00.547.909 I llm_load_print_meta: n_expert         = 0
0.00.547.909 I llm_load_print_meta: n_expert_used    = 0
0.00.547.910 I llm_load_print_meta: causal attn      = 1
0.00.547.910 I llm_load_print_meta: pooling type     = 0
0.00.547.910 I llm_load_print_meta: rope type        = 2
0.00.547.911 I llm_load_print_meta: rope scaling     = linear
0.00.547.912 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.547.913 I llm_load_print_meta: freq_scale_train = 1
0.00.547.913 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.547.914 I llm_load_print_meta: rope_finetuned   = unknown
0.00.547.915 I llm_load_print_meta: ssm_d_conv       = 0
0.00.547.915 I llm_load_print_meta: ssm_d_inner      = 0
0.00.547.915 I llm_load_print_meta: ssm_d_state      = 0
0.00.547.916 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.547.916 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.547.917 I llm_load_print_meta: model type       = 2B
0.00.547.918 I llm_load_print_meta: model ftype      = Q8_0
0.00.547.918 I llm_load_print_meta: model params     = 2.51 B
0.00.547.919 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.547.919 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.547.920 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.547.921 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.547.921 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.547.922 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.547.923 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.547.923 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.547.929 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.547.930 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.547.931 I llm_load_print_meta: max token length = 93
0.00.548.106 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.619.300 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.619.307 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.625.070 I llama_new_context_with_model: n_ctx      = 8192
0.00.625.077 I llama_new_context_with_model: n_batch    = 2048
0.00.625.078 I llama_new_context_with_model: n_ubatch   = 512
0.00.625.078 I llama_new_context_with_model: flash_attn = 0
0.00.625.080 I llama_new_context_with_model: freq_base  = 10000.0
0.00.625.081 I llama_new_context_with_model: freq_scale = 1
0.00.653.387 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.653.433 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.653.543 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.654.924 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.654.929 I llama_new_context_with_model: graph nodes  = 601
0.00.654.930 I llama_new_context_with_model: graph splits = 1
0.00.654.946 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.268.540 I main: llama threadpool init, n_threads = 4
0.01.268.550 I 
0.01.268.667 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.268.672 I 
0.01.268.846 I sampler seed: 3457836616
0.01.268.857 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.268.864 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.268.865 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.268.865 I 
 increasities, and the rise of empires. [end of text]


0.05.499.730 I llama_perf_sampler_print:    sampling time =      15.47 ms /    11 runs   (    1.41 ms per token,   711.15 tokens per second)
0.05.499.733 I llama_perf_context_print:        load time =    1265.61 ms
0.05.499.734 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.499.757 I llama_perf_context_print:        eval time =    4204.55 ms /    10 runs   (  420.46 ms per token,     2.38 tokens per second)
0.05.499.758 I llama_perf_context_print:       total time =    4231.20 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.754s
user	2m24.544s
sys	0m9.409s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3908 (943d20b4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199163.95 ms
main:    total time = 199163.95 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 3908 (943d20b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.002.765 I main: load the model and apply lora adapter, if any
0.00.024.842 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.044 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.138 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.149 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.151 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.155 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.156 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.157 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.158 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.159 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.160 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.167 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.171 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.172 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.173 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.174 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.140 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.255 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.605 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.614 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.615 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.616 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.617 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.618 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.621 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.625 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.626 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.627 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.628 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.629 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.656 I llama_model_loader: - type  f32:   37 tensors
0.00.270.663 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.664 I llama_model_loader: - type q6_K:   19 tensors
0.00.427.257 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.450.560 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.451.584 I llm_load_vocab: special tokens cache size = 5
0.00.547.104 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.547.167 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.547.169 I llm_load_print_meta: arch             = gemma
0.00.547.169 I llm_load_print_meta: vocab type       = SPM
0.00.547.170 I llm_load_print_meta: n_vocab          = 256000
0.00.547.173 I llm_load_print_meta: n_merges         = 0
0.00.547.174 I llm_load_print_meta: vocab_only       = 0
0.00.547.174 I llm_load_print_meta: n_ctx_train      = 8192
0.00.547.174 I llm_load_print_meta: n_embd           = 2048
0.00.547.175 I llm_load_print_meta: n_layer          = 18
0.00.547.239 I llm_load_print_meta: n_head           = 8
0.00.547.246 I llm_load_print_meta: n_head_kv        = 1
0.00.547.247 I llm_load_print_meta: n_rot            = 256
0.00.547.247 I llm_load_print_meta: n_swa            = 0
0.00.547.248 I llm_load_print_meta: n_embd_head_k    = 256
0.00.547.249 I llm_load_print_meta: n_embd_head_v    = 256
0.00.547.253 I llm_load_print_meta: n_gqa            = 8
0.00.547.258 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.547.263 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.547.264 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.547.265 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.547.266 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.547.266 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.547.267 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.547.271 I llm_load_print_meta: n_ff             = 16384
0.00.547.272 I llm_load_print_meta: n_expert         = 0
0.00.547.273 I llm_load_print_meta: n_expert_used    = 0
0.00.547.273 I llm_load_print_meta: causal attn      = 1
0.00.547.274 I llm_load_print_meta: pooling type     = 0
0.00.547.285 I llm_load_print_meta: rope type        = 2
0.00.547.285 I llm_load_print_meta: rope scaling     = linear
0.00.547.287 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.547.287 I llm_load_print_meta: freq_scale_train = 1
0.00.547.299 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.547.300 I llm_load_print_meta: rope_finetuned   = unknown
0.00.547.301 I llm_load_print_meta: ssm_d_conv       = 0
0.00.547.314 I llm_load_print_meta: ssm_d_inner      = 0
0.00.547.318 I llm_load_print_meta: ssm_d_state      = 0
0.00.547.318 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.547.319 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.547.319 I llm_load_print_meta: model type       = 2B
0.00.547.320 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.547.321 I llm_load_print_meta: model params     = 2.51 B
0.00.547.322 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.547.322 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.547.323 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.547.323 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.547.324 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.547.324 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.547.325 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.547.332 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.547.339 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.547.340 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.547.340 I llm_load_print_meta: max token length = 93
0.00.547.509 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.608.949 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.608.959 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.608.959 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.608.960 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.608.961 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.608.961 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.614.622 I llama_new_context_with_model: n_ctx      = 8192
0.00.614.629 I llama_new_context_with_model: n_batch    = 2048
0.00.614.630 I llama_new_context_with_model: n_ubatch   = 512
0.00.614.630 I llama_new_context_with_model: flash_attn = 0
0.00.614.633 I llama_new_context_with_model: freq_base  = 10000.0
0.00.614.634 I llama_new_context_with_model: freq_scale = 1
0.00.644.831 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.644.874 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.644.994 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.646.395 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.646.400 I llama_new_context_with_model: graph nodes  = 601
0.00.646.401 I llama_new_context_with_model: graph splits = 1
0.00.646.417 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.233.085 I main: llama threadpool init, n_threads = 4
0.01.233.095 I 
0.01.233.203 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.233.207 I 
0.01.233.378 I sampler seed: 733584428
0.01.233.389 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.233.394 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.233.395 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.233.395 I 
 fufilling, and humming.

I have a beautiful voice, and I want to share it with the world. But I am afraid of being judged and ridiculed

0.12.202.952 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.65 tokens per second)
0.12.202.956 I llama_perf_context_print:        load time =    1230.21 ms
0.12.202.958 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.202.960 I llama_perf_context_print:        eval time =   10887.80 ms /    32 runs   (  340.24 ms per token,     2.94 tokens per second)
0.12.202.962 I llama_perf_context_print:       total time =   10969.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3908 (943d20b4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199158.77 ms
main:    total time = 199158.77 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 3908 (943d20b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
0.00.024.912 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.105 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.119 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.122 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.126 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.130 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.131 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.132 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.133 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.134 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.140 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.142 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.143 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.144 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.145 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.015 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.902 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.129 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.138 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.139 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.140 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.141 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.142 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.144 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.147 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.148 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.156 I llama_model_loader: - type  f32:   37 tensors
0.00.270.162 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.163 I llama_model_loader: - type q6_K:   19 tensors
0.00.420.980 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.444.269 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.445.305 I llm_load_vocab: special tokens cache size = 5
0.00.541.132 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.541.193 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.541.194 I llm_load_print_meta: arch             = gemma
0.00.541.194 I llm_load_print_meta: vocab type       = SPM
0.00.541.195 I llm_load_print_meta: n_vocab          = 256000
0.00.541.198 I llm_load_print_meta: n_merges         = 0
0.00.541.199 I llm_load_print_meta: vocab_only       = 0
0.00.541.199 I llm_load_print_meta: n_ctx_train      = 8192
0.00.541.200 I llm_load_print_meta: n_embd           = 2048
0.00.541.200 I llm_load_print_meta: n_layer          = 18
0.00.541.269 I llm_load_print_meta: n_head           = 8
0.00.541.275 I llm_load_print_meta: n_head_kv        = 1
0.00.541.276 I llm_load_print_meta: n_rot            = 256
0.00.541.277 I llm_load_print_meta: n_swa            = 0
0.00.541.277 I llm_load_print_meta: n_embd_head_k    = 256
0.00.541.277 I llm_load_print_meta: n_embd_head_v    = 256
0.00.541.282 I llm_load_print_meta: n_gqa            = 8
0.00.541.286 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.541.292 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.541.293 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.541.295 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.541.296 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.541.296 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.541.297 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.541.302 I llm_load_print_meta: n_ff             = 16384
0.00.541.303 I llm_load_print_meta: n_expert         = 0
0.00.541.304 I llm_load_print_meta: n_expert_used    = 0
0.00.541.305 I llm_load_print_meta: causal attn      = 1
0.00.541.305 I llm_load_print_meta: pooling type     = 0
0.00.541.306 I llm_load_print_meta: rope type        = 2
0.00.541.306 I llm_load_print_meta: rope scaling     = linear
0.00.541.307 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.541.308 I llm_load_print_meta: freq_scale_train = 1
0.00.541.321 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.541.325 I llm_load_print_meta: rope_finetuned   = unknown
0.00.541.326 I llm_load_print_meta: ssm_d_conv       = 0
0.00.541.326 I llm_load_print_meta: ssm_d_inner      = 0
0.00.541.326 I llm_load_print_meta: ssm_d_state      = 0
0.00.541.327 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.541.327 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.541.328 I llm_load_print_meta: model type       = 2B
0.00.541.329 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.541.330 I llm_load_print_meta: model params     = 2.51 B
0.00.541.331 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.541.331 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.541.332 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.541.333 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.541.333 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.541.334 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.541.348 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.541.349 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.541.356 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.541.357 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.541.358 I llm_load_print_meta: max token length = 93
0.00.541.530 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.600.617 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.606.191 I llama_new_context_with_model: n_ctx      = 8192
0.00.606.198 I llama_new_context_with_model: n_batch    = 2048
0.00.606.198 I llama_new_context_with_model: n_ubatch   = 512
0.00.606.199 I llama_new_context_with_model: flash_attn = 0
0.00.606.202 I llama_new_context_with_model: freq_base  = 10000.0
0.00.606.203 I llama_new_context_with_model: freq_scale = 1
0.00.636.089 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.636.135 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.636.251 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.637.686 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.637.691 I llama_new_context_with_model: graph nodes  = 601
0.00.637.691 I llama_new_context_with_model: graph splits = 1
0.00.637.707 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.216.137 I main: llama threadpool init, n_threads = 4
0.01.216.148 I 
0.01.216.252 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.216.256 I 
0.01.216.427 I sampler seed: 2703027435
0.01.216.437 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.216.443 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.216.443 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.216.444 I 
 seconded.

**Instructions:**

1. Read the instructions carefully.
2. Answer the question to the best of your ability.
3. If

0.12.278.195 I llama_perf_sampler_print:    sampling time =      49.07 ms /    33 runs   (    1.49 ms per token,   672.56 tokens per second)
0.12.278.200 I llama_perf_context_print:        load time =    1213.24 ms
0.12.278.202 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.278.204 I llama_perf_context_print:        eval time =   10980.32 ms /    32 runs   (  343.14 ms per token,     2.91 tokens per second)
0.12.278.205 I llama_perf_context_print:       total time =   11062.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.667s
user	50m8.075s
sys	0m6.274s
