+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4225 (150d6e92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.021.442 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.453 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.460 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.466 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.467 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.470 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.471 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.473 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.473 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.474 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.475 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.479 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.480 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.481 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.481 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.481 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.371 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.938 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.723 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.739 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.740 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.740 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.741 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.742 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.743 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.746 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.747 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.747 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.748 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.749 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.752 I llama_model_loader: - type  f32:   37 tensors
0.00.130.753 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.998 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.474 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.979 I llm_load_vocab: special tokens cache size = 5
0.00.267.894 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.910 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.911 I llm_load_print_meta: arch             = gemma
0.00.267.911 I llm_load_print_meta: vocab type       = SPM
0.00.267.912 I llm_load_print_meta: n_vocab          = 256000
0.00.267.914 I llm_load_print_meta: n_merges         = 0
0.00.267.914 I llm_load_print_meta: vocab_only       = 0
0.00.267.914 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.915 I llm_load_print_meta: n_embd           = 2048
0.00.267.915 I llm_load_print_meta: n_layer          = 18
0.00.267.927 I llm_load_print_meta: n_head           = 8
0.00.267.929 I llm_load_print_meta: n_head_kv        = 1
0.00.267.929 I llm_load_print_meta: n_rot            = 256
0.00.267.930 I llm_load_print_meta: n_swa            = 0
0.00.267.930 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.930 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.931 I llm_load_print_meta: n_gqa            = 8
0.00.267.932 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.933 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.934 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.936 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.936 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.937 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.937 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.938 I llm_load_print_meta: n_ff             = 16384
0.00.267.939 I llm_load_print_meta: n_expert         = 0
0.00.267.939 I llm_load_print_meta: n_expert_used    = 0
0.00.267.939 I llm_load_print_meta: causal attn      = 1
0.00.267.940 I llm_load_print_meta: pooling type     = 0
0.00.267.940 I llm_load_print_meta: rope type        = 2
0.00.267.941 I llm_load_print_meta: rope scaling     = linear
0.00.267.942 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.943 I llm_load_print_meta: freq_scale_train = 1
0.00.267.943 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.944 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.944 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.944 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.945 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.945 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.946 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.946 I llm_load_print_meta: model type       = 2B
0.00.267.947 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.948 I llm_load_print_meta: model params     = 2.51 B
0.00.267.948 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.949 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.950 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.950 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.950 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.951 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.951 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.951 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.952 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.952 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.953 I llm_load_print_meta: max token length = 93
0.00.370.105 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.370.114 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.370.115 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.370.115 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.370.116 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.370.116 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.266 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.272 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.272 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.272 I llama_new_context_with_model: n_batch       = 2048
0.00.375.273 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.273 I llama_new_context_with_model: flash_attn    = 0
0.00.375.276 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.277 I llama_new_context_with_model: freq_scale    = 1
0.00.375.277 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.658 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.673 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.799 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.119 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.126 I llama_new_context_with_model: graph nodes  = 601
0.00.392.126 I llama_new_context_with_model: graph splits = 1
0.00.392.129 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.628 I main: llama threadpool init, n_threads = 4
0.00.480.645 I 
0.00.480.716 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.480.719 I 
0.00.480.761 I sampler seed: 3204912779
0.00.480.772 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.782 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.782 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.783 I 
 increasities:

**1. The Milky Way's central bulge:** The central bulge of our Milky Way galaxy is a region of intense gravity and star formation

0.02.730.117 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6009.83 tokens per second)
0.02.730.120 I llama_perf_context_print:        load time =     479.87 ms
0.02.730.122 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.730.123 I llama_perf_context_print:        eval time =    2229.67 ms /    32 runs   (   69.68 ms per token,    14.35 tokens per second)
0.02.730.124 I llama_perf_context_print:       total time =    2249.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.553 I build: 4225 (150d6e92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.021.121 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.135 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.141 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.142 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.146 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.147 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.147 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.148 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.148 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.149 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.154 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.155 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.155 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.156 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.156 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.377 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.913 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.677 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.684 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.684 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.685 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.686 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.686 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.687 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.689 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.690 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.691 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.692 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.693 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.695 I llama_model_loader: - type  f32:   37 tensors
0.00.129.696 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.947 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.832 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.394 I llm_load_vocab: special tokens cache size = 5
0.00.263.275 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.291 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.291 I llm_load_print_meta: arch             = gemma
0.00.263.292 I llm_load_print_meta: vocab type       = SPM
0.00.263.293 I llm_load_print_meta: n_vocab          = 256000
0.00.263.293 I llm_load_print_meta: n_merges         = 0
0.00.263.294 I llm_load_print_meta: vocab_only       = 0
0.00.263.294 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.294 I llm_load_print_meta: n_embd           = 2048
0.00.263.294 I llm_load_print_meta: n_layer          = 18
0.00.263.306 I llm_load_print_meta: n_head           = 8
0.00.263.307 I llm_load_print_meta: n_head_kv        = 1
0.00.263.307 I llm_load_print_meta: n_rot            = 256
0.00.263.308 I llm_load_print_meta: n_swa            = 0
0.00.263.308 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.308 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.309 I llm_load_print_meta: n_gqa            = 8
0.00.263.310 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.311 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.312 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.313 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.313 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.314 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.315 I llm_load_print_meta: n_ff             = 16384
0.00.263.315 I llm_load_print_meta: n_expert         = 0
0.00.263.315 I llm_load_print_meta: n_expert_used    = 0
0.00.263.315 I llm_load_print_meta: causal attn      = 1
0.00.263.316 I llm_load_print_meta: pooling type     = 0
0.00.263.316 I llm_load_print_meta: rope type        = 2
0.00.263.316 I llm_load_print_meta: rope scaling     = linear
0.00.263.318 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.318 I llm_load_print_meta: freq_scale_train = 1
0.00.263.319 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.319 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.319 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.320 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.320 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.320 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.320 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.321 I llm_load_print_meta: model type       = 2B
0.00.263.321 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.322 I llm_load_print_meta: model params     = 2.51 B
0.00.263.323 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.323 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.324 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.324 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.325 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.325 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.325 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.326 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.326 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.326 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.327 I llm_load_print_meta: max token length = 93
0.00.360.061 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.163 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.168 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.169 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.169 I llama_new_context_with_model: n_batch       = 2048
0.00.365.170 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.170 I llama_new_context_with_model: flash_attn    = 0
0.00.365.173 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.174 I llama_new_context_with_model: freq_scale    = 1
0.00.365.175 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.161 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.176 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.278 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.582 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.588 I llama_new_context_with_model: graph nodes  = 601
0.00.382.589 I llama_new_context_with_model: graph splits = 1
0.00.382.590 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.443 I main: llama threadpool init, n_threads = 4
0.00.464.460 I 
0.00.464.531 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.464.535 I 
0.00.464.577 I sampler seed: 2069232619
0.00.464.588 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.599 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.603 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.603 I 
 seconary evidence, and textual analysis.

**Task:**

Analyze the textual data to determine the key themes and message of the text.

**Data:**

0.02.647.376 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6872.14 tokens per second)
0.02.647.378 I llama_perf_context_print:        load time =     463.65 ms
0.02.647.379 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.647.381 I llama_perf_context_print:        eval time =    2163.71 ms /    32 runs   (   67.62 ms per token,    14.79 tokens per second)
0.02.647.382 I llama_perf_context_print:       total time =    2182.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.169 I build: 4225 (150d6e92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.380 I main: llama backend init
0.00.000.387 I main: load the model and apply lora adapter, if any
0.00.024.822 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.835 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.846 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.854 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.856 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.861 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.866 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.867 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.868 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.869 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.870 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.876 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.877 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.878 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.879 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.880 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.053.873 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.134.786 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.141.630 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.141.636 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.141.637 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.141.637 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.141.638 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.141.639 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.141.640 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.141.642 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.141.643 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.141.644 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.141.644 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.141.645 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.141.649 I llama_model_loader: - type  f32:   37 tensors
0.00.141.649 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.994 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.975 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.555 I llm_load_vocab: special tokens cache size = 5
0.00.281.535 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.553 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.553 I llm_load_print_meta: arch             = gemma
0.00.281.554 I llm_load_print_meta: vocab type       = SPM
0.00.281.554 I llm_load_print_meta: n_vocab          = 256000
0.00.281.555 I llm_load_print_meta: n_merges         = 0
0.00.281.555 I llm_load_print_meta: vocab_only       = 0
0.00.281.555 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.556 I llm_load_print_meta: n_embd           = 2048
0.00.281.556 I llm_load_print_meta: n_layer          = 18
0.00.281.568 I llm_load_print_meta: n_head           = 8
0.00.281.568 I llm_load_print_meta: n_head_kv        = 1
0.00.281.569 I llm_load_print_meta: n_rot            = 256
0.00.281.569 I llm_load_print_meta: n_swa            = 0
0.00.281.570 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.570 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.571 I llm_load_print_meta: n_gqa            = 8
0.00.281.573 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.574 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.574 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.576 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.576 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.577 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.577 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.578 I llm_load_print_meta: n_ff             = 16384
0.00.281.578 I llm_load_print_meta: n_expert         = 0
0.00.281.579 I llm_load_print_meta: n_expert_used    = 0
0.00.281.580 I llm_load_print_meta: causal attn      = 1
0.00.281.580 I llm_load_print_meta: pooling type     = 0
0.00.281.581 I llm_load_print_meta: rope type        = 2
0.00.281.581 I llm_load_print_meta: rope scaling     = linear
0.00.281.582 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.583 I llm_load_print_meta: freq_scale_train = 1
0.00.281.584 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.585 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.585 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.585 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.586 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.586 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.586 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.587 I llm_load_print_meta: model type       = 2B
0.00.281.588 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.589 I llm_load_print_meta: model params     = 2.51 B
0.00.281.590 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.590 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.590 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.591 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.591 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.592 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.592 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.592 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.593 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.593 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.593 I llm_load_print_meta: max token length = 93
0.00.360.216 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.360.225 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.360.226 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.360.227 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.360.227 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.360.228 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.365.518 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.525 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.526 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.526 I llama_new_context_with_model: n_batch       = 2048
0.00.365.526 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.527 I llama_new_context_with_model: flash_attn    = 0
0.00.365.530 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.530 I llama_new_context_with_model: freq_scale    = 1
0.00.365.531 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.645 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.658 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.758 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.973 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.979 I llama_new_context_with_model: graph nodes  = 601
0.00.380.980 I llama_new_context_with_model: graph splits = 1
0.00.380.981 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.152 I main: llama threadpool init, n_threads = 4
0.00.467.167 I 
0.00.467.254 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.467.257 I 
0.00.467.317 I sampler seed: 889433051
0.00.467.328 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.333 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.333 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.333 I 
 increasively with the following sequence:
$$1, 2, 4, 8, 16, 32, 64,

0.02.757.574 I llama_perf_sampler_print:    sampling time =       4.55 ms /    33 runs   (    0.14 ms per token,  7251.15 tokens per second)
0.02.757.576 I llama_perf_context_print:        load time =     466.75 ms
0.02.757.577 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.757.579 I llama_perf_context_print:        eval time =    2272.01 ms /    32 runs   (   71.00 ms per token,    14.08 tokens per second)
0.02.757.579 I llama_perf_context_print:       total time =    2290.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.545 I build: 4225 (150d6e92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.012 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.021 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.028 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.032 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.033 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.039 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.039 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.040 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.041 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.041 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.042 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.047 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.048 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.048 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.049 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.049 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.463 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.778 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.651 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.658 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.659 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.660 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.661 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.663 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.664 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.667 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.668 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.670 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.671 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.672 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.677 I llama_model_loader: - type  f32:   37 tensors
0.00.130.678 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.942 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.756 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.286 I llm_load_vocab: special tokens cache size = 5
0.00.269.349 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.366 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.367 I llm_load_print_meta: arch             = gemma
0.00.269.367 I llm_load_print_meta: vocab type       = SPM
0.00.269.368 I llm_load_print_meta: n_vocab          = 256000
0.00.269.369 I llm_load_print_meta: n_merges         = 0
0.00.269.369 I llm_load_print_meta: vocab_only       = 0
0.00.269.369 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.370 I llm_load_print_meta: n_embd           = 2048
0.00.269.370 I llm_load_print_meta: n_layer          = 18
0.00.269.381 I llm_load_print_meta: n_head           = 8
0.00.269.382 I llm_load_print_meta: n_head_kv        = 1
0.00.269.382 I llm_load_print_meta: n_rot            = 256
0.00.269.382 I llm_load_print_meta: n_swa            = 0
0.00.269.383 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.383 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.384 I llm_load_print_meta: n_gqa            = 8
0.00.269.385 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.386 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.387 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.388 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.389 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.389 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.389 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.390 I llm_load_print_meta: n_ff             = 16384
0.00.269.391 I llm_load_print_meta: n_expert         = 0
0.00.269.392 I llm_load_print_meta: n_expert_used    = 0
0.00.269.393 I llm_load_print_meta: causal attn      = 1
0.00.269.393 I llm_load_print_meta: pooling type     = 0
0.00.269.394 I llm_load_print_meta: rope type        = 2
0.00.269.395 I llm_load_print_meta: rope scaling     = linear
0.00.269.396 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.397 I llm_load_print_meta: freq_scale_train = 1
0.00.269.397 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.398 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.398 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.399 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.399 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.399 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.399 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.400 I llm_load_print_meta: model type       = 2B
0.00.269.400 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.401 I llm_load_print_meta: model params     = 2.51 B
0.00.269.402 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.402 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.403 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.404 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.404 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.405 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.405 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.405 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.406 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.407 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.407 I llm_load_print_meta: max token length = 93
0.00.340.572 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.340.578 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.345.653 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.659 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.660 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.660 I llama_new_context_with_model: n_batch       = 2048
0.00.345.660 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.661 I llama_new_context_with_model: flash_attn    = 0
0.00.345.663 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.664 I llama_new_context_with_model: freq_scale    = 1
0.00.345.665 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.783 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.795 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.886 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.180 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.185 I llama_new_context_with_model: graph nodes  = 601
0.00.361.186 I llama_new_context_with_model: graph splits = 1
0.00.361.188 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.727 I main: llama threadpool init, n_threads = 4
0.00.447.743 I 
0.00.447.813 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.447.816 I 
0.00.447.863 I sampler seed: 4106994916
0.00.447.874 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.887 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.891 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.891 I 
 increasities with a strong emphasis on her femininity and grace. [end of text]


0.01.433.245 I llama_perf_sampler_print:    sampling time =       1.98 ms /    14 runs   (    0.14 ms per token,  7056.45 tokens per second)
0.01.433.247 I llama_perf_context_print:        load time =     446.96 ms
0.01.433.248 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.433.249 I llama_perf_context_print:        eval time =     977.42 ms /    13 runs   (   75.19 ms per token,    13.30 tokens per second)
0.01.433.250 I llama_perf_context_print:       total time =     985.53 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.091s
user	0m33.789s
sys	0m9.299s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4225 (150d6e92)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40223.45 ms
main:    total time = 40223.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.175 I build: 4225 (150d6e92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.627 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.637 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.645 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.649 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.650 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.653 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.654 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.655 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.655 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.656 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.657 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.660 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.661 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.661 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.662 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.662 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.966 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.552 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.325 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.331 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.331 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.332 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.332 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.333 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.334 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.336 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.337 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.337 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.338 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.340 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.342 I llama_model_loader: - type  f32:   37 tensors
0.00.129.343 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.344 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.263 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.509 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.100 I llm_load_vocab: special tokens cache size = 5
0.00.272.300 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.320 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.320 I llm_load_print_meta: arch             = gemma
0.00.272.321 I llm_load_print_meta: vocab type       = SPM
0.00.272.322 I llm_load_print_meta: n_vocab          = 256000
0.00.272.322 I llm_load_print_meta: n_merges         = 0
0.00.272.322 I llm_load_print_meta: vocab_only       = 0
0.00.272.323 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.323 I llm_load_print_meta: n_embd           = 2048
0.00.272.323 I llm_load_print_meta: n_layer          = 18
0.00.272.335 I llm_load_print_meta: n_head           = 8
0.00.272.336 I llm_load_print_meta: n_head_kv        = 1
0.00.272.337 I llm_load_print_meta: n_rot            = 256
0.00.272.337 I llm_load_print_meta: n_swa            = 0
0.00.272.337 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.338 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.338 I llm_load_print_meta: n_gqa            = 8
0.00.272.339 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.340 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.341 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.343 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.343 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.343 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.344 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.345 I llm_load_print_meta: n_ff             = 16384
0.00.272.345 I llm_load_print_meta: n_expert         = 0
0.00.272.345 I llm_load_print_meta: n_expert_used    = 0
0.00.272.345 I llm_load_print_meta: causal attn      = 1
0.00.272.346 I llm_load_print_meta: pooling type     = 0
0.00.272.346 I llm_load_print_meta: rope type        = 2
0.00.272.346 I llm_load_print_meta: rope scaling     = linear
0.00.272.348 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.349 I llm_load_print_meta: freq_scale_train = 1
0.00.272.349 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.350 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.350 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.350 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.351 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.351 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.351 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.351 I llm_load_print_meta: model type       = 2B
0.00.272.352 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.353 I llm_load_print_meta: model params     = 2.51 B
0.00.272.353 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.354 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.354 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.355 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.355 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.355 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.356 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.356 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.356 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.357 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.357 I llm_load_print_meta: max token length = 93
0.00.333.824 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.333.829 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.333.830 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.333.830 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.333.831 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.333.832 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.338.859 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.865 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.866 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.866 I llama_new_context_with_model: n_batch       = 2048
0.00.338.867 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.867 I llama_new_context_with_model: flash_attn    = 0
0.00.338.869 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.870 I llama_new_context_with_model: freq_scale    = 1
0.00.338.870 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.265 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.278 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.371 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.696 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.703 I llama_new_context_with_model: graph nodes  = 601
0.00.355.704 I llama_new_context_with_model: graph splits = 1
0.00.355.705 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.992 I main: llama threadpool init, n_threads = 4
0.00.432.009 I 
0.00.432.082 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.432.086 I 
0.00.432.135 I sampler seed: 2527443719
0.00.432.146 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.149 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.150 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.150 I 
 encompasses the following:

a) The concept of a system and its representation.
b) The principles of thermodynamics and their application.
c) The

0.02.081.800 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6647.86 tokens per second)
0.02.081.802 I llama_perf_context_print:        load time =     431.60 ms
0.02.081.803 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.081.805 I llama_perf_context_print:        eval time =    1630.38 ms /    32 runs   (   50.95 ms per token,    19.63 tokens per second)
0.02.081.805 I llama_perf_context_print:       total time =    1649.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4225 (150d6e92)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40244.46 ms
main:    total time = 40244.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.533 I build: 4225 (150d6e92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.344 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.360 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.366 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.367 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.371 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.371 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.372 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.372 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.373 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.374 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.377 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.378 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.378 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.379 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.380 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.798 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.554 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.369 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.375 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.376 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.376 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.377 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.378 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.379 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.383 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.383 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.388 I llama_model_loader: - type  f32:   37 tensors
0.00.130.389 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.390 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.297 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.887 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.443 I llm_load_vocab: special tokens cache size = 5
0.00.265.268 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.285 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.285 I llm_load_print_meta: arch             = gemma
0.00.265.286 I llm_load_print_meta: vocab type       = SPM
0.00.265.286 I llm_load_print_meta: n_vocab          = 256000
0.00.265.287 I llm_load_print_meta: n_merges         = 0
0.00.265.287 I llm_load_print_meta: vocab_only       = 0
0.00.265.288 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.288 I llm_load_print_meta: n_embd           = 2048
0.00.265.289 I llm_load_print_meta: n_layer          = 18
0.00.265.300 I llm_load_print_meta: n_head           = 8
0.00.265.301 I llm_load_print_meta: n_head_kv        = 1
0.00.265.302 I llm_load_print_meta: n_rot            = 256
0.00.265.302 I llm_load_print_meta: n_swa            = 0
0.00.265.302 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.302 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.303 I llm_load_print_meta: n_gqa            = 8
0.00.265.304 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.305 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.306 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.307 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.308 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.308 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.308 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.309 I llm_load_print_meta: n_ff             = 16384
0.00.265.309 I llm_load_print_meta: n_expert         = 0
0.00.265.310 I llm_load_print_meta: n_expert_used    = 0
0.00.265.310 I llm_load_print_meta: causal attn      = 1
0.00.265.310 I llm_load_print_meta: pooling type     = 0
0.00.265.310 I llm_load_print_meta: rope type        = 2
0.00.265.311 I llm_load_print_meta: rope scaling     = linear
0.00.265.312 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.313 I llm_load_print_meta: freq_scale_train = 1
0.00.265.313 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.313 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.314 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.314 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.314 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.314 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.315 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.315 I llm_load_print_meta: model type       = 2B
0.00.265.315 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.316 I llm_load_print_meta: model params     = 2.51 B
0.00.265.317 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.317 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.318 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.318 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.318 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.319 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.319 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.320 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.320 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.321 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.321 I llm_load_print_meta: max token length = 93
0.00.321.213 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.326.353 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.358 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.359 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.359 I llama_new_context_with_model: n_batch       = 2048
0.00.326.360 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.360 I llama_new_context_with_model: flash_attn    = 0
0.00.326.363 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.364 I llama_new_context_with_model: freq_scale    = 1
0.00.326.365 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.593 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.609 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.701 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.971 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.976 I llama_new_context_with_model: graph nodes  = 601
0.00.342.977 I llama_new_context_with_model: graph splits = 1
0.00.342.980 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.669 I main: llama threadpool init, n_threads = 4
0.00.419.684 I 
0.00.419.758 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.419.761 I 
0.00.419.806 I sampler seed: 2490293365
0.00.419.817 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.821 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.821 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.821 I 
 seconded to me and asked me to help him with a project. I agreed and we started working together.

As we were working together, I began to

0.02.016.614 I llama_perf_sampler_print:    sampling time =       5.26 ms /    33 runs   (    0.16 ms per token,  6277.34 tokens per second)
0.02.016.616 I llama_perf_context_print:        load time =     418.91 ms
0.02.016.618 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.016.620 I llama_perf_context_print:        eval time =    1577.30 ms /    32 runs   (   49.29 ms per token,    20.29 tokens per second)
0.02.016.621 I llama_perf_context_print:       total time =    1596.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.372s
user	10m24.404s
sys	0m6.969s
