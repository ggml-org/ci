+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 4160 (156aa6d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.020.859 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.869 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.876 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.881 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.883 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.887 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.890 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.891 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.891 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.892 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.892 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.896 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.897 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.898 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.898 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.931 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.153 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.968 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.974 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.974 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.975 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.975 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.976 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.977 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.979 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.979 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.980 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.980 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.981 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.984 I llama_model_loader: - type  f32:   37 tensors
0.00.130.985 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.838 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.200 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.714 I llm_load_vocab: special tokens cache size = 5
0.00.261.449 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.464 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.465 I llm_load_print_meta: arch             = gemma
0.00.261.465 I llm_load_print_meta: vocab type       = SPM
0.00.261.466 I llm_load_print_meta: n_vocab          = 256000
0.00.261.466 I llm_load_print_meta: n_merges         = 0
0.00.261.467 I llm_load_print_meta: vocab_only       = 0
0.00.261.467 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.467 I llm_load_print_meta: n_embd           = 2048
0.00.261.468 I llm_load_print_meta: n_layer          = 18
0.00.261.478 I llm_load_print_meta: n_head           = 8
0.00.261.479 I llm_load_print_meta: n_head_kv        = 1
0.00.261.480 I llm_load_print_meta: n_rot            = 256
0.00.261.480 I llm_load_print_meta: n_swa            = 0
0.00.261.480 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.480 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.481 I llm_load_print_meta: n_gqa            = 8
0.00.261.482 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.483 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.484 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.486 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.486 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.486 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.487 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.487 I llm_load_print_meta: n_ff             = 16384
0.00.261.488 I llm_load_print_meta: n_expert         = 0
0.00.261.488 I llm_load_print_meta: n_expert_used    = 0
0.00.261.488 I llm_load_print_meta: causal attn      = 1
0.00.261.489 I llm_load_print_meta: pooling type     = 0
0.00.261.489 I llm_load_print_meta: rope type        = 2
0.00.261.489 I llm_load_print_meta: rope scaling     = linear
0.00.261.491 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.491 I llm_load_print_meta: freq_scale_train = 1
0.00.261.492 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.492 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.493 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.493 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.493 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.493 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.494 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.494 I llm_load_print_meta: model type       = 2B
0.00.261.495 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.495 I llm_load_print_meta: model params     = 2.51 B
0.00.261.496 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.496 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.497 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.497 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.498 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.498 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.498 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.498 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.499 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.499 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.499 I llm_load_print_meta: max token length = 93
0.00.361.147 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.361.153 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.361.153 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.361.154 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.361.154 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.361.155 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.366.297 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.303 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.303 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.303 I llama_new_context_with_model: n_batch       = 2048
0.00.366.304 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.304 I llama_new_context_with_model: flash_attn    = 0
0.00.366.306 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.307 I llama_new_context_with_model: freq_scale    = 1
0.00.366.308 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.376 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.390 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.477 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.681 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.686 I llama_new_context_with_model: graph nodes  = 601
0.00.381.687 I llama_new_context_with_model: graph splits = 1
0.00.381.689 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.102 I main: llama threadpool init, n_threads = 4
0.00.466.114 I 
0.00.466.189 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.466.189 I 
0.00.466.231 I sampler seed: 4158389149
0.00.466.241 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.243 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.244 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.244 I 
 increably, the sound of the wind howling through the bare branches of the oak tree. [end of text]


0.01.793.774 I llama_perf_sampler_print:    sampling time =       3.01 ms /    20 runs   (    0.15 ms per token,  6644.52 tokens per second)
0.01.793.776 I llama_perf_context_print:        load time =     465.35 ms
0.01.793.778 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.793.779 I llama_perf_context_print:        eval time =    1316.27 ms /    19 runs   (   69.28 ms per token,    14.43 tokens per second)
0.01.793.780 I llama_perf_context_print:       total time =    1327.68 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.473 I build: 4160 (156aa6d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.675 I main: llama backend init
0.00.000.682 I main: load the model and apply lora adapter, if any
0.00.021.230 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.242 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.250 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.251 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.255 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.255 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.256 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.256 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.257 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.257 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.262 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.263 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.264 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.264 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.265 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.540 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.598 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.525 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.532 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.532 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.533 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.533 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.534 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.535 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.537 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.538 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.539 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.540 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.541 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.546 I llama_model_loader: - type  f32:   37 tensors
0.00.131.548 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.135 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.158 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.603 I llm_load_vocab: special tokens cache size = 5
0.00.260.239 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.254 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.255 I llm_load_print_meta: arch             = gemma
0.00.260.256 I llm_load_print_meta: vocab type       = SPM
0.00.260.256 I llm_load_print_meta: n_vocab          = 256000
0.00.260.257 I llm_load_print_meta: n_merges         = 0
0.00.260.257 I llm_load_print_meta: vocab_only       = 0
0.00.260.257 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.258 I llm_load_print_meta: n_embd           = 2048
0.00.260.258 I llm_load_print_meta: n_layer          = 18
0.00.260.269 I llm_load_print_meta: n_head           = 8
0.00.260.270 I llm_load_print_meta: n_head_kv        = 1
0.00.260.271 I llm_load_print_meta: n_rot            = 256
0.00.260.271 I llm_load_print_meta: n_swa            = 0
0.00.260.271 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.271 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.272 I llm_load_print_meta: n_gqa            = 8
0.00.260.273 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.274 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.275 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.276 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.277 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.277 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.278 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.279 I llm_load_print_meta: n_ff             = 16384
0.00.260.279 I llm_load_print_meta: n_expert         = 0
0.00.260.280 I llm_load_print_meta: n_expert_used    = 0
0.00.260.280 I llm_load_print_meta: causal attn      = 1
0.00.260.280 I llm_load_print_meta: pooling type     = 0
0.00.260.280 I llm_load_print_meta: rope type        = 2
0.00.260.281 I llm_load_print_meta: rope scaling     = linear
0.00.260.282 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.283 I llm_load_print_meta: freq_scale_train = 1
0.00.260.283 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.283 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.284 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.284 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.284 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.285 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.285 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.285 I llm_load_print_meta: model type       = 2B
0.00.260.286 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.287 I llm_load_print_meta: model params     = 2.51 B
0.00.260.288 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.288 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.288 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.289 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.289 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.290 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.290 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.290 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.290 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.291 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.291 I llm_load_print_meta: max token length = 93
0.00.353.827 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.358.980 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.986 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.987 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.987 I llama_new_context_with_model: n_batch       = 2048
0.00.358.987 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.988 I llama_new_context_with_model: flash_attn    = 0
0.00.358.990 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.991 I llama_new_context_with_model: freq_scale    = 1
0.00.358.992 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.568 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.583 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.674 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.875 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.882 I llama_new_context_with_model: graph nodes  = 601
0.00.374.882 I llama_new_context_with_model: graph splits = 1
0.00.374.884 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.923 I main: llama threadpool init, n_threads = 4
0.00.455.937 I 
0.00.456.009 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.456.012 I 
0.00.456.053 I sampler seed: 3687808025
0.00.456.065 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.067 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.068 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.070 I 
 increamically.

The given text contains an error. It should read:

The given text contains an error. The correct sentence should be:

The given

0.02.622.295 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6785.93 tokens per second)
0.02.622.298 I llama_perf_context_print:        load time =     455.22 ms
0.02.622.299 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.622.302 I llama_perf_context_print:        eval time =    2147.43 ms /    32 runs   (   67.11 ms per token,    14.90 tokens per second)
0.02.622.303 I llama_perf_context_print:       total time =    2166.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.552 I build: 4160 (156aa6d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.752 I main: load the model and apply lora adapter, if any
0.00.021.101 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.112 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.119 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.124 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.125 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.128 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.129 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.130 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.131 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.131 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.131 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.136 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.137 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.137 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.138 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.138 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.433 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.162 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.048 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.056 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.057 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.057 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.058 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.059 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.059 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.062 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.062 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.063 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.063 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.064 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.069 I llama_model_loader: - type  f32:   37 tensors
0.00.132.070 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.931 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.551 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.979 I llm_load_vocab: special tokens cache size = 5
0.00.282.835 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.850 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.851 I llm_load_print_meta: arch             = gemma
0.00.282.851 I llm_load_print_meta: vocab type       = SPM
0.00.282.852 I llm_load_print_meta: n_vocab          = 256000
0.00.282.852 I llm_load_print_meta: n_merges         = 0
0.00.282.853 I llm_load_print_meta: vocab_only       = 0
0.00.282.853 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.853 I llm_load_print_meta: n_embd           = 2048
0.00.282.854 I llm_load_print_meta: n_layer          = 18
0.00.282.866 I llm_load_print_meta: n_head           = 8
0.00.282.867 I llm_load_print_meta: n_head_kv        = 1
0.00.282.867 I llm_load_print_meta: n_rot            = 256
0.00.282.868 I llm_load_print_meta: n_swa            = 0
0.00.282.868 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.868 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.869 I llm_load_print_meta: n_gqa            = 8
0.00.282.870 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.871 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.872 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.873 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.874 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.874 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.875 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.876 I llm_load_print_meta: n_ff             = 16384
0.00.282.877 I llm_load_print_meta: n_expert         = 0
0.00.282.877 I llm_load_print_meta: n_expert_used    = 0
0.00.282.877 I llm_load_print_meta: causal attn      = 1
0.00.282.878 I llm_load_print_meta: pooling type     = 0
0.00.282.878 I llm_load_print_meta: rope type        = 2
0.00.282.879 I llm_load_print_meta: rope scaling     = linear
0.00.282.880 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.881 I llm_load_print_meta: freq_scale_train = 1
0.00.282.881 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.881 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.882 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.882 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.882 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.883 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.884 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.885 I llm_load_print_meta: model type       = 2B
0.00.282.886 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.887 I llm_load_print_meta: model params     = 2.51 B
0.00.282.888 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.888 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.889 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.893 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.893 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.893 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.893 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.894 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.894 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.895 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.895 I llm_load_print_meta: max token length = 93
0.00.356.466 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.356.473 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.356.473 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.356.474 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.356.475 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.356.475 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.361.636 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.643 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.643 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.644 I llama_new_context_with_model: n_batch       = 2048
0.00.361.645 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.645 I llama_new_context_with_model: flash_attn    = 0
0.00.361.647 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.648 I llama_new_context_with_model: freq_scale    = 1
0.00.361.649 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.348 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.362 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.450 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.750 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.754 I llama_new_context_with_model: graph nodes  = 601
0.00.377.755 I llama_new_context_with_model: graph splits = 1
0.00.377.757 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.902 I main: llama threadpool init, n_threads = 4
0.00.470.916 I 
0.00.470.990 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.470.993 I 
0.00.471.034 I sampler seed: 1368585427
0.00.471.045 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.047 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.048 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.049 I 
 increasities are an important part of the courtship process.

**a) True**
b) False


Answer: a) True

Explanation:
During

0.02.738.747 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6985.61 tokens per second)
0.02.738.749 I llama_perf_context_print:        load time =     470.13 ms
0.02.738.750 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.738.752 I llama_perf_context_print:        eval time =    2249.01 ms /    32 runs   (   70.28 ms per token,    14.23 tokens per second)
0.02.738.753 I llama_perf_context_print:       total time =    2267.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.559 I build: 4160 (156aa6d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.796 I main: llama backend init
0.00.000.803 I main: load the model and apply lora adapter, if any
0.00.021.249 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.259 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.267 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.271 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.272 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.276 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.279 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.280 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.280 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.281 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.281 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.285 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.285 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.286 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.286 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.287 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.101 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.409 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.300 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.306 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.307 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.307 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.308 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.309 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.309 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.312 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.312 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.313 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.314 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.315 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.318 I llama_model_loader: - type  f32:   37 tensors
0.00.131.320 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.986 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.070 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.543 I llm_load_vocab: special tokens cache size = 5
0.00.266.330 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.348 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.349 I llm_load_print_meta: arch             = gemma
0.00.266.349 I llm_load_print_meta: vocab type       = SPM
0.00.266.350 I llm_load_print_meta: n_vocab          = 256000
0.00.266.350 I llm_load_print_meta: n_merges         = 0
0.00.266.350 I llm_load_print_meta: vocab_only       = 0
0.00.266.351 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.351 I llm_load_print_meta: n_embd           = 2048
0.00.266.351 I llm_load_print_meta: n_layer          = 18
0.00.266.364 I llm_load_print_meta: n_head           = 8
0.00.266.365 I llm_load_print_meta: n_head_kv        = 1
0.00.266.365 I llm_load_print_meta: n_rot            = 256
0.00.266.366 I llm_load_print_meta: n_swa            = 0
0.00.266.366 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.366 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.367 I llm_load_print_meta: n_gqa            = 8
0.00.266.368 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.369 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.370 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.371 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.371 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.372 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.372 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.373 I llm_load_print_meta: n_ff             = 16384
0.00.266.374 I llm_load_print_meta: n_expert         = 0
0.00.266.374 I llm_load_print_meta: n_expert_used    = 0
0.00.266.374 I llm_load_print_meta: causal attn      = 1
0.00.266.375 I llm_load_print_meta: pooling type     = 0
0.00.266.375 I llm_load_print_meta: rope type        = 2
0.00.266.375 I llm_load_print_meta: rope scaling     = linear
0.00.266.377 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.378 I llm_load_print_meta: freq_scale_train = 1
0.00.266.378 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.378 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.379 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.379 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.379 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.379 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.380 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.380 I llm_load_print_meta: model type       = 2B
0.00.266.381 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.382 I llm_load_print_meta: model params     = 2.51 B
0.00.266.383 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.383 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.383 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.384 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.384 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.384 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.384 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.385 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.385 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.386 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.386 I llm_load_print_meta: max token length = 93
0.00.337.557 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.564 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.772 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.778 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.779 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.779 I llama_new_context_with_model: n_batch       = 2048
0.00.342.780 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.780 I llama_new_context_with_model: flash_attn    = 0
0.00.342.783 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.784 I llama_new_context_with_model: freq_scale    = 1
0.00.342.785 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.308 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.323 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.415 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.690 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.697 I llama_new_context_with_model: graph nodes  = 601
0.00.358.697 I llama_new_context_with_model: graph splits = 1
0.00.358.699 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.797 I main: llama threadpool init, n_threads = 4
0.00.446.811 I 
0.00.446.896 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.900 I 
0.00.446.954 I sampler seed: 2305906956
0.00.446.965 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.967 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.968 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.969 I 
 increasels in the story of Genesis.

**Answer:**

The story of Genesis does not include any instances of creatures called "crepusculariensis"

0.02.859.651 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6615.88 tokens per second)
0.02.859.654 I llama_perf_context_print:        load time =     445.97 ms
0.02.859.655 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.859.657 I llama_perf_context_print:        eval time =    2394.02 ms /    32 runs   (   74.81 ms per token,    13.37 tokens per second)
0.02.859.657 I llama_perf_context_print:       total time =    2412.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.432s
user	0m35.597s
sys	0m9.270s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4160 (156aa6d9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40187.95 ms
main:    total time = 40187.95 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4160 (156aa6d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.171 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.180 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.188 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.193 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.194 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.199 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.201 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.202 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.202 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.203 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.203 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.207 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.208 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.208 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.209 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.210 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.293 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.716 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.596 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.603 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.604 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.605 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.606 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.607 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.608 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.611 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.611 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.612 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.612 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.613 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.617 I llama_model_loader: - type  f32:   37 tensors
0.00.131.618 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.619 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.437 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.760 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.391 I llm_load_vocab: special tokens cache size = 5
0.00.266.307 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.323 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.324 I llm_load_print_meta: arch             = gemma
0.00.266.324 I llm_load_print_meta: vocab type       = SPM
0.00.266.325 I llm_load_print_meta: n_vocab          = 256000
0.00.266.326 I llm_load_print_meta: n_merges         = 0
0.00.266.327 I llm_load_print_meta: vocab_only       = 0
0.00.266.328 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.328 I llm_load_print_meta: n_embd           = 2048
0.00.266.329 I llm_load_print_meta: n_layer          = 18
0.00.266.340 I llm_load_print_meta: n_head           = 8
0.00.266.342 I llm_load_print_meta: n_head_kv        = 1
0.00.266.342 I llm_load_print_meta: n_rot            = 256
0.00.266.343 I llm_load_print_meta: n_swa            = 0
0.00.266.343 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.346 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.347 I llm_load_print_meta: n_gqa            = 8
0.00.266.348 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.349 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.350 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.352 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.352 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.352 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.353 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.357 I llm_load_print_meta: n_ff             = 16384
0.00.266.357 I llm_load_print_meta: n_expert         = 0
0.00.266.357 I llm_load_print_meta: n_expert_used    = 0
0.00.266.358 I llm_load_print_meta: causal attn      = 1
0.00.266.358 I llm_load_print_meta: pooling type     = 0
0.00.266.358 I llm_load_print_meta: rope type        = 2
0.00.266.359 I llm_load_print_meta: rope scaling     = linear
0.00.266.360 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.361 I llm_load_print_meta: freq_scale_train = 1
0.00.266.361 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.361 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.362 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.362 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.363 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.364 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.365 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.365 I llm_load_print_meta: model type       = 2B
0.00.266.366 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.366 I llm_load_print_meta: model params     = 2.51 B
0.00.266.367 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.368 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.368 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.368 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.369 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.369 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.369 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.370 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.370 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.371 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.371 I llm_load_print_meta: max token length = 93
0.00.327.893 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.327.900 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.327.901 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.327.901 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.327.902 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.327.902 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.333.147 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.154 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.154 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.155 I llama_new_context_with_model: n_batch       = 2048
0.00.333.155 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.156 I llama_new_context_with_model: flash_attn    = 0
0.00.333.158 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.159 I llama_new_context_with_model: freq_scale    = 1
0.00.333.160 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.784 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.799 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.891 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.105 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.111 I llama_new_context_with_model: graph nodes  = 601
0.00.349.111 I llama_new_context_with_model: graph splits = 1
0.00.349.114 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.229 I main: llama threadpool init, n_threads = 4
0.00.423.242 I 
0.00.423.313 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.423.316 I 
0.00.423.362 I sampler seed: 1347231086
0.00.423.373 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.377 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.378 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.378 I 
 seconde des deux mots.

1. Saute
2. Éviter

Les deux mots sont liés par le mot "parce que".



0.01.986.762 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6439.02 tokens per second)
0.01.986.764 I llama_perf_context_print:        load time =     422.47 ms
0.01.986.766 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.986.767 I llama_perf_context_print:        eval time =    1544.97 ms /    32 runs   (   48.28 ms per token,    20.71 tokens per second)
0.01.986.780 I llama_perf_context_print:       total time =    1563.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4160 (156aa6d9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40160.41 ms
main:    total time = 40160.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.544 I build: 4160 (156aa6d9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.275 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.291 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.297 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.298 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.303 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.303 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.305 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.305 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.306 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.306 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.310 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.311 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.311 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.312 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.312 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.253 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.584 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.481 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.488 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.489 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.489 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.490 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.491 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.492 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.494 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.495 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.499 I llama_model_loader: - type  f32:   37 tensors
0.00.131.500 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.501 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.080 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.231 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.788 I llm_load_vocab: special tokens cache size = 5
0.00.264.602 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.617 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.618 I llm_load_print_meta: arch             = gemma
0.00.264.618 I llm_load_print_meta: vocab type       = SPM
0.00.264.619 I llm_load_print_meta: n_vocab          = 256000
0.00.264.619 I llm_load_print_meta: n_merges         = 0
0.00.264.620 I llm_load_print_meta: vocab_only       = 0
0.00.264.620 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.620 I llm_load_print_meta: n_embd           = 2048
0.00.264.620 I llm_load_print_meta: n_layer          = 18
0.00.264.633 I llm_load_print_meta: n_head           = 8
0.00.264.634 I llm_load_print_meta: n_head_kv        = 1
0.00.264.634 I llm_load_print_meta: n_rot            = 256
0.00.264.635 I llm_load_print_meta: n_swa            = 0
0.00.264.635 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.635 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.636 I llm_load_print_meta: n_gqa            = 8
0.00.264.638 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.639 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.639 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.641 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.641 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.641 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.641 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.642 I llm_load_print_meta: n_ff             = 16384
0.00.264.643 I llm_load_print_meta: n_expert         = 0
0.00.264.643 I llm_load_print_meta: n_expert_used    = 0
0.00.264.643 I llm_load_print_meta: causal attn      = 1
0.00.264.644 I llm_load_print_meta: pooling type     = 0
0.00.264.644 I llm_load_print_meta: rope type        = 2
0.00.264.644 I llm_load_print_meta: rope scaling     = linear
0.00.264.646 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.646 I llm_load_print_meta: freq_scale_train = 1
0.00.264.647 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.648 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.648 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.648 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.648 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.648 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.649 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.649 I llm_load_print_meta: model type       = 2B
0.00.264.650 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.651 I llm_load_print_meta: model params     = 2.51 B
0.00.264.652 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.653 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.653 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.653 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.654 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.654 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.655 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.659 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.659 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.659 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.659 I llm_load_print_meta: max token length = 93
0.00.319.022 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.324.102 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.107 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.108 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.108 I llama_new_context_with_model: n_batch       = 2048
0.00.324.108 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.109 I llama_new_context_with_model: flash_attn    = 0
0.00.324.111 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.112 I llama_new_context_with_model: freq_scale    = 1
0.00.324.113 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.823 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.338.837 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.338.926 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.221 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.228 I llama_new_context_with_model: graph nodes  = 601
0.00.340.228 I llama_new_context_with_model: graph splits = 1
0.00.340.230 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.145 I main: llama threadpool init, n_threads = 4
0.00.415.159 I 
0.00.415.239 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.415.242 I 
0.00.415.285 I sampler seed: 2401660102
0.00.415.297 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.316 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.415.319 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.415.319 I 
 squaRED, the AI assistant, has analyzed your request and has identified the following information:

**Request:**

- Describe the process for creating a custom AI

0.01.970.438 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6512.73 tokens per second)
0.01.970.440 I llama_perf_context_print:        load time =     414.38 ms
0.01.970.441 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.970.443 I llama_perf_context_print:        eval time =    1536.79 ms /    32 runs   (   48.02 ms per token,    20.82 tokens per second)
0.01.970.444 I llama_perf_context_print:       total time =    1555.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.046s
user	10m23.352s
sys	0m6.955s
