+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.773 I build: 3984 (15a172b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.104 I main: llama backend init
0.00.003.410 I main: load the model and apply lora adapter, if any
0.00.055.277 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.055.665 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.055.765 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.055.780 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.055.784 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.055.791 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.055.793 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.055.795 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.055.800 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.055.801 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.055.803 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.055.828 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.055.833 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.055.835 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.055.837 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.055.839 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.494 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.361.214 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.385.592 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.385.604 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.385.605 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.385.607 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.385.609 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.385.611 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.385.613 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.385.623 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.385.625 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.385.627 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.385.628 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.385.630 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.385.639 I llama_model_loader: - type  f32:   37 tensors
0.00.385.644 I llama_model_loader: - type q8_0:  127 tensors
0.00.694.472 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.835.636 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.836.699 I llm_load_vocab: special tokens cache size = 5
0.00.980.144 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.980.234 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.980.235 I llm_load_print_meta: arch             = gemma
0.00.980.237 I llm_load_print_meta: vocab type       = SPM
0.00.980.238 I llm_load_print_meta: n_vocab          = 256000
0.00.980.240 I llm_load_print_meta: n_merges         = 0
0.00.980.241 I llm_load_print_meta: vocab_only       = 0
0.00.980.242 I llm_load_print_meta: n_ctx_train      = 8192
0.00.980.243 I llm_load_print_meta: n_embd           = 2048
0.00.980.243 I llm_load_print_meta: n_layer          = 18
0.00.980.312 I llm_load_print_meta: n_head           = 8
0.00.980.334 I llm_load_print_meta: n_head_kv        = 1
0.00.980.335 I llm_load_print_meta: n_rot            = 256
0.00.980.336 I llm_load_print_meta: n_swa            = 0
0.00.980.341 I llm_load_print_meta: n_embd_head_k    = 256
0.00.980.342 I llm_load_print_meta: n_embd_head_v    = 256
0.00.980.350 I llm_load_print_meta: n_gqa            = 8
0.00.980.360 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.980.369 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.980.373 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.980.374 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.980.375 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.980.376 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.980.377 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.980.385 I llm_load_print_meta: n_ff             = 16384
0.00.980.386 I llm_load_print_meta: n_expert         = 0
0.00.980.387 I llm_load_print_meta: n_expert_used    = 0
0.00.980.388 I llm_load_print_meta: causal attn      = 1
0.00.980.389 I llm_load_print_meta: pooling type     = 0
0.00.980.389 I llm_load_print_meta: rope type        = 2
0.00.980.400 I llm_load_print_meta: rope scaling     = linear
0.00.980.403 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.980.404 I llm_load_print_meta: freq_scale_train = 1
0.00.980.405 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.980.405 I llm_load_print_meta: rope_finetuned   = unknown
0.00.980.414 I llm_load_print_meta: ssm_d_conv       = 0
0.00.980.416 I llm_load_print_meta: ssm_d_inner      = 0
0.00.980.417 I llm_load_print_meta: ssm_d_state      = 0
0.00.980.417 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.980.418 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.980.419 I llm_load_print_meta: model type       = 2B
0.00.980.421 I llm_load_print_meta: model ftype      = Q8_0
0.00.980.422 I llm_load_print_meta: model params     = 2.51 B
0.00.980.424 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.980.425 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.980.426 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.980.427 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.980.428 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.980.429 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.980.429 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.980.431 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.980.443 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.980.448 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.980.449 I llm_load_print_meta: max token length = 93
0.01.081.000 I llm_load_tensors:        CPU model buffer size =   865.98 MiB
0.01.081.009 I llm_load_tensors:        CPU model buffer size =   334.74 MiB
0.01.081.011 I llm_load_tensors:        CPU model buffer size =   402.73 MiB
0.01.081.012 I llm_load_tensors:        CPU model buffer size =   335.27 MiB
0.01.081.013 I llm_load_tensors:        CPU model buffer size =   338.98 MiB
0.01.081.014 I llm_load_tensors:        CPU model buffer size =   261.96 MiB
..............................................................
0.01.100.552 I llama_new_context_with_model: n_ctx      = 8192
0.01.100.560 I llama_new_context_with_model: n_batch    = 2048
0.01.100.561 I llama_new_context_with_model: n_ubatch   = 512
0.01.100.562 I llama_new_context_with_model: flash_attn = 0
0.01.100.565 I llama_new_context_with_model: freq_base  = 10000.0
0.01.100.566 I llama_new_context_with_model: freq_scale = 1
0.01.141.882 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.141.949 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.142.492 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.176.595 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.176.604 I llama_new_context_with_model: graph nodes  = 601
0.01.176.605 I llama_new_context_with_model: graph splits = 1
0.01.176.625 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.142.124 I main: llama threadpool init, n_threads = 4
0.02.142.143 I 
0.02.142.274 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.02.142.276 I 
0.02.142.579 I sampler seed: 1552948158
0.02.142.602 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.142.650 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.142.656 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.142.657 I 
 increably, her voice echoing through the grand halls of the manor. Her eyes, gleaming emeralds, scanned the gathering guests with a regal indifference. A tapestry

0.23.678.388 I llama_perf_sampler_print:    sampling time =      49.57 ms /    33 runs   (    1.50 ms per token,   665.75 tokens per second)
0.23.678.405 I llama_perf_context_print:        load time =    2138.57 ms
0.23.678.408 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.23.678.410 I llama_perf_context_print:        eval time =   21440.16 ms /    32 runs   (  670.00 ms per token,     1.49 tokens per second)
0.23.678.412 I llama_perf_context_print:       total time =   21536.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 3984 (15a172b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.983 I main: llama backend init
0.00.003.257 I main: load the model and apply lora adapter, if any
0.00.053.349 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.053.459 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.053.477 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.053.482 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.053.497 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.053.500 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.053.523 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.053.525 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.053.527 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.053.529 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.053.543 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.053.561 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.053.567 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.053.570 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.053.572 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.802 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.359.940 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.384.466 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.384.479 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.384.481 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.384.482 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.384.484 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.384.486 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.384.499 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.384.511 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.384.513 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.384.515 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.384.517 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.384.520 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.384.530 I llama_model_loader: - type  f32:   37 tensors
0.00.384.535 I llama_model_loader: - type q8_0:  127 tensors
0.00.703.491 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.848.169 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.849.423 I llm_load_vocab: special tokens cache size = 5
0.00.981.965 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.982.043 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.982.045 I llm_load_print_meta: arch             = gemma
0.00.982.046 I llm_load_print_meta: vocab type       = SPM
0.00.982.047 I llm_load_print_meta: n_vocab          = 256000
0.00.982.050 I llm_load_print_meta: n_merges         = 0
0.00.982.051 I llm_load_print_meta: vocab_only       = 0
0.00.982.051 I llm_load_print_meta: n_ctx_train      = 8192
0.00.982.052 I llm_load_print_meta: n_embd           = 2048
0.00.982.053 I llm_load_print_meta: n_layer          = 18
0.00.982.120 I llm_load_print_meta: n_head           = 8
0.00.982.150 I llm_load_print_meta: n_head_kv        = 1
0.00.982.151 I llm_load_print_meta: n_rot            = 256
0.00.982.152 I llm_load_print_meta: n_swa            = 0
0.00.982.153 I llm_load_print_meta: n_embd_head_k    = 256
0.00.982.154 I llm_load_print_meta: n_embd_head_v    = 256
0.00.982.162 I llm_load_print_meta: n_gqa            = 8
0.00.982.169 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.982.177 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.982.179 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.982.181 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.982.182 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.982.183 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.982.184 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.982.205 I llm_load_print_meta: n_ff             = 16384
0.00.982.206 I llm_load_print_meta: n_expert         = 0
0.00.982.217 I llm_load_print_meta: n_expert_used    = 0
0.00.982.218 I llm_load_print_meta: causal attn      = 1
0.00.982.219 I llm_load_print_meta: pooling type     = 0
0.00.982.229 I llm_load_print_meta: rope type        = 2
0.00.982.233 I llm_load_print_meta: rope scaling     = linear
0.00.982.235 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.982.254 I llm_load_print_meta: freq_scale_train = 1
0.00.982.256 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.982.257 I llm_load_print_meta: rope_finetuned   = unknown
0.00.982.261 I llm_load_print_meta: ssm_d_conv       = 0
0.00.982.262 I llm_load_print_meta: ssm_d_inner      = 0
0.00.982.262 I llm_load_print_meta: ssm_d_state      = 0
0.00.982.263 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.982.264 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.982.265 I llm_load_print_meta: model type       = 2B
0.00.982.267 I llm_load_print_meta: model ftype      = Q8_0
0.00.982.269 I llm_load_print_meta: model params     = 2.51 B
0.00.982.271 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.982.272 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.982.273 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.982.274 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.982.275 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.982.282 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.982.284 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.982.285 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.982.309 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.982.311 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.982.320 I llm_load_print_meta: max token length = 93
0.01.081.704 I llm_load_tensors:        CPU model buffer size =  2539.66 MiB
..............................................................
0.01.101.154 I llama_new_context_with_model: n_ctx      = 8192
0.01.101.160 I llama_new_context_with_model: n_batch    = 2048
0.01.101.161 I llama_new_context_with_model: n_ubatch   = 512
0.01.101.162 I llama_new_context_with_model: flash_attn = 0
0.01.101.165 I llama_new_context_with_model: freq_base  = 10000.0
0.01.101.166 I llama_new_context_with_model: freq_scale = 1
0.01.142.796 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.142.845 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.143.413 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.177.749 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.177.758 I llama_new_context_with_model: graph nodes  = 601
0.01.177.759 I llama_new_context_with_model: graph splits = 1
0.01.177.780 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.154.608 I main: llama threadpool init, n_threads = 4
0.02.154.664 I 
0.02.154.804 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.02.154.809 I 
0.02.155.100 I sampler seed: 704795512
0.02.155.118 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.155.163 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.155.173 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.155.184 I 
 increably, and the crowd roared.

This is a scene from a movie. What is the genre of the movie?

**A) Action**


0.23.539.959 I llama_perf_sampler_print:    sampling time =      50.26 ms /    33 runs   (    1.52 ms per token,   656.61 tokens per second)
0.23.539.963 I llama_perf_context_print:        load time =    2151.22 ms
0.23.539.988 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.23.539.998 I llama_perf_context_print:        eval time =   21288.96 ms /    32 runs   (  665.28 ms per token,     1.50 tokens per second)
0.23.540.000 I llama_perf_context_print:       total time =   21385.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.712 I build: 3984 (15a172b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.015 I main: llama backend init
0.00.003.314 I main: load the model and apply lora adapter, if any
0.00.052.833 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.053.204 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.053.304 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.053.320 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.053.323 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.053.330 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.053.335 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.053.350 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.053.352 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.053.354 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.053.355 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.053.369 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.053.370 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.053.372 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.053.374 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.053.376 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.050 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.360.864 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.385.423 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.385.437 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.385.439 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.385.441 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.385.442 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.385.444 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.385.447 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.385.456 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.385.458 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.385.461 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.385.462 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.385.464 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.385.473 I llama_model_loader: - type  f32:   37 tensors
0.00.385.478 I llama_model_loader: - type q8_0:  127 tensors
0.00.696.826 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.832.888 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.833.862 I llm_load_vocab: special tokens cache size = 5
0.00.964.772 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.964.857 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.964.859 I llm_load_print_meta: arch             = gemma
0.00.964.860 I llm_load_print_meta: vocab type       = SPM
0.00.964.861 I llm_load_print_meta: n_vocab          = 256000
0.00.964.863 I llm_load_print_meta: n_merges         = 0
0.00.964.864 I llm_load_print_meta: vocab_only       = 0
0.00.964.865 I llm_load_print_meta: n_ctx_train      = 8192
0.00.964.865 I llm_load_print_meta: n_embd           = 2048
0.00.964.866 I llm_load_print_meta: n_layer          = 18
0.00.964.933 I llm_load_print_meta: n_head           = 8
0.00.964.943 I llm_load_print_meta: n_head_kv        = 1
0.00.964.944 I llm_load_print_meta: n_rot            = 256
0.00.964.944 I llm_load_print_meta: n_swa            = 0
0.00.964.946 I llm_load_print_meta: n_embd_head_k    = 256
0.00.964.947 I llm_load_print_meta: n_embd_head_v    = 256
0.00.964.955 I llm_load_print_meta: n_gqa            = 8
0.00.964.970 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.964.979 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.964.981 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.964.982 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.964.983 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.964.984 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.964.985 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.964.999 I llm_load_print_meta: n_ff             = 16384
0.00.965.001 I llm_load_print_meta: n_expert         = 0
0.00.965.001 I llm_load_print_meta: n_expert_used    = 0
0.00.965.002 I llm_load_print_meta: causal attn      = 1
0.00.965.003 I llm_load_print_meta: pooling type     = 0
0.00.965.015 I llm_load_print_meta: rope type        = 2
0.00.965.016 I llm_load_print_meta: rope scaling     = linear
0.00.965.018 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.965.019 I llm_load_print_meta: freq_scale_train = 1
0.00.965.027 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.965.046 I llm_load_print_meta: rope_finetuned   = unknown
0.00.965.048 I llm_load_print_meta: ssm_d_conv       = 0
0.00.965.049 I llm_load_print_meta: ssm_d_inner      = 0
0.00.965.049 I llm_load_print_meta: ssm_d_state      = 0
0.00.965.050 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.965.050 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.965.051 I llm_load_print_meta: model type       = 2B
0.00.965.054 I llm_load_print_meta: model ftype      = Q8_0
0.00.965.055 I llm_load_print_meta: model params     = 2.51 B
0.00.965.057 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.965.058 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.965.059 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.965.060 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.965.061 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.965.062 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.965.062 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.965.064 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.965.071 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.965.079 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.965.080 I llm_load_print_meta: max token length = 93
0.01.043.115 I llm_load_tensors:        CPU model buffer size =   967.99 MiB
0.01.043.125 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.01.043.126 I llm_load_tensors:        CPU model buffer size =   411.77 MiB
0.01.043.127 I llm_load_tensors:        CPU model buffer size =   437.27 MiB
0.01.043.128 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.01.043.129 I llm_load_tensors:        CPU model buffer size =    34.02 MiB
..............................................................
0.01.062.867 I llama_new_context_with_model: n_ctx      = 8192
0.01.062.875 I llama_new_context_with_model: n_batch    = 2048
0.01.062.876 I llama_new_context_with_model: n_ubatch   = 512
0.01.062.877 I llama_new_context_with_model: flash_attn = 0
0.01.062.880 I llama_new_context_with_model: freq_base  = 10000.0
0.01.062.881 I llama_new_context_with_model: freq_scale = 1
0.01.103.966 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.104.014 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.104.535 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.138.399 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.138.409 I llama_new_context_with_model: graph nodes  = 601
0.01.138.410 I llama_new_context_with_model: graph splits = 1
0.01.138.444 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.101.753 I main: llama threadpool init, n_threads = 4
0.02.101.772 I 
0.02.101.910 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.02.101.915 I 
0.02.102.209 I sampler seed: 1586852586
0.02.102.226 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.102.271 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.102.277 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.102.278 I 
 seconary objectives in the Higher Education and Research (HE&R) sector include:

- Enhancing the quality of research and innovation
- Promoting inclusive and equitable

0.23.610.769 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.37 tokens per second)
0.23.610.773 I llama_perf_context_print:        load time =    2098.30 ms
0.23.610.775 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.23.610.778 I llama_perf_context_print:        eval time =   21412.71 ms /    32 runs   (  669.15 ms per token,     1.49 tokens per second)
0.23.610.779 I llama_perf_context_print:       total time =   21509.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.689 I build: 3984 (15a172b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.013 I main: llama backend init
0.00.003.344 I main: load the model and apply lora adapter, if any
0.00.055.040 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.055.426 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.055.529 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.055.544 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.055.549 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.055.560 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.055.564 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.055.576 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.055.582 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.055.585 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.055.595 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.055.611 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.055.618 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.055.620 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.055.622 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.055.624 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.446 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.376.735 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.401.252 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.401.263 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.401.265 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.401.267 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.401.268 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.401.270 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.401.272 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.401.286 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.401.288 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.401.291 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.401.292 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.401.295 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.401.306 I llama_model_loader: - type  f32:   37 tensors
0.00.401.310 I llama_model_loader: - type q8_0:  127 tensors
0.00.704.536 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.846.930 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.848.021 I llm_load_vocab: special tokens cache size = 5
0.00.980.100 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.980.191 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.980.192 I llm_load_print_meta: arch             = gemma
0.00.980.193 I llm_load_print_meta: vocab type       = SPM
0.00.980.194 I llm_load_print_meta: n_vocab          = 256000
0.00.980.197 I llm_load_print_meta: n_merges         = 0
0.00.980.198 I llm_load_print_meta: vocab_only       = 0
0.00.980.199 I llm_load_print_meta: n_ctx_train      = 8192
0.00.980.199 I llm_load_print_meta: n_embd           = 2048
0.00.980.200 I llm_load_print_meta: n_layer          = 18
0.00.980.272 I llm_load_print_meta: n_head           = 8
0.00.980.282 I llm_load_print_meta: n_head_kv        = 1
0.00.980.283 I llm_load_print_meta: n_rot            = 256
0.00.980.284 I llm_load_print_meta: n_swa            = 0
0.00.980.285 I llm_load_print_meta: n_embd_head_k    = 256
0.00.980.286 I llm_load_print_meta: n_embd_head_v    = 256
0.00.980.297 I llm_load_print_meta: n_gqa            = 8
0.00.980.320 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.980.333 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.980.336 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.980.338 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.980.339 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.980.340 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.980.342 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.980.360 I llm_load_print_meta: n_ff             = 16384
0.00.980.366 I llm_load_print_meta: n_expert         = 0
0.00.980.367 I llm_load_print_meta: n_expert_used    = 0
0.00.980.368 I llm_load_print_meta: causal attn      = 1
0.00.980.368 I llm_load_print_meta: pooling type     = 0
0.00.980.389 I llm_load_print_meta: rope type        = 2
0.00.980.391 I llm_load_print_meta: rope scaling     = linear
0.00.980.394 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.980.404 I llm_load_print_meta: freq_scale_train = 1
0.00.980.405 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.980.406 I llm_load_print_meta: rope_finetuned   = unknown
0.00.980.413 I llm_load_print_meta: ssm_d_conv       = 0
0.00.980.414 I llm_load_print_meta: ssm_d_inner      = 0
0.00.980.418 I llm_load_print_meta: ssm_d_state      = 0
0.00.980.419 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.980.421 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.980.422 I llm_load_print_meta: model type       = 2B
0.00.980.425 I llm_load_print_meta: model ftype      = Q8_0
0.00.980.435 I llm_load_print_meta: model params     = 2.51 B
0.00.980.438 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.980.439 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.980.442 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.980.444 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.980.454 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.980.456 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.980.458 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.980.460 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.980.469 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.980.472 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.980.479 I llm_load_print_meta: max token length = 93
0.01.059.929 I llm_load_tensors:        CPU model buffer size =  1904.18 MiB
0.01.059.943 I llm_load_tensors:        CPU model buffer size =   635.48 MiB
..............................................................
0.01.079.719 I llama_new_context_with_model: n_ctx      = 8192
0.01.079.726 I llama_new_context_with_model: n_batch    = 2048
0.01.079.726 I llama_new_context_with_model: n_ubatch   = 512
0.01.079.727 I llama_new_context_with_model: flash_attn = 0
0.01.079.731 I llama_new_context_with_model: freq_base  = 10000.0
0.01.079.732 I llama_new_context_with_model: freq_scale = 1
0.01.120.700 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.120.751 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.121.294 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.156.216 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.156.226 I llama_new_context_with_model: graph nodes  = 601
0.01.156.227 I llama_new_context_with_model: graph splits = 1
0.01.156.248 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.120.766 I main: llama threadpool init, n_threads = 4
0.02.120.786 I 
0.02.120.930 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.02.120.935 I 
0.02.121.278 I sampler seed: 3169014682
0.02.121.297 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.121.335 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.121.342 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.121.342 I 
 increasively with the size of the population.

This statement reflects what stage of population growth?

a) Rapid population growth
b) Stable population growth


0.23.717.488 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   667.96 tokens per second)
0.23.717.515 I llama_perf_context_print:        load time =    2117.27 ms
0.23.717.526 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.23.717.528 I llama_perf_context_print:        eval time =   21500.75 ms /    32 runs   (  671.90 ms per token,     1.49 tokens per second)
0.23.717.541 I llama_perf_context_print:       total time =   21596.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m46.020s
user	6m4.709s
sys	0m10.658s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (15a172b1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 315801.44 ms
main:    total time = 315801.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.771 I build: 3984 (15a172b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.111 I main: llama backend init
0.00.003.436 I main: load the model and apply lora adapter, if any
0.00.056.550 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.056.943 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.057.045 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.057.060 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.057.063 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.057.070 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.057.075 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.057.077 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.057.079 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.057.081 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.057.083 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.057.096 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.057.098 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.057.099 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.057.101 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.057.103 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.720 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.383.612 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.408.033 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.408.042 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.408.044 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.408.045 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.408.047 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.408.050 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.408.052 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.408.061 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.408.064 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.408.067 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.408.068 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.408.071 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.408.079 I llama_model_loader: - type  f32:   37 tensors
0.00.408.084 I llama_model_loader: - type q4_K:  108 tensors
0.00.408.085 I llama_model_loader: - type q6_K:   19 tensors
0.00.709.015 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.852.473 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.853.457 I llm_load_vocab: special tokens cache size = 5
0.00.994.655 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.994.740 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.994.744 I llm_load_print_meta: arch             = gemma
0.00.994.745 I llm_load_print_meta: vocab type       = SPM
0.00.994.746 I llm_load_print_meta: n_vocab          = 256000
0.00.994.749 I llm_load_print_meta: n_merges         = 0
0.00.994.750 I llm_load_print_meta: vocab_only       = 0
0.00.994.750 I llm_load_print_meta: n_ctx_train      = 8192
0.00.994.751 I llm_load_print_meta: n_embd           = 2048
0.00.994.754 I llm_load_print_meta: n_layer          = 18
0.00.994.824 I llm_load_print_meta: n_head           = 8
0.00.994.837 I llm_load_print_meta: n_head_kv        = 1
0.00.994.838 I llm_load_print_meta: n_rot            = 256
0.00.994.840 I llm_load_print_meta: n_swa            = 0
0.00.994.841 I llm_load_print_meta: n_embd_head_k    = 256
0.00.994.842 I llm_load_print_meta: n_embd_head_v    = 256
0.00.994.855 I llm_load_print_meta: n_gqa            = 8
0.00.994.863 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.994.873 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.994.875 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.994.888 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.994.892 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.994.893 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.994.893 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.994.912 I llm_load_print_meta: n_ff             = 16384
0.00.994.914 I llm_load_print_meta: n_expert         = 0
0.00.994.915 I llm_load_print_meta: n_expert_used    = 0
0.00.994.915 I llm_load_print_meta: causal attn      = 1
0.00.994.916 I llm_load_print_meta: pooling type     = 0
0.00.994.919 I llm_load_print_meta: rope type        = 2
0.00.994.920 I llm_load_print_meta: rope scaling     = linear
0.00.994.921 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.994.922 I llm_load_print_meta: freq_scale_train = 1
0.00.994.923 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.994.924 I llm_load_print_meta: rope_finetuned   = unknown
0.00.994.927 I llm_load_print_meta: ssm_d_conv       = 0
0.00.994.927 I llm_load_print_meta: ssm_d_inner      = 0
0.00.994.928 I llm_load_print_meta: ssm_d_state      = 0
0.00.994.928 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.994.929 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.994.930 I llm_load_print_meta: model type       = 2B
0.00.994.932 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.994.956 I llm_load_print_meta: model params     = 2.51 B
0.00.994.958 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.994.959 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.994.962 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.994.963 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.994.964 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.994.965 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.994.966 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.994.966 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.994.974 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.994.976 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.994.977 I llm_load_print_meta: max token length = 93
0.01.057.368 I llm_load_tensors:        CPU model buffer size =   604.15 MiB
0.01.057.381 I llm_load_tensors:        CPU model buffer size =   185.62 MiB
0.01.057.382 I llm_load_tensors:        CPU model buffer size =   221.61 MiB
0.01.057.383 I llm_load_tensors:        CPU model buffer size =   185.89 MiB
0.01.057.384 I llm_load_tensors:        CPU model buffer size =   187.86 MiB
0.01.057.385 I llm_load_tensors:        CPU model buffer size =   163.85 MiB
.............................................................
0.01.076.948 I llama_new_context_with_model: n_ctx      = 8192
0.01.076.955 I llama_new_context_with_model: n_batch    = 2048
0.01.076.955 I llama_new_context_with_model: n_ubatch   = 512
0.01.076.956 I llama_new_context_with_model: flash_attn = 0
0.01.076.959 I llama_new_context_with_model: freq_base  = 10000.0
0.01.076.960 I llama_new_context_with_model: freq_scale = 1
0.01.116.534 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.116.585 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.117.110 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.150.716 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.150.723 I llama_new_context_with_model: graph nodes  = 601
0.01.150.724 I llama_new_context_with_model: graph splits = 1
0.01.150.744 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.009.879 I main: llama threadpool init, n_threads = 4
0.02.009.897 I 
0.02.010.051 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.02.010.055 I 
0.02.010.342 I sampler seed: 4075665556
0.02.010.360 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.010.399 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.010.412 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.010.416 I 
 seconally. [end of text]


0.04.001.867 I llama_perf_sampler_print:    sampling time =       6.32 ms /     5 runs   (    1.26 ms per token,   791.51 tokens per second)
0.04.001.878 I llama_perf_context_print:        load time =    2006.30 ms
0.04.001.882 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.001.887 I llama_perf_context_print:        eval time =    1977.86 ms /     4 runs   (  494.47 ms per token,     2.02 tokens per second)
0.04.001.890 I llama_perf_context_print:       total time =    1992.01 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (15a172b1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 315541.34 ms
main:    total time = 315541.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.720 I build: 3984 (15a172b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.059 I main: llama backend init
0.00.003.372 I main: load the model and apply lora adapter, if any
0.00.055.326 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.055.440 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.055.460 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.055.468 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.055.476 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.055.485 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.055.489 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.055.492 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.055.495 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.055.498 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.055.516 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.055.522 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.055.524 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.055.525 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.055.528 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.234 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.360.489 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.384.967 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.384.977 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.384.979 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.384.981 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.384.982 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.384.984 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.384.986 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.384.996 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.384.998 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.385.008 I llama_model_loader: - type  f32:   37 tensors
0.00.385.012 I llama_model_loader: - type q4_K:  108 tensors
0.00.385.013 I llama_model_loader: - type q6_K:   19 tensors
0.00.682.940 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.818.103 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.819.129 I llm_load_vocab: special tokens cache size = 5
0.00.958.759 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.958.845 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.958.850 I llm_load_print_meta: arch             = gemma
0.00.958.851 I llm_load_print_meta: vocab type       = SPM
0.00.958.853 I llm_load_print_meta: n_vocab          = 256000
0.00.958.856 I llm_load_print_meta: n_merges         = 0
0.00.958.858 I llm_load_print_meta: vocab_only       = 0
0.00.958.859 I llm_load_print_meta: n_ctx_train      = 8192
0.00.958.860 I llm_load_print_meta: n_embd           = 2048
0.00.958.862 I llm_load_print_meta: n_layer          = 18
0.00.958.947 I llm_load_print_meta: n_head           = 8
0.00.958.973 I llm_load_print_meta: n_head_kv        = 1
0.00.958.978 I llm_load_print_meta: n_rot            = 256
0.00.958.979 I llm_load_print_meta: n_swa            = 0
0.00.958.980 I llm_load_print_meta: n_embd_head_k    = 256
0.00.958.981 I llm_load_print_meta: n_embd_head_v    = 256
0.00.959.003 I llm_load_print_meta: n_gqa            = 8
0.00.959.022 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.959.039 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.959.045 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.959.048 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.959.052 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.959.053 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.959.054 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.959.072 I llm_load_print_meta: n_ff             = 16384
0.00.959.074 I llm_load_print_meta: n_expert         = 0
0.00.959.075 I llm_load_print_meta: n_expert_used    = 0
0.00.959.076 I llm_load_print_meta: causal attn      = 1
0.00.959.078 I llm_load_print_meta: pooling type     = 0
0.00.959.079 I llm_load_print_meta: rope type        = 2
0.00.959.081 I llm_load_print_meta: rope scaling     = linear
0.00.959.084 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.959.086 I llm_load_print_meta: freq_scale_train = 1
0.00.959.090 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.959.091 I llm_load_print_meta: rope_finetuned   = unknown
0.00.959.092 I llm_load_print_meta: ssm_d_conv       = 0
0.00.959.111 I llm_load_print_meta: ssm_d_inner      = 0
0.00.959.113 I llm_load_print_meta: ssm_d_state      = 0
0.00.959.114 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.959.130 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.959.132 I llm_load_print_meta: model type       = 2B
0.00.959.138 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.959.142 I llm_load_print_meta: model params     = 2.51 B
0.00.959.143 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.959.145 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.959.147 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.959.148 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.959.153 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.959.154 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.959.158 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.959.174 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.959.186 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.959.188 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.959.190 I llm_load_print_meta: max token length = 93
0.01.021.831 I llm_load_tensors:        CPU model buffer size =  1548.98 MiB
.............................................................
0.01.041.517 I llama_new_context_with_model: n_ctx      = 8192
0.01.041.525 I llama_new_context_with_model: n_batch    = 2048
0.01.041.526 I llama_new_context_with_model: n_ubatch   = 512
0.01.041.526 I llama_new_context_with_model: flash_attn = 0
0.01.041.530 I llama_new_context_with_model: freq_base  = 10000.0
0.01.041.531 I llama_new_context_with_model: freq_scale = 1
0.01.082.392 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.082.451 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.083.009 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.117.064 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.117.073 I llama_new_context_with_model: graph nodes  = 601
0.01.117.074 I llama_new_context_with_model: graph splits = 1
0.01.117.094 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.974.811 I main: llama threadpool init, n_threads = 4
0.01.974.827 I 
0.01.974.992 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.975.003 I 
0.01.975.325 I sampler seed: 665669232
0.01.975.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.975.397 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.975.404 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.975.404 I 
 encompates a wide range of topics, from the latest trends and news to personal development and relationships. It also includes expert interviews, thought leadership pieces, and interactive

0.17.917.512 I llama_perf_sampler_print:    sampling time =      49.50 ms /    33 runs   (    1.50 ms per token,   666.61 tokens per second)
0.17.917.516 I llama_perf_context_print:        load time =    1971.31 ms
0.17.917.518 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.17.917.535 I llama_perf_context_print:        eval time =   15847.09 ms /    32 runs   (  495.22 ms per token,     2.02 tokens per second)
0.17.917.536 I llama_perf_context_print:       total time =   15942.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	10m56.790s
user	80m45.312s
sys	0m10.172s
