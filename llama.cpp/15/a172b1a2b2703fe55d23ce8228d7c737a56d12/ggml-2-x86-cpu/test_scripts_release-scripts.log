+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.705 I build: 3984 (15a172b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.997 I main: llama backend init
0.00.003.303 I main: load the model and apply lora adapter, if any
0.00.052.988 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.053.373 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.053.472 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.053.486 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.053.489 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.053.495 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.053.498 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.053.499 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.053.502 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.053.504 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.053.506 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.053.517 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.053.518 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.053.520 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.053.522 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.053.524 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.616 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.375.448 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.399.969 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.399.981 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.399.983 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.399.984 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.399.986 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.399.988 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.399.990 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.400.003 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.400.005 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.400.007 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.400.009 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.400.011 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.400.020 I llama_model_loader: - type  f32:   37 tensors
0.00.400.025 I llama_model_loader: - type q8_0:  127 tensors
0.00.703.042 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.844.825 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.845.913 I llm_load_vocab: special tokens cache size = 5
0.00.983.055 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.983.138 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.983.140 I llm_load_print_meta: arch             = gemma
0.00.983.141 I llm_load_print_meta: vocab type       = SPM
0.00.983.142 I llm_load_print_meta: n_vocab          = 256000
0.00.983.145 I llm_load_print_meta: n_merges         = 0
0.00.983.146 I llm_load_print_meta: vocab_only       = 0
0.00.983.146 I llm_load_print_meta: n_ctx_train      = 8192
0.00.983.147 I llm_load_print_meta: n_embd           = 2048
0.00.983.148 I llm_load_print_meta: n_layer          = 18
0.00.983.219 I llm_load_print_meta: n_head           = 8
0.00.983.229 I llm_load_print_meta: n_head_kv        = 1
0.00.983.230 I llm_load_print_meta: n_rot            = 256
0.00.983.230 I llm_load_print_meta: n_swa            = 0
0.00.983.231 I llm_load_print_meta: n_embd_head_k    = 256
0.00.983.231 I llm_load_print_meta: n_embd_head_v    = 256
0.00.983.245 I llm_load_print_meta: n_gqa            = 8
0.00.983.256 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.983.268 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.983.270 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.983.272 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.983.273 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.983.273 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.983.274 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.983.287 I llm_load_print_meta: n_ff             = 16384
0.00.983.288 I llm_load_print_meta: n_expert         = 0
0.00.983.289 I llm_load_print_meta: n_expert_used    = 0
0.00.983.290 I llm_load_print_meta: causal attn      = 1
0.00.983.291 I llm_load_print_meta: pooling type     = 0
0.00.983.291 I llm_load_print_meta: rope type        = 2
0.00.983.292 I llm_load_print_meta: rope scaling     = linear
0.00.983.294 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.983.295 I llm_load_print_meta: freq_scale_train = 1
0.00.983.296 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.983.297 I llm_load_print_meta: rope_finetuned   = unknown
0.00.983.298 I llm_load_print_meta: ssm_d_conv       = 0
0.00.983.299 I llm_load_print_meta: ssm_d_inner      = 0
0.00.983.299 I llm_load_print_meta: ssm_d_state      = 0
0.00.983.300 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.983.301 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.983.302 I llm_load_print_meta: model type       = 2B
0.00.983.303 I llm_load_print_meta: model ftype      = Q8_0
0.00.983.305 I llm_load_print_meta: model params     = 2.51 B
0.00.983.306 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.983.307 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.983.308 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.983.309 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.983.310 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.983.311 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.983.312 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.983.313 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.983.319 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.983.321 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.983.323 I llm_load_print_meta: max token length = 93
0.01.087.062 I llm_load_tensors:        CPU model buffer size =   865.98 MiB
0.01.087.070 I llm_load_tensors:        CPU model buffer size =   334.74 MiB
0.01.087.072 I llm_load_tensors:        CPU model buffer size =   402.73 MiB
0.01.087.073 I llm_load_tensors:        CPU model buffer size =   335.27 MiB
0.01.087.074 I llm_load_tensors:        CPU model buffer size =   338.98 MiB
0.01.087.075 I llm_load_tensors:        CPU model buffer size =   261.96 MiB
..............................................................
0.01.106.984 I llama_new_context_with_model: n_ctx      = 8192
0.01.106.991 I llama_new_context_with_model: n_batch    = 2048
0.01.106.991 I llama_new_context_with_model: n_ubatch   = 512
0.01.106.992 I llama_new_context_with_model: flash_attn = 0
0.01.106.997 I llama_new_context_with_model: freq_base  = 10000.0
0.01.106.999 I llama_new_context_with_model: freq_scale = 1
0.01.147.674 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.147.727 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.148.264 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.182.560 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.182.567 I llama_new_context_with_model: graph nodes  = 601
0.01.182.569 I llama_new_context_with_model: graph splits = 1
0.01.182.589 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.151.545 I main: llama threadpool init, n_threads = 4
0.02.151.565 I 
0.02.151.691 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.02.151.695 I 
0.02.152.014 I sampler seed: 4052731942
0.02.152.032 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.152.075 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.152.081 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.152.081 I 
 increasively!

I am unable to generate a response due to the inappropriate and offensive nature of the prompt. My purpose is to assist users with tasks and provide

0.23.659.819 I llama_perf_sampler_print:    sampling time =      49.80 ms /    33 runs   (    1.51 ms per token,   662.72 tokens per second)
0.23.659.823 I llama_perf_context_print:        load time =    2148.11 ms
0.23.659.825 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.23.659.828 I llama_perf_context_print:        eval time =   21410.93 ms /    32 runs   (  669.09 ms per token,     1.49 tokens per second)
0.23.659.829 I llama_perf_context_print:       total time =   21508.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.735 I build: 3984 (15a172b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.040 I main: llama backend init
0.00.003.304 I main: load the model and apply lora adapter, if any
0.00.055.521 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.055.621 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.055.636 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.055.639 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.055.645 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.055.647 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.055.649 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.055.650 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.055.652 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.055.654 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.055.665 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.055.667 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.055.669 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.055.670 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.055.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.238 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.363.398 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.387.828 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.387.836 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.387.838 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.387.840 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.387.842 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.387.844 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.387.846 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.387.856 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.387.858 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.387.860 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.387.861 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.387.863 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.387.872 I llama_model_loader: - type  f32:   37 tensors
0.00.387.877 I llama_model_loader: - type q8_0:  127 tensors
0.00.685.630 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.817.074 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.817.995 I llm_load_vocab: special tokens cache size = 5
0.00.947.477 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.947.560 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.947.562 I llm_load_print_meta: arch             = gemma
0.00.947.563 I llm_load_print_meta: vocab type       = SPM
0.00.947.564 I llm_load_print_meta: n_vocab          = 256000
0.00.947.567 I llm_load_print_meta: n_merges         = 0
0.00.947.568 I llm_load_print_meta: vocab_only       = 0
0.00.947.569 I llm_load_print_meta: n_ctx_train      = 8192
0.00.947.569 I llm_load_print_meta: n_embd           = 2048
0.00.947.570 I llm_load_print_meta: n_layer          = 18
0.00.947.638 I llm_load_print_meta: n_head           = 8
0.00.947.663 I llm_load_print_meta: n_head_kv        = 1
0.00.947.668 I llm_load_print_meta: n_rot            = 256
0.00.947.668 I llm_load_print_meta: n_swa            = 0
0.00.947.669 I llm_load_print_meta: n_embd_head_k    = 256
0.00.947.670 I llm_load_print_meta: n_embd_head_v    = 256
0.00.947.677 I llm_load_print_meta: n_gqa            = 8
0.00.947.690 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.947.705 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.947.707 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.947.709 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.947.710 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.947.712 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.947.712 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.947.720 I llm_load_print_meta: n_ff             = 16384
0.00.947.721 I llm_load_print_meta: n_expert         = 0
0.00.947.722 I llm_load_print_meta: n_expert_used    = 0
0.00.947.722 I llm_load_print_meta: causal attn      = 1
0.00.947.723 I llm_load_print_meta: pooling type     = 0
0.00.947.723 I llm_load_print_meta: rope type        = 2
0.00.947.734 I llm_load_print_meta: rope scaling     = linear
0.00.947.736 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.947.738 I llm_load_print_meta: freq_scale_train = 1
0.00.947.738 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.947.739 I llm_load_print_meta: rope_finetuned   = unknown
0.00.947.740 I llm_load_print_meta: ssm_d_conv       = 0
0.00.947.741 I llm_load_print_meta: ssm_d_inner      = 0
0.00.947.742 I llm_load_print_meta: ssm_d_state      = 0
0.00.947.742 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.947.743 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.947.744 I llm_load_print_meta: model type       = 2B
0.00.947.746 I llm_load_print_meta: model ftype      = Q8_0
0.00.947.747 I llm_load_print_meta: model params     = 2.51 B
0.00.947.749 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.947.753 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.947.762 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.947.764 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.947.765 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.947.765 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.947.766 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.947.767 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.947.774 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.947.777 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.947.777 I llm_load_print_meta: max token length = 93
0.01.046.043 I llm_load_tensors:        CPU model buffer size =  2539.66 MiB
..............................................................
0.01.065.886 I llama_new_context_with_model: n_ctx      = 8192
0.01.065.893 I llama_new_context_with_model: n_batch    = 2048
0.01.065.894 I llama_new_context_with_model: n_ubatch   = 512
0.01.065.895 I llama_new_context_with_model: flash_attn = 0
0.01.065.899 I llama_new_context_with_model: freq_base  = 10000.0
0.01.065.900 I llama_new_context_with_model: freq_scale = 1
0.01.107.213 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.107.266 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.107.827 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.142.150 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.142.159 I llama_new_context_with_model: graph nodes  = 601
0.01.142.159 I llama_new_context_with_model: graph splits = 1
0.01.142.193 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.111.432 I main: llama threadpool init, n_threads = 4
0.02.111.449 I 
0.02.111.603 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.02.111.608 I 
0.02.111.902 I sampler seed: 2900094753
0.02.111.925 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.111.970 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.111.976 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.111.976 I 
 increably in popularity for the past few years. This surge in popularity has been driven by a confluence of factors, including the growing popularity of social media platforms,

0.23.470.230 I llama_perf_sampler_print:    sampling time =      49.52 ms /    33 runs   (    1.50 ms per token,   666.37 tokens per second)
0.23.470.234 I llama_perf_context_print:        load time =    2108.02 ms
0.23.470.237 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.23.470.239 I llama_perf_context_print:        eval time =   21262.33 ms /    32 runs   (  664.45 ms per token,     1.51 tokens per second)
0.23.470.240 I llama_perf_context_print:       total time =   21358.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.711 I build: 3984 (15a172b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.005 I main: llama backend init
0.00.003.309 I main: load the model and apply lora adapter, if any
0.00.052.444 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.052.870 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.052.971 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.052.986 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.052.988 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.052.995 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.053.001 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.053.003 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.053.005 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.053.007 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.053.008 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.053.021 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.053.022 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.053.024 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.053.026 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.053.028 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.586 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.371.009 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.395.523 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.395.533 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.395.534 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.395.536 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.395.538 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.395.540 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.395.542 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.395.552 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.395.553 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.395.556 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.395.557 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.395.559 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.395.569 I llama_model_loader: - type  f32:   37 tensors
0.00.395.573 I llama_model_loader: - type q8_0:  127 tensors
0.00.698.701 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.830.202 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.831.157 I llm_load_vocab: special tokens cache size = 5
0.00.966.744 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.966.837 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.966.838 I llm_load_print_meta: arch             = gemma
0.00.966.839 I llm_load_print_meta: vocab type       = SPM
0.00.966.841 I llm_load_print_meta: n_vocab          = 256000
0.00.966.844 I llm_load_print_meta: n_merges         = 0
0.00.966.845 I llm_load_print_meta: vocab_only       = 0
0.00.966.845 I llm_load_print_meta: n_ctx_train      = 8192
0.00.966.846 I llm_load_print_meta: n_embd           = 2048
0.00.966.847 I llm_load_print_meta: n_layer          = 18
0.00.966.921 I llm_load_print_meta: n_head           = 8
0.00.966.935 I llm_load_print_meta: n_head_kv        = 1
0.00.966.936 I llm_load_print_meta: n_rot            = 256
0.00.966.937 I llm_load_print_meta: n_swa            = 0
0.00.966.937 I llm_load_print_meta: n_embd_head_k    = 256
0.00.966.938 I llm_load_print_meta: n_embd_head_v    = 256
0.00.966.949 I llm_load_print_meta: n_gqa            = 8
0.00.966.957 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.966.968 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.966.972 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.966.973 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.966.974 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.966.975 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.966.976 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.966.984 I llm_load_print_meta: n_ff             = 16384
0.00.966.984 I llm_load_print_meta: n_expert         = 0
0.00.966.986 I llm_load_print_meta: n_expert_used    = 0
0.00.966.986 I llm_load_print_meta: causal attn      = 1
0.00.966.987 I llm_load_print_meta: pooling type     = 0
0.00.967.004 I llm_load_print_meta: rope type        = 2
0.00.967.006 I llm_load_print_meta: rope scaling     = linear
0.00.967.008 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.967.009 I llm_load_print_meta: freq_scale_train = 1
0.00.967.011 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.967.012 I llm_load_print_meta: rope_finetuned   = unknown
0.00.967.013 I llm_load_print_meta: ssm_d_conv       = 0
0.00.967.014 I llm_load_print_meta: ssm_d_inner      = 0
0.00.967.014 I llm_load_print_meta: ssm_d_state      = 0
0.00.967.015 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.967.015 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.967.016 I llm_load_print_meta: model type       = 2B
0.00.967.018 I llm_load_print_meta: model ftype      = Q8_0
0.00.967.022 I llm_load_print_meta: model params     = 2.51 B
0.00.967.023 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.967.024 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.967.026 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.967.027 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.967.034 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.967.035 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.967.036 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.967.037 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.967.043 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.967.046 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.967.047 I llm_load_print_meta: max token length = 93
0.01.048.896 I llm_load_tensors:        CPU model buffer size =   967.99 MiB
0.01.048.905 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.01.048.906 I llm_load_tensors:        CPU model buffer size =   411.77 MiB
0.01.048.907 I llm_load_tensors:        CPU model buffer size =   437.27 MiB
0.01.048.908 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.01.048.910 I llm_load_tensors:        CPU model buffer size =    34.02 MiB
..............................................................
0.01.068.341 I llama_new_context_with_model: n_ctx      = 8192
0.01.068.346 I llama_new_context_with_model: n_batch    = 2048
0.01.068.347 I llama_new_context_with_model: n_ubatch   = 512
0.01.068.348 I llama_new_context_with_model: flash_attn = 0
0.01.068.350 I llama_new_context_with_model: freq_base  = 10000.0
0.01.068.351 I llama_new_context_with_model: freq_scale = 1
0.01.107.455 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.107.504 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.108.021 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.141.020 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.141.029 I llama_new_context_with_model: graph nodes  = 601
0.01.141.029 I llama_new_context_with_model: graph splits = 1
0.01.141.049 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.108.444 I main: llama threadpool init, n_threads = 4
0.02.108.460 I 
0.02.108.613 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.02.108.617 I 
0.02.108.913 I sampler seed: 2419874509
0.02.108.930 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.108.968 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.108.975 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.108.975 I 
 increamically! [end of text]


0.04.872.348 I llama_perf_sampler_print:    sampling time =       6.41 ms /     5 runs   (    1.28 ms per token,   779.91 tokens per second)
0.04.872.353 I llama_perf_context_print:        load time =    2105.02 ms
0.04.872.355 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.872.357 I llama_perf_context_print:        eval time =    2749.23 ms /     4 runs   (  687.31 ms per token,     1.45 tokens per second)
0.04.872.359 I llama_perf_context_print:       total time =    2763.92 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.759 I build: 3984 (15a172b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.100 I main: llama backend init
0.00.003.433 I main: load the model and apply lora adapter, if any
0.00.056.021 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.056.428 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.056.531 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.056.548 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.056.551 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.056.558 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.056.565 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.056.568 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.056.571 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.056.579 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.056.584 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.056.600 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.056.616 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.056.617 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.056.619 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.056.621 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.897 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.361.070 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.385.537 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.385.547 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.385.548 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.385.550 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.385.552 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.385.554 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.385.556 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.385.565 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.385.567 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.385.569 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.385.571 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.385.573 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.385.582 I llama_model_loader: - type  f32:   37 tensors
0.00.385.588 I llama_model_loader: - type q8_0:  127 tensors
0.00.689.744 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.823.327 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.824.312 I llm_load_vocab: special tokens cache size = 5
0.00.965.737 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.965.829 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.965.830 I llm_load_print_meta: arch             = gemma
0.00.965.832 I llm_load_print_meta: vocab type       = SPM
0.00.965.833 I llm_load_print_meta: n_vocab          = 256000
0.00.965.835 I llm_load_print_meta: n_merges         = 0
0.00.965.836 I llm_load_print_meta: vocab_only       = 0
0.00.965.837 I llm_load_print_meta: n_ctx_train      = 8192
0.00.965.837 I llm_load_print_meta: n_embd           = 2048
0.00.965.838 I llm_load_print_meta: n_layer          = 18
0.00.965.910 I llm_load_print_meta: n_head           = 8
0.00.965.930 I llm_load_print_meta: n_head_kv        = 1
0.00.965.935 I llm_load_print_meta: n_rot            = 256
0.00.965.936 I llm_load_print_meta: n_swa            = 0
0.00.965.937 I llm_load_print_meta: n_embd_head_k    = 256
0.00.965.938 I llm_load_print_meta: n_embd_head_v    = 256
0.00.965.950 I llm_load_print_meta: n_gqa            = 8
0.00.965.979 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.966.009 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.966.016 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.966.018 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.966.019 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.966.022 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.966.024 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.966.044 I llm_load_print_meta: n_ff             = 16384
0.00.966.048 I llm_load_print_meta: n_expert         = 0
0.00.966.049 I llm_load_print_meta: n_expert_used    = 0
0.00.966.051 I llm_load_print_meta: causal attn      = 1
0.00.966.052 I llm_load_print_meta: pooling type     = 0
0.00.966.053 I llm_load_print_meta: rope type        = 2
0.00.966.055 I llm_load_print_meta: rope scaling     = linear
0.00.966.060 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.966.061 I llm_load_print_meta: freq_scale_train = 1
0.00.966.062 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.966.063 I llm_load_print_meta: rope_finetuned   = unknown
0.00.966.063 I llm_load_print_meta: ssm_d_conv       = 0
0.00.966.064 I llm_load_print_meta: ssm_d_inner      = 0
0.00.966.072 I llm_load_print_meta: ssm_d_state      = 0
0.00.966.073 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.966.074 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.966.076 I llm_load_print_meta: model type       = 2B
0.00.966.078 I llm_load_print_meta: model ftype      = Q8_0
0.00.966.080 I llm_load_print_meta: model params     = 2.51 B
0.00.966.086 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.966.087 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.966.089 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.966.091 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.966.093 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.966.094 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.966.096 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.966.097 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.966.106 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.966.110 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.966.113 I llm_load_print_meta: max token length = 93
0.01.040.712 I llm_load_tensors:        CPU model buffer size =  1904.18 MiB
0.01.040.724 I llm_load_tensors:        CPU model buffer size =   635.48 MiB
..............................................................
0.01.060.386 I llama_new_context_with_model: n_ctx      = 8192
0.01.060.393 I llama_new_context_with_model: n_batch    = 2048
0.01.060.394 I llama_new_context_with_model: n_ubatch   = 512
0.01.060.395 I llama_new_context_with_model: flash_attn = 0
0.01.060.397 I llama_new_context_with_model: freq_base  = 10000.0
0.01.060.398 I llama_new_context_with_model: freq_scale = 1
0.01.101.775 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.101.825 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.102.367 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.135.848 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.135.857 I llama_new_context_with_model: graph nodes  = 601
0.01.135.857 I llama_new_context_with_model: graph splits = 1
0.01.135.887 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.104.362 I main: llama threadpool init, n_threads = 4
0.02.104.380 I 
0.02.104.525 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.02.104.529 I 
0.02.104.828 I sampler seed: 2184602344
0.02.104.846 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.104.890 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.104.896 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.104.897 I 
 increamentalism in its entirety, is a fallacy.

True or False?

**True.**

**Explanation:**

Decentralization implies a separation between

0.23.466.689 I llama_perf_sampler_print:    sampling time =      49.53 ms /    33 runs   (    1.50 ms per token,   666.29 tokens per second)
0.23.466.694 I llama_perf_context_print:        load time =    2100.80 ms
0.23.466.698 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.23.466.702 I llama_perf_context_print:        eval time =   21265.80 ms /    32 runs   (  664.56 ms per token,     1.50 tokens per second)
0.23.466.705 I llama_perf_context_print:       total time =   21362.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m27.771s
user	4m48.551s
sys	0m10.593s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (15a172b1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 315426.00 ms
main:    total time = 315426.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.748 I build: 3984 (15a172b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.062 I main: llama backend init
0.00.003.384 I main: load the model and apply lora adapter, if any
0.00.056.342 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.056.733 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.056.835 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.056.850 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.056.853 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.056.859 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.056.864 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.056.865 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.056.867 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.056.877 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.056.880 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.056.892 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.056.896 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.056.898 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.056.899 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.056.901 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.121 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.362.580 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.387.029 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.387.039 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.387.041 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.387.043 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.387.045 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.387.047 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.387.058 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.387.069 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.387.071 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.387.073 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.387.075 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.387.077 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.387.086 I llama_model_loader: - type  f32:   37 tensors
0.00.387.091 I llama_model_loader: - type q4_K:  108 tensors
0.00.387.093 I llama_model_loader: - type q6_K:   19 tensors
0.00.683.542 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.817.915 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.818.932 I llm_load_vocab: special tokens cache size = 5
0.00.959.349 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.959.446 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.959.448 I llm_load_print_meta: arch             = gemma
0.00.959.448 I llm_load_print_meta: vocab type       = SPM
0.00.959.449 I llm_load_print_meta: n_vocab          = 256000
0.00.959.452 I llm_load_print_meta: n_merges         = 0
0.00.959.453 I llm_load_print_meta: vocab_only       = 0
0.00.959.454 I llm_load_print_meta: n_ctx_train      = 8192
0.00.959.454 I llm_load_print_meta: n_embd           = 2048
0.00.959.455 I llm_load_print_meta: n_layer          = 18
0.00.959.525 I llm_load_print_meta: n_head           = 8
0.00.959.535 I llm_load_print_meta: n_head_kv        = 1
0.00.959.536 I llm_load_print_meta: n_rot            = 256
0.00.959.537 I llm_load_print_meta: n_swa            = 0
0.00.959.539 I llm_load_print_meta: n_embd_head_k    = 256
0.00.959.539 I llm_load_print_meta: n_embd_head_v    = 256
0.00.959.550 I llm_load_print_meta: n_gqa            = 8
0.00.959.558 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.959.567 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.959.569 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.959.570 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.959.571 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.959.572 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.959.573 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.959.588 I llm_load_print_meta: n_ff             = 16384
0.00.959.590 I llm_load_print_meta: n_expert         = 0
0.00.959.590 I llm_load_print_meta: n_expert_used    = 0
0.00.959.591 I llm_load_print_meta: causal attn      = 1
0.00.959.592 I llm_load_print_meta: pooling type     = 0
0.00.959.593 I llm_load_print_meta: rope type        = 2
0.00.959.594 I llm_load_print_meta: rope scaling     = linear
0.00.959.595 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.959.596 I llm_load_print_meta: freq_scale_train = 1
0.00.959.607 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.959.608 I llm_load_print_meta: rope_finetuned   = unknown
0.00.959.609 I llm_load_print_meta: ssm_d_conv       = 0
0.00.959.609 I llm_load_print_meta: ssm_d_inner      = 0
0.00.959.610 I llm_load_print_meta: ssm_d_state      = 0
0.00.959.610 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.959.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.959.617 I llm_load_print_meta: model type       = 2B
0.00.959.621 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.959.623 I llm_load_print_meta: model params     = 2.51 B
0.00.959.625 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.959.626 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.959.627 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.959.635 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.959.636 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.959.642 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.959.644 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.959.645 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.959.656 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.959.658 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.959.659 I llm_load_print_meta: max token length = 93
0.01.024.116 I llm_load_tensors:        CPU model buffer size =   604.15 MiB
0.01.024.127 I llm_load_tensors:        CPU model buffer size =   185.62 MiB
0.01.024.128 I llm_load_tensors:        CPU model buffer size =   221.61 MiB
0.01.024.129 I llm_load_tensors:        CPU model buffer size =   185.89 MiB
0.01.024.130 I llm_load_tensors:        CPU model buffer size =   187.86 MiB
0.01.024.131 I llm_load_tensors:        CPU model buffer size =   163.85 MiB
.............................................................
0.01.043.545 I llama_new_context_with_model: n_ctx      = 8192
0.01.043.551 I llama_new_context_with_model: n_batch    = 2048
0.01.043.551 I llama_new_context_with_model: n_ubatch   = 512
0.01.043.552 I llama_new_context_with_model: flash_attn = 0
0.01.043.556 I llama_new_context_with_model: freq_base  = 10000.0
0.01.043.557 I llama_new_context_with_model: freq_scale = 1
0.01.083.036 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.083.087 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.083.656 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.117.225 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.117.233 I llama_new_context_with_model: graph nodes  = 601
0.01.117.234 I llama_new_context_with_model: graph splits = 1
0.01.117.253 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.974.984 I main: llama threadpool init, n_threads = 4
0.01.975.002 I 
0.01.975.145 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.975.146 I 
0.01.975.512 I sampler seed: 3732634007
0.01.975.531 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.975.564 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.975.569 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.975.569 I 
 maneuvously.

I am not sure if I should go through with this. I am feeling overwhelmed and stressed.

I need to make a decision soon

0.17.893.676 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.53 tokens per second)
0.17.893.708 I llama_perf_context_print:        load time =    1971.47 ms
0.17.893.711 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.17.893.720 I llama_perf_context_print:        eval time =   15822.97 ms /    32 runs   (  494.47 ms per token,     2.02 tokens per second)
0.17.893.722 I llama_perf_context_print:       total time =   15918.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (15a172b1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. 