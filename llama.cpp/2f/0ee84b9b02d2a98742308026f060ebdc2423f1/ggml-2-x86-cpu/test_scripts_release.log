+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.175 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.369 I main: llama backend init
0.00.000.375 I main: load the model and apply lora adapter, if any
0.00.020.788 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.796 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.807 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.815 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.819 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.822 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.822 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.823 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.824 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.824 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.825 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.829 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.829 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.830 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.831 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.831 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.308 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.544 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.307 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.313 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.314 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.315 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.315 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.316 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.317 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.319 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.320 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.321 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.322 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.322 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.325 I llama_model_loader: - type  f32:   37 tensors
0.00.130.326 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.890 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.728 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.398 I llm_load_vocab: special tokens cache size = 5
0.00.270.518 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.538 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.539 I llm_load_print_meta: arch             = gemma
0.00.270.539 I llm_load_print_meta: vocab type       = SPM
0.00.270.540 I llm_load_print_meta: n_vocab          = 256000
0.00.270.540 I llm_load_print_meta: n_merges         = 0
0.00.270.540 I llm_load_print_meta: vocab_only       = 0
0.00.270.541 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.541 I llm_load_print_meta: n_embd           = 2048
0.00.270.541 I llm_load_print_meta: n_layer          = 18
0.00.270.554 I llm_load_print_meta: n_head           = 8
0.00.270.555 I llm_load_print_meta: n_head_kv        = 1
0.00.270.556 I llm_load_print_meta: n_rot            = 256
0.00.270.556 I llm_load_print_meta: n_swa            = 0
0.00.270.556 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.556 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.557 I llm_load_print_meta: n_gqa            = 8
0.00.270.558 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.560 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.560 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.562 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.562 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.562 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.563 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.563 I llm_load_print_meta: n_ff             = 16384
0.00.270.564 I llm_load_print_meta: n_expert         = 0
0.00.270.564 I llm_load_print_meta: n_expert_used    = 0
0.00.270.564 I llm_load_print_meta: causal attn      = 1
0.00.270.565 I llm_load_print_meta: pooling type     = 0
0.00.270.565 I llm_load_print_meta: rope type        = 2
0.00.270.565 I llm_load_print_meta: rope scaling     = linear
0.00.270.567 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.567 I llm_load_print_meta: freq_scale_train = 1
0.00.270.568 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.568 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.568 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.569 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.569 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.569 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.569 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.570 I llm_load_print_meta: model type       = 2B
0.00.270.571 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.572 I llm_load_print_meta: model params     = 2.51 B
0.00.270.573 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.573 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.575 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.575 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.576 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.576 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.576 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.577 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.577 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.578 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.578 I llm_load_print_meta: max token length = 93
0.00.369.551 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.369.559 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.369.560 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.369.561 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.369.561 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.369.562 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.774 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.780 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.781 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.781 I llama_new_context_with_model: n_batch       = 2048
0.00.374.782 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.782 I llama_new_context_with_model: flash_attn    = 0
0.00.374.784 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.785 I llama_new_context_with_model: freq_scale    = 1
0.00.374.786 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.806 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.390.339 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.353 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.450 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.714 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.720 I llama_new_context_with_model: graph nodes  = 601
0.00.391.720 I llama_new_context_with_model: graph splits = 1
0.00.391.723 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.391.723 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.708 I main: llama threadpool init, n_threads = 4
0.00.477.724 I 
0.00.477.799 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.802 I 
0.00.477.845 I sampler seed: 4230666463
0.00.477.856 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.859 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.860 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.860 I 
 maneuvously. 

I apologize for the inappropriate language. I am trying to communicate my excitement about learning a new skill.

I'm beyond excited

0.02.730.483 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6770.62 tokens per second)
0.02.730.485 I llama_perf_context_print:        load time =     477.32 ms
0.02.730.486 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.730.487 I llama_perf_context_print:        eval time =    2233.20 ms /    32 runs   (   69.79 ms per token,    14.33 tokens per second)
0.02.730.488 I llama_perf_context_print:       total time =    2252.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.547 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.020.767 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.781 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.787 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.791 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.793 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.794 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.795 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.795 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.796 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.796 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.801 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.802 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.803 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.804 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.805 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.084 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.353 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.173 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.179 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.180 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.180 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.181 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.182 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.183 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.185 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.185 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.186 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.187 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.188 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.192 I llama_model_loader: - type  f32:   37 tensors
0.00.130.193 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.160 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.197 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.702 I llm_load_vocab: special tokens cache size = 5
0.00.264.574 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.589 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.590 I llm_load_print_meta: arch             = gemma
0.00.264.590 I llm_load_print_meta: vocab type       = SPM
0.00.264.591 I llm_load_print_meta: n_vocab          = 256000
0.00.264.592 I llm_load_print_meta: n_merges         = 0
0.00.264.592 I llm_load_print_meta: vocab_only       = 0
0.00.264.592 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.593 I llm_load_print_meta: n_embd           = 2048
0.00.264.593 I llm_load_print_meta: n_layer          = 18
0.00.264.604 I llm_load_print_meta: n_head           = 8
0.00.264.605 I llm_load_print_meta: n_head_kv        = 1
0.00.264.605 I llm_load_print_meta: n_rot            = 256
0.00.264.605 I llm_load_print_meta: n_swa            = 0
0.00.264.606 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.606 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.607 I llm_load_print_meta: n_gqa            = 8
0.00.264.608 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.609 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.610 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.611 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.611 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.612 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.612 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.613 I llm_load_print_meta: n_ff             = 16384
0.00.264.613 I llm_load_print_meta: n_expert         = 0
0.00.264.613 I llm_load_print_meta: n_expert_used    = 0
0.00.264.614 I llm_load_print_meta: causal attn      = 1
0.00.264.614 I llm_load_print_meta: pooling type     = 0
0.00.264.614 I llm_load_print_meta: rope type        = 2
0.00.264.614 I llm_load_print_meta: rope scaling     = linear
0.00.264.616 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.616 I llm_load_print_meta: freq_scale_train = 1
0.00.264.617 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.617 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.617 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.618 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.618 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.618 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.618 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.619 I llm_load_print_meta: model type       = 2B
0.00.264.619 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.620 I llm_load_print_meta: model params     = 2.51 B
0.00.264.621 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.621 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.622 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.622 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.622 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.623 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.623 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.623 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.624 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.624 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.624 I llm_load_print_meta: max token length = 93
0.00.360.122 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.248 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.253 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.254 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.254 I llama_new_context_with_model: n_batch       = 2048
0.00.365.255 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.255 I llama_new_context_with_model: flash_attn    = 0
0.00.365.257 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.258 I llama_new_context_with_model: freq_scale    = 1
0.00.365.260 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.280 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.379.906 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.921 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.012 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.289 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.295 I llama_new_context_with_model: graph nodes  = 601
0.00.381.296 I llama_new_context_with_model: graph splits = 1
0.00.381.298 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.381.298 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.178 I main: llama threadpool init, n_threads = 4
0.00.466.194 I 
0.00.466.277 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.466.281 I 
0.00.466.331 I sampler seed: 1716842725
0.00.466.342 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.352 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.357 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.357 I 
 increasively and irreverently.

I'm so excited to be here! This is gonna be the most epic adventure of my life!

Hold on,

0.02.644.878 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6613.23 tokens per second)
0.02.644.880 I llama_perf_context_print:        load time =     465.41 ms
0.02.644.881 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.644.883 I llama_perf_context_print:        eval time =    2159.42 ms /    32 runs   (   67.48 ms per token,    14.82 tokens per second)
0.02.644.883 I llama_perf_context_print:       total time =    2178.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.570 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.021.339 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.348 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.356 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.365 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.366 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.368 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.369 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.370 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.370 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.371 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.371 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.376 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.377 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.377 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.377 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.378 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.299 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.664 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.548 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.554 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.555 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.555 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.556 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.557 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.558 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.560 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.561 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.561 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.562 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.564 I llama_model_loader: - type  f32:   37 tensors
0.00.132.565 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.844 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.377 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.965 I llm_load_vocab: special tokens cache size = 5
0.00.272.885 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.901 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.902 I llm_load_print_meta: arch             = gemma
0.00.272.902 I llm_load_print_meta: vocab type       = SPM
0.00.272.903 I llm_load_print_meta: n_vocab          = 256000
0.00.272.903 I llm_load_print_meta: n_merges         = 0
0.00.272.904 I llm_load_print_meta: vocab_only       = 0
0.00.272.904 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.904 I llm_load_print_meta: n_embd           = 2048
0.00.272.905 I llm_load_print_meta: n_layer          = 18
0.00.272.916 I llm_load_print_meta: n_head           = 8
0.00.272.917 I llm_load_print_meta: n_head_kv        = 1
0.00.272.918 I llm_load_print_meta: n_rot            = 256
0.00.272.918 I llm_load_print_meta: n_swa            = 0
0.00.272.918 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.919 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.920 I llm_load_print_meta: n_gqa            = 8
0.00.272.921 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.922 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.922 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.924 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.924 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.925 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.925 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.926 I llm_load_print_meta: n_ff             = 16384
0.00.272.926 I llm_load_print_meta: n_expert         = 0
0.00.272.927 I llm_load_print_meta: n_expert_used    = 0
0.00.272.927 I llm_load_print_meta: causal attn      = 1
0.00.272.927 I llm_load_print_meta: pooling type     = 0
0.00.272.928 I llm_load_print_meta: rope type        = 2
0.00.272.928 I llm_load_print_meta: rope scaling     = linear
0.00.272.929 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.930 I llm_load_print_meta: freq_scale_train = 1
0.00.272.930 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.931 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.931 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.931 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.932 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.932 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.932 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.932 I llm_load_print_meta: model type       = 2B
0.00.272.933 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.934 I llm_load_print_meta: model params     = 2.51 B
0.00.272.935 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.935 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.936 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.936 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.936 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.937 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.937 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.937 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.937 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.938 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.938 I llm_load_print_meta: max token length = 93
0.00.353.337 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.353.344 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.345 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.353.345 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.353.346 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.347 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.358.476 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.482 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.482 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.483 I llama_new_context_with_model: n_batch       = 2048
0.00.358.483 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.484 I llama_new_context_with_model: flash_attn    = 0
0.00.358.486 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.487 I llama_new_context_with_model: freq_scale    = 1
0.00.358.488 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.507 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.373.223 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.235 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.333 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.583 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.589 I llama_new_context_with_model: graph nodes  = 601
0.00.374.590 I llama_new_context_with_model: graph splits = 1
0.00.374.592 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.374.592 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.304 I main: llama threadpool init, n_threads = 4
0.00.458.321 I 
0.00.458.398 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.458.402 I 
0.00.458.443 I sampler seed: 1262873915
0.00.458.454 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.458 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.458 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.460 I 
 increasities can occur in various settings, including hospitals, clinics, and healthcare facilities.

**Causes of Physician-Patient Conflict**

* **Communication breakdowns**

0.02.705.453 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6715.51 tokens per second)
0.02.705.455 I llama_perf_context_print:        load time =     457.52 ms
0.02.705.456 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.705.457 I llama_perf_context_print:        eval time =    2228.59 ms /    32 runs   (   69.64 ms per token,    14.36 tokens per second)
0.02.705.458 I llama_perf_context_print:       total time =    2247.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.173 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.359 I main: llama backend init
0.00.000.366 I main: load the model and apply lora adapter, if any
0.00.020.312 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.322 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.329 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.337 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.341 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.344 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.344 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.345 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.346 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.346 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.347 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.350 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.351 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.351 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.353 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.353 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.933 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.568 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.452 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.459 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.460 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.461 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.462 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.463 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.465 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.468 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.469 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.470 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.471 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.472 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.476 I llama_model_loader: - type  f32:   37 tensors
0.00.130.477 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.451 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.845 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.357 I llm_load_vocab: special tokens cache size = 5
0.00.273.119 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.136 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.136 I llm_load_print_meta: arch             = gemma
0.00.273.137 I llm_load_print_meta: vocab type       = SPM
0.00.273.138 I llm_load_print_meta: n_vocab          = 256000
0.00.273.138 I llm_load_print_meta: n_merges         = 0
0.00.273.138 I llm_load_print_meta: vocab_only       = 0
0.00.273.138 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.139 I llm_load_print_meta: n_embd           = 2048
0.00.273.139 I llm_load_print_meta: n_layer          = 18
0.00.273.150 I llm_load_print_meta: n_head           = 8
0.00.273.151 I llm_load_print_meta: n_head_kv        = 1
0.00.273.152 I llm_load_print_meta: n_rot            = 256
0.00.273.152 I llm_load_print_meta: n_swa            = 0
0.00.273.152 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.153 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.154 I llm_load_print_meta: n_gqa            = 8
0.00.273.155 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.156 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.156 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.158 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.158 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.158 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.159 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.160 I llm_load_print_meta: n_ff             = 16384
0.00.273.160 I llm_load_print_meta: n_expert         = 0
0.00.273.160 I llm_load_print_meta: n_expert_used    = 0
0.00.273.161 I llm_load_print_meta: causal attn      = 1
0.00.273.161 I llm_load_print_meta: pooling type     = 0
0.00.273.161 I llm_load_print_meta: rope type        = 2
0.00.273.162 I llm_load_print_meta: rope scaling     = linear
0.00.273.163 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.164 I llm_load_print_meta: freq_scale_train = 1
0.00.273.164 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.164 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.165 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.165 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.165 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.165 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.166 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.166 I llm_load_print_meta: model type       = 2B
0.00.273.167 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.167 I llm_load_print_meta: model params     = 2.51 B
0.00.273.168 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.169 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.169 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.170 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.170 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.170 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.170 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.171 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.171 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.172 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.172 I llm_load_print_meta: max token length = 93
0.00.344.332 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.344.338 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.349.339 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.345 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.346 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.346 I llama_new_context_with_model: n_batch       = 2048
0.00.349.347 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.347 I llama_new_context_with_model: flash_attn    = 0
0.00.349.349 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.350 I llama_new_context_with_model: freq_scale    = 1
0.00.349.351 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.370 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.363.635 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.647 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.735 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.970 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.976 I llama_new_context_with_model: graph nodes  = 601
0.00.364.976 I llama_new_context_with_model: graph splits = 1
0.00.364.979 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.979 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.486 I main: llama threadpool init, n_threads = 4
0.00.453.504 I 
0.00.453.577 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.453.584 I 
0.00.453.626 I sampler seed: 1857302901
0.00.453.635 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.638 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.639 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.649 I 
 increamically. 

A. Extremely
B. Incredibly
C. Remarkably
D. Remarkably so

The correct answer is D. Remark

0.02.852.217 I llama_perf_sampler_print:    sampling time =       5.15 ms /    33 runs   (    0.16 ms per token,  6409.01 tokens per second)
0.02.852.220 I llama_perf_context_print:        load time =     453.10 ms
0.02.852.221 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.852.223 I llama_perf_context_print:        eval time =    2378.49 ms /    32 runs   (   74.33 ms per token,    13.45 tokens per second)
0.02.852.224 I llama_perf_context_print:       total time =    2398.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.419s
user	0m39.187s
sys	0m9.343s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4407 (2f0ee84b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40234.09 ms
main:    total time = 40234.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.176 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.376 I main: llama backend init
0.00.000.382 I main: load the model and apply lora adapter, if any
0.00.020.514 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.525 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.538 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.543 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.544 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.547 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.548 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.548 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.549 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.549 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.550 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.554 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.555 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.556 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.556 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.557 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.311 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.159 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.016 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.022 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.023 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.023 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.024 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.025 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.025 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.028 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.029 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.029 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.030 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.032 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.036 I llama_model_loader: - type  f32:   37 tensors
0.00.131.037 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.038 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.517 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.677 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.120 I llm_load_vocab: special tokens cache size = 5
0.00.262.867 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.884 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.884 I llm_load_print_meta: arch             = gemma
0.00.262.885 I llm_load_print_meta: vocab type       = SPM
0.00.262.885 I llm_load_print_meta: n_vocab          = 256000
0.00.262.886 I llm_load_print_meta: n_merges         = 0
0.00.262.886 I llm_load_print_meta: vocab_only       = 0
0.00.262.886 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.887 I llm_load_print_meta: n_embd           = 2048
0.00.262.887 I llm_load_print_meta: n_layer          = 18
0.00.262.898 I llm_load_print_meta: n_head           = 8
0.00.262.899 I llm_load_print_meta: n_head_kv        = 1
0.00.262.899 I llm_load_print_meta: n_rot            = 256
0.00.262.900 I llm_load_print_meta: n_swa            = 0
0.00.262.901 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.901 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.902 I llm_load_print_meta: n_gqa            = 8
0.00.262.903 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.903 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.904 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.905 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.906 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.906 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.906 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.907 I llm_load_print_meta: n_ff             = 16384
0.00.262.908 I llm_load_print_meta: n_expert         = 0
0.00.262.908 I llm_load_print_meta: n_expert_used    = 0
0.00.262.908 I llm_load_print_meta: causal attn      = 1
0.00.262.908 I llm_load_print_meta: pooling type     = 0
0.00.262.909 I llm_load_print_meta: rope type        = 2
0.00.262.909 I llm_load_print_meta: rope scaling     = linear
0.00.262.911 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.911 I llm_load_print_meta: freq_scale_train = 1
0.00.262.912 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.912 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.912 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.912 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.912 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.913 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.913 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.913 I llm_load_print_meta: model type       = 2B
0.00.262.914 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.915 I llm_load_print_meta: model params     = 2.51 B
0.00.262.915 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.916 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.916 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.917 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.917 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.917 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.917 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.918 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.918 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.919 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.919 I llm_load_print_meta: max token length = 93
0.00.323.880 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.887 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.888 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.888 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.889 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.890 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.974 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.980 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.980 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.981 I llama_new_context_with_model: n_batch       = 2048
0.00.328.981 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.982 I llama_new_context_with_model: flash_attn    = 0
0.00.328.984 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.985 I llama_new_context_with_model: freq_scale    = 1
0.00.328.986 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.329.004 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.343.136 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.149 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.522 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.529 I llama_new_context_with_model: graph nodes  = 601
0.00.344.529 I llama_new_context_with_model: graph splits = 1
0.00.344.531 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.532 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.369 I main: llama threadpool init, n_threads = 4
0.00.420.385 I 
0.00.420.459 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.462 I 
0.00.420.501 I sampler seed: 2125762594
0.00.420.512 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.524 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.527 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.527 I 
 squaRED:

## The Curious Case of the Missing Widgets

**A** sudden surge in customer support tickets has sparked concern about missing widgets. While the cause

0.02.011.948 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6685.58 tokens per second)
0.02.011.951 I llama_perf_context_print:        load time =     419.97 ms
0.02.011.953 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.011.955 I llama_perf_context_print:        eval time =    1573.07 ms /    32 runs   (   49.16 ms per token,    20.34 tokens per second)
0.02.011.956 I llama_perf_context_print:       total time =    1591.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4407 (2f0ee84b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40213.22 ms
main:    total time = 40213.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.555 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.106 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.122 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.133 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.134 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.137 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.138 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.139 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.139 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.140 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.140 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.145 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.145 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.146 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.147 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.148 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.113 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.871 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.752 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.758 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.759 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.760 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.760 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.761 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.762 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.765 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.765 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.769 I llama_model_loader: - type  f32:   37 tensors
0.00.131.769 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.770 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.672 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.986 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.486 I llm_load_vocab: special tokens cache size = 5
0.00.266.126 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.141 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.142 I llm_load_print_meta: arch             = gemma
0.00.266.142 I llm_load_print_meta: vocab type       = SPM
0.00.266.143 I llm_load_print_meta: n_vocab          = 256000
0.00.266.144 I llm_load_print_meta: n_merges         = 0
0.00.266.144 I llm_load_print_meta: vocab_only       = 0
0.00.266.144 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.144 I llm_load_print_meta: n_embd           = 2048
0.00.266.145 I llm_load_print_meta: n_layer          = 18
0.00.266.155 I llm_load_print_meta: n_head           = 8
0.00.266.156 I llm_load_print_meta: n_head_kv        = 1
0.00.266.156 I llm_load_print_meta: n_rot            = 256
0.00.266.156 I llm_load_print_meta: n_swa            = 0
0.00.266.157 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.157 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.158 I llm_load_print_meta: n_gqa            = 8
0.00.266.159 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.160 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.161 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.162 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.162 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.163 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.163 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.164 I llm_load_print_meta: n_ff             = 16384
0.00.266.164 I llm_load_print_meta: n_expert         = 0
0.00.266.165 I llm_load_print_meta: n_expert_used    = 0
0.00.266.165 I llm_load_print_meta: causal attn      = 1
0.00.266.165 I llm_load_print_meta: pooling type     = 0
0.00.266.165 I llm_load_print_meta: rope type        = 2
0.00.266.166 I llm_load_print_meta: rope scaling     = linear
0.00.266.167 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.168 I llm_load_print_meta: freq_scale_train = 1
0.00.266.168 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.168 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.169 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.169 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.169 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.169 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.170 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.170 I llm_load_print_meta: model type       = 2B
0.00.266.171 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.172 I llm_load_print_meta: model params     = 2.51 B
0.00.266.172 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.173 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.173 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.174 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.174 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.174 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.175 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.175 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.175 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.176 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.176 I llm_load_print_meta: max token length = 93
0.00.323.852 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.912 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.920 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.920 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.920 I llama_new_context_with_model: n_batch       = 2048
0.00.328.921 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.921 I llama_new_context_with_model: flash_attn    = 0
0.00.328.924 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.924 I llama_new_context_with_model: freq_scale    = 1
0.00.328.925 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.328.944 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.343.574 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.589 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.684 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.973 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.980 I llama_new_context_with_model: graph nodes  = 601
0.00.344.980 I llama_new_context_with_model: graph splits = 1
0.00.344.983 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.983 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.276 I main: llama threadpool init, n_threads = 4
0.00.420.293 I 
0.00.420.369 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.372 I 
0.00.420.417 I sampler seed: 3610280406
0.00.420.428 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.431 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.432 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.432 I 
 strick at her, but she is unable to respond because she is still in shock from the experience.

What does this reveal about the nature of their relationship?

0.01.981.424 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6797.12 tokens per second)
0.01.981.427 I llama_perf_context_print:        load time =     419.49 ms
0.01.981.428 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.981.430 I llama_perf_context_print:        eval time =    1542.67 ms /    32 runs   (   48.21 ms per token,    20.74 tokens per second)
0.01.981.431 I llama_perf_context_print:       total time =    1561.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.277s
user	10m24.317s
sys	0m6.841s
