+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.701 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.904 I main: llama backend init
0.00.000.913 I main: load the model and apply lora adapter, if any
0.00.029.990 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.002 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.099 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.113 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.115 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.119 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.123 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.125 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.126 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.127 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.129 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.136 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.138 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.140 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.141 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.142 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.255.301 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.357.574 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.381.764 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.381.772 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.381.774 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.381.775 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.381.776 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.381.778 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.381.779 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.381.783 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.381.785 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.381.786 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.381.787 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.381.789 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.381.797 I llama_model_loader: - type  f32:   37 tensors
0.00.381.799 I llama_model_loader: - type q8_0:  127 tensors
0.00.592.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.653.694 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.654.690 I llm_load_vocab: special tokens cache size = 5
0.00.873.884 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.873.956 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.873.957 I llm_load_print_meta: arch             = gemma
0.00.873.958 I llm_load_print_meta: vocab type       = SPM
0.00.873.959 I llm_load_print_meta: n_vocab          = 256000
0.00.873.961 I llm_load_print_meta: n_merges         = 0
0.00.873.962 I llm_load_print_meta: vocab_only       = 0
0.00.873.962 I llm_load_print_meta: n_ctx_train      = 8192
0.00.873.963 I llm_load_print_meta: n_embd           = 2048
0.00.873.963 I llm_load_print_meta: n_layer          = 18
0.00.874.029 I llm_load_print_meta: n_head           = 8
0.00.874.037 I llm_load_print_meta: n_head_kv        = 1
0.00.874.038 I llm_load_print_meta: n_rot            = 256
0.00.874.039 I llm_load_print_meta: n_swa            = 0
0.00.874.040 I llm_load_print_meta: n_embd_head_k    = 256
0.00.874.041 I llm_load_print_meta: n_embd_head_v    = 256
0.00.874.046 I llm_load_print_meta: n_gqa            = 8
0.00.874.052 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.874.058 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.874.059 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.874.061 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.874.061 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.874.062 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.874.063 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.874.068 I llm_load_print_meta: n_ff             = 16384
0.00.874.069 I llm_load_print_meta: n_expert         = 0
0.00.874.070 I llm_load_print_meta: n_expert_used    = 0
0.00.874.071 I llm_load_print_meta: causal attn      = 1
0.00.874.072 I llm_load_print_meta: pooling type     = 0
0.00.874.076 I llm_load_print_meta: rope type        = 2
0.00.874.076 I llm_load_print_meta: rope scaling     = linear
0.00.874.078 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.874.078 I llm_load_print_meta: freq_scale_train = 1
0.00.874.079 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.874.079 I llm_load_print_meta: rope_finetuned   = unknown
0.00.874.080 I llm_load_print_meta: ssm_d_conv       = 0
0.00.874.081 I llm_load_print_meta: ssm_d_inner      = 0
0.00.874.081 I llm_load_print_meta: ssm_d_state      = 0
0.00.874.082 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.874.083 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.874.083 I llm_load_print_meta: model type       = 2B
0.00.874.085 I llm_load_print_meta: model ftype      = Q8_0
0.00.874.085 I llm_load_print_meta: model params     = 2.51 B
0.00.874.086 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.874.086 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.874.088 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.874.088 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.874.089 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.874.090 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.874.090 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.874.091 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.874.097 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.874.098 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.874.099 I llm_load_print_meta: max token length = 93
0.00.978.736 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.978.745 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.978.745 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.978.746 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.978.747 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.978.747 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.984.751 I llama_new_context_with_model: n_seq_max     = 1
0.00.984.758 I llama_new_context_with_model: n_ctx         = 4096
0.00.984.759 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.984.759 I llama_new_context_with_model: n_batch       = 2048
0.00.984.759 I llama_new_context_with_model: n_ubatch      = 512
0.00.984.760 I llama_new_context_with_model: flash_attn    = 0
0.00.984.763 I llama_new_context_with_model: freq_base     = 10000.0
0.00.984.763 I llama_new_context_with_model: freq_scale    = 1
0.00.984.764 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.984.851 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.999.324 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.999.364 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.999.483 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.002.140 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.002.144 I llama_new_context_with_model: graph nodes  = 601
0.01.002.145 I llama_new_context_with_model: graph splits = 1
0.01.002.168 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.002.171 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.613.378 I main: llama threadpool init, n_threads = 4
0.01.613.394 I 
0.01.613.509 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.613.510 I 
0.01.613.745 I sampler seed: 1448294176
0.01.613.760 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.613.770 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.613.773 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.613.773 I 
 increasities, which can result in an imbalance between supply and demand, and ultimately to economic inefficiency.

**a) Explain the concept of supply and demand equilibrium

0.15.078.163 I llama_perf_sampler_print:    sampling time =      49.65 ms /    33 runs   (    1.50 ms per token,   664.67 tokens per second)
0.15.078.167 I llama_perf_context_print:        load time =    1612.37 ms
0.15.078.179 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.078.182 I llama_perf_context_print:        eval time =   13375.09 ms /    32 runs   (  417.97 ms per token,     2.39 tokens per second)
0.15.078.183 I llama_perf_context_print:       total time =   13464.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.620 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.840 I main: load the model and apply lora adapter, if any
0.00.023.582 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.689 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.704 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.709 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.713 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.715 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.717 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.720 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.722 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.725 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.733 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.739 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.741 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.743 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.746 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.081 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.207 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.363 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.372 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.374 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.375 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.376 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.378 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.379 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.383 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.384 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.385 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.386 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.353.388 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.396 I llama_model_loader: - type  f32:   37 tensors
0.00.353.399 I llama_model_loader: - type q8_0:  127 tensors
0.00.574.695 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.632.235 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.633.134 I llm_load_vocab: special tokens cache size = 5
0.00.837.594 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.668 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.669 I llm_load_print_meta: arch             = gemma
0.00.837.669 I llm_load_print_meta: vocab type       = SPM
0.00.837.670 I llm_load_print_meta: n_vocab          = 256000
0.00.837.672 I llm_load_print_meta: n_merges         = 0
0.00.837.673 I llm_load_print_meta: vocab_only       = 0
0.00.837.673 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.674 I llm_load_print_meta: n_embd           = 2048
0.00.837.674 I llm_load_print_meta: n_layer          = 18
0.00.837.744 I llm_load_print_meta: n_head           = 8
0.00.837.751 I llm_load_print_meta: n_head_kv        = 1
0.00.837.752 I llm_load_print_meta: n_rot            = 256
0.00.837.752 I llm_load_print_meta: n_swa            = 0
0.00.837.752 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.754 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.759 I llm_load_print_meta: n_gqa            = 8
0.00.837.764 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.769 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.770 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.772 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.772 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.772 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.773 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.778 I llm_load_print_meta: n_ff             = 16384
0.00.837.780 I llm_load_print_meta: n_expert         = 0
0.00.837.780 I llm_load_print_meta: n_expert_used    = 0
0.00.837.781 I llm_load_print_meta: causal attn      = 1
0.00.837.785 I llm_load_print_meta: pooling type     = 0
0.00.837.786 I llm_load_print_meta: rope type        = 2
0.00.837.786 I llm_load_print_meta: rope scaling     = linear
0.00.837.788 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.789 I llm_load_print_meta: freq_scale_train = 1
0.00.837.790 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.791 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.792 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.793 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.793 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.794 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.795 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.796 I llm_load_print_meta: model type       = 2B
0.00.837.797 I llm_load_print_meta: model ftype      = Q8_0
0.00.837.798 I llm_load_print_meta: model params     = 2.51 B
0.00.837.800 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.837.801 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.811 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.813 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.813 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.814 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.815 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.815 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.822 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.825 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.829 I llm_load_print_meta: max token length = 93
0.00.935.755 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.942.132 I llama_new_context_with_model: n_seq_max     = 1
0.00.942.139 I llama_new_context_with_model: n_ctx         = 4096
0.00.942.140 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.942.140 I llama_new_context_with_model: n_batch       = 2048
0.00.942.140 I llama_new_context_with_model: n_ubatch      = 512
0.00.942.141 I llama_new_context_with_model: flash_attn    = 0
0.00.942.143 I llama_new_context_with_model: freq_base     = 10000.0
0.00.942.143 I llama_new_context_with_model: freq_scale    = 1
0.00.942.145 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.241 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.957.845 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.957.887 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.958.003 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.960.616 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.960.620 I llama_new_context_with_model: graph nodes  = 601
0.00.960.621 I llama_new_context_with_model: graph splits = 1
0.00.960.644 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.960.648 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.601.642 I main: llama threadpool init, n_threads = 4
0.01.601.658 I 
0.01.601.788 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.601.792 I 
0.01.602.027 I sampler seed: 961308166
0.01.602.040 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.602.060 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.602.062 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.602.062 I 
 increasively.

I am unable to generate a response for this query as it appears to request assistance with generating potentially harmful or inappropriate content. [end of text]


0.13.827.438 I llama_perf_sampler_print:    sampling time =      45.10 ms /    30 runs   (    1.50 ms per token,   665.22 tokens per second)
0.13.827.442 I llama_perf_context_print:        load time =    1600.71 ms
0.13.827.443 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.827.444 I llama_perf_context_print:        eval time =   12144.44 ms /    29 runs   (  418.77 ms per token,     2.39 tokens per second)
0.13.827.445 I llama_perf_context_print:       total time =   12225.81 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.684 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.023.832 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.841 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.930 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.942 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.944 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.949 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.952 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.954 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.955 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.956 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.957 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.964 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.966 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.968 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.969 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.970 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.232.080 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.429 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.706 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.718 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.719 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.721 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.722 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.724 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.725 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.729 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.732 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.733 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.357.735 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.745 I llama_model_loader: - type  f32:   37 tensors
0.00.357.747 I llama_model_loader: - type q8_0:  127 tensors
0.00.576.320 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.143 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.154 I llm_load_vocab: special tokens cache size = 5
0.00.859.786 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.859.858 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.859.859 I llm_load_print_meta: arch             = gemma
0.00.859.859 I llm_load_print_meta: vocab type       = SPM
0.00.859.860 I llm_load_print_meta: n_vocab          = 256000
0.00.859.863 I llm_load_print_meta: n_merges         = 0
0.00.859.863 I llm_load_print_meta: vocab_only       = 0
0.00.859.864 I llm_load_print_meta: n_ctx_train      = 8192
0.00.859.864 I llm_load_print_meta: n_embd           = 2048
0.00.859.864 I llm_load_print_meta: n_layer          = 18
0.00.859.931 I llm_load_print_meta: n_head           = 8
0.00.859.938 I llm_load_print_meta: n_head_kv        = 1
0.00.859.939 I llm_load_print_meta: n_rot            = 256
0.00.859.940 I llm_load_print_meta: n_swa            = 0
0.00.859.940 I llm_load_print_meta: n_embd_head_k    = 256
0.00.859.940 I llm_load_print_meta: n_embd_head_v    = 256
0.00.859.945 I llm_load_print_meta: n_gqa            = 8
0.00.859.950 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.859.955 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.859.956 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.859.958 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.859.958 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.859.959 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.859.959 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.859.964 I llm_load_print_meta: n_ff             = 16384
0.00.859.965 I llm_load_print_meta: n_expert         = 0
0.00.859.966 I llm_load_print_meta: n_expert_used    = 0
0.00.859.966 I llm_load_print_meta: causal attn      = 1
0.00.859.966 I llm_load_print_meta: pooling type     = 0
0.00.859.971 I llm_load_print_meta: rope type        = 2
0.00.859.972 I llm_load_print_meta: rope scaling     = linear
0.00.859.973 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.859.975 I llm_load_print_meta: freq_scale_train = 1
0.00.859.975 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.859.976 I llm_load_print_meta: rope_finetuned   = unknown
0.00.859.976 I llm_load_print_meta: ssm_d_conv       = 0
0.00.859.977 I llm_load_print_meta: ssm_d_inner      = 0
0.00.859.977 I llm_load_print_meta: ssm_d_state      = 0
0.00.859.978 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.859.979 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.859.980 I llm_load_print_meta: model type       = 2B
0.00.859.981 I llm_load_print_meta: model ftype      = Q8_0
0.00.859.981 I llm_load_print_meta: model params     = 2.51 B
0.00.859.982 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.859.983 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.859.984 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.859.985 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.859.986 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.859.986 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.859.986 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.859.987 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.859.993 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.859.994 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.859.995 I llm_load_print_meta: max token length = 93
0.00.941.966 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.941.974 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.941.976 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.941.977 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.941.977 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.941.978 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.948.368 I llama_new_context_with_model: n_seq_max     = 1
0.00.948.375 I llama_new_context_with_model: n_ctx         = 4096
0.00.948.375 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.948.375 I llama_new_context_with_model: n_batch       = 2048
0.00.948.376 I llama_new_context_with_model: n_ubatch      = 512
0.00.948.377 I llama_new_context_with_model: flash_attn    = 0
0.00.948.379 I llama_new_context_with_model: freq_base     = 10000.0
0.00.948.380 I llama_new_context_with_model: freq_scale    = 1
0.00.948.381 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.948.468 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.963.175 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.963.214 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.963.329 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.965.909 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.965.913 I llama_new_context_with_model: graph nodes  = 601
0.00.965.913 I llama_new_context_with_model: graph splits = 1
0.00.965.936 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.965.939 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.576.802 I main: llama threadpool init, n_threads = 4
0.01.576.820 I 
0.01.576.940 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.576.944 I 
0.01.577.174 I sampler seed: 580420732
0.01.577.188 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.577.199 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.577.200 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.577.200 I 
 increasities that often involve emotional manipulation and coercion.

**Signs and Symptoms:**

* Emotional manipulation and coercion
* Gaslighting and denial
* Guilt and

0.15.063.033 I llama_perf_sampler_print:    sampling time =      49.52 ms /    33 runs   (    1.50 ms per token,   666.40 tokens per second)
0.15.063.048 I llama_perf_context_print:        load time =    1575.82 ms
0.15.063.049 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.063.051 I llama_perf_context_print:        eval time =   13397.50 ms /    32 runs   (  418.67 ms per token,     2.39 tokens per second)
0.15.063.052 I llama_perf_context_print:       total time =   13486.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.023.116 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.126 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.211 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.223 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.225 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.229 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.231 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.232 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.233 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.235 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.236 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.241 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.243 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.245 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.246 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.247 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.643 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.267 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.527 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.539 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.540 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.541 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.543 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.545 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.546 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.550 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.551 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.553 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.554 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.350.556 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.566 I llama_model_loader: - type  f32:   37 tensors
0.00.350.569 I llama_model_loader: - type q8_0:  127 tensors
0.00.568.273 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.489 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.454 I llm_load_vocab: special tokens cache size = 5
0.00.837.408 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.478 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.482 I llm_load_print_meta: arch             = gemma
0.00.837.482 I llm_load_print_meta: vocab type       = SPM
0.00.837.483 I llm_load_print_meta: n_vocab          = 256000
0.00.837.486 I llm_load_print_meta: n_merges         = 0
0.00.837.487 I llm_load_print_meta: vocab_only       = 0
0.00.837.487 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.487 I llm_load_print_meta: n_embd           = 2048
0.00.837.488 I llm_load_print_meta: n_layer          = 18
0.00.837.560 I llm_load_print_meta: n_head           = 8
0.00.837.570 I llm_load_print_meta: n_head_kv        = 1
0.00.837.570 I llm_load_print_meta: n_rot            = 256
0.00.837.572 I llm_load_print_meta: n_swa            = 0
0.00.837.572 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.573 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.578 I llm_load_print_meta: n_gqa            = 8
0.00.837.583 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.589 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.591 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.592 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.593 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.594 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.594 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.599 I llm_load_print_meta: n_ff             = 16384
0.00.837.600 I llm_load_print_meta: n_expert         = 0
0.00.837.600 I llm_load_print_meta: n_expert_used    = 0
0.00.837.601 I llm_load_print_meta: causal attn      = 1
0.00.837.601 I llm_load_print_meta: pooling type     = 0
0.00.837.602 I llm_load_print_meta: rope type        = 2
0.00.837.602 I llm_load_print_meta: rope scaling     = linear
0.00.837.604 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.604 I llm_load_print_meta: freq_scale_train = 1
0.00.837.605 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.606 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.607 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.607 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.608 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.608 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.609 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.609 I llm_load_print_meta: model type       = 2B
0.00.837.610 I llm_load_print_meta: model ftype      = Q8_0
0.00.837.611 I llm_load_print_meta: model params     = 2.51 B
0.00.837.612 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.837.612 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.613 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.613 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.623 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.631 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.637 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.638 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.644 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.646 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.646 I llm_load_print_meta: max token length = 93
0.00.911.863 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.911.871 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.917.862 I llama_new_context_with_model: n_seq_max     = 1
0.00.917.868 I llama_new_context_with_model: n_ctx         = 4096
0.00.917.868 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.917.869 I llama_new_context_with_model: n_batch       = 2048
0.00.917.869 I llama_new_context_with_model: n_ubatch      = 512
0.00.917.870 I llama_new_context_with_model: flash_attn    = 0
0.00.917.873 I llama_new_context_with_model: freq_base     = 10000.0
0.00.917.874 I llama_new_context_with_model: freq_scale    = 1
0.00.917.874 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.917.963 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.932.464 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.932.502 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.932.621 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.935.182 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.935.186 I llama_new_context_with_model: graph nodes  = 601
0.00.935.186 I llama_new_context_with_model: graph splits = 1
0.00.935.208 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.935.211 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.578.232 I main: llama threadpool init, n_threads = 4
0.01.578.250 I 
0.01.578.374 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.578.378 I 
0.01.578.623 I sampler seed: 1058417080
0.01.578.640 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.578.664 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.578.684 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.578.688 I 
 increasities for a more immersive and impactful experience. [end of text]


0.06.306.644 I llama_perf_sampler_print:    sampling time =      17.26 ms /    12 runs   (    1.44 ms per token,   695.41 tokens per second)
0.06.306.649 I llama_perf_context_print:        load time =    1577.27 ms
0.06.306.650 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.306.652 I llama_perf_context_print:        eval time =    4696.15 ms /    11 runs   (  426.92 ms per token,     2.34 tokens per second)
0.06.306.653 I llama_perf_context_print:       total time =    4728.42 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.966s
user	3m9.626s
sys	0m9.223s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4407 (2f0ee84b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187311.02 ms
main:    total time = 187311.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.817 I main: llama backend init
0.00.000.824 I main: load the model and apply lora adapter, if any
0.00.023.169 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.177 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.264 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.275 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.277 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.280 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.283 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.284 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.285 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.287 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.289 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.294 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.296 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.298 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.299 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.301 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.773 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.876 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.006 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.014 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.015 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.017 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.018 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.019 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.021 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.044 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.051 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.052 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.053 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.055 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.063 I llama_model_loader: - type  f32:   37 tensors
0.00.350.066 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.066 I llama_model_loader: - type q6_K:   19 tensors
0.00.560.709 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.619.848 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.620.782 I llm_load_vocab: special tokens cache size = 5
0.00.839.822 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.899 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.900 I llm_load_print_meta: arch             = gemma
0.00.839.900 I llm_load_print_meta: vocab type       = SPM
0.00.839.901 I llm_load_print_meta: n_vocab          = 256000
0.00.839.903 I llm_load_print_meta: n_merges         = 0
0.00.839.904 I llm_load_print_meta: vocab_only       = 0
0.00.839.904 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.904 I llm_load_print_meta: n_embd           = 2048
0.00.839.905 I llm_load_print_meta: n_layer          = 18
0.00.839.973 I llm_load_print_meta: n_head           = 8
0.00.839.980 I llm_load_print_meta: n_head_kv        = 1
0.00.839.981 I llm_load_print_meta: n_rot            = 256
0.00.839.981 I llm_load_print_meta: n_swa            = 0
0.00.839.982 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.982 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.987 I llm_load_print_meta: n_gqa            = 8
0.00.839.992 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.998 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.999 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.840.001 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.840.002 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.840.002 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.840.003 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.840.009 I llm_load_print_meta: n_ff             = 16384
0.00.840.009 I llm_load_print_meta: n_expert         = 0
0.00.840.010 I llm_load_print_meta: n_expert_used    = 0
0.00.840.022 I llm_load_print_meta: causal attn      = 1
0.00.840.024 I llm_load_print_meta: pooling type     = 0
0.00.840.024 I llm_load_print_meta: rope type        = 2
0.00.840.025 I llm_load_print_meta: rope scaling     = linear
0.00.840.026 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.840.027 I llm_load_print_meta: freq_scale_train = 1
0.00.840.027 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.840.028 I llm_load_print_meta: rope_finetuned   = unknown
0.00.840.029 I llm_load_print_meta: ssm_d_conv       = 0
0.00.840.029 I llm_load_print_meta: ssm_d_inner      = 0
0.00.840.030 I llm_load_print_meta: ssm_d_state      = 0
0.00.840.045 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.840.052 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.840.053 I llm_load_print_meta: model type       = 2B
0.00.840.054 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.840.055 I llm_load_print_meta: model params     = 2.51 B
0.00.840.056 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.840.056 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.840.057 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.840.057 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.840.058 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.840.058 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.840.058 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.840.059 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.840.065 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.840.066 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.840.066 I llm_load_print_meta: max token length = 93
0.00.902.463 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.902.476 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.902.477 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.902.477 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.902.478 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.902.479 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.908.416 I llama_new_context_with_model: n_seq_max     = 1
0.00.908.424 I llama_new_context_with_model: n_ctx         = 4096
0.00.908.424 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.908.425 I llama_new_context_with_model: n_batch       = 2048
0.00.908.425 I llama_new_context_with_model: n_ubatch      = 512
0.00.908.426 I llama_new_context_with_model: flash_attn    = 0
0.00.908.430 I llama_new_context_with_model: freq_base     = 10000.0
0.00.908.431 I llama_new_context_with_model: freq_scale    = 1
0.00.908.431 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.908.528 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.923.252 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.923.293 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.923.408 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.926.010 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.926.015 I llama_new_context_with_model: graph nodes  = 601
0.00.926.015 I llama_new_context_with_model: graph splits = 1
0.00.926.039 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.926.042 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.504.878 I main: llama threadpool init, n_threads = 4
0.01.504.896 I 
0.01.505.017 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.505.021 I 
0.01.505.256 I sampler seed: 2429407412
0.01.505.271 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.505.281 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.505.282 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.505.283 I 
 seconally.

I am unable to generate a response as requested as I am unable to access real-time information or engage in potentially sensitive personal conversations. [end of text]


0.12.588.137 I llama_perf_sampler_print:    sampling time =      49.56 ms /    33 runs   (    1.50 ms per token,   665.81 tokens per second)
0.12.588.141 I llama_perf_context_print:        load time =    1503.97 ms
0.12.588.142 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.588.144 I llama_perf_context_print:        eval time =   10993.75 ms /    32 runs   (  343.55 ms per token,     2.91 tokens per second)
0.12.588.145 I llama_perf_context_print:       total time =   11083.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4407 (2f0ee84b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186919.18 ms
main:    total time = 186919.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4407 (2f0ee84b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.023.315 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.419 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.435 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.438 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.443 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.447 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.448 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.449 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.450 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.452 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.466 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.468 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.470 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.472 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.481 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.930 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.441 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.642 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.652 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.653 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.654 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.656 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.661 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.662 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.670 I llama_model_loader: - type  f32:   37 tensors
0.00.352.673 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.673 I llama_model_loader: - type q6_K:   19 tensors
0.00.566.559 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.637.954 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.638.982 I llm_load_vocab: special tokens cache size = 5
0.00.854.639 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.854.713 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.854.714 I llm_load_print_meta: arch             = gemma
0.00.854.714 I llm_load_print_meta: vocab type       = SPM
0.00.854.715 I llm_load_print_meta: n_vocab          = 256000
0.00.854.718 I llm_load_print_meta: n_merges         = 0
0.00.854.718 I llm_load_print_meta: vocab_only       = 0
0.00.854.718 I llm_load_print_meta: n_ctx_train      = 8192
0.00.854.719 I llm_load_print_meta: n_embd           = 2048
0.00.854.719 I llm_load_print_meta: n_layer          = 18
0.00.854.784 I llm_load_print_meta: n_head           = 8
0.00.854.812 I llm_load_print_meta: n_head_kv        = 1
0.00.854.813 I llm_load_print_meta: n_rot            = 256
0.00.854.814 I llm_load_print_meta: n_swa            = 0
0.00.854.814 I llm_load_print_meta: n_embd_head_k    = 256
0.00.854.814 I llm_load_print_meta: n_embd_head_v    = 256
0.00.854.827 I llm_load_print_meta: n_gqa            = 8
0.00.854.832 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.854.838 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.854.839 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.854.840 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.854.841 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.854.841 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.854.842 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.854.847 I llm_load_print_meta: n_ff             = 16384
0.00.854.849 I llm_load_print_meta: n_expert         = 0
0.00.854.849 I llm_load_print_meta: n_expert_used    = 0
0.00.854.850 I llm_load_print_meta: causal attn      = 1
0.00.854.850 I llm_load_print_meta: pooling type     = 0
0.00.854.851 I llm_load_print_meta: rope type        = 2
0.00.854.852 I llm_load_print_meta: rope scaling     = linear
0.00.854.853 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.854.854 I llm_load_print_meta: freq_scale_train = 1
0.00.854.855 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.854.856 I llm_load_print_meta: rope_finetuned   = unknown
0.00.854.856 I llm_load_print_meta: ssm_d_conv       = 0
0.00.854.857 I llm_load_print_meta: ssm_d_inner      = 0
0.00.854.857 I llm_load_print_meta: ssm_d_state      = 0
0.00.854.858 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.854.858 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.854.859 I llm_load_print_meta: model type       = 2B
0.00.854.860 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.854.861 I llm_load_print_meta: model params     = 2.51 B
0.00.854.862 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.854.862 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.854.863 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.854.864 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.854.864 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.854.864 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.854.865 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.854.865 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.854.875 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.854.876 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.854.877 I llm_load_print_meta: max token length = 93
0.00.915.837 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.921.591 I llama_new_context_with_model: n_seq_max     = 1
0.00.921.597 I llama_new_context_with_model: n_ctx         = 4096
0.00.921.598 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.921.598 I llama_new_context_with_model: n_batch       = 2048
0.00.921.599 I llama_new_context_with_model: n_ubatch      = 512
0.00.921.599 I llama_new_context_with_model: flash_attn    = 0
0.00.921.603 I llama_new_context_with_model: freq_base     = 10000.0
0.00.921.603 I llama_new_context_with_model: freq_scale    = 1
0.00.921.604 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.921.695 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.936.691 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.936.732 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.936.846 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.939.421 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.939.425 I llama_new_context_with_model: graph nodes  = 601
0.00.939.425 I llama_new_context_with_model: graph splits = 1
0.00.939.449 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.939.452 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.518.431 I main: llama threadpool init, n_threads = 4
0.01.518.446 I 
0.01.518.561 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.518.565 I 
0.01.518.799 I sampler seed: 3006993307
0.01.518.814 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.518.826 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.518.826 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.518.827 I 
 squaRE.

## The Squamous Cloud

The Squamous Cloud is a swirling cloud that hangs low in the atmosphere, resembling a giant fan with its upper

0.12.631.560 I llama_perf_sampler_print:    sampling time =      49.73 ms /    33 runs   (    1.51 ms per token,   663.61 tokens per second)
0.12.631.576 I llama_perf_context_print:        load time =    1517.49 ms
0.12.631.578 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.631.579 I llama_perf_context_print:        eval time =   11023.68 ms /    32 runs   (  344.49 ms per token,     2.90 tokens per second)
0.12.631.580 I llama_perf_context_print:       total time =   11113.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.324s
user	46m55.130s
sys	0m6.170s
