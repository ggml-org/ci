+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.594 I build: 4040 (3bcd40b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.794 I main: llama backend init
0.00.000.926 I main: load the model and apply lora adapter, if any
0.00.021.552 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.559 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.566 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.571 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.572 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.576 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.577 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.577 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.578 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.579 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.579 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.583 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.588 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.588 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.588 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.589 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.221 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.222 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.037 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.043 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.044 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.045 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.045 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.046 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.047 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.049 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.049 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.050 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.051 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.052 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.055 I llama_model_loader: - type  f32:   37 tensors
0.00.132.056 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.972 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.712 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.316 I llm_load_vocab: special tokens cache size = 5
0.00.271.201 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.216 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.217 I llm_load_print_meta: arch             = gemma
0.00.271.217 I llm_load_print_meta: vocab type       = SPM
0.00.271.218 I llm_load_print_meta: n_vocab          = 256000
0.00.271.219 I llm_load_print_meta: n_merges         = 0
0.00.271.219 I llm_load_print_meta: vocab_only       = 0
0.00.271.219 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.219 I llm_load_print_meta: n_embd           = 2048
0.00.271.220 I llm_load_print_meta: n_layer          = 18
0.00.271.232 I llm_load_print_meta: n_head           = 8
0.00.271.233 I llm_load_print_meta: n_head_kv        = 1
0.00.271.233 I llm_load_print_meta: n_rot            = 256
0.00.271.233 I llm_load_print_meta: n_swa            = 0
0.00.271.234 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.234 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.235 I llm_load_print_meta: n_gqa            = 8
0.00.271.236 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.237 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.238 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.239 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.239 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.240 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.240 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.241 I llm_load_print_meta: n_ff             = 16384
0.00.271.241 I llm_load_print_meta: n_expert         = 0
0.00.271.241 I llm_load_print_meta: n_expert_used    = 0
0.00.271.242 I llm_load_print_meta: causal attn      = 1
0.00.271.242 I llm_load_print_meta: pooling type     = 0
0.00.271.242 I llm_load_print_meta: rope type        = 2
0.00.271.243 I llm_load_print_meta: rope scaling     = linear
0.00.271.244 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.245 I llm_load_print_meta: freq_scale_train = 1
0.00.271.245 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.246 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.246 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.246 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.246 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.247 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.247 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.247 I llm_load_print_meta: model type       = 2B
0.00.271.248 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.249 I llm_load_print_meta: model params     = 2.51 B
0.00.271.250 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.250 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.251 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.251 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.251 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.252 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.252 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.252 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.253 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.253 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.253 I llm_load_print_meta: max token length = 93
0.00.371.781 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.371.789 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.371.790 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.371.790 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.371.791 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.371.791 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.377.118 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.123 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.124 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.124 I llama_new_context_with_model: n_batch       = 2048
0.00.377.125 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.125 I llama_new_context_with_model: flash_attn    = 0
0.00.377.127 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.128 I llama_new_context_with_model: freq_scale    = 1
0.00.377.129 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.392.333 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.346 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.433 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.668 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.673 I llama_new_context_with_model: graph nodes  = 601
0.00.393.674 I llama_new_context_with_model: graph splits = 1
0.00.393.676 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.326 I main: llama threadpool init, n_threads = 4
0.00.479.340 I 
0.00.479.413 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.479.416 I 
0.00.479.457 I sampler seed: 606606739
0.00.479.468 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.472 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.473 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.474 I 
 increasities.

I do not understand the meaning of this sentence. Can you please explain it to me?

I apologize, but I am unable to provide

0.02.728.561 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6991.53 tokens per second)
0.02.728.563 I llama_perf_context_print:        load time =     478.38 ms
0.02.728.564 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.565 I llama_perf_context_print:        eval time =    2230.42 ms /    32 runs   (   69.70 ms per token,    14.35 tokens per second)
0.02.728.566 I llama_perf_context_print:       total time =    2249.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.537 I build: 4040 (3bcd40b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.857 I main: load the model and apply lora adapter, if any
0.00.021.007 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.023 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.031 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.032 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.036 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.037 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.037 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.038 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.038 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.038 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.043 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.044 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.044 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.045 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.046 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.079 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.391 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.233 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.240 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.241 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.242 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.243 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.244 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.245 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.250 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.251 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.252 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.256 I llama_model_loader: - type  f32:   37 tensors
0.00.132.257 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.754 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.301 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.819 I llm_load_vocab: special tokens cache size = 5
0.00.269.541 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.557 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.558 I llm_load_print_meta: arch             = gemma
0.00.269.558 I llm_load_print_meta: vocab type       = SPM
0.00.269.559 I llm_load_print_meta: n_vocab          = 256000
0.00.269.559 I llm_load_print_meta: n_merges         = 0
0.00.269.559 I llm_load_print_meta: vocab_only       = 0
0.00.269.560 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.560 I llm_load_print_meta: n_embd           = 2048
0.00.269.560 I llm_load_print_meta: n_layer          = 18
0.00.269.572 I llm_load_print_meta: n_head           = 8
0.00.269.573 I llm_load_print_meta: n_head_kv        = 1
0.00.269.574 I llm_load_print_meta: n_rot            = 256
0.00.269.574 I llm_load_print_meta: n_swa            = 0
0.00.269.574 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.575 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.576 I llm_load_print_meta: n_gqa            = 8
0.00.269.577 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.578 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.579 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.580 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.581 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.581 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.581 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.582 I llm_load_print_meta: n_ff             = 16384
0.00.269.582 I llm_load_print_meta: n_expert         = 0
0.00.269.583 I llm_load_print_meta: n_expert_used    = 0
0.00.269.583 I llm_load_print_meta: causal attn      = 1
0.00.269.584 I llm_load_print_meta: pooling type     = 0
0.00.269.584 I llm_load_print_meta: rope type        = 2
0.00.269.585 I llm_load_print_meta: rope scaling     = linear
0.00.269.587 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.588 I llm_load_print_meta: freq_scale_train = 1
0.00.269.588 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.589 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.589 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.589 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.589 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.590 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.590 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.591 I llm_load_print_meta: model type       = 2B
0.00.269.592 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.593 I llm_load_print_meta: model params     = 2.51 B
0.00.269.594 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.594 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.595 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.595 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.596 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.596 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.597 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.597 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.597 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.598 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.598 I llm_load_print_meta: max token length = 93
0.00.366.609 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.973 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.979 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.979 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.980 I llama_new_context_with_model: n_batch       = 2048
0.00.371.980 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.980 I llama_new_context_with_model: flash_attn    = 0
0.00.371.983 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.983 I llama_new_context_with_model: freq_scale    = 1
0.00.371.984 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.372 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.387 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.477 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.694 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.701 I llama_new_context_with_model: graph nodes  = 601
0.00.388.701 I llama_new_context_with_model: graph splits = 1
0.00.388.703 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.770 I main: llama threadpool init, n_threads = 4
0.00.472.784 I 
0.00.472.865 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.869 I 
0.00.472.919 I sampler seed: 1211227920
0.00.472.933 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.937 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.938 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.939 I 
 increasities, and other forms of sexual harassment.

Sexual harassment is a pervasive issue in our society, affecting millions of people every year. It can take many

0.02.688.483 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7013.82 tokens per second)
0.02.688.485 I llama_perf_context_print:        load time =     471.89 ms
0.02.688.486 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.688.487 I llama_perf_context_print:        eval time =    2197.32 ms /    32 runs   (   68.67 ms per token,    14.56 tokens per second)
0.02.688.488 I llama_perf_context_print:       total time =    2215.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.532 I build: 4040 (3bcd40b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.897 I main: load the model and apply lora adapter, if any
0.00.021.346 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.355 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.362 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.367 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.369 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.373 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.377 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.379 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.379 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.380 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.381 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.385 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.386 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.387 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.388 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.389 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.087 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.737 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.539 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.545 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.546 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.547 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.548 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.549 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.550 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.553 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.554 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.554 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.555 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.557 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.560 I llama_model_loader: - type  f32:   37 tensors
0.00.131.561 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.790 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.849 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.504 I llm_load_vocab: special tokens cache size = 5
0.00.263.243 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.260 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.260 I llm_load_print_meta: arch             = gemma
0.00.263.261 I llm_load_print_meta: vocab type       = SPM
0.00.263.261 I llm_load_print_meta: n_vocab          = 256000
0.00.263.262 I llm_load_print_meta: n_merges         = 0
0.00.263.262 I llm_load_print_meta: vocab_only       = 0
0.00.263.262 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.263 I llm_load_print_meta: n_embd           = 2048
0.00.263.263 I llm_load_print_meta: n_layer          = 18
0.00.263.275 I llm_load_print_meta: n_head           = 8
0.00.263.276 I llm_load_print_meta: n_head_kv        = 1
0.00.263.277 I llm_load_print_meta: n_rot            = 256
0.00.263.277 I llm_load_print_meta: n_swa            = 0
0.00.263.277 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.278 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.279 I llm_load_print_meta: n_gqa            = 8
0.00.263.280 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.280 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.281 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.283 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.283 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.283 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.283 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.284 I llm_load_print_meta: n_ff             = 16384
0.00.263.285 I llm_load_print_meta: n_expert         = 0
0.00.263.285 I llm_load_print_meta: n_expert_used    = 0
0.00.263.285 I llm_load_print_meta: causal attn      = 1
0.00.263.286 I llm_load_print_meta: pooling type     = 0
0.00.263.286 I llm_load_print_meta: rope type        = 2
0.00.263.287 I llm_load_print_meta: rope scaling     = linear
0.00.263.288 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.289 I llm_load_print_meta: freq_scale_train = 1
0.00.263.289 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.289 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.289 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.290 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.290 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.290 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.290 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.291 I llm_load_print_meta: model type       = 2B
0.00.263.291 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.292 I llm_load_print_meta: model params     = 2.51 B
0.00.263.293 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.293 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.294 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.295 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.295 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.296 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.296 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.296 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.297 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.297 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.297 I llm_load_print_meta: max token length = 93
0.00.352.072 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.352.081 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.082 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.352.083 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.352.083 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.084 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.357.495 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.503 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.503 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.504 I llama_new_context_with_model: n_batch       = 2048
0.00.357.504 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.505 I llama_new_context_with_model: flash_attn    = 0
0.00.357.508 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.509 I llama_new_context_with_model: freq_scale    = 1
0.00.357.510 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.777 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.792 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.880 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.127 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.132 I llama_new_context_with_model: graph nodes  = 601
0.00.374.133 I llama_new_context_with_model: graph splits = 1
0.00.374.135 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.519 I main: llama threadpool init, n_threads = 4
0.00.457.533 I 
0.00.457.624 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.457.627 I 
0.00.457.679 I sampler seed: 2412408223
0.00.457.690 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.694 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.696 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.696 I 
 increasities for the following reaction:

$$2Ag^+ + Sn^{2+} \longrightarrow 2Ag + Sn^{4+}$$

The standard reduction

0.02.606.187 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6394.11 tokens per second)
0.02.606.189 I llama_perf_context_print:        load time =     456.60 ms
0.02.606.190 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.606.192 I llama_perf_context_print:        eval time =    2128.72 ms /    32 runs   (   66.52 ms per token,    15.03 tokens per second)
0.02.606.192 I llama_perf_context_print:       total time =    2148.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.534 I build: 4040 (3bcd40b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.020.916 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.926 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.934 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.939 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.943 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.947 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.948 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.950 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.953 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.954 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.954 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.959 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.960 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.961 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.962 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.963 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.795 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.165 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.135 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.142 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.143 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.144 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.144 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.145 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.146 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.148 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.149 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.150 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.151 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.151 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.155 I llama_model_loader: - type  f32:   37 tensors
0.00.132.156 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.871 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.585 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.146 I llm_load_vocab: special tokens cache size = 5
0.00.275.838 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.853 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.854 I llm_load_print_meta: arch             = gemma
0.00.275.854 I llm_load_print_meta: vocab type       = SPM
0.00.275.855 I llm_load_print_meta: n_vocab          = 256000
0.00.275.855 I llm_load_print_meta: n_merges         = 0
0.00.275.855 I llm_load_print_meta: vocab_only       = 0
0.00.275.856 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.856 I llm_load_print_meta: n_embd           = 2048
0.00.275.857 I llm_load_print_meta: n_layer          = 18
0.00.275.868 I llm_load_print_meta: n_head           = 8
0.00.275.869 I llm_load_print_meta: n_head_kv        = 1
0.00.275.870 I llm_load_print_meta: n_rot            = 256
0.00.275.870 I llm_load_print_meta: n_swa            = 0
0.00.275.871 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.871 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.872 I llm_load_print_meta: n_gqa            = 8
0.00.275.873 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.874 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.874 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.876 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.877 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.877 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.877 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.878 I llm_load_print_meta: n_ff             = 16384
0.00.275.879 I llm_load_print_meta: n_expert         = 0
0.00.275.879 I llm_load_print_meta: n_expert_used    = 0
0.00.275.879 I llm_load_print_meta: causal attn      = 1
0.00.275.879 I llm_load_print_meta: pooling type     = 0
0.00.275.880 I llm_load_print_meta: rope type        = 2
0.00.275.880 I llm_load_print_meta: rope scaling     = linear
0.00.275.881 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.882 I llm_load_print_meta: freq_scale_train = 1
0.00.275.882 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.883 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.883 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.883 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.883 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.884 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.884 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.885 I llm_load_print_meta: model type       = 2B
0.00.275.885 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.886 I llm_load_print_meta: model params     = 2.51 B
0.00.275.887 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.887 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.888 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.888 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.889 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.889 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.889 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.889 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.890 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.890 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.891 I llm_load_print_meta: max token length = 93
0.00.347.908 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.347.915 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.353.082 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.088 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.088 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.089 I llama_new_context_with_model: n_batch       = 2048
0.00.353.089 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.090 I llama_new_context_with_model: flash_attn    = 0
0.00.353.092 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.093 I llama_new_context_with_model: freq_scale    = 1
0.00.353.094 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.150 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.165 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.263 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.506 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.513 I llama_new_context_with_model: graph nodes  = 601
0.00.369.513 I llama_new_context_with_model: graph splits = 1
0.00.369.514 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.365 I main: llama threadpool init, n_threads = 4
0.00.456.378 I 
0.00.456.467 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.456.470 I 
0.00.456.517 I sampler seed: 996457448
0.00.456.528 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.537 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.541 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.541 I 
 increamentalism:

**a) What is the principle behind this theory?**
The principle behind this theory is that consciousness is a fundamental property of physical

0.02.833.656 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6850.74 tokens per second)
0.02.833.659 I llama_perf_context_print:        load time =     455.47 ms
0.02.833.660 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.833.662 I llama_perf_context_print:        eval time =    2358.41 ms /    32 runs   (   73.70 ms per token,    13.57 tokens per second)
0.02.833.663 I llama_perf_context_print:       total time =    2377.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.339s
user	0m38.803s
sys	0m9.426s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4040 (3bcd40b3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32112.89 ms
main:    total time = 32112.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.560 I build: 4040 (3bcd40b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.778 I main: llama backend init
0.00.000.924 I main: load the model and apply lora adapter, if any
0.00.021.593 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.602 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.611 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.616 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.621 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.626 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.627 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.627 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.628 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.629 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.631 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.635 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.636 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.637 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.637 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.638 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.293 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.683 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.488 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.494 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.495 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.495 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.496 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.497 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.498 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.500 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.500 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.501 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.502 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.502 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.507 I llama_model_loader: - type  f32:   37 tensors
0.00.131.508 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.510 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.564 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.673 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.168 I llm_load_vocab: special tokens cache size = 5
0.00.264.688 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.705 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.706 I llm_load_print_meta: arch             = gemma
0.00.264.707 I llm_load_print_meta: vocab type       = SPM
0.00.264.708 I llm_load_print_meta: n_vocab          = 256000
0.00.264.708 I llm_load_print_meta: n_merges         = 0
0.00.264.708 I llm_load_print_meta: vocab_only       = 0
0.00.264.709 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.709 I llm_load_print_meta: n_embd           = 2048
0.00.264.709 I llm_load_print_meta: n_layer          = 18
0.00.264.722 I llm_load_print_meta: n_head           = 8
0.00.264.723 I llm_load_print_meta: n_head_kv        = 1
0.00.264.723 I llm_load_print_meta: n_rot            = 256
0.00.264.723 I llm_load_print_meta: n_swa            = 0
0.00.264.723 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.724 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.725 I llm_load_print_meta: n_gqa            = 8
0.00.264.726 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.726 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.727 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.729 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.729 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.729 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.729 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.730 I llm_load_print_meta: n_ff             = 16384
0.00.264.731 I llm_load_print_meta: n_expert         = 0
0.00.264.731 I llm_load_print_meta: n_expert_used    = 0
0.00.264.731 I llm_load_print_meta: causal attn      = 1
0.00.264.732 I llm_load_print_meta: pooling type     = 0
0.00.264.732 I llm_load_print_meta: rope type        = 2
0.00.264.732 I llm_load_print_meta: rope scaling     = linear
0.00.264.734 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.734 I llm_load_print_meta: freq_scale_train = 1
0.00.264.734 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.735 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.735 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.735 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.735 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.736 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.736 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.736 I llm_load_print_meta: model type       = 2B
0.00.264.737 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.738 I llm_load_print_meta: model params     = 2.51 B
0.00.264.738 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.739 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.739 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.739 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.740 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.740 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.740 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.741 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.741 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.741 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.742 I llm_load_print_meta: max token length = 93
0.00.327.196 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.327.202 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.327.203 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.327.203 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.327.204 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.327.205 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.486 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.492 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.493 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.493 I llama_new_context_with_model: n_batch       = 2048
0.00.332.494 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.494 I llama_new_context_with_model: flash_attn    = 0
0.00.332.496 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.497 I llama_new_context_with_model: freq_scale    = 1
0.00.332.498 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.046 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.060 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.149 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.375 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.382 I llama_new_context_with_model: graph nodes  = 601
0.00.349.382 I llama_new_context_with_model: graph splits = 1
0.00.349.384 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.012 I main: llama threadpool init, n_threads = 4
0.00.427.024 I 
0.00.427.113 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.427.116 I 
0.00.427.163 I sampler seed: 3716478341
0.00.427.174 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.177 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.179 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.179 I 
 increasities that occurred in the early phase of the COVID-19 pandemic and their implications for future pandemic preparedness.

**Introduction:**

The early phase of

0.02.090.968 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6380.51 tokens per second)
0.02.090.970 I llama_perf_context_print:        load time =     426.06 ms
0.02.090.972 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.090.973 I llama_perf_context_print:        eval time =    1644.13 ms /    32 runs   (   51.38 ms per token,    19.46 tokens per second)
0.02.090.985 I llama_perf_context_print:       total time =    1663.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4040 (3bcd40b3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32179.47 ms
main:    total time = 32179.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.575 I build: 4040 (3bcd40b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.773 I main: llama backend init
0.00.000.904 I main: load the model and apply lora adapter, if any
0.00.021.548 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.563 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.571 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.572 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.576 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.577 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.578 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.579 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.579 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.580 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.584 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.585 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.585 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.586 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.586 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.342 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.376 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.255 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.262 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.262 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.263 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.264 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.264 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.265 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.268 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.269 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.272 I llama_model_loader: - type  f32:   37 tensors
0.00.132.273 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.273 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.214 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.784 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.267 I llm_load_vocab: special tokens cache size = 5
0.00.266.164 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.181 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.181 I llm_load_print_meta: arch             = gemma
0.00.266.182 I llm_load_print_meta: vocab type       = SPM
0.00.266.183 I llm_load_print_meta: n_vocab          = 256000
0.00.266.183 I llm_load_print_meta: n_merges         = 0
0.00.266.183 I llm_load_print_meta: vocab_only       = 0
0.00.266.184 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.184 I llm_load_print_meta: n_embd           = 2048
0.00.266.184 I llm_load_print_meta: n_layer          = 18
0.00.266.196 I llm_load_print_meta: n_head           = 8
0.00.266.197 I llm_load_print_meta: n_head_kv        = 1
0.00.266.197 I llm_load_print_meta: n_rot            = 256
0.00.266.197 I llm_load_print_meta: n_swa            = 0
0.00.266.198 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.198 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.199 I llm_load_print_meta: n_gqa            = 8
0.00.266.200 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.201 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.202 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.203 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.203 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.204 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.204 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.205 I llm_load_print_meta: n_ff             = 16384
0.00.266.205 I llm_load_print_meta: n_expert         = 0
0.00.266.205 I llm_load_print_meta: n_expert_used    = 0
0.00.266.205 I llm_load_print_meta: causal attn      = 1
0.00.266.206 I llm_load_print_meta: pooling type     = 0
0.00.266.206 I llm_load_print_meta: rope type        = 2
0.00.266.206 I llm_load_print_meta: rope scaling     = linear
0.00.266.208 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.208 I llm_load_print_meta: freq_scale_train = 1
0.00.266.209 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.209 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.209 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.210 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.210 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.210 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.210 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.211 I llm_load_print_meta: model type       = 2B
0.00.266.212 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.213 I llm_load_print_meta: model params     = 2.51 B
0.00.266.213 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.214 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.214 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.214 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.215 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.215 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.215 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.216 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.216 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.217 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.217 I llm_load_print_meta: max token length = 93
0.00.325.659 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.967 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.973 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.973 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.973 I llama_new_context_with_model: n_batch       = 2048
0.00.330.974 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.974 I llama_new_context_with_model: flash_attn    = 0
0.00.330.978 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.978 I llama_new_context_with_model: freq_scale    = 1
0.00.330.979 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.845 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.859 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.949 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.208 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.214 I llama_new_context_with_model: graph nodes  = 601
0.00.348.214 I llama_new_context_with_model: graph splits = 1
0.00.348.216 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.734 I main: llama threadpool init, n_threads = 4
0.00.423.747 I 
0.00.423.827 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.423.830 I 
0.00.423.871 I sampler seed: 3781759632
0.00.423.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.885 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.886 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.896 I 
 squaRED, a leading provider of cloud-based business intelligence (BI) solutions, has unveiled a comprehensive data governance framework designed to empower businesses to manage their data

0.01.999.754 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6554.12 tokens per second)
0.01.999.756 I llama_perf_context_print:        load time =     422.81 ms
0.01.999.757 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.999.759 I llama_perf_context_print:        eval time =    1556.63 ms /    32 runs   (   48.64 ms per token,    20.56 tokens per second)
0.01.999.759 I llama_perf_context_print:       total time =    1576.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.146s
user	8m14.968s
sys	0m6.843s
