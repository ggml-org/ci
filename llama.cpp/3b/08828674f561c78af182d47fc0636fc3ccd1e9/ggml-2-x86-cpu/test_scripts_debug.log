+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4046 (3b088286) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.001.118 I main: load the model and apply lora adapter, if any
0.00.023.615 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.626 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.716 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.727 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.728 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.733 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.734 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.735 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.737 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.738 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.739 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.746 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.747 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.748 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.750 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.752 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.009 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.429 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.044 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.053 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.054 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.055 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.056 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.058 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.059 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.063 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.064 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.065 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.066 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.067 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.075 I llama_model_loader: - type  f32:   37 tensors
0.00.269.077 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.524 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.195 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.545.463 I llm_load_vocab: special tokens cache size = 5
0.00.643.201 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.643.274 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.643.275 I llm_load_print_meta: arch             = gemma
0.00.643.275 I llm_load_print_meta: vocab type       = SPM
0.00.643.276 I llm_load_print_meta: n_vocab          = 256000
0.00.643.279 I llm_load_print_meta: n_merges         = 0
0.00.643.279 I llm_load_print_meta: vocab_only       = 0
0.00.643.280 I llm_load_print_meta: n_ctx_train      = 8192
0.00.643.280 I llm_load_print_meta: n_embd           = 2048
0.00.643.280 I llm_load_print_meta: n_layer          = 18
0.00.643.346 I llm_load_print_meta: n_head           = 8
0.00.643.353 I llm_load_print_meta: n_head_kv        = 1
0.00.643.353 I llm_load_print_meta: n_rot            = 256
0.00.643.354 I llm_load_print_meta: n_swa            = 0
0.00.643.354 I llm_load_print_meta: n_embd_head_k    = 256
0.00.643.354 I llm_load_print_meta: n_embd_head_v    = 256
0.00.643.359 I llm_load_print_meta: n_gqa            = 8
0.00.643.364 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.643.369 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.643.370 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.643.372 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.643.373 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.643.373 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.643.374 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.643.380 I llm_load_print_meta: n_ff             = 16384
0.00.643.381 I llm_load_print_meta: n_expert         = 0
0.00.643.381 I llm_load_print_meta: n_expert_used    = 0
0.00.643.382 I llm_load_print_meta: causal attn      = 1
0.00.643.394 I llm_load_print_meta: pooling type     = 0
0.00.643.408 I llm_load_print_meta: rope type        = 2
0.00.643.409 I llm_load_print_meta: rope scaling     = linear
0.00.643.411 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.643.411 I llm_load_print_meta: freq_scale_train = 1
0.00.643.416 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.643.416 I llm_load_print_meta: rope_finetuned   = unknown
0.00.643.417 I llm_load_print_meta: ssm_d_conv       = 0
0.00.643.417 I llm_load_print_meta: ssm_d_inner      = 0
0.00.643.417 I llm_load_print_meta: ssm_d_state      = 0
0.00.643.418 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.643.426 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.643.430 I llm_load_print_meta: model type       = 2B
0.00.643.431 I llm_load_print_meta: model ftype      = Q8_0
0.00.643.432 I llm_load_print_meta: model params     = 2.51 B
0.00.643.440 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.643.441 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.643.442 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.643.443 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.643.443 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.643.444 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.643.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.643.445 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.643.452 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.643.453 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.643.454 I llm_load_print_meta: max token length = 93
0.00.745.208 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.745.219 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.745.220 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.745.221 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.745.222 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.745.223 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.751.152 I llama_new_context_with_model: n_seq_max     = 1
0.00.751.161 I llama_new_context_with_model: n_ctx         = 4096
0.00.751.161 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.751.162 I llama_new_context_with_model: n_batch       = 2048
0.00.751.162 I llama_new_context_with_model: n_ubatch      = 512
0.00.751.162 I llama_new_context_with_model: flash_attn    = 0
0.00.751.166 I llama_new_context_with_model: freq_base     = 10000.0
0.00.751.166 I llama_new_context_with_model: freq_scale    = 1
0.00.751.167 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.768.264 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.768.304 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.768.431 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.771.017 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.771.022 I llama_new_context_with_model: graph nodes  = 601
0.00.771.022 I llama_new_context_with_model: graph splits = 1
0.00.771.049 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.379.882 I main: llama threadpool init, n_threads = 4
0.01.379.897 I 
0.01.380.010 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.380.014 I 
0.01.380.255 I sampler seed: 2744260018
0.01.380.270 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.380.276 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.380.280 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.380.280 I 
 increasities in the context of machine learning, especially when dealing with imbalanced datasets.

**Addressing Imbalanced Datasets:**

* **Cost-sensitive

0.14.855.173 I llama_perf_sampler_print:    sampling time =      47.81 ms /    33 runs   (    1.45 ms per token,   690.25 tokens per second)
0.14.855.179 I llama_perf_context_print:        load time =    1378.67 ms
0.14.855.180 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.855.182 I llama_perf_context_print:        eval time =   13386.80 ms /    32 runs   (  418.34 ms per token,     2.39 tokens per second)
0.14.855.183 I llama_perf_context_print:       total time =   13475.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.686 I build: 4046 (3b088286) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.001.139 I main: load the model and apply lora adapter, if any
0.00.023.694 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.799 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.815 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.820 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.825 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.827 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.828 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.838 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.840 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.842 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.850 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.854 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.855 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.857 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.858 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.276 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.624 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.252 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.262 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.263 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.264 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.265 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.266 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.267 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.271 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.272 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.274 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.275 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.276 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.284 I llama_model_loader: - type  f32:   37 tensors
0.00.269.286 I llama_model_loader: - type q8_0:  127 tensors
0.00.472.689 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.536.518 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.448 I llm_load_vocab: special tokens cache size = 5
0.00.636.959 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.032 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.033 I llm_load_print_meta: arch             = gemma
0.00.637.034 I llm_load_print_meta: vocab type       = SPM
0.00.637.035 I llm_load_print_meta: n_vocab          = 256000
0.00.637.038 I llm_load_print_meta: n_merges         = 0
0.00.637.038 I llm_load_print_meta: vocab_only       = 0
0.00.637.039 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.039 I llm_load_print_meta: n_embd           = 2048
0.00.637.039 I llm_load_print_meta: n_layer          = 18
0.00.637.105 I llm_load_print_meta: n_head           = 8
0.00.637.111 I llm_load_print_meta: n_head_kv        = 1
0.00.637.112 I llm_load_print_meta: n_rot            = 256
0.00.637.113 I llm_load_print_meta: n_swa            = 0
0.00.637.114 I llm_load_print_meta: n_embd_head_k    = 256
0.00.637.115 I llm_load_print_meta: n_embd_head_v    = 256
0.00.637.120 I llm_load_print_meta: n_gqa            = 8
0.00.637.125 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.130 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.142 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.144 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.145 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.146 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.637.146 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.637.152 I llm_load_print_meta: n_ff             = 16384
0.00.637.152 I llm_load_print_meta: n_expert         = 0
0.00.637.153 I llm_load_print_meta: n_expert_used    = 0
0.00.637.154 I llm_load_print_meta: causal attn      = 1
0.00.637.154 I llm_load_print_meta: pooling type     = 0
0.00.637.155 I llm_load_print_meta: rope type        = 2
0.00.637.156 I llm_load_print_meta: rope scaling     = linear
0.00.637.157 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.637.158 I llm_load_print_meta: freq_scale_train = 1
0.00.637.158 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.637.163 I llm_load_print_meta: rope_finetuned   = unknown
0.00.637.163 I llm_load_print_meta: ssm_d_conv       = 0
0.00.637.164 I llm_load_print_meta: ssm_d_inner      = 0
0.00.637.164 I llm_load_print_meta: ssm_d_state      = 0
0.00.637.164 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.637.164 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.637.165 I llm_load_print_meta: model type       = 2B
0.00.637.166 I llm_load_print_meta: model ftype      = Q8_0
0.00.637.167 I llm_load_print_meta: model params     = 2.51 B
0.00.637.177 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.637.178 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.179 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.180 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.181 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.181 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.182 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.183 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.188 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.190 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.190 I llm_load_print_meta: max token length = 93
0.00.734.329 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.740.230 I llama_new_context_with_model: n_seq_max     = 1
0.00.740.237 I llama_new_context_with_model: n_ctx         = 4096
0.00.740.238 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.740.238 I llama_new_context_with_model: n_batch       = 2048
0.00.740.239 I llama_new_context_with_model: n_ubatch      = 512
0.00.740.239 I llama_new_context_with_model: flash_attn    = 0
0.00.740.241 I llama_new_context_with_model: freq_base     = 10000.0
0.00.740.242 I llama_new_context_with_model: freq_scale    = 1
0.00.740.243 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.757.405 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.757.445 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.757.571 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.760.100 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.760.104 I llama_new_context_with_model: graph nodes  = 601
0.00.760.105 I llama_new_context_with_model: graph splits = 1
0.00.760.127 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.367.524 I main: llama threadpool init, n_threads = 4
0.01.367.538 I 
0.01.367.650 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.654 I 
0.01.367.890 I sampler seed: 1943992281
0.01.367.902 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.367.908 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.367.911 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.367.912 I 
 increasities and vulnerabilities in the systems and processes that support them.

**Answer:** Security risks.

**Explanation:**

Security risks are potential threats or vulnerabilities

0.14.977.759 I llama_perf_sampler_print:    sampling time =      48.43 ms /    33 runs   (    1.47 ms per token,   681.38 tokens per second)
0.14.977.762 I llama_perf_context_print:        load time =    1366.29 ms
0.14.977.763 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.977.765 I llama_perf_context_print:        eval time =   13519.90 ms /    32 runs   (  422.50 ms per token,     2.37 tokens per second)
0.14.977.791 I llama_perf_context_print:       total time =   13610.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.735 I build: 4046 (3b088286) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.987 I main: llama backend init
0.00.001.359 I main: load the model and apply lora adapter, if any
0.00.029.993 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.004 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.104 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.117 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.119 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.123 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.125 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.126 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.127 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.129 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.131 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.138 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.142 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.143 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.144 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.145 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.163.679 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.269.283 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.287.877 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.287.886 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.287.888 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.287.889 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.287.890 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.287.891 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.287.892 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.287.896 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.287.897 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.287.898 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.287.899 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.287.900 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.287.909 I llama_model_loader: - type  f32:   37 tensors
0.00.287.911 I llama_model_loader: - type q8_0:  127 tensors
0.00.488.847 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.559.643 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.560.619 I llm_load_vocab: special tokens cache size = 5
0.00.658.235 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.658.308 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.658.309 I llm_load_print_meta: arch             = gemma
0.00.658.310 I llm_load_print_meta: vocab type       = SPM
0.00.658.311 I llm_load_print_meta: n_vocab          = 256000
0.00.658.313 I llm_load_print_meta: n_merges         = 0
0.00.658.313 I llm_load_print_meta: vocab_only       = 0
0.00.658.313 I llm_load_print_meta: n_ctx_train      = 8192
0.00.658.314 I llm_load_print_meta: n_embd           = 2048
0.00.658.314 I llm_load_print_meta: n_layer          = 18
0.00.658.379 I llm_load_print_meta: n_head           = 8
0.00.658.407 I llm_load_print_meta: n_head_kv        = 1
0.00.658.408 I llm_load_print_meta: n_rot            = 256
0.00.658.408 I llm_load_print_meta: n_swa            = 0
0.00.658.409 I llm_load_print_meta: n_embd_head_k    = 256
0.00.658.409 I llm_load_print_meta: n_embd_head_v    = 256
0.00.658.414 I llm_load_print_meta: n_gqa            = 8
0.00.658.419 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.658.430 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.658.432 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.658.433 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.658.434 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.658.434 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.658.435 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.658.440 I llm_load_print_meta: n_ff             = 16384
0.00.658.441 I llm_load_print_meta: n_expert         = 0
0.00.658.445 I llm_load_print_meta: n_expert_used    = 0
0.00.658.446 I llm_load_print_meta: causal attn      = 1
0.00.658.446 I llm_load_print_meta: pooling type     = 0
0.00.658.446 I llm_load_print_meta: rope type        = 2
0.00.658.447 I llm_load_print_meta: rope scaling     = linear
0.00.658.448 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.658.449 I llm_load_print_meta: freq_scale_train = 1
0.00.658.449 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.658.450 I llm_load_print_meta: rope_finetuned   = unknown
0.00.658.453 I llm_load_print_meta: ssm_d_conv       = 0
0.00.658.454 I llm_load_print_meta: ssm_d_inner      = 0
0.00.658.454 I llm_load_print_meta: ssm_d_state      = 0
0.00.658.454 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.658.455 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.658.455 I llm_load_print_meta: model type       = 2B
0.00.658.456 I llm_load_print_meta: model ftype      = Q8_0
0.00.658.457 I llm_load_print_meta: model params     = 2.51 B
0.00.658.475 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.658.476 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.658.476 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.658.483 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.658.484 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.658.492 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.658.492 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.658.493 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.658.499 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.658.501 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.658.501 I llm_load_print_meta: max token length = 93
0.00.749.887 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.749.895 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.749.897 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.749.897 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.749.898 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.749.899 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.755.724 I llama_new_context_with_model: n_seq_max     = 1
0.00.755.731 I llama_new_context_with_model: n_ctx         = 4096
0.00.755.731 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.755.732 I llama_new_context_with_model: n_batch       = 2048
0.00.755.732 I llama_new_context_with_model: n_ubatch      = 512
0.00.755.733 I llama_new_context_with_model: flash_attn    = 0
0.00.755.735 I llama_new_context_with_model: freq_base     = 10000.0
0.00.755.736 I llama_new_context_with_model: freq_scale    = 1
0.00.755.737 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.772.407 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.772.447 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.772.572 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.775.133 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.775.137 I llama_new_context_with_model: graph nodes  = 601
0.00.775.138 I llama_new_context_with_model: graph splits = 1
0.00.775.163 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.389.087 I main: llama threadpool init, n_threads = 4
0.01.389.100 I 
0.01.389.217 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.389.221 I 
0.01.389.462 I sampler seed: 1569969728
0.01.389.475 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.389.481 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.389.485 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.389.485 I 
 increasities with the same or similar name in other contexts, leading to confusion and misidentification.

**Example:**

* In the medical field, there are

0.14.872.449 I llama_perf_sampler_print:    sampling time =      48.04 ms /    33 runs   (    1.46 ms per token,   686.93 tokens per second)
0.14.872.465 I llama_perf_context_print:        load time =    1387.61 ms
0.14.872.467 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.872.469 I llama_perf_context_print:        eval time =   13393.54 ms /    32 runs   (  418.55 ms per token,     2.39 tokens per second)
0.14.872.486 I llama_perf_context_print:       total time =   13483.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4046 (3b088286) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.001.147 I main: load the model and apply lora adapter, if any
0.00.024.007 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.020 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.129 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.143 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.145 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.150 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.155 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.157 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.159 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.161 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.163 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.174 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.179 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.181 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.183 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.192 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.443 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.770 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.418 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.430 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.431 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.432 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.433 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.434 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.436 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.440 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.441 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.442 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.443 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.444 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.453 I llama_model_loader: - type  f32:   37 tensors
0.00.269.455 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.474 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.356 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.461 I llm_load_vocab: special tokens cache size = 5
0.00.627.242 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.317 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.321 I llm_load_print_meta: arch             = gemma
0.00.627.322 I llm_load_print_meta: vocab type       = SPM
0.00.627.323 I llm_load_print_meta: n_vocab          = 256000
0.00.627.326 I llm_load_print_meta: n_merges         = 0
0.00.627.326 I llm_load_print_meta: vocab_only       = 0
0.00.627.327 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.327 I llm_load_print_meta: n_embd           = 2048
0.00.627.328 I llm_load_print_meta: n_layer          = 18
0.00.627.393 I llm_load_print_meta: n_head           = 8
0.00.627.403 I llm_load_print_meta: n_head_kv        = 1
0.00.627.404 I llm_load_print_meta: n_rot            = 256
0.00.627.405 I llm_load_print_meta: n_swa            = 0
0.00.627.405 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.419 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.426 I llm_load_print_meta: n_gqa            = 8
0.00.627.433 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.438 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.440 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.441 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.442 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.442 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.443 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.448 I llm_load_print_meta: n_ff             = 16384
0.00.627.448 I llm_load_print_meta: n_expert         = 0
0.00.627.449 I llm_load_print_meta: n_expert_used    = 0
0.00.627.449 I llm_load_print_meta: causal attn      = 1
0.00.627.450 I llm_load_print_meta: pooling type     = 0
0.00.627.451 I llm_load_print_meta: rope type        = 2
0.00.627.451 I llm_load_print_meta: rope scaling     = linear
0.00.627.452 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.453 I llm_load_print_meta: freq_scale_train = 1
0.00.627.454 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.455 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.455 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.455 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.455 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.458 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.459 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.459 I llm_load_print_meta: model type       = 2B
0.00.627.460 I llm_load_print_meta: model ftype      = Q8_0
0.00.627.461 I llm_load_print_meta: model params     = 2.51 B
0.00.627.471 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.627.471 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.472 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.473 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.473 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.474 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.474 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.475 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.482 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.484 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.485 I llm_load_print_meta: max token length = 93
0.00.699.971 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.699.982 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.706.218 I llama_new_context_with_model: n_seq_max     = 1
0.00.706.226 I llama_new_context_with_model: n_ctx         = 4096
0.00.706.226 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.706.227 I llama_new_context_with_model: n_batch       = 2048
0.00.706.227 I llama_new_context_with_model: n_ubatch      = 512
0.00.706.228 I llama_new_context_with_model: flash_attn    = 0
0.00.706.231 I llama_new_context_with_model: freq_base     = 10000.0
0.00.706.232 I llama_new_context_with_model: freq_scale    = 1
0.00.706.233 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.723.049 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.723.088 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.723.211 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.725.764 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.725.768 I llama_new_context_with_model: graph nodes  = 601
0.00.725.769 I llama_new_context_with_model: graph splits = 1
0.00.725.793 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.331.976 I main: llama threadpool init, n_threads = 4
0.01.331.990 I 
0.01.332.114 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.119 I 
0.01.332.364 I sampler seed: 4005220326
0.01.332.376 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.386 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.332.386 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.387 I 
 increasities.

I am unable to generate the requested response as it contains sexually suggestive language that is inappropriate for this platform. [end of text]


0.12.261.020 I llama_perf_sampler_print:    sampling time =      39.21 ms /    27 runs   (    1.45 ms per token,   688.65 tokens per second)
0.12.261.035 I llama_perf_context_print:        load time =    1330.72 ms
0.12.261.038 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.261.040 I llama_perf_context_print:        eval time =   10855.16 ms /    26 runs   (  417.51 ms per token,     2.40 tokens per second)
0.12.261.041 I llama_perf_context_print:       total time =   10929.05 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.861s
user	3m38.913s
sys	0m9.539s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4046 (3b088286)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199618.68 ms
main:    total time = 199618.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4046 (3b088286) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.001.108 I main: load the model and apply lora adapter, if any
0.00.023.406 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.417 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.509 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.521 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.522 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.527 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.531 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.532 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.533 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.535 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.536 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.542 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.543 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.544 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.545 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.546 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.982 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.483 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.072 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.079 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.080 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.081 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.082 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.083 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.085 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.088 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.089 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.091 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.091 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.093 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.100 I llama_model_loader: - type  f32:   37 tensors
0.00.269.102 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.103 I llama_model_loader: - type q6_K:   19 tensors
0.00.463.562 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.525.921 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.869 I llm_load_vocab: special tokens cache size = 5
0.00.624.306 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.376 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.377 I llm_load_print_meta: arch             = gemma
0.00.624.378 I llm_load_print_meta: vocab type       = SPM
0.00.624.379 I llm_load_print_meta: n_vocab          = 256000
0.00.624.381 I llm_load_print_meta: n_merges         = 0
0.00.624.381 I llm_load_print_meta: vocab_only       = 0
0.00.624.382 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.383 I llm_load_print_meta: n_embd           = 2048
0.00.624.383 I llm_load_print_meta: n_layer          = 18
0.00.624.448 I llm_load_print_meta: n_head           = 8
0.00.624.455 I llm_load_print_meta: n_head_kv        = 1
0.00.624.456 I llm_load_print_meta: n_rot            = 256
0.00.624.456 I llm_load_print_meta: n_swa            = 0
0.00.624.457 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.458 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.468 I llm_load_print_meta: n_gqa            = 8
0.00.624.473 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.481 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.482 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.485 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.485 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.487 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.487 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.493 I llm_load_print_meta: n_ff             = 16384
0.00.624.493 I llm_load_print_meta: n_expert         = 0
0.00.624.496 I llm_load_print_meta: n_expert_used    = 0
0.00.624.496 I llm_load_print_meta: causal attn      = 1
0.00.624.497 I llm_load_print_meta: pooling type     = 0
0.00.624.497 I llm_load_print_meta: rope type        = 2
0.00.624.497 I llm_load_print_meta: rope scaling     = linear
0.00.624.499 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.499 I llm_load_print_meta: freq_scale_train = 1
0.00.624.500 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.500 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.501 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.501 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.501 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.502 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.502 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.505 I llm_load_print_meta: model type       = 2B
0.00.624.507 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.508 I llm_load_print_meta: model params     = 2.51 B
0.00.624.517 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.518 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.519 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.520 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.521 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.521 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.522 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.523 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.528 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.532 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.532 I llm_load_print_meta: max token length = 93
0.00.688.178 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.688.186 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.688.187 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.688.187 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.688.188 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.688.189 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.694.077 I llama_new_context_with_model: n_seq_max     = 1
0.00.694.085 I llama_new_context_with_model: n_ctx         = 4096
0.00.694.085 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.694.086 I llama_new_context_with_model: n_batch       = 2048
0.00.694.086 I llama_new_context_with_model: n_ubatch      = 512
0.00.694.087 I llama_new_context_with_model: flash_attn    = 0
0.00.694.091 I llama_new_context_with_model: freq_base     = 10000.0
0.00.694.092 I llama_new_context_with_model: freq_scale    = 1
0.00.694.093 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.711.374 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.711.433 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.711.565 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.138 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.714.142 I llama_new_context_with_model: graph nodes  = 601
0.00.714.143 I llama_new_context_with_model: graph splits = 1
0.00.714.167 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.285.042 I main: llama threadpool init, n_threads = 4
0.01.285.055 I 
0.01.285.164 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.168 I 
0.01.285.409 I sampler seed: 3066944411
0.01.285.424 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.434 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.285.435 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.285.435 I 
 seconally to the question.

**Q: Explain the concept of a balanced chemical equation and provide an example.**

**A:** A balanced chemical equation represents

0.12.134.471 I llama_perf_sampler_print:    sampling time =      48.16 ms /    33 runs   (    1.46 ms per token,   685.24 tokens per second)
0.12.134.474 I llama_perf_context_print:        load time =    1283.84 ms
0.12.134.475 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.134.493 I llama_perf_context_print:        eval time =   10760.88 ms /    32 runs   (  336.28 ms per token,     2.97 tokens per second)
0.12.134.494 I llama_perf_context_print:       total time =   10849.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4046 (3b088286)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198780.73 ms
main:    total time = 198780.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4046 (3b088286) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.896 I main: llama backend init
0.00.001.156 I main: load the model and apply lora adapter, if any
0.00.023.426 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.532 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.543 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.545 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.550 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.551 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.553 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.554 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.555 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.570 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.578 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.579 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.580 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.581 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.582 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.219 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.296 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.263 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.276 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.278 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.279 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.280 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.281 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.283 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.286 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.287 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.296 I llama_model_loader: - type  f32:   37 tensors
0.00.269.298 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.299 I llama_model_loader: - type q6_K:   19 tensors
0.00.465.801 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.530.438 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.531.392 I llm_load_vocab: special tokens cache size = 5
0.00.631.900 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.631.975 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.631.976 I llm_load_print_meta: arch             = gemma
0.00.631.976 I llm_load_print_meta: vocab type       = SPM
0.00.631.977 I llm_load_print_meta: n_vocab          = 256000
0.00.631.979 I llm_load_print_meta: n_merges         = 0
0.00.631.980 I llm_load_print_meta: vocab_only       = 0
0.00.631.980 I llm_load_print_meta: n_ctx_train      = 8192
0.00.631.980 I llm_load_print_meta: n_embd           = 2048
0.00.631.981 I llm_load_print_meta: n_layer          = 18
0.00.632.044 I llm_load_print_meta: n_head           = 8
0.00.632.052 I llm_load_print_meta: n_head_kv        = 1
0.00.632.052 I llm_load_print_meta: n_rot            = 256
0.00.632.053 I llm_load_print_meta: n_swa            = 0
0.00.632.055 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.055 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.061 I llm_load_print_meta: n_gqa            = 8
0.00.632.065 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.070 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.072 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.073 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.073 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.074 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.075 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.080 I llm_load_print_meta: n_ff             = 16384
0.00.632.081 I llm_load_print_meta: n_expert         = 0
0.00.632.081 I llm_load_print_meta: n_expert_used    = 0
0.00.632.082 I llm_load_print_meta: causal attn      = 1
0.00.632.082 I llm_load_print_meta: pooling type     = 0
0.00.632.083 I llm_load_print_meta: rope type        = 2
0.00.632.084 I llm_load_print_meta: rope scaling     = linear
0.00.632.085 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.086 I llm_load_print_meta: freq_scale_train = 1
0.00.632.086 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.087 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.087 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.087 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.088 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.088 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.089 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.089 I llm_load_print_meta: model type       = 2B
0.00.632.090 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.632.096 I llm_load_print_meta: model params     = 2.51 B
0.00.632.106 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.632.106 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.107 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.108 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.109 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.110 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.110 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.111 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.117 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.118 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.119 I llm_load_print_meta: max token length = 93
0.00.692.471 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.698.212 I llama_new_context_with_model: n_seq_max     = 1
0.00.698.219 I llama_new_context_with_model: n_ctx         = 4096
0.00.698.219 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.698.220 I llama_new_context_with_model: n_batch       = 2048
0.00.698.220 I llama_new_context_with_model: n_ubatch      = 512
0.00.698.221 I llama_new_context_with_model: flash_attn    = 0
0.00.698.223 I llama_new_context_with_model: freq_base     = 10000.0
0.00.698.224 I llama_new_context_with_model: freq_scale    = 1
0.00.698.224 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.715.885 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.715.926 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.716.055 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.678 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.718.682 I llama_new_context_with_model: graph nodes  = 601
0.00.718.683 I llama_new_context_with_model: graph splits = 1
0.00.718.709 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.292.094 I main: llama threadpool init, n_threads = 4
0.01.292.107 I 
0.01.292.211 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.292.215 I 
0.01.292.441 I sampler seed: 1523616884
0.01.292.454 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.461 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.292.464 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.292.464 I 
 seconally.

**Assistant**

I am unable to generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.09.153.157 I llama_perf_sampler_print:    sampling time =      34.55 ms /    24 runs   (    1.44 ms per token,   694.59 tokens per second)
0.09.153.160 I llama_perf_context_print:        load time =    1290.84 ms
0.09.153.161 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.153.163 I llama_perf_context_print:        eval time =    7796.49 ms /    23 runs   (  338.98 ms per token,     2.95 tokens per second)
0.09.153.163 I llama_perf_context_print:       total time =    7861.07 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m2.665s
user	50m8.849s
sys	0m6.555s
