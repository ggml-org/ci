+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.184 I build: 4248 (3b4f2e33) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.375 I main: llama backend init
0.00.000.382 I main: load the model and apply lora adapter, if any
0.00.020.609 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.620 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.627 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.631 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.633 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.637 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.637 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.639 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.639 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.640 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.640 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.644 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.644 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.645 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.646 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.647 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.857 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.239 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.150 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.156 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.156 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.157 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.158 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.158 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.159 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.162 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.162 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.163 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.164 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.165 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.168 I llama_model_loader: - type  f32:   37 tensors
0.00.130.169 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.043 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.940 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.450 I llm_load_vocab: special tokens cache size = 5
0.00.262.373 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.388 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.389 I llm_load_print_meta: arch             = gemma
0.00.262.389 I llm_load_print_meta: vocab type       = SPM
0.00.262.390 I llm_load_print_meta: n_vocab          = 256000
0.00.262.390 I llm_load_print_meta: n_merges         = 0
0.00.262.391 I llm_load_print_meta: vocab_only       = 0
0.00.262.391 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.391 I llm_load_print_meta: n_embd           = 2048
0.00.262.392 I llm_load_print_meta: n_layer          = 18
0.00.262.404 I llm_load_print_meta: n_head           = 8
0.00.262.405 I llm_load_print_meta: n_head_kv        = 1
0.00.262.405 I llm_load_print_meta: n_rot            = 256
0.00.262.406 I llm_load_print_meta: n_swa            = 0
0.00.262.406 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.406 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.407 I llm_load_print_meta: n_gqa            = 8
0.00.262.408 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.409 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.410 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.412 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.413 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.414 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.414 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.415 I llm_load_print_meta: n_ff             = 16384
0.00.262.415 I llm_load_print_meta: n_expert         = 0
0.00.262.416 I llm_load_print_meta: n_expert_used    = 0
0.00.262.416 I llm_load_print_meta: causal attn      = 1
0.00.262.417 I llm_load_print_meta: pooling type     = 0
0.00.262.417 I llm_load_print_meta: rope type        = 2
0.00.262.418 I llm_load_print_meta: rope scaling     = linear
0.00.262.419 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.420 I llm_load_print_meta: freq_scale_train = 1
0.00.262.421 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.421 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.421 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.423 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.423 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.423 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.424 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.424 I llm_load_print_meta: model type       = 2B
0.00.262.425 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.426 I llm_load_print_meta: model params     = 2.51 B
0.00.262.427 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.427 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.428 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.428 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.428 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.429 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.429 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.430 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.430 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.431 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.431 I llm_load_print_meta: max token length = 93
0.00.365.135 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.145 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.146 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.146 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.147 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.147 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.443 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.450 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.451 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.452 I llama_new_context_with_model: n_batch       = 2048
0.00.370.452 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.453 I llama_new_context_with_model: flash_attn    = 0
0.00.370.455 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.456 I llama_new_context_with_model: freq_scale    = 1
0.00.370.457 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.669 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.683 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.790 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.015 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.021 I llama_new_context_with_model: graph nodes  = 601
0.00.387.021 I llama_new_context_with_model: graph splits = 1
0.00.387.024 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.509 I main: llama threadpool init, n_threads = 4
0.00.472.527 I 
0.00.472.600 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.472.603 I 
0.00.472.651 I sampler seed: 1427515900
0.00.472.662 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.674 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.678 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.678 I 
 increasities

I'm unable to answer this question as it contains sexually explicit content that is not appropriate for me to discuss. [end of text]


0.02.365.259 I llama_perf_sampler_print:    sampling time =       4.27 ms /    28 runs   (    0.15 ms per token,  6554.31 tokens per second)
0.02.365.263 I llama_perf_context_print:        load time =     472.11 ms
0.02.365.264 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.365.265 I llama_perf_context_print:        eval time =    1876.88 ms /    27 runs   (   69.51 ms per token,    14.39 tokens per second)
0.02.365.266 I llama_perf_context_print:       total time =    1892.76 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.547 I build: 4248 (3b4f2e33) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.020.880 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.894 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.905 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.907 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.910 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.912 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.912 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.913 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.913 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.914 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.918 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.919 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.919 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.920 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.920 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.166 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.497 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.302 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.307 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.308 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.309 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.309 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.310 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.311 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.313 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.313 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.314 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.315 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.316 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.319 I llama_model_loader: - type  f32:   37 tensors
0.00.130.320 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.806 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.906 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.367 I llm_load_vocab: special tokens cache size = 5
0.00.262.173 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.186 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.187 I llm_load_print_meta: arch             = gemma
0.00.262.187 I llm_load_print_meta: vocab type       = SPM
0.00.262.188 I llm_load_print_meta: n_vocab          = 256000
0.00.262.188 I llm_load_print_meta: n_merges         = 0
0.00.262.189 I llm_load_print_meta: vocab_only       = 0
0.00.262.189 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.189 I llm_load_print_meta: n_embd           = 2048
0.00.262.190 I llm_load_print_meta: n_layer          = 18
0.00.262.201 I llm_load_print_meta: n_head           = 8
0.00.262.202 I llm_load_print_meta: n_head_kv        = 1
0.00.262.202 I llm_load_print_meta: n_rot            = 256
0.00.262.203 I llm_load_print_meta: n_swa            = 0
0.00.262.203 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.203 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.204 I llm_load_print_meta: n_gqa            = 8
0.00.262.205 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.206 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.207 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.209 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.209 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.210 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.210 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.211 I llm_load_print_meta: n_ff             = 16384
0.00.262.211 I llm_load_print_meta: n_expert         = 0
0.00.262.212 I llm_load_print_meta: n_expert_used    = 0
0.00.262.212 I llm_load_print_meta: causal attn      = 1
0.00.262.212 I llm_load_print_meta: pooling type     = 0
0.00.262.212 I llm_load_print_meta: rope type        = 2
0.00.262.213 I llm_load_print_meta: rope scaling     = linear
0.00.262.214 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.215 I llm_load_print_meta: freq_scale_train = 1
0.00.262.215 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.216 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.216 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.216 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.217 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.217 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.217 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.218 I llm_load_print_meta: model type       = 2B
0.00.262.218 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.219 I llm_load_print_meta: model params     = 2.51 B
0.00.262.220 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.220 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.220 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.221 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.221 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.222 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.222 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.222 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.223 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.223 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.223 I llm_load_print_meta: max token length = 93
0.00.356.897 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.361.995 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.001 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.001 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.002 I llama_new_context_with_model: n_batch       = 2048
0.00.362.002 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.003 I llama_new_context_with_model: flash_attn    = 0
0.00.362.006 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.007 I llama_new_context_with_model: freq_scale    = 1
0.00.362.008 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.515 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.529 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.625 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.886 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.892 I llama_new_context_with_model: graph nodes  = 601
0.00.377.892 I llama_new_context_with_model: graph splits = 1
0.00.377.895 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.794 I main: llama threadpool init, n_threads = 4
0.00.458.810 I 
0.00.458.884 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.458.888 I 
0.00.458.931 I sampler seed: 381464685
0.00.458.942 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.954 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.958 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.958 I 
 increasities, and the role of the placenta in maintaining fetal health.

**Answer:**

**1. Decidualism and Placental Function:**



0.02.629.931 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6561.94 tokens per second)
0.02.629.934 I llama_perf_context_print:        load time =     458.03 ms
0.02.629.935 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.629.938 I llama_perf_context_print:        eval time =    2152.18 ms /    32 runs   (   67.26 ms per token,    14.87 tokens per second)
0.02.629.939 I llama_perf_context_print:       total time =    2171.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.170 I build: 4248 (3b4f2e33) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.373 I main: load the model and apply lora adapter, if any
0.00.020.498 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.509 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.516 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.521 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.522 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.526 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.526 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.527 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.527 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.528 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.528 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.531 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.532 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.533 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.534 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.535 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.932 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.384 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.290 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.296 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.297 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.297 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.298 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.298 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.299 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.301 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.301 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.302 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.302 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.305 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.307 I llama_model_loader: - type  f32:   37 tensors
0.00.130.308 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.992 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.420 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.176 I llm_load_vocab: special tokens cache size = 5
0.00.269.514 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.533 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.534 I llm_load_print_meta: arch             = gemma
0.00.269.534 I llm_load_print_meta: vocab type       = SPM
0.00.269.535 I llm_load_print_meta: n_vocab          = 256000
0.00.269.536 I llm_load_print_meta: n_merges         = 0
0.00.269.536 I llm_load_print_meta: vocab_only       = 0
0.00.269.536 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.537 I llm_load_print_meta: n_embd           = 2048
0.00.269.537 I llm_load_print_meta: n_layer          = 18
0.00.269.549 I llm_load_print_meta: n_head           = 8
0.00.269.550 I llm_load_print_meta: n_head_kv        = 1
0.00.269.550 I llm_load_print_meta: n_rot            = 256
0.00.269.550 I llm_load_print_meta: n_swa            = 0
0.00.269.550 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.551 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.551 I llm_load_print_meta: n_gqa            = 8
0.00.269.552 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.553 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.554 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.555 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.556 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.556 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.557 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.558 I llm_load_print_meta: n_ff             = 16384
0.00.269.558 I llm_load_print_meta: n_expert         = 0
0.00.269.558 I llm_load_print_meta: n_expert_used    = 0
0.00.269.559 I llm_load_print_meta: causal attn      = 1
0.00.269.559 I llm_load_print_meta: pooling type     = 0
0.00.269.559 I llm_load_print_meta: rope type        = 2
0.00.269.560 I llm_load_print_meta: rope scaling     = linear
0.00.269.561 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.562 I llm_load_print_meta: freq_scale_train = 1
0.00.269.562 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.563 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.563 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.563 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.564 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.564 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.564 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.565 I llm_load_print_meta: model type       = 2B
0.00.269.565 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.566 I llm_load_print_meta: model params     = 2.51 B
0.00.269.567 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.567 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.568 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.568 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.569 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.569 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.569 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.570 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.570 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.571 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.571 I llm_load_print_meta: max token length = 93
0.00.345.721 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.345.727 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.728 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.345.729 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.345.729 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.730 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.990 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.996 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.996 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.997 I llama_new_context_with_model: n_batch       = 2048
0.00.350.997 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.998 I llama_new_context_with_model: flash_attn    = 0
0.00.351.000 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.001 I llama_new_context_with_model: freq_scale    = 1
0.00.351.002 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.201 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.215 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.315 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.607 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.614 I llama_new_context_with_model: graph nodes  = 601
0.00.366.615 I llama_new_context_with_model: graph splits = 1
0.00.366.617 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.596 I main: llama threadpool init, n_threads = 4
0.00.453.612 I 
0.00.453.684 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.453.687 I 
0.00.453.734 I sampler seed: 3081993102
0.00.453.744 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.747 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.748 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.748 I 
 increasities. 

I cannot find this context anywhere in the provided text. Please provide more context so I can assist you. [end of text]


0.02.383.428 I llama_perf_sampler_print:    sampling time =       4.33 ms /    28 runs   (    0.15 ms per token,  6468.01 tokens per second)
0.02.383.431 I llama_perf_context_print:        load time =     453.20 ms
0.02.383.432 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.383.433 I llama_perf_context_print:        eval time =    1912.93 ms /    27 runs   (   70.85 ms per token,    14.11 tokens per second)
0.02.383.434 I llama_perf_context_print:       total time =    1929.84 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.539 I build: 4248 (3b4f2e33) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.021.184 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.194 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.202 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.207 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.209 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.213 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.213 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.214 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.214 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.215 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.216 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.220 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.221 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.221 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.222 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.222 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.704 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.084 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.924 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.930 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.930 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.931 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.932 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.932 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.933 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.935 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.936 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.937 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.937 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.939 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.942 I llama_model_loader: - type  f32:   37 tensors
0.00.130.943 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.541 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.694 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.221 I llm_load_vocab: special tokens cache size = 5
0.00.265.958 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.973 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.973 I llm_load_print_meta: arch             = gemma
0.00.265.974 I llm_load_print_meta: vocab type       = SPM
0.00.265.974 I llm_load_print_meta: n_vocab          = 256000
0.00.265.975 I llm_load_print_meta: n_merges         = 0
0.00.265.975 I llm_load_print_meta: vocab_only       = 0
0.00.265.975 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.976 I llm_load_print_meta: n_embd           = 2048
0.00.265.976 I llm_load_print_meta: n_layer          = 18
0.00.265.986 I llm_load_print_meta: n_head           = 8
0.00.265.987 I llm_load_print_meta: n_head_kv        = 1
0.00.265.988 I llm_load_print_meta: n_rot            = 256
0.00.265.988 I llm_load_print_meta: n_swa            = 0
0.00.265.988 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.988 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.989 I llm_load_print_meta: n_gqa            = 8
0.00.265.990 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.991 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.992 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.993 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.994 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.994 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.995 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.995 I llm_load_print_meta: n_ff             = 16384
0.00.265.996 I llm_load_print_meta: n_expert         = 0
0.00.265.996 I llm_load_print_meta: n_expert_used    = 0
0.00.265.996 I llm_load_print_meta: causal attn      = 1
0.00.265.996 I llm_load_print_meta: pooling type     = 0
0.00.265.997 I llm_load_print_meta: rope type        = 2
0.00.265.997 I llm_load_print_meta: rope scaling     = linear
0.00.265.999 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.999 I llm_load_print_meta: freq_scale_train = 1
0.00.266.000 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.000 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.000 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.000 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.001 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.001 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.001 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.002 I llm_load_print_meta: model type       = 2B
0.00.266.002 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.003 I llm_load_print_meta: model params     = 2.51 B
0.00.266.004 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.004 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.005 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.005 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.006 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.006 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.006 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.007 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.007 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.007 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.008 I llm_load_print_meta: max token length = 93
0.00.337.639 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.647 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.875 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.881 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.882 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.882 I llama_new_context_with_model: n_batch       = 2048
0.00.342.883 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.884 I llama_new_context_with_model: flash_attn    = 0
0.00.342.887 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.887 I llama_new_context_with_model: freq_scale    = 1
0.00.342.888 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.012 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.026 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.113 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.367 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.371 I llama_new_context_with_model: graph nodes  = 601
0.00.358.371 I llama_new_context_with_model: graph splits = 1
0.00.358.373 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.605 I main: llama threadpool init, n_threads = 4
0.00.447.622 I 
0.00.447.702 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.447.706 I 
0.00.447.762 I sampler seed: 3189859850
0.00.447.774 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.777 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.778 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.779 I 
 increasities with his classmates, causing chaos and disruption in class. [end of text]


0.01.502.571 I llama_perf_sampler_print:    sampling time =       2.24 ms /    15 runs   (    0.15 ms per token,  6699.42 tokens per second)
0.01.502.573 I llama_perf_context_print:        load time =     446.83 ms
0.01.502.575 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.502.576 I llama_perf_context_print:        eval time =    1046.20 ms /    14 runs   (   74.73 ms per token,    13.38 tokens per second)
0.01.502.577 I llama_perf_context_print:       total time =    1054.97 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.399s
user	0m31.073s
sys	0m9.271s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4248 (3b4f2e33)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40191.06 ms
main:    total time = 40191.06 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 4248 (3b4f2e33) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.021.040 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.051 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.059 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.067 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.071 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.075 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.076 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.077 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.077 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.078 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.078 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.082 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.082 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.083 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.084 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.084 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.339 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.505 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.355 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.361 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.362 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.363 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.364 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.365 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.366 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.369 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.370 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.371 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.372 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.373 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.376 I llama_model_loader: - type  f32:   37 tensors
0.00.130.377 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.377 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.383 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.452 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.014 I llm_load_vocab: special tokens cache size = 5
0.00.285.115 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.130 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.131 I llm_load_print_meta: arch             = gemma
0.00.285.131 I llm_load_print_meta: vocab type       = SPM
0.00.285.132 I llm_load_print_meta: n_vocab          = 256000
0.00.285.132 I llm_load_print_meta: n_merges         = 0
0.00.285.132 I llm_load_print_meta: vocab_only       = 0
0.00.285.133 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.133 I llm_load_print_meta: n_embd           = 2048
0.00.285.133 I llm_load_print_meta: n_layer          = 18
0.00.285.145 I llm_load_print_meta: n_head           = 8
0.00.285.146 I llm_load_print_meta: n_head_kv        = 1
0.00.285.147 I llm_load_print_meta: n_rot            = 256
0.00.285.147 I llm_load_print_meta: n_swa            = 0
0.00.285.147 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.148 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.149 I llm_load_print_meta: n_gqa            = 8
0.00.285.150 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.150 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.151 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.153 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.153 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.153 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.154 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.155 I llm_load_print_meta: n_ff             = 16384
0.00.285.155 I llm_load_print_meta: n_expert         = 0
0.00.285.155 I llm_load_print_meta: n_expert_used    = 0
0.00.285.155 I llm_load_print_meta: causal attn      = 1
0.00.285.156 I llm_load_print_meta: pooling type     = 0
0.00.285.156 I llm_load_print_meta: rope type        = 2
0.00.285.156 I llm_load_print_meta: rope scaling     = linear
0.00.285.158 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.158 I llm_load_print_meta: freq_scale_train = 1
0.00.285.158 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.159 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.159 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.159 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.160 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.160 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.160 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.161 I llm_load_print_meta: model type       = 2B
0.00.285.161 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.162 I llm_load_print_meta: model params     = 2.51 B
0.00.285.162 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.163 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.163 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.163 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.164 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.164 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.165 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.165 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.165 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.166 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.166 I llm_load_print_meta: max token length = 93
0.00.345.009 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.345.017 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.345.018 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.345.018 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.345.019 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.345.020 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.350.149 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.155 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.155 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.156 I llama_new_context_with_model: n_batch       = 2048
0.00.350.157 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.157 I llama_new_context_with_model: flash_attn    = 0
0.00.350.159 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.160 I llama_new_context_with_model: freq_scale    = 1
0.00.350.161 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.508 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.521 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.617 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.824 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.829 I llama_new_context_with_model: graph nodes  = 601
0.00.365.830 I llama_new_context_with_model: graph splits = 1
0.00.365.832 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.106 I main: llama threadpool init, n_threads = 4
0.00.441.122 I 
0.00.441.194 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.441.197 I 
0.00.441.240 I sampler seed: 4191867878
0.00.441.251 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.262 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.265 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.265 I 
 encompassing a wide range of roles, responsibilities, and skills, makes an individual well-suited for leadership roles.

**True or False?**



0.02.027.527 I llama_perf_sampler_print:    sampling time =       5.43 ms /    33 runs   (    0.16 ms per token,  6076.23 tokens per second)
0.02.027.530 I llama_perf_context_print:        load time =     440.36 ms
0.02.027.531 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.027.532 I llama_perf_context_print:        eval time =    1567.16 ms /    32 runs   (   48.97 ms per token,    20.42 tokens per second)
0.02.027.533 I llama_perf_context_print:       total time =    1586.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4248 (3b4f2e33)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40178.07 ms
main:    total time = 40178.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.549 I build: 4248 (3b4f2e33) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.759 I main: llama backend init
0.00.000.766 I main: load the model and apply lora adapter, if any
0.00.021.307 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.320 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.330 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.332 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.335 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.336 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.337 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.337 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.338 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.338 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.342 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.342 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.343 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.344 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.344 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.497 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.031 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.930 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.938 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.939 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.939 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.940 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.941 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.941 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.944 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.944 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.948 I llama_model_loader: - type  f32:   37 tensors
0.00.130.949 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.949 I llama_model_loader: - type q6_K:   19 tensors
0.00.217.742 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.190 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.755 I llm_load_vocab: special tokens cache size = 5
0.00.283.788 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.804 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.805 I llm_load_print_meta: arch             = gemma
0.00.283.806 I llm_load_print_meta: vocab type       = SPM
0.00.283.807 I llm_load_print_meta: n_vocab          = 256000
0.00.283.807 I llm_load_print_meta: n_merges         = 0
0.00.283.807 I llm_load_print_meta: vocab_only       = 0
0.00.283.808 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.808 I llm_load_print_meta: n_embd           = 2048
0.00.283.808 I llm_load_print_meta: n_layer          = 18
0.00.283.820 I llm_load_print_meta: n_head           = 8
0.00.283.822 I llm_load_print_meta: n_head_kv        = 1
0.00.283.822 I llm_load_print_meta: n_rot            = 256
0.00.283.822 I llm_load_print_meta: n_swa            = 0
0.00.283.823 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.823 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.824 I llm_load_print_meta: n_gqa            = 8
0.00.283.825 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.826 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.827 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.828 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.829 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.829 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.829 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.830 I llm_load_print_meta: n_ff             = 16384
0.00.283.831 I llm_load_print_meta: n_expert         = 0
0.00.283.831 I llm_load_print_meta: n_expert_used    = 0
0.00.283.831 I llm_load_print_meta: causal attn      = 1
0.00.283.831 I llm_load_print_meta: pooling type     = 0
0.00.283.832 I llm_load_print_meta: rope type        = 2
0.00.283.832 I llm_load_print_meta: rope scaling     = linear
0.00.283.833 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.834 I llm_load_print_meta: freq_scale_train = 1
0.00.283.834 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.835 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.835 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.835 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.835 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.836 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.836 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.836 I llm_load_print_meta: model type       = 2B
0.00.283.837 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.283.837 I llm_load_print_meta: model params     = 2.51 B
0.00.283.838 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.283.839 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.839 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.839 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.839 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.840 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.840 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.840 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.841 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.841 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.842 I llm_load_print_meta: max token length = 93
0.00.341.120 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.346.230 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.236 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.237 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.237 I llama_new_context_with_model: n_batch       = 2048
0.00.346.238 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.238 I llama_new_context_with_model: flash_attn    = 0
0.00.346.240 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.241 I llama_new_context_with_model: freq_scale    = 1
0.00.346.242 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.917 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.929 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.019 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.279 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.286 I llama_new_context_with_model: graph nodes  = 601
0.00.362.286 I llama_new_context_with_model: graph splits = 1
0.00.362.288 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.356 I main: llama threadpool init, n_threads = 4
0.00.436.371 I 
0.00.436.443 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.436.447 I 
0.00.436.489 I sampler seed: 870585313
0.00.436.501 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.513 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.517 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.517 I 
 increasities by the name of "Leda" are a type of mythological representation of female sexual energy and power.

The term "Leda" itself originates

0.01.990.542 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6425.23 tokens per second)
0.01.990.544 I llama_perf_context_print:        load time =     435.57 ms
0.01.990.545 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.990.546 I llama_perf_context_print:        eval time =    1535.29 ms /    32 runs   (   47.98 ms per token,    20.84 tokens per second)
0.01.990.547 I llama_perf_context_print:       total time =    1554.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.132s
user	10m24.082s
sys	0m6.795s
