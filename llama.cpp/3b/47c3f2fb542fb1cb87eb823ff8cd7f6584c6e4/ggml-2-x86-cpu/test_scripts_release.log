+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.553 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.021.229 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.242 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.259 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.270 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.271 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.275 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.276 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.277 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.278 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.278 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.279 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.284 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.285 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.286 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.286 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.288 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.441 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.854 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.754 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.760 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.761 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.762 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.763 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.765 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.766 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.769 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.770 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.771 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.772 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.773 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.777 I llama_model_loader: - type  f32:   37 tensors
0.00.132.779 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.269 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.818 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.485 I llm_load_vocab: special tokens cache size = 5
0.00.281.508 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.525 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.526 I llm_load_print_meta: arch             = gemma
0.00.281.527 I llm_load_print_meta: vocab type       = SPM
0.00.281.528 I llm_load_print_meta: n_vocab          = 256000
0.00.281.528 I llm_load_print_meta: n_merges         = 0
0.00.281.528 I llm_load_print_meta: vocab_only       = 0
0.00.281.529 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.529 I llm_load_print_meta: n_embd           = 2048
0.00.281.529 I llm_load_print_meta: n_layer          = 18
0.00.281.541 I llm_load_print_meta: n_head           = 8
0.00.281.542 I llm_load_print_meta: n_head_kv        = 1
0.00.281.542 I llm_load_print_meta: n_rot            = 256
0.00.281.542 I llm_load_print_meta: n_swa            = 0
0.00.281.543 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.544 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.545 I llm_load_print_meta: n_gqa            = 8
0.00.281.546 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.548 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.549 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.550 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.551 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.551 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.552 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.552 I llm_load_print_meta: n_ff             = 16384
0.00.281.553 I llm_load_print_meta: n_expert         = 0
0.00.281.553 I llm_load_print_meta: n_expert_used    = 0
0.00.281.554 I llm_load_print_meta: causal attn      = 1
0.00.281.555 I llm_load_print_meta: pooling type     = 0
0.00.281.555 I llm_load_print_meta: rope type        = 2
0.00.281.556 I llm_load_print_meta: rope scaling     = linear
0.00.281.557 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.558 I llm_load_print_meta: freq_scale_train = 1
0.00.281.559 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.559 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.559 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.560 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.561 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.561 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.561 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.562 I llm_load_print_meta: model type       = 2B
0.00.281.563 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.563 I llm_load_print_meta: model params     = 2.51 B
0.00.281.565 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.565 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.566 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.567 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.567 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.567 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.568 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.568 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.568 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.569 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.569 I llm_load_print_meta: max token length = 93
0.00.381.976 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.381.983 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.381.984 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.381.985 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.381.985 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.381.986 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.387.300 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.307 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.307 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.308 I llama_new_context_with_model: n_batch       = 2048
0.00.387.308 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.309 I llama_new_context_with_model: flash_attn    = 0
0.00.387.312 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.312 I llama_new_context_with_model: freq_scale    = 1
0.00.387.313 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.777 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.792 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.885 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.139 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.146 I llama_new_context_with_model: graph nodes  = 601
0.00.404.146 I llama_new_context_with_model: graph splits = 1
0.00.404.149 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.404.149 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.493.262 I main: llama threadpool init, n_threads = 4
0.00.493.275 I 
0.00.493.348 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.493.352 I 
0.00.493.392 I sampler seed: 3601470987
0.00.493.403 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.414 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.418 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.418 I 
 increasities are a common occurrence in natural ecosystems, and they can have important consequences for the structure and function of ecosystems.

**a) Briefly explain the types

0.02.800.141 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6950.29 tokens per second)
0.02.800.143 I llama_perf_context_print:        load time =     492.47 ms
0.02.800.144 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.800.146 I llama_perf_context_print:        eval time =    2287.73 ms /    32 runs   (   71.49 ms per token,    13.99 tokens per second)
0.02.800.146 I llama_perf_context_print:       total time =    2306.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.577 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.021.000 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.015 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.022 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.023 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.027 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.028 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.028 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.031 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.035 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.036 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.037 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.038 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.038 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.084 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.186 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.125 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.133 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.134 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.134 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.135 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.136 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.137 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.140 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.140 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.141 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.141 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.143 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.147 I llama_model_loader: - type  f32:   37 tensors
0.00.132.148 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.030 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.372 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.018 I llm_load_vocab: special tokens cache size = 5
0.00.289.190 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.212 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.213 I llm_load_print_meta: arch             = gemma
0.00.289.214 I llm_load_print_meta: vocab type       = SPM
0.00.289.214 I llm_load_print_meta: n_vocab          = 256000
0.00.289.215 I llm_load_print_meta: n_merges         = 0
0.00.289.215 I llm_load_print_meta: vocab_only       = 0
0.00.289.216 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.216 I llm_load_print_meta: n_embd           = 2048
0.00.289.216 I llm_load_print_meta: n_layer          = 18
0.00.289.229 I llm_load_print_meta: n_head           = 8
0.00.289.230 I llm_load_print_meta: n_head_kv        = 1
0.00.289.230 I llm_load_print_meta: n_rot            = 256
0.00.289.230 I llm_load_print_meta: n_swa            = 0
0.00.289.231 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.231 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.232 I llm_load_print_meta: n_gqa            = 8
0.00.289.233 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.234 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.235 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.236 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.236 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.237 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.237 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.238 I llm_load_print_meta: n_ff             = 16384
0.00.289.238 I llm_load_print_meta: n_expert         = 0
0.00.289.238 I llm_load_print_meta: n_expert_used    = 0
0.00.289.239 I llm_load_print_meta: causal attn      = 1
0.00.289.239 I llm_load_print_meta: pooling type     = 0
0.00.289.239 I llm_load_print_meta: rope type        = 2
0.00.289.239 I llm_load_print_meta: rope scaling     = linear
0.00.289.241 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.242 I llm_load_print_meta: freq_scale_train = 1
0.00.289.242 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.242 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.243 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.243 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.243 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.243 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.244 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.244 I llm_load_print_meta: model type       = 2B
0.00.289.244 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.245 I llm_load_print_meta: model params     = 2.51 B
0.00.289.246 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.247 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.247 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.248 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.248 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.248 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.249 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.249 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.249 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.250 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.250 I llm_load_print_meta: max token length = 93
0.00.383.908 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.389.065 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.071 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.072 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.072 I llama_new_context_with_model: n_batch       = 2048
0.00.389.073 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.073 I llama_new_context_with_model: flash_attn    = 0
0.00.389.076 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.076 I llama_new_context_with_model: freq_scale    = 1
0.00.389.077 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.404.760 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.404.776 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.870 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.118 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.125 I llama_new_context_with_model: graph nodes  = 601
0.00.406.125 I llama_new_context_with_model: graph splits = 1
0.00.406.127 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.406.128 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.768 I main: llama threadpool init, n_threads = 4
0.00.491.785 I 
0.00.491.860 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.491.864 I 
0.00.491.905 I sampler seed: 953902427
0.00.491.916 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.919 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.920 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.920 I 
 seconary branch, which is not directly connected to any other branch of the tree. It is a solitary branch that carries out the essential function of the node.

0.02.730.613 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6887.91 tokens per second)
0.02.730.616 I llama_perf_context_print:        load time =     490.98 ms
0.02.730.618 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.730.620 I llama_perf_context_print:        eval time =    2219.03 ms /    32 runs   (   69.34 ms per token,    14.42 tokens per second)
0.02.730.621 I llama_perf_context_print:       total time =    2238.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.540 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.741 I main: load the model and apply lora adapter, if any
0.00.021.034 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.046 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.054 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.063 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.067 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.071 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.072 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.072 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.073 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.074 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.074 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.079 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.080 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.080 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.081 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.081 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.954 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.174 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.091 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.099 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.100 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.100 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.101 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.102 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.102 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.106 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.106 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.108 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.108 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.109 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.113 I llama_model_loader: - type  f32:   37 tensors
0.00.132.114 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.810 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.773 I llm_load_vocab: special tokens cache size = 5
0.00.280.146 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.163 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.164 I llm_load_print_meta: arch             = gemma
0.00.280.164 I llm_load_print_meta: vocab type       = SPM
0.00.280.165 I llm_load_print_meta: n_vocab          = 256000
0.00.280.165 I llm_load_print_meta: n_merges         = 0
0.00.280.166 I llm_load_print_meta: vocab_only       = 0
0.00.280.166 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.166 I llm_load_print_meta: n_embd           = 2048
0.00.280.167 I llm_load_print_meta: n_layer          = 18
0.00.280.178 I llm_load_print_meta: n_head           = 8
0.00.280.179 I llm_load_print_meta: n_head_kv        = 1
0.00.280.180 I llm_load_print_meta: n_rot            = 256
0.00.280.180 I llm_load_print_meta: n_swa            = 0
0.00.280.180 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.180 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.181 I llm_load_print_meta: n_gqa            = 8
0.00.280.182 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.183 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.184 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.185 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.186 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.186 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.186 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.187 I llm_load_print_meta: n_ff             = 16384
0.00.280.188 I llm_load_print_meta: n_expert         = 0
0.00.280.188 I llm_load_print_meta: n_expert_used    = 0
0.00.280.188 I llm_load_print_meta: causal attn      = 1
0.00.280.188 I llm_load_print_meta: pooling type     = 0
0.00.280.189 I llm_load_print_meta: rope type        = 2
0.00.280.189 I llm_load_print_meta: rope scaling     = linear
0.00.280.191 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.191 I llm_load_print_meta: freq_scale_train = 1
0.00.280.191 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.192 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.192 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.192 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.193 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.193 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.193 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.193 I llm_load_print_meta: model type       = 2B
0.00.280.194 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.195 I llm_load_print_meta: model params     = 2.51 B
0.00.280.195 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.196 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.196 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.197 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.198 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.198 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.198 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.198 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.199 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.199 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.200 I llm_load_print_meta: max token length = 93
0.00.357.053 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.357.062 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.063 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.357.063 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.357.064 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.064 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.362.187 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.195 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.195 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.196 I llama_new_context_with_model: n_batch       = 2048
0.00.362.196 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.197 I llama_new_context_with_model: flash_attn    = 0
0.00.362.199 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.201 I llama_new_context_with_model: freq_scale    = 1
0.00.362.202 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.298 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.311 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.403 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.719 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.725 I llama_new_context_with_model: graph nodes  = 601
0.00.378.725 I llama_new_context_with_model: graph splits = 1
0.00.378.727 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.378.727 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.463 I main: llama threadpool init, n_threads = 4
0.00.465.480 I 
0.00.465.551 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.465.554 I 
0.00.465.595 I sampler seed: 4140849504
0.00.465.606 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.608 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.610 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.610 I 
 increably.

I am unable to generate a response due to the provided context being inappropriate. [end of text]


0.01.912.144 I llama_perf_sampler_print:    sampling time =       3.21 ms /    21 runs   (    0.15 ms per token,  6535.95 tokens per second)
0.01.912.146 I llama_perf_context_print:        load time =     464.70 ms
0.01.912.147 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.912.149 I llama_perf_context_print:        eval time =    1433.46 ms /    20 runs   (   71.67 ms per token,    13.95 tokens per second)
0.01.912.150 I llama_perf_context_print:       total time =    1446.69 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.564 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.000.778 I main: load the model and apply lora adapter, if any
0.00.021.449 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.460 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.467 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.473 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.474 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.478 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.479 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.480 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.480 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.481 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.481 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.486 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.487 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.488 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.489 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.489 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.062 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.352 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.269 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.276 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.277 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.277 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.278 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.279 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.280 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.282 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.283 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.284 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.285 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.286 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.289 I llama_model_loader: - type  f32:   37 tensors
0.00.132.290 I llama_model_loader: - type q8_0:  127 tensors
0.00.220.455 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.680 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.328 I llm_load_vocab: special tokens cache size = 5
0.00.294.716 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.734 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.734 I llm_load_print_meta: arch             = gemma
0.00.294.735 I llm_load_print_meta: vocab type       = SPM
0.00.294.736 I llm_load_print_meta: n_vocab          = 256000
0.00.294.737 I llm_load_print_meta: n_merges         = 0
0.00.294.749 I llm_load_print_meta: vocab_only       = 0
0.00.294.750 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.750 I llm_load_print_meta: n_embd           = 2048
0.00.294.751 I llm_load_print_meta: n_layer          = 18
0.00.294.763 I llm_load_print_meta: n_head           = 8
0.00.294.764 I llm_load_print_meta: n_head_kv        = 1
0.00.294.764 I llm_load_print_meta: n_rot            = 256
0.00.294.765 I llm_load_print_meta: n_swa            = 0
0.00.294.768 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.768 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.769 I llm_load_print_meta: n_gqa            = 8
0.00.294.770 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.771 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.783 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.785 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.785 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.785 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.786 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.788 I llm_load_print_meta: n_ff             = 16384
0.00.294.788 I llm_load_print_meta: n_expert         = 0
0.00.294.788 I llm_load_print_meta: n_expert_used    = 0
0.00.294.791 I llm_load_print_meta: causal attn      = 1
0.00.294.792 I llm_load_print_meta: pooling type     = 0
0.00.294.792 I llm_load_print_meta: rope type        = 2
0.00.294.792 I llm_load_print_meta: rope scaling     = linear
0.00.294.794 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.794 I llm_load_print_meta: freq_scale_train = 1
0.00.294.795 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.795 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.796 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.796 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.796 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.796 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.797 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.797 I llm_load_print_meta: model type       = 2B
0.00.294.797 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.798 I llm_load_print_meta: model params     = 2.51 B
0.00.294.800 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.801 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.802 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.802 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.803 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.803 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.803 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.804 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.804 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.805 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.805 I llm_load_print_meta: max token length = 93
0.00.366.152 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.366.160 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.371.460 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.468 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.469 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.469 I llama_new_context_with_model: n_batch       = 2048
0.00.371.469 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.470 I llama_new_context_with_model: flash_attn    = 0
0.00.371.474 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.474 I llama_new_context_with_model: freq_scale    = 1
0.00.371.475 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.562 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.579 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.672 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.971 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.977 I llama_new_context_with_model: graph nodes  = 601
0.00.388.978 I llama_new_context_with_model: graph splits = 1
0.00.388.980 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.388.981 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.769 I main: llama threadpool init, n_threads = 4
0.00.478.784 I 
0.00.478.860 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.478.863 I 
0.00.478.908 I sampler seed: 467212288
0.00.478.919 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.922 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.923 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.923 I 
 increasities.

I cannot answer this question as it is sexually suggestive in nature and would not be appropriate for me to provide any responses. [end of text]


0.02.721.777 I llama_perf_sampler_print:    sampling time =       4.54 ms /    30 runs   (    0.15 ms per token,  6600.66 tokens per second)
0.02.721.780 I llama_perf_context_print:        load time =     477.97 ms
0.02.721.781 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.721.783 I llama_perf_context_print:        eval time =    2225.45 ms /    29 runs   (   76.74 ms per token,    13.03 tokens per second)
0.02.721.784 I llama_perf_context_print:       total time =    2243.02 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.995s
user	0m35.993s
sys	0m9.574s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4319 (3b47c3f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40252.68 ms
main:    total time = 40252.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.232 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.241 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.250 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.255 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.257 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.261 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.265 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.266 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.266 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.270 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.270 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.271 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.271 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.272 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.677 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.293 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.107 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.112 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.113 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.114 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.114 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.116 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.116 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.119 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.120 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.121 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.122 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.123 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.125 I llama_model_loader: - type  f32:   37 tensors
0.00.131.126 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.127 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.906 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.526 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.020 I llm_load_vocab: special tokens cache size = 5
0.00.261.942 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.957 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.958 I llm_load_print_meta: arch             = gemma
0.00.261.958 I llm_load_print_meta: vocab type       = SPM
0.00.261.959 I llm_load_print_meta: n_vocab          = 256000
0.00.261.959 I llm_load_print_meta: n_merges         = 0
0.00.261.960 I llm_load_print_meta: vocab_only       = 0
0.00.261.960 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.960 I llm_load_print_meta: n_embd           = 2048
0.00.261.961 I llm_load_print_meta: n_layer          = 18
0.00.261.973 I llm_load_print_meta: n_head           = 8
0.00.261.974 I llm_load_print_meta: n_head_kv        = 1
0.00.261.974 I llm_load_print_meta: n_rot            = 256
0.00.261.974 I llm_load_print_meta: n_swa            = 0
0.00.261.975 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.975 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.976 I llm_load_print_meta: n_gqa            = 8
0.00.261.977 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.978 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.978 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.980 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.980 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.981 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.981 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.982 I llm_load_print_meta: n_ff             = 16384
0.00.261.982 I llm_load_print_meta: n_expert         = 0
0.00.261.982 I llm_load_print_meta: n_expert_used    = 0
0.00.261.982 I llm_load_print_meta: causal attn      = 1
0.00.261.983 I llm_load_print_meta: pooling type     = 0
0.00.261.983 I llm_load_print_meta: rope type        = 2
0.00.261.984 I llm_load_print_meta: rope scaling     = linear
0.00.261.985 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.986 I llm_load_print_meta: freq_scale_train = 1
0.00.261.986 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.987 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.987 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.987 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.987 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.988 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.988 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.988 I llm_load_print_meta: model type       = 2B
0.00.261.989 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.989 I llm_load_print_meta: model params     = 2.51 B
0.00.261.990 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.991 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.991 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.991 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.992 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.992 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.992 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.992 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.993 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.993 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.993 I llm_load_print_meta: max token length = 93
0.00.323.288 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.293 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.294 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.295 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.295 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.296 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.506 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.512 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.513 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.513 I llama_new_context_with_model: n_batch       = 2048
0.00.328.514 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.514 I llama_new_context_with_model: flash_attn    = 0
0.00.328.516 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.517 I llama_new_context_with_model: freq_scale    = 1
0.00.328.518 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.034 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.047 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.153 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.388 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.395 I llama_new_context_with_model: graph nodes  = 601
0.00.344.395 I llama_new_context_with_model: graph splits = 1
0.00.344.398 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.398 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.442 I main: llama threadpool init, n_threads = 4
0.00.419.456 I 
0.00.419.529 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.532 I 
0.00.419.574 I sampler seed: 276537825
0.00.419.583 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.592 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.604 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.607 I 
 increasities of the human body and its potential effects on health and longevity.

**Body Composition and Metabolism:**

* Discuss how changes in body composition and metabolism

0.02.062.178 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6561.94 tokens per second)
0.02.062.181 I llama_perf_context_print:        load time =     418.69 ms
0.02.062.183 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.062.184 I llama_perf_context_print:        eval time =    1623.03 ms /    32 runs   (   50.72 ms per token,    19.72 tokens per second)
0.02.062.185 I llama_perf_context_print:       total time =    1642.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4319 (3b47c3f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40203.18 ms
main:    total time = 40203.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.020.715 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.729 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.739 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.743 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.747 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.748 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.748 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.749 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.749 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.750 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.754 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.755 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.756 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.756 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.757 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.641 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.730 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.612 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.618 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.619 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.620 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.621 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.622 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.623 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.627 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.628 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.631 I llama_model_loader: - type  f32:   37 tensors
0.00.131.632 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.633 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.830 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.337 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.948 I llm_load_vocab: special tokens cache size = 5
0.00.267.189 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.205 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.206 I llm_load_print_meta: arch             = gemma
0.00.267.206 I llm_load_print_meta: vocab type       = SPM
0.00.267.207 I llm_load_print_meta: n_vocab          = 256000
0.00.267.207 I llm_load_print_meta: n_merges         = 0
0.00.267.208 I llm_load_print_meta: vocab_only       = 0
0.00.267.208 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.208 I llm_load_print_meta: n_embd           = 2048
0.00.267.208 I llm_load_print_meta: n_layer          = 18
0.00.267.220 I llm_load_print_meta: n_head           = 8
0.00.267.221 I llm_load_print_meta: n_head_kv        = 1
0.00.267.221 I llm_load_print_meta: n_rot            = 256
0.00.267.221 I llm_load_print_meta: n_swa            = 0
0.00.267.222 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.222 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.223 I llm_load_print_meta: n_gqa            = 8
0.00.267.224 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.225 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.225 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.227 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.227 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.227 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.228 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.229 I llm_load_print_meta: n_ff             = 16384
0.00.267.229 I llm_load_print_meta: n_expert         = 0
0.00.267.229 I llm_load_print_meta: n_expert_used    = 0
0.00.267.229 I llm_load_print_meta: causal attn      = 1
0.00.267.229 I llm_load_print_meta: pooling type     = 0
0.00.267.230 I llm_load_print_meta: rope type        = 2
0.00.267.230 I llm_load_print_meta: rope scaling     = linear
0.00.267.231 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.232 I llm_load_print_meta: freq_scale_train = 1
0.00.267.233 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.233 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.233 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.233 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.234 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.234 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.234 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.235 I llm_load_print_meta: model type       = 2B
0.00.267.235 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.236 I llm_load_print_meta: model params     = 2.51 B
0.00.267.237 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.237 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.237 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.238 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.238 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.238 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.239 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.239 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.239 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.240 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.240 I llm_load_print_meta: max token length = 93
0.00.325.737 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.752 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.758 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.758 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.759 I llama_new_context_with_model: n_batch       = 2048
0.00.330.759 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.760 I llama_new_context_with_model: flash_attn    = 0
0.00.330.763 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.764 I llama_new_context_with_model: freq_scale    = 1
0.00.330.764 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.504 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.519 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.611 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.839 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.846 I llama_new_context_with_model: graph nodes  = 601
0.00.346.846 I llama_new_context_with_model: graph splits = 1
0.00.346.849 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.346.849 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.169 I main: llama threadpool init, n_threads = 4
0.00.422.184 I 
0.00.422.258 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.261 I 
0.00.422.301 I sampler seed: 1861516949
0.00.422.312 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.314 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.315 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.315 I 
 seconded to the question "How can I write a strong and concise email to my manager regarding my workload and availability?"

**Response:**

**1.

0.02.025.790 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6787.33 tokens per second)
0.02.025.793 I llama_perf_context_print:        load time =     421.41 ms
0.02.025.794 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.025.795 I llama_perf_context_print:        eval time =    1584.84 ms /    32 runs   (   49.53 ms per token,    20.19 tokens per second)
0.02.025.796 I llama_perf_context_print:       total time =    1603.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.402s
user	10m24.691s
sys	0m7.136s
