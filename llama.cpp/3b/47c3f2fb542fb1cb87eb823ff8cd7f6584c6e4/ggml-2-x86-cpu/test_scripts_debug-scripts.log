+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.024.164 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.179 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.279 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.294 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.297 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.305 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.309 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.311 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.312 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.313 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.314 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.326 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.327 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.328 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.330 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.331 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.802 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.798 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.359.325 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.359.337 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.359.339 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.359.340 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.359.341 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.359.344 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.359.346 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.359.350 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.359.352 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.359.353 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.359.355 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.359.357 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.359.366 I llama_model_loader: - type  f32:   37 tensors
0.00.359.369 I llama_model_loader: - type q8_0:  127 tensors
0.00.610.131 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.677.537 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.678.513 I llm_load_vocab: special tokens cache size = 5
0.00.880.588 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.880.667 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.880.668 I llm_load_print_meta: arch             = gemma
0.00.880.668 I llm_load_print_meta: vocab type       = SPM
0.00.880.669 I llm_load_print_meta: n_vocab          = 256000
0.00.880.672 I llm_load_print_meta: n_merges         = 0
0.00.880.672 I llm_load_print_meta: vocab_only       = 0
0.00.880.673 I llm_load_print_meta: n_ctx_train      = 8192
0.00.880.673 I llm_load_print_meta: n_embd           = 2048
0.00.880.673 I llm_load_print_meta: n_layer          = 18
0.00.880.739 I llm_load_print_meta: n_head           = 8
0.00.880.747 I llm_load_print_meta: n_head_kv        = 1
0.00.880.747 I llm_load_print_meta: n_rot            = 256
0.00.880.748 I llm_load_print_meta: n_swa            = 0
0.00.880.748 I llm_load_print_meta: n_embd_head_k    = 256
0.00.880.749 I llm_load_print_meta: n_embd_head_v    = 256
0.00.880.753 I llm_load_print_meta: n_gqa            = 8
0.00.880.758 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.880.763 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.880.764 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.880.766 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.880.766 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.880.766 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.880.767 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.880.772 I llm_load_print_meta: n_ff             = 16384
0.00.880.772 I llm_load_print_meta: n_expert         = 0
0.00.880.774 I llm_load_print_meta: n_expert_used    = 0
0.00.880.775 I llm_load_print_meta: causal attn      = 1
0.00.880.788 I llm_load_print_meta: pooling type     = 0
0.00.880.789 I llm_load_print_meta: rope type        = 2
0.00.880.793 I llm_load_print_meta: rope scaling     = linear
0.00.880.795 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.880.814 I llm_load_print_meta: freq_scale_train = 1
0.00.880.815 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.880.815 I llm_load_print_meta: rope_finetuned   = unknown
0.00.880.815 I llm_load_print_meta: ssm_d_conv       = 0
0.00.880.816 I llm_load_print_meta: ssm_d_inner      = 0
0.00.880.816 I llm_load_print_meta: ssm_d_state      = 0
0.00.880.817 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.880.818 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.880.818 I llm_load_print_meta: model type       = 2B
0.00.880.819 I llm_load_print_meta: model ftype      = Q8_0
0.00.880.820 I llm_load_print_meta: model params     = 2.51 B
0.00.880.821 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.880.821 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.880.822 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.880.823 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.880.824 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.880.824 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.880.825 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.880.825 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.880.831 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.880.833 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.880.833 I llm_load_print_meta: max token length = 93
0.00.983.826 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.983.839 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.983.840 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.983.841 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.983.841 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.983.842 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.989.977 I llama_new_context_with_model: n_seq_max     = 1
0.00.989.986 I llama_new_context_with_model: n_ctx         = 4096
0.00.989.987 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.989.987 I llama_new_context_with_model: n_batch       = 2048
0.00.989.988 I llama_new_context_with_model: n_ubatch      = 512
0.00.989.988 I llama_new_context_with_model: flash_attn    = 0
0.00.989.993 I llama_new_context_with_model: freq_base     = 10000.0
0.00.989.994 I llama_new_context_with_model: freq_scale    = 1
0.00.989.995 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.005.827 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.005.869 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.005.988 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.008.565 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.008.569 I llama_new_context_with_model: graph nodes  = 601
0.01.008.569 I llama_new_context_with_model: graph splits = 1
0.01.008.593 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.008.596 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.618.193 I main: llama threadpool init, n_threads = 4
0.01.618.209 I 
0.01.618.329 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.618.332 I 
0.01.618.569 I sampler seed: 1382921326
0.01.618.583 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.618.594 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.618.595 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.618.598 I 
 seconally.

I cannot answer this question as it requires information that is not available to me. [end of text]


0.10.538.183 I llama_perf_sampler_print:    sampling time =      32.35 ms /    22 runs   (    1.47 ms per token,   680.15 tokens per second)
0.10.538.186 I llama_perf_context_print:        load time =    1617.22 ms
0.10.538.188 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.538.189 I llama_perf_context_print:        eval time =    8860.18 ms /    21 runs   (  421.91 ms per token,     2.37 tokens per second)
0.10.538.190 I llama_perf_context_print:       total time =    8920.00 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.310 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.407 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.421 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.423 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.429 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.430 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.432 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.433 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.434 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.436 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.446 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.450 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.451 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.452 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.454 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.259 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.929 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.469 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.480 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.481 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.483 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.484 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.485 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.487 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.491 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.513 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.518 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.520 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.358.522 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.531 I llama_model_loader: - type  f32:   37 tensors
0.00.358.533 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.120 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.801 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.759 I llm_load_vocab: special tokens cache size = 5
0.00.845.329 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.400 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.401 I llm_load_print_meta: arch             = gemma
0.00.845.402 I llm_load_print_meta: vocab type       = SPM
0.00.845.403 I llm_load_print_meta: n_vocab          = 256000
0.00.845.406 I llm_load_print_meta: n_merges         = 0
0.00.845.407 I llm_load_print_meta: vocab_only       = 0
0.00.845.407 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.408 I llm_load_print_meta: n_embd           = 2048
0.00.845.408 I llm_load_print_meta: n_layer          = 18
0.00.845.476 I llm_load_print_meta: n_head           = 8
0.00.845.483 I llm_load_print_meta: n_head_kv        = 1
0.00.845.484 I llm_load_print_meta: n_rot            = 256
0.00.845.485 I llm_load_print_meta: n_swa            = 0
0.00.845.485 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.485 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.491 I llm_load_print_meta: n_gqa            = 8
0.00.845.496 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.501 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.508 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.509 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.510 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.510 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.511 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.516 I llm_load_print_meta: n_ff             = 16384
0.00.845.516 I llm_load_print_meta: n_expert         = 0
0.00.845.517 I llm_load_print_meta: n_expert_used    = 0
0.00.845.517 I llm_load_print_meta: causal attn      = 1
0.00.845.517 I llm_load_print_meta: pooling type     = 0
0.00.845.519 I llm_load_print_meta: rope type        = 2
0.00.845.520 I llm_load_print_meta: rope scaling     = linear
0.00.845.521 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.524 I llm_load_print_meta: freq_scale_train = 1
0.00.845.536 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.537 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.537 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.538 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.538 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.551 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.552 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.553 I llm_load_print_meta: model type       = 2B
0.00.845.554 I llm_load_print_meta: model ftype      = Q8_0
0.00.845.555 I llm_load_print_meta: model params     = 2.51 B
0.00.845.555 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.845.556 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.557 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.564 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.566 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.566 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.567 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.567 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.573 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.575 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.575 I llm_load_print_meta: max token length = 93
0.00.941.823 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.947.647 I llama_new_context_with_model: n_seq_max     = 1
0.00.947.654 I llama_new_context_with_model: n_ctx         = 4096
0.00.947.654 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.947.655 I llama_new_context_with_model: n_batch       = 2048
0.00.947.655 I llama_new_context_with_model: n_ubatch      = 512
0.00.947.656 I llama_new_context_with_model: flash_attn    = 0
0.00.947.659 I llama_new_context_with_model: freq_base     = 10000.0
0.00.947.660 I llama_new_context_with_model: freq_scale    = 1
0.00.947.661 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.962.491 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.962.532 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.962.652 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.965.219 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.965.223 I llama_new_context_with_model: graph nodes  = 601
0.00.965.223 I llama_new_context_with_model: graph splits = 1
0.00.965.248 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.965.251 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.576.202 I main: llama threadpool init, n_threads = 4
0.01.576.221 I 
0.01.576.344 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.576.348 I 
0.01.576.585 I sampler seed: 1013646914
0.01.576.599 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.576.610 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.576.611 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.576.611 I 
 increasities in the story.

The sun dipped below the horizon, casting long shadows across the land. The wind whistled through the tall grass, carrying with it

0.15.292.309 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.88 tokens per second)
0.15.292.313 I llama_perf_context_print:        load time =    1575.26 ms
0.15.292.315 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.292.317 I llama_perf_context_print:        eval time =   13628.10 ms /    32 runs   (  425.88 ms per token,     2.35 tokens per second)
0.15.292.318 I llama_perf_context_print:       total time =   13716.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.000.894 I main: load the model and apply lora adapter, if any
0.00.023.349 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.363 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.459 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.472 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.474 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.482 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.484 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.486 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.487 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.488 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.489 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.502 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.504 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.505 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.506 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.507 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.112 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.513 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.820 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.830 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.831 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.832 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.833 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.835 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.836 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.840 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.841 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.843 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.844 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.357.846 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.856 I llama_model_loader: - type  f32:   37 tensors
0.00.357.858 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.476 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.144 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.168 I llm_load_vocab: special tokens cache size = 5
0.00.835.866 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.835.937 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.835.938 I llm_load_print_meta: arch             = gemma
0.00.835.939 I llm_load_print_meta: vocab type       = SPM
0.00.835.940 I llm_load_print_meta: n_vocab          = 256000
0.00.835.943 I llm_load_print_meta: n_merges         = 0
0.00.835.943 I llm_load_print_meta: vocab_only       = 0
0.00.835.944 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.944 I llm_load_print_meta: n_embd           = 2048
0.00.835.945 I llm_load_print_meta: n_layer          = 18
0.00.836.009 I llm_load_print_meta: n_head           = 8
0.00.836.018 I llm_load_print_meta: n_head_kv        = 1
0.00.836.022 I llm_load_print_meta: n_rot            = 256
0.00.836.023 I llm_load_print_meta: n_swa            = 0
0.00.836.023 I llm_load_print_meta: n_embd_head_k    = 256
0.00.836.024 I llm_load_print_meta: n_embd_head_v    = 256
0.00.836.030 I llm_load_print_meta: n_gqa            = 8
0.00.836.034 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.836.040 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.836.041 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.836.043 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.836.043 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.836.044 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.836.044 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.836.049 I llm_load_print_meta: n_ff             = 16384
0.00.836.050 I llm_load_print_meta: n_expert         = 0
0.00.836.051 I llm_load_print_meta: n_expert_used    = 0
0.00.836.051 I llm_load_print_meta: causal attn      = 1
0.00.836.051 I llm_load_print_meta: pooling type     = 0
0.00.836.052 I llm_load_print_meta: rope type        = 2
0.00.836.053 I llm_load_print_meta: rope scaling     = linear
0.00.836.055 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.836.055 I llm_load_print_meta: freq_scale_train = 1
0.00.836.056 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.836.059 I llm_load_print_meta: rope_finetuned   = unknown
0.00.836.059 I llm_load_print_meta: ssm_d_conv       = 0
0.00.836.060 I llm_load_print_meta: ssm_d_inner      = 0
0.00.836.060 I llm_load_print_meta: ssm_d_state      = 0
0.00.836.060 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.836.060 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.836.061 I llm_load_print_meta: model type       = 2B
0.00.836.062 I llm_load_print_meta: model ftype      = Q8_0
0.00.836.062 I llm_load_print_meta: model params     = 2.51 B
0.00.836.063 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.836.064 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.836.065 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.836.065 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.836.066 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.836.066 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.836.066 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.836.067 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.836.074 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.836.076 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.836.076 I llm_load_print_meta: max token length = 93
0.00.914.158 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.914.169 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.914.170 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.914.171 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.914.171 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.914.172 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.920.081 I llama_new_context_with_model: n_seq_max     = 1
0.00.920.088 I llama_new_context_with_model: n_ctx         = 4096
0.00.920.088 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.920.089 I llama_new_context_with_model: n_batch       = 2048
0.00.920.089 I llama_new_context_with_model: n_ubatch      = 512
0.00.920.090 I llama_new_context_with_model: flash_attn    = 0
0.00.920.092 I llama_new_context_with_model: freq_base     = 10000.0
0.00.920.093 I llama_new_context_with_model: freq_scale    = 1
0.00.920.094 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.934.805 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.934.845 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.934.968 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.937.667 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.937.671 I llama_new_context_with_model: graph nodes  = 601
0.00.937.671 I llama_new_context_with_model: graph splits = 1
0.00.937.694 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.937.696 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.546.226 I main: llama threadpool init, n_threads = 4
0.01.546.241 I 
0.01.546.365 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.546.371 I 
0.01.546.624 I sampler seed: 2066660312
0.01.546.641 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.546.655 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.546.657 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.546.658 I 
 seconally.

I am able to analyze textual data and generate summaries, identify relationships between entities, and generate insights from large datasets. However, I lack the

0.15.094.184 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.49 tokens per second)
0.15.094.189 I llama_perf_context_print:        load time =    1545.21 ms
0.15.094.191 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.094.192 I llama_perf_context_print:        eval time =   13459.75 ms /    32 runs   (  420.62 ms per token,     2.38 tokens per second)
0.15.094.193 I llama_perf_context_print:       total time =   13547.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.678 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.023.756 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.769 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.878 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.894 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.906 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.924 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.937 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.939 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.942 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.944 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.946 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.961 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.964 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.966 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.968 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.970 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.222 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.313 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.674 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.683 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.685 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.686 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.687 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.689 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.690 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.694 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.695 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.697 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.698 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.357.700 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.709 I llama_model_loader: - type  f32:   37 tensors
0.00.357.711 I llama_model_loader: - type q8_0:  127 tensors
0.00.574.200 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.404 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.363 I llm_load_vocab: special tokens cache size = 5
0.00.834.692 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.768 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.769 I llm_load_print_meta: arch             = gemma
0.00.834.770 I llm_load_print_meta: vocab type       = SPM
0.00.834.771 I llm_load_print_meta: n_vocab          = 256000
0.00.834.774 I llm_load_print_meta: n_merges         = 0
0.00.834.774 I llm_load_print_meta: vocab_only       = 0
0.00.834.775 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.775 I llm_load_print_meta: n_embd           = 2048
0.00.834.775 I llm_load_print_meta: n_layer          = 18
0.00.834.843 I llm_load_print_meta: n_head           = 8
0.00.834.850 I llm_load_print_meta: n_head_kv        = 1
0.00.834.851 I llm_load_print_meta: n_rot            = 256
0.00.834.851 I llm_load_print_meta: n_swa            = 0
0.00.834.851 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.852 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.878 I llm_load_print_meta: n_gqa            = 8
0.00.834.884 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.890 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.892 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.902 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.903 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.903 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.904 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.909 I llm_load_print_meta: n_ff             = 16384
0.00.834.910 I llm_load_print_meta: n_expert         = 0
0.00.834.910 I llm_load_print_meta: n_expert_used    = 0
0.00.834.911 I llm_load_print_meta: causal attn      = 1
0.00.834.911 I llm_load_print_meta: pooling type     = 0
0.00.834.912 I llm_load_print_meta: rope type        = 2
0.00.834.922 I llm_load_print_meta: rope scaling     = linear
0.00.834.925 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.926 I llm_load_print_meta: freq_scale_train = 1
0.00.834.935 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.936 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.945 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.946 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.947 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.948 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.958 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.959 I llm_load_print_meta: model type       = 2B
0.00.834.961 I llm_load_print_meta: model ftype      = Q8_0
0.00.834.962 I llm_load_print_meta: model params     = 2.51 B
0.00.834.964 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.834.964 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.966 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.967 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.968 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.969 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.979 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.980 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.988 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.990 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.991 I llm_load_print_meta: max token length = 93
0.00.909.247 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.909.257 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.915.334 I llama_new_context_with_model: n_seq_max     = 1
0.00.915.340 I llama_new_context_with_model: n_ctx         = 4096
0.00.915.341 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.915.341 I llama_new_context_with_model: n_batch       = 2048
0.00.915.341 I llama_new_context_with_model: n_ubatch      = 512
0.00.915.342 I llama_new_context_with_model: flash_attn    = 0
0.00.915.344 I llama_new_context_with_model: freq_base     = 10000.0
0.00.915.345 I llama_new_context_with_model: freq_scale    = 1
0.00.915.345 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.822 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.862 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.929.979 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.568 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.572 I llama_new_context_with_model: graph nodes  = 601
0.00.932.572 I llama_new_context_with_model: graph splits = 1
0.00.932.595 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.932.598 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.544.405 I main: llama threadpool init, n_threads = 4
0.01.544.421 I 
0.01.544.559 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.544.563 I 
0.01.544.805 I sampler seed: 825275117
0.01.544.819 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.544.831 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.544.832 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.544.833 I 
 increably.

I apologize for any inconvenience, but I am unable to write a song or perform musical composition due to a lack of the necessary creative abilities and

0.15.291.494 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   667.98 tokens per second)
0.15.291.498 I llama_perf_context_print:        load time =    1543.38 ms
0.15.291.500 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.291.502 I llama_perf_context_print:        eval time =   13658.32 ms /    32 runs   (  426.82 ms per token,     2.34 tokens per second)
0.15.291.503 I llama_perf_context_print:       total time =   13747.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.846s
user	3m33.322s
sys	0m9.490s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4319 (3b47c3f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185730.70 ms
main:    total time = 185730.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.000.828 I main: load the model and apply lora adapter, if any
0.00.023.158 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.168 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.264 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.276 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.278 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.284 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.286 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.287 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.289 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.290 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.291 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.301 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.305 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.307 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.308 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.309 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.509 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.019 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.382 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.390 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.392 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.393 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.394 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.396 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.398 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.402 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.404 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.407 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.418 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.358.422 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.431 I llama_model_loader: - type  f32:   37 tensors
0.00.358.434 I llama_model_loader: - type q4_K:  108 tensors
0.00.358.435 I llama_model_loader: - type q6_K:   19 tensors
0.00.582.198 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.832 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.755 I llm_load_vocab: special tokens cache size = 5
0.00.844.041 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.844.117 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.844.118 I llm_load_print_meta: arch             = gemma
0.00.844.119 I llm_load_print_meta: vocab type       = SPM
0.00.844.120 I llm_load_print_meta: n_vocab          = 256000
0.00.844.122 I llm_load_print_meta: n_merges         = 0
0.00.844.122 I llm_load_print_meta: vocab_only       = 0
0.00.844.123 I llm_load_print_meta: n_ctx_train      = 8192
0.00.844.123 I llm_load_print_meta: n_embd           = 2048
0.00.844.124 I llm_load_print_meta: n_layer          = 18
0.00.844.189 I llm_load_print_meta: n_head           = 8
0.00.844.196 I llm_load_print_meta: n_head_kv        = 1
0.00.844.197 I llm_load_print_meta: n_rot            = 256
0.00.844.198 I llm_load_print_meta: n_swa            = 0
0.00.844.199 I llm_load_print_meta: n_embd_head_k    = 256
0.00.844.200 I llm_load_print_meta: n_embd_head_v    = 256
0.00.844.204 I llm_load_print_meta: n_gqa            = 8
0.00.844.209 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.844.215 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.844.224 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.844.226 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.844.227 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.844.227 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.844.232 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.844.237 I llm_load_print_meta: n_ff             = 16384
0.00.844.238 I llm_load_print_meta: n_expert         = 0
0.00.844.238 I llm_load_print_meta: n_expert_used    = 0
0.00.844.239 I llm_load_print_meta: causal attn      = 1
0.00.844.247 I llm_load_print_meta: pooling type     = 0
0.00.844.248 I llm_load_print_meta: rope type        = 2
0.00.844.250 I llm_load_print_meta: rope scaling     = linear
0.00.844.251 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.844.252 I llm_load_print_meta: freq_scale_train = 1
0.00.844.252 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.844.255 I llm_load_print_meta: rope_finetuned   = unknown
0.00.844.255 I llm_load_print_meta: ssm_d_conv       = 0
0.00.844.256 I llm_load_print_meta: ssm_d_inner      = 0
0.00.844.256 I llm_load_print_meta: ssm_d_state      = 0
0.00.844.256 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.844.257 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.844.257 I llm_load_print_meta: model type       = 2B
0.00.844.259 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.844.259 I llm_load_print_meta: model params     = 2.51 B
0.00.844.260 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.844.261 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.844.261 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.844.261 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.844.262 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.844.262 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.844.262 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.844.264 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.844.269 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.844.271 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.844.271 I llm_load_print_meta: max token length = 93
0.00.906.900 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.906.908 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.906.909 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.906.910 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.906.910 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.906.911 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.912.835 I llama_new_context_with_model: n_seq_max     = 1
0.00.912.842 I llama_new_context_with_model: n_ctx         = 4096
0.00.912.842 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.912.843 I llama_new_context_with_model: n_batch       = 2048
0.00.912.843 I llama_new_context_with_model: n_ubatch      = 512
0.00.912.844 I llama_new_context_with_model: flash_attn    = 0
0.00.912.846 I llama_new_context_with_model: freq_base     = 10000.0
0.00.912.846 I llama_new_context_with_model: freq_scale    = 1
0.00.912.847 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.927.374 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.927.412 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.927.532 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.930.068 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.930.072 I llama_new_context_with_model: graph nodes  = 601
0.00.930.073 I llama_new_context_with_model: graph splits = 1
0.00.930.098 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.930.101 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.510.240 I main: llama threadpool init, n_threads = 4
0.01.510.259 I 
0.01.510.380 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.510.384 I 
0.01.510.621 I sampler seed: 275174018
0.01.510.635 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.510.646 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.510.647 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.510.647 I 
 seconally with the following sentence: "I have always believed that the most important thing in life is to find meaning and purpose in your actions."

This sentence

0.12.639.326 I llama_perf_sampler_print:    sampling time =      49.75 ms /    33 runs   (    1.51 ms per token,   663.30 tokens per second)
0.12.639.329 I llama_perf_context_print:        load time =    1509.31 ms
0.12.639.331 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.639.346 I llama_perf_context_print:        eval time =   11039.67 ms /    32 runs   (  344.99 ms per token,     2.90 tokens per second)
0.12.639.348 I llama_perf_context_print:       total time =   11129.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4319 (3b47c3f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186062.57 ms
main:    total time = 186062.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.676 I build: 4319 (3b47c3f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.882 I main: llama backend init
0.00.000.889 I main: load the model and apply lora adapter, if any
0.00.023.439 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.552 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.567 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.572 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.580 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.581 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.583 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.585 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.594 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.599 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.610 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.614 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.615 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.617 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.618 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.278 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.028 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.487 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.498 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.499 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.501 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.502 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.504 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.505 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.510 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.511 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.521 I llama_model_loader: - type  f32:   37 tensors
0.00.357.523 I llama_model_loader: - type q4_K:  108 tensors
0.00.357.524 I llama_model_loader: - type q6_K:   19 tensors
0.00.591.763 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.659.090 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.660.023 I llm_load_vocab: special tokens cache size = 5
0.00.858.945 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.859.023 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.859.024 I llm_load_print_meta: arch             = gemma
0.00.859.026 I llm_load_print_meta: vocab type       = SPM
0.00.859.027 I llm_load_print_meta: n_vocab          = 256000
0.00.859.029 I llm_load_print_meta: n_merges         = 0
0.00.859.030 I llm_load_print_meta: vocab_only       = 0
0.00.859.030 I llm_load_print_meta: n_ctx_train      = 8192
0.00.859.030 I llm_load_print_meta: n_embd           = 2048
0.00.859.031 I llm_load_print_meta: n_layer          = 18
0.00.859.097 I llm_load_print_meta: n_head           = 8
0.00.859.105 I llm_load_print_meta: n_head_kv        = 1
0.00.859.105 I llm_load_print_meta: n_rot            = 256
0.00.859.106 I llm_load_print_meta: n_swa            = 0
0.00.859.106 I llm_load_print_meta: n_embd_head_k    = 256
0.00.859.106 I llm_load_print_meta: n_embd_head_v    = 256
0.00.859.111 I llm_load_print_meta: n_gqa            = 8
0.00.859.116 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.859.121 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.859.122 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.859.124 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.859.124 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.859.125 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.859.125 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.859.130 I llm_load_print_meta: n_ff             = 16384
0.00.859.131 I llm_load_print_meta: n_expert         = 0
0.00.859.131 I llm_load_print_meta: n_expert_used    = 0
0.00.859.131 I llm_load_print_meta: causal attn      = 1
0.00.859.132 I llm_load_print_meta: pooling type     = 0
0.00.859.132 I llm_load_print_meta: rope type        = 2
0.00.859.132 I llm_load_print_meta: rope scaling     = linear
0.00.859.134 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.859.135 I llm_load_print_meta: freq_scale_train = 1
0.00.859.135 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.859.136 I llm_load_print_meta: rope_finetuned   = unknown
0.00.859.136 I llm_load_print_meta: ssm_d_conv       = 0
0.00.859.136 I llm_load_print_meta: ssm_d_inner      = 0
0.00.859.137 I llm_load_print_meta: ssm_d_state      = 0
0.00.859.137 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.859.137 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.859.138 I llm_load_print_meta: model type       = 2B
0.00.859.139 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.859.140 I llm_load_print_meta: model params     = 2.51 B
0.00.859.140 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.859.141 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.859.143 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.859.143 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.859.144 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.859.144 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.859.144 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.859.145 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.859.151 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.859.153 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.859.153 I llm_load_print_meta: max token length = 93
0.00.918.801 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.924.800 I llama_new_context_with_model: n_seq_max     = 1
0.00.924.810 I llama_new_context_with_model: n_ctx         = 4096
0.00.924.811 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.924.811 I llama_new_context_with_model: n_batch       = 2048
0.00.924.811 I llama_new_context_with_model: n_ubatch      = 512
0.00.924.812 I llama_new_context_with_model: flash_attn    = 0
0.00.924.816 I llama_new_context_with_model: freq_base     = 10000.0
0.00.924.817 I llama_new_context_with_model: freq_scale    = 1
0.00.924.818 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.940.762 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.940.806 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.940.939 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.943.574 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.943.578 I llama_new_context_with_model: graph nodes  = 601
0.00.943.578 I llama_new_context_with_model: graph splits = 1
0.00.943.604 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.943.607 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.525.560 I main: llama threadpool init, n_threads = 4
0.01.525.578 I 
0.01.525.703 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.525.707 I 
0.01.525.970 I sampler seed: 3836734944
0.01.525.983 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.525.994 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.525.995 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.525.995 I 
 increasities in the late 19th and early 20th centuries.

**Answer the following questions about the provided text:**

1. What

0.12.697.179 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.24 tokens per second)
0.12.697.183 I llama_perf_context_print:        load time =    1524.56 ms
0.12.697.196 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.697.199 I llama_perf_context_print:        eval time =   11082.86 ms /    32 runs   (  346.34 ms per token,     2.89 tokens per second)
0.12.697.200 I llama_perf_context_print:       total time =   11171.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.058s
user	46m44.491s
sys	0m6.498s
