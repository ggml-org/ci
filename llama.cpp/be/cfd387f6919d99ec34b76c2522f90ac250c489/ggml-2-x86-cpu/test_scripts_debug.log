+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 3923 (becfd387) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.765 I main: load the model and apply lora adapter, if any
0.00.024.742 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.935 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.020 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.030 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.032 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.037 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.038 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.039 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.041 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.042 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.043 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.050 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.052 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.058 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.063 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.065 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.532 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.995 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.872 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.880 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.881 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.882 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.883 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.884 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.885 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.889 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.890 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.891 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.892 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.893 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.901 I llama_model_loader: - type  f32:   37 tensors
0.00.265.905 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.890 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.487.641 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.489.421 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.494.952 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.507.318 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.321 I llm_load_vocab: special tokens cache size = 5
0.00.602.301 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.373 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.374 I llm_load_print_meta: arch             = gemma
0.00.602.375 I llm_load_print_meta: vocab type       = SPM
0.00.602.376 I llm_load_print_meta: n_vocab          = 256000
0.00.602.378 I llm_load_print_meta: n_merges         = 0
0.00.602.379 I llm_load_print_meta: vocab_only       = 0
0.00.602.379 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.380 I llm_load_print_meta: n_embd           = 2048
0.00.602.380 I llm_load_print_meta: n_layer          = 18
0.00.602.443 I llm_load_print_meta: n_head           = 8
0.00.602.451 I llm_load_print_meta: n_head_kv        = 1
0.00.602.452 I llm_load_print_meta: n_rot            = 256
0.00.602.452 I llm_load_print_meta: n_swa            = 0
0.00.602.457 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.458 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.462 I llm_load_print_meta: n_gqa            = 8
0.00.602.467 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.473 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.483 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.484 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.485 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.486 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.487 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.492 I llm_load_print_meta: n_ff             = 16384
0.00.602.493 I llm_load_print_meta: n_expert         = 0
0.00.602.494 I llm_load_print_meta: n_expert_used    = 0
0.00.602.505 I llm_load_print_meta: causal attn      = 1
0.00.602.506 I llm_load_print_meta: pooling type     = 0
0.00.602.507 I llm_load_print_meta: rope type        = 2
0.00.602.507 I llm_load_print_meta: rope scaling     = linear
0.00.602.509 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.509 I llm_load_print_meta: freq_scale_train = 1
0.00.602.510 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.510 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.511 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.511 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.511 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.513 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.513 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.515 I llm_load_print_meta: model type       = 2B
0.00.602.517 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.518 I llm_load_print_meta: model params     = 2.51 B
0.00.602.519 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.520 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.528 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.529 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.530 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.537 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.540 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.540 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.546 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.548 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.548 I llm_load_print_meta: max token length = 93
0.00.602.726 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.702.339 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.702.349 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.702.350 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.702.351 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.702.351 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.702.352 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.708.126 I llama_new_context_with_model: n_ctx      = 8192
0.00.708.133 I llama_new_context_with_model: n_batch    = 2048
0.00.708.134 I llama_new_context_with_model: n_ubatch   = 512
0.00.708.134 I llama_new_context_with_model: flash_attn = 0
0.00.708.136 I llama_new_context_with_model: freq_base  = 10000.0
0.00.708.137 I llama_new_context_with_model: freq_scale = 1
0.00.738.496 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.738.540 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.738.650 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.053 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.740.058 I llama_new_context_with_model: graph nodes  = 601
0.00.740.059 I llama_new_context_with_model: graph splits = 1
0.00.740.075 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.378 I main: llama threadpool init, n_threads = 4
0.01.352.390 I 
0.01.352.511 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.516 I 
0.01.352.696 I sampler seed: 3127685492
0.01.352.708 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.716 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.352.717 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.717 I 
 increably.

I'm not sure if I should use "incredibly" or "exceedingly" in this context.

[Answer]



0.14.748.942 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.34 tokens per second)
0.14.748.945 I llama_perf_context_print:        load time =    1349.53 ms
0.14.748.946 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.748.948 I llama_perf_context_print:        eval time =   13314.29 ms /    32 runs   (  416.07 ms per token,     2.40 tokens per second)
0.14.748.962 I llama_perf_context_print:       total time =   13396.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3923 (becfd387) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.025.253 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.349 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.363 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.365 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.369 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.372 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.373 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.374 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.375 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.376 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.385 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.386 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.388 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.389 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.602 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.403 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.367 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.376 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.377 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.378 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.379 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.380 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.381 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.385 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.386 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.387 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.388 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.389 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.397 I llama_model_loader: - type  f32:   37 tensors
0.00.267.400 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.109 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.023 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.492.736 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.497.776 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.508.149 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.011 I llm_load_vocab: special tokens cache size = 5
0.00.603.884 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.953 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.954 I llm_load_print_meta: arch             = gemma
0.00.603.955 I llm_load_print_meta: vocab type       = SPM
0.00.603.955 I llm_load_print_meta: n_vocab          = 256000
0.00.603.958 I llm_load_print_meta: n_merges         = 0
0.00.603.958 I llm_load_print_meta: vocab_only       = 0
0.00.603.958 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.959 I llm_load_print_meta: n_embd           = 2048
0.00.603.959 I llm_load_print_meta: n_layer          = 18
0.00.604.023 I llm_load_print_meta: n_head           = 8
0.00.604.030 I llm_load_print_meta: n_head_kv        = 1
0.00.604.031 I llm_load_print_meta: n_rot            = 256
0.00.604.031 I llm_load_print_meta: n_swa            = 0
0.00.604.031 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.032 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.036 I llm_load_print_meta: n_gqa            = 8
0.00.604.040 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.046 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.047 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.048 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.049 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.050 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.051 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.056 I llm_load_print_meta: n_ff             = 16384
0.00.604.056 I llm_load_print_meta: n_expert         = 0
0.00.604.057 I llm_load_print_meta: n_expert_used    = 0
0.00.604.057 I llm_load_print_meta: causal attn      = 1
0.00.604.058 I llm_load_print_meta: pooling type     = 0
0.00.604.062 I llm_load_print_meta: rope type        = 2
0.00.604.062 I llm_load_print_meta: rope scaling     = linear
0.00.604.064 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.075 I llm_load_print_meta: freq_scale_train = 1
0.00.604.088 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.089 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.090 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.097 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.098 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.099 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.099 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.102 I llm_load_print_meta: model type       = 2B
0.00.604.104 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.105 I llm_load_print_meta: model params     = 2.51 B
0.00.604.107 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.107 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.107 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.108 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.109 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.109 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.109 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.110 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.115 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.117 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.118 I llm_load_print_meta: max token length = 93
0.00.604.284 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.700.364 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.706.055 I llama_new_context_with_model: n_ctx      = 8192
0.00.706.061 I llama_new_context_with_model: n_batch    = 2048
0.00.706.062 I llama_new_context_with_model: n_ubatch   = 512
0.00.706.063 I llama_new_context_with_model: flash_attn = 0
0.00.706.065 I llama_new_context_with_model: freq_base  = 10000.0
0.00.706.066 I llama_new_context_with_model: freq_scale = 1
0.00.734.763 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.734.807 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.921 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.287 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.736.293 I llama_new_context_with_model: graph nodes  = 601
0.00.736.293 I llama_new_context_with_model: graph splits = 1
0.00.736.310 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.349.514 I main: llama threadpool init, n_threads = 4
0.01.349.525 I 
0.01.349.643 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.647 I 
0.01.349.831 I sampler seed: 461256710
0.01.349.842 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.849 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.349.850 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.850 I 
 maneuvously.

I apologize, but I am unable to provide a response that contains sexually suggestive or inappropriate content. My purpose is to assist with tasks and

0.14.989.921 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.76 tokens per second)
0.14.989.944 I llama_perf_context_print:        load time =    1346.64 ms
0.14.989.946 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.989.948 I llama_perf_context_print:        eval time =   13558.77 ms /    32 runs   (  423.71 ms per token,     2.36 tokens per second)
0.14.989.949 I llama_perf_context_print:       total time =   13640.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.620 I build: 3923 (becfd387) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.801 I main: load the model and apply lora adapter, if any
0.00.024.508 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.718 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.806 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.816 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.818 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.832 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.834 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.836 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.838 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.840 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.841 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.850 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.852 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.854 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.856 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.858 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.009 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.822 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.752 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.760 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.761 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.763 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.764 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.765 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.766 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.770 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.771 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.772 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.773 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.774 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.783 I llama_model_loader: - type  f32:   37 tensors
0.00.266.786 I llama_model_loader: - type q8_0:  127 tensors
0.00.436.800 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.479.612 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.481.588 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.487.232 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.499.825 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.811 I llm_load_vocab: special tokens cache size = 5
0.00.596.591 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.663 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.664 I llm_load_print_meta: arch             = gemma
0.00.596.665 I llm_load_print_meta: vocab type       = SPM
0.00.596.666 I llm_load_print_meta: n_vocab          = 256000
0.00.596.668 I llm_load_print_meta: n_merges         = 0
0.00.596.669 I llm_load_print_meta: vocab_only       = 0
0.00.596.669 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.669 I llm_load_print_meta: n_embd           = 2048
0.00.596.670 I llm_load_print_meta: n_layer          = 18
0.00.596.737 I llm_load_print_meta: n_head           = 8
0.00.596.744 I llm_load_print_meta: n_head_kv        = 1
0.00.596.745 I llm_load_print_meta: n_rot            = 256
0.00.596.745 I llm_load_print_meta: n_swa            = 0
0.00.596.747 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.747 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.752 I llm_load_print_meta: n_gqa            = 8
0.00.596.756 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.761 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.763 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.764 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.765 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.766 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.767 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.773 I llm_load_print_meta: n_ff             = 16384
0.00.596.774 I llm_load_print_meta: n_expert         = 0
0.00.596.775 I llm_load_print_meta: n_expert_used    = 0
0.00.596.780 I llm_load_print_meta: causal attn      = 1
0.00.596.780 I llm_load_print_meta: pooling type     = 0
0.00.596.781 I llm_load_print_meta: rope type        = 2
0.00.596.781 I llm_load_print_meta: rope scaling     = linear
0.00.596.783 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.784 I llm_load_print_meta: freq_scale_train = 1
0.00.596.785 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.785 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.795 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.796 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.797 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.797 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.810 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.812 I llm_load_print_meta: model type       = 2B
0.00.596.814 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.824 I llm_load_print_meta: model params     = 2.51 B
0.00.596.826 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.827 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.828 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.829 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.830 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.831 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.832 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.832 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.840 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.843 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.844 I llm_load_print_meta: max token length = 93
0.00.597.028 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.675.514 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.675.524 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.675.525 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.675.526 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.675.526 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.675.527 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.681.509 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.517 I llama_new_context_with_model: n_batch    = 2048
0.00.681.517 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.518 I llama_new_context_with_model: flash_attn = 0
0.00.681.521 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.522 I llama_new_context_with_model: freq_scale = 1
0.00.710.236 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.710.281 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.710.393 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.798 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.711.803 I llama_new_context_with_model: graph nodes  = 601
0.00.711.804 I llama_new_context_with_model: graph splits = 1
0.00.711.820 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.322.184 I main: llama threadpool init, n_threads = 4
0.01.322.195 I 
0.01.322.314 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.322.319 I 
0.01.322.502 I sampler seed: 1867589645
0.01.322.514 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.322.521 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.322.521 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.322.521 I 
 seconary.

The **[** variable represents the type of data being stored.

**Example:**

```
int age = 30;


0.14.868.135 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.94 tokens per second)
0.14.868.152 I llama_perf_context_print:        load time =    1319.30 ms
0.14.868.154 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.868.156 I llama_perf_context_print:        eval time =   13463.96 ms /    32 runs   (  420.75 ms per token,     2.38 tokens per second)
0.14.868.157 I llama_perf_context_print:       total time =   13545.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 3923 (becfd387) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.024.790 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.004 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.098 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.110 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.112 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.118 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.119 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.120 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.122 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.123 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.131 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.132 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.132 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.142 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.143 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.580 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.476 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.425 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.432 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.433 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.435 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.436 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.437 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.438 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.442 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.443 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.444 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.444 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.446 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.453 I llama_model_loader: - type  f32:   37 tensors
0.00.266.457 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.026 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.749 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.493.498 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.498.806 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.510.256 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.227 I llm_load_vocab: special tokens cache size = 5
0.00.619.223 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.291 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.292 I llm_load_print_meta: arch             = gemma
0.00.619.293 I llm_load_print_meta: vocab type       = SPM
0.00.619.294 I llm_load_print_meta: n_vocab          = 256000
0.00.619.296 I llm_load_print_meta: n_merges         = 0
0.00.619.297 I llm_load_print_meta: vocab_only       = 0
0.00.619.297 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.297 I llm_load_print_meta: n_embd           = 2048
0.00.619.298 I llm_load_print_meta: n_layer          = 18
0.00.619.361 I llm_load_print_meta: n_head           = 8
0.00.619.368 I llm_load_print_meta: n_head_kv        = 1
0.00.619.368 I llm_load_print_meta: n_rot            = 256
0.00.619.369 I llm_load_print_meta: n_swa            = 0
0.00.619.369 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.369 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.374 I llm_load_print_meta: n_gqa            = 8
0.00.619.378 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.383 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.384 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.385 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.386 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.386 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.386 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.391 I llm_load_print_meta: n_ff             = 16384
0.00.619.392 I llm_load_print_meta: n_expert         = 0
0.00.619.392 I llm_load_print_meta: n_expert_used    = 0
0.00.619.392 I llm_load_print_meta: causal attn      = 1
0.00.619.394 I llm_load_print_meta: pooling type     = 0
0.00.619.395 I llm_load_print_meta: rope type        = 2
0.00.619.395 I llm_load_print_meta: rope scaling     = linear
0.00.619.397 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.397 I llm_load_print_meta: freq_scale_train = 1
0.00.619.398 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.398 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.398 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.399 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.399 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.410 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.411 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.412 I llm_load_print_meta: model type       = 2B
0.00.619.413 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.414 I llm_load_print_meta: model params     = 2.51 B
0.00.619.415 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.420 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.421 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.421 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.422 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.422 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.422 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.423 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.429 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.431 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.431 I llm_load_print_meta: max token length = 93
0.00.619.596 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.691.071 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.691.082 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.696.697 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.704 I llama_new_context_with_model: n_batch    = 2048
0.00.696.704 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.705 I llama_new_context_with_model: flash_attn = 0
0.00.696.707 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.708 I llama_new_context_with_model: freq_scale = 1
0.00.725.377 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.725.418 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.725.531 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.926 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.726.932 I llama_new_context_with_model: graph nodes  = 601
0.00.726.932 I llama_new_context_with_model: graph splits = 1
0.00.726.947 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.068 I main: llama threadpool init, n_threads = 4
0.01.338.080 I 
0.01.338.180 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.184 I 
0.01.338.354 I sampler seed: 737713295
0.01.338.365 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.338.372 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.338.373 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.338.374 I 
 increasively in complexity, going from a simple mathematical expression to a complex mathematical structure with multiple interconnected components.

Answer: The complexity of a mathematical expression increases exponentially

0.14.824.900 I llama_perf_sampler_print:    sampling time =      49.10 ms /    33 runs   (    1.49 ms per token,   672.14 tokens per second)
0.14.824.904 I llama_perf_context_print:        load time =    1335.20 ms
0.14.824.905 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.824.907 I llama_perf_context_print:        eval time =   13404.86 ms /    32 runs   (  418.90 ms per token,     2.39 tokens per second)
0.14.824.908 I llama_perf_context_print:       total time =   13486.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.641s
user	3m48.901s
sys	0m9.418s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3923 (becfd387)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198517.59 ms
main:    total time = 198517.59 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.616 I build: 3923 (becfd387) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.808 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.024.354 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.556 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.640 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.650 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.652 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.655 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.658 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.659 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.660 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.661 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.662 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.667 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.668 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.669 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.671 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.679 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.379 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.414 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.425 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.426 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.427 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.428 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.429 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.430 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.434 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.435 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.436 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.437 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.452 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.476 I llama_model_loader: - type  f32:   37 tensors
0.00.265.481 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.482 I llama_model_loader: - type q6_K:   19 tensors
0.00.430.527 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.471.345 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.473.097 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.478.539 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.489.590 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.490.517 I llm_load_vocab: special tokens cache size = 5
0.00.584.579 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.584.646 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.584.647 I llm_load_print_meta: arch             = gemma
0.00.584.647 I llm_load_print_meta: vocab type       = SPM
0.00.584.648 I llm_load_print_meta: n_vocab          = 256000
0.00.584.650 I llm_load_print_meta: n_merges         = 0
0.00.584.651 I llm_load_print_meta: vocab_only       = 0
0.00.584.651 I llm_load_print_meta: n_ctx_train      = 8192
0.00.584.652 I llm_load_print_meta: n_embd           = 2048
0.00.584.652 I llm_load_print_meta: n_layer          = 18
0.00.584.714 I llm_load_print_meta: n_head           = 8
0.00.584.721 I llm_load_print_meta: n_head_kv        = 1
0.00.584.722 I llm_load_print_meta: n_rot            = 256
0.00.584.722 I llm_load_print_meta: n_swa            = 0
0.00.584.723 I llm_load_print_meta: n_embd_head_k    = 256
0.00.584.723 I llm_load_print_meta: n_embd_head_v    = 256
0.00.584.727 I llm_load_print_meta: n_gqa            = 8
0.00.584.732 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.584.738 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.584.739 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.584.740 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.584.741 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.584.742 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.584.742 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.584.747 I llm_load_print_meta: n_ff             = 16384
0.00.584.747 I llm_load_print_meta: n_expert         = 0
0.00.584.748 I llm_load_print_meta: n_expert_used    = 0
0.00.584.748 I llm_load_print_meta: causal attn      = 1
0.00.584.752 I llm_load_print_meta: pooling type     = 0
0.00.584.753 I llm_load_print_meta: rope type        = 2
0.00.584.753 I llm_load_print_meta: rope scaling     = linear
0.00.584.754 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.584.755 I llm_load_print_meta: freq_scale_train = 1
0.00.584.755 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.584.756 I llm_load_print_meta: rope_finetuned   = unknown
0.00.584.756 I llm_load_print_meta: ssm_d_conv       = 0
0.00.584.759 I llm_load_print_meta: ssm_d_inner      = 0
0.00.584.760 I llm_load_print_meta: ssm_d_state      = 0
0.00.584.760 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.584.760 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.584.761 I llm_load_print_meta: model type       = 2B
0.00.584.763 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.584.763 I llm_load_print_meta: model params     = 2.51 B
0.00.584.764 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.584.764 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.584.765 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.584.765 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.584.766 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.584.766 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.584.766 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.584.766 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.584.771 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.584.773 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.584.774 I llm_load_print_meta: max token length = 93
0.00.584.937 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.645.494 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.645.503 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.645.504 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.645.505 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.645.505 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.645.506 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.651.016 I llama_new_context_with_model: n_ctx      = 8192
0.00.651.023 I llama_new_context_with_model: n_batch    = 2048
0.00.651.024 I llama_new_context_with_model: n_ubatch   = 512
0.00.651.024 I llama_new_context_with_model: flash_attn = 0
0.00.651.027 I llama_new_context_with_model: freq_base  = 10000.0
0.00.651.028 I llama_new_context_with_model: freq_scale = 1
0.00.679.561 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.679.606 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.679.713 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.681.078 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.681.084 I llama_new_context_with_model: graph nodes  = 601
0.00.681.084 I llama_new_context_with_model: graph splits = 1
0.00.681.101 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.259.428 I main: llama threadpool init, n_threads = 4
0.01.259.440 I 
0.01.259.548 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.259.551 I 
0.01.259.728 I sampler seed: 62466676
0.01.259.740 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.259.747 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.259.748 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.259.748 I 
 encompassing all of the following:

- A discussion about the role of emotions in decision-making.
- The impact of emotions on our perception and understanding

0.12.190.217 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.10 tokens per second)
0.12.190.221 I llama_perf_context_print:        load time =    1256.57 ms
0.12.190.223 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.190.225 I llama_perf_context_print:        eval time =   10849.22 ms /    32 runs   (  339.04 ms per token,     2.95 tokens per second)
0.12.190.226 I llama_perf_context_print:       total time =   10930.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3923 (becfd387)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198499.50 ms
main:    total time = 198499.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3923 (becfd387) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.024.843 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.937 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.951 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.953 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.957 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.958 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.960 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.962 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.963 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.964 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.970 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.973 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.974 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.975 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.983 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.176 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.673 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.579 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.588 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.589 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.590 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.591 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.593 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.595 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.598 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.600 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.608 I llama_model_loader: - type  f32:   37 tensors
0.00.265.612 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.613 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.450 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.486.335 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.487.971 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.492.833 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.503.174 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.106 I llm_load_vocab: special tokens cache size = 5
0.00.598.009 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.076 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.077 I llm_load_print_meta: arch             = gemma
0.00.598.078 I llm_load_print_meta: vocab type       = SPM
0.00.598.079 I llm_load_print_meta: n_vocab          = 256000
0.00.598.081 I llm_load_print_meta: n_merges         = 0
0.00.598.081 I llm_load_print_meta: vocab_only       = 0
0.00.598.082 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.082 I llm_load_print_meta: n_embd           = 2048
0.00.598.082 I llm_load_print_meta: n_layer          = 18
0.00.598.147 I llm_load_print_meta: n_head           = 8
0.00.598.154 I llm_load_print_meta: n_head_kv        = 1
0.00.598.155 I llm_load_print_meta: n_rot            = 256
0.00.598.155 I llm_load_print_meta: n_swa            = 0
0.00.598.156 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.156 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.160 I llm_load_print_meta: n_gqa            = 8
0.00.598.165 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.170 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.171 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.173 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.173 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.173 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.174 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.178 I llm_load_print_meta: n_ff             = 16384
0.00.598.179 I llm_load_print_meta: n_expert         = 0
0.00.598.179 I llm_load_print_meta: n_expert_used    = 0
0.00.598.180 I llm_load_print_meta: causal attn      = 1
0.00.598.180 I llm_load_print_meta: pooling type     = 0
0.00.598.180 I llm_load_print_meta: rope type        = 2
0.00.598.181 I llm_load_print_meta: rope scaling     = linear
0.00.598.182 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.183 I llm_load_print_meta: freq_scale_train = 1
0.00.598.183 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.183 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.184 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.184 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.184 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.184 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.185 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.186 I llm_load_print_meta: model type       = 2B
0.00.598.188 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.598.189 I llm_load_print_meta: model params     = 2.51 B
0.00.598.190 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.598.191 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.203 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.204 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.205 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.205 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.206 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.207 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.213 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.214 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.225 I llm_load_print_meta: max token length = 93
0.00.598.396 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.657.231 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.662.695 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.702 I llama_new_context_with_model: n_batch    = 2048
0.00.662.702 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.703 I llama_new_context_with_model: flash_attn = 0
0.00.662.706 I llama_new_context_with_model: freq_base  = 10000.0
0.00.662.707 I llama_new_context_with_model: freq_scale = 1
0.00.691.459 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.691.505 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.691.633 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.692.995 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.693.000 I llama_new_context_with_model: graph nodes  = 601
0.00.693.000 I llama_new_context_with_model: graph splits = 1
0.00.693.017 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.272.371 I main: llama threadpool init, n_threads = 4
0.01.272.382 I 
0.01.272.489 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.272.493 I 
0.01.272.686 I sampler seed: 3372643722
0.01.272.699 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.707 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.272.710 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.711 I 
 squaRELLA: In a world where magic exists, the human mind is capable of harnessing its power to create intricate patterns and shapes. This ability is known

0.12.209.629 I llama_perf_sampler_print:    sampling time =      49.42 ms /    33 runs   (    1.50 ms per token,   667.72 tokens per second)
0.12.209.632 I llama_perf_context_print:        load time =    1269.50 ms
0.12.209.634 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.209.649 I llama_perf_context_print:        eval time =   10855.25 ms /    32 runs   (  339.23 ms per token,     2.95 tokens per second)
0.12.209.650 I llama_perf_context_print:       total time =   10937.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.279s
user	50m6.816s
sys	0m6.205s
