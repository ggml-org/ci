+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4187 (be0e350c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.246 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.256 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.264 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.270 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.272 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.276 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.277 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.277 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.278 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.279 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.280 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.284 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.284 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.285 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.285 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.286 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.577 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.089 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.994 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.000 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.001 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.002 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.003 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.005 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.008 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.009 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.010 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.011 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.012 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.016 I llama_model_loader: - type  f32:   37 tensors
0.00.133.017 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.990 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.240 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.863 I llm_load_vocab: special tokens cache size = 5
0.00.287.018 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.035 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.036 I llm_load_print_meta: arch             = gemma
0.00.287.036 I llm_load_print_meta: vocab type       = SPM
0.00.287.037 I llm_load_print_meta: n_vocab          = 256000
0.00.287.037 I llm_load_print_meta: n_merges         = 0
0.00.287.038 I llm_load_print_meta: vocab_only       = 0
0.00.287.038 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.038 I llm_load_print_meta: n_embd           = 2048
0.00.287.039 I llm_load_print_meta: n_layer          = 18
0.00.287.051 I llm_load_print_meta: n_head           = 8
0.00.287.052 I llm_load_print_meta: n_head_kv        = 1
0.00.287.052 I llm_load_print_meta: n_rot            = 256
0.00.287.052 I llm_load_print_meta: n_swa            = 0
0.00.287.052 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.053 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.054 I llm_load_print_meta: n_gqa            = 8
0.00.287.055 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.056 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.056 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.058 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.058 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.059 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.059 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.060 I llm_load_print_meta: n_ff             = 16384
0.00.287.060 I llm_load_print_meta: n_expert         = 0
0.00.287.061 I llm_load_print_meta: n_expert_used    = 0
0.00.287.061 I llm_load_print_meta: causal attn      = 1
0.00.287.061 I llm_load_print_meta: pooling type     = 0
0.00.287.062 I llm_load_print_meta: rope type        = 2
0.00.287.062 I llm_load_print_meta: rope scaling     = linear
0.00.287.064 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.064 I llm_load_print_meta: freq_scale_train = 1
0.00.287.065 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.065 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.065 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.066 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.066 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.066 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.066 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.067 I llm_load_print_meta: model type       = 2B
0.00.287.067 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.068 I llm_load_print_meta: model params     = 2.51 B
0.00.287.069 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.069 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.070 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.070 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.070 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.071 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.071 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.071 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.072 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.072 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.072 I llm_load_print_meta: max token length = 93
0.00.385.811 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.385.819 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.385.820 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.385.821 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.385.821 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.385.822 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.391.185 I llama_new_context_with_model: n_seq_max     = 1
0.00.391.191 I llama_new_context_with_model: n_ctx         = 4096
0.00.391.191 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.391.192 I llama_new_context_with_model: n_batch       = 2048
0.00.391.192 I llama_new_context_with_model: n_ubatch      = 512
0.00.391.193 I llama_new_context_with_model: flash_attn    = 0
0.00.391.195 I llama_new_context_with_model: freq_base     = 10000.0
0.00.391.196 I llama_new_context_with_model: freq_scale    = 1
0.00.391.197 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.670 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.683 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.774 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.089 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.407.093 I llama_new_context_with_model: graph nodes  = 601
0.00.407.094 I llama_new_context_with_model: graph splits = 1
0.00.407.096 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.493.392 I main: llama threadpool init, n_threads = 4
0.00.493.409 I 
0.00.493.482 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.493.486 I 
0.00.493.529 I sampler seed: 940074983
0.00.493.541 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.552 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.555 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.556 I 
 increasities from different eras:

**Medieval Period:**

A knight in full armor, wielding a gleaming longsword, charges into battle, his face set with

0.02.795.992 I llama_perf_sampler_print:    sampling time =       5.18 ms /    33 runs   (    0.16 ms per token,  6371.89 tokens per second)
0.02.795.994 I llama_perf_context_print:        load time =     492.63 ms
0.02.795.995 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.795.997 I llama_perf_context_print:        eval time =    2283.34 ms /    32 runs   (   71.35 ms per token,    14.01 tokens per second)
0.02.795.998 I llama_perf_context_print:       total time =    2302.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.595 I build: 4187 (be0e350c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.798 I main: llama backend init
0.00.000.804 I main: load the model and apply lora adapter, if any
0.00.021.269 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.292 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.293 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.298 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.298 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.300 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.300 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.301 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.302 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.307 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.308 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.308 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.308 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.309 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.326 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.104 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.026 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.035 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.035 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.036 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.036 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.037 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.038 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.041 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.043 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.044 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.044 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.045 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.048 I llama_model_loader: - type  f32:   37 tensors
0.00.133.049 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.041 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.738 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.344 I llm_load_vocab: special tokens cache size = 5
0.00.283.596 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.616 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.616 I llm_load_print_meta: arch             = gemma
0.00.283.617 I llm_load_print_meta: vocab type       = SPM
0.00.283.618 I llm_load_print_meta: n_vocab          = 256000
0.00.283.618 I llm_load_print_meta: n_merges         = 0
0.00.283.618 I llm_load_print_meta: vocab_only       = 0
0.00.283.619 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.619 I llm_load_print_meta: n_embd           = 2048
0.00.283.619 I llm_load_print_meta: n_layer          = 18
0.00.283.631 I llm_load_print_meta: n_head           = 8
0.00.283.632 I llm_load_print_meta: n_head_kv        = 1
0.00.283.632 I llm_load_print_meta: n_rot            = 256
0.00.283.633 I llm_load_print_meta: n_swa            = 0
0.00.283.633 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.633 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.634 I llm_load_print_meta: n_gqa            = 8
0.00.283.635 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.636 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.637 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.638 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.638 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.639 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.639 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.640 I llm_load_print_meta: n_ff             = 16384
0.00.283.640 I llm_load_print_meta: n_expert         = 0
0.00.283.640 I llm_load_print_meta: n_expert_used    = 0
0.00.283.641 I llm_load_print_meta: causal attn      = 1
0.00.283.641 I llm_load_print_meta: pooling type     = 0
0.00.283.641 I llm_load_print_meta: rope type        = 2
0.00.283.641 I llm_load_print_meta: rope scaling     = linear
0.00.283.643 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.643 I llm_load_print_meta: freq_scale_train = 1
0.00.283.644 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.644 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.645 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.645 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.645 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.646 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.646 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.646 I llm_load_print_meta: model type       = 2B
0.00.283.647 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.648 I llm_load_print_meta: model params     = 2.51 B
0.00.283.648 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.649 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.649 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.650 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.650 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.650 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.651 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.651 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.652 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.652 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.653 I llm_load_print_meta: max token length = 93
0.00.378.581 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.384.076 I llama_new_context_with_model: n_seq_max     = 1
0.00.384.084 I llama_new_context_with_model: n_ctx         = 4096
0.00.384.085 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.384.085 I llama_new_context_with_model: n_batch       = 2048
0.00.384.086 I llama_new_context_with_model: n_ubatch      = 512
0.00.384.086 I llama_new_context_with_model: flash_attn    = 0
0.00.384.089 I llama_new_context_with_model: freq_base     = 10000.0
0.00.384.091 I llama_new_context_with_model: freq_scale    = 1
0.00.384.091 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.399.473 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.488 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.584 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.874 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.881 I llama_new_context_with_model: graph nodes  = 601
0.00.400.881 I llama_new_context_with_model: graph splits = 1
0.00.400.884 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.731 I main: llama threadpool init, n_threads = 4
0.00.482.747 I 
0.00.482.821 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.482.825 I 
0.00.482.872 I sampler seed: 3611540958
0.00.482.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.887 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.888 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.888 I 
 seconary effects can be observed in a variety of contexts, including:

**1. Economic systems:**
- **Income inequality:** A reduction in the income

0.02.713.253 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6925.50 tokens per second)
0.02.713.256 I llama_perf_context_print:        load time =     481.91 ms
0.02.713.257 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.713.260 I llama_perf_context_print:        eval time =    2211.28 ms /    32 runs   (   69.10 ms per token,    14.47 tokens per second)
0.02.713.261 I llama_perf_context_print:       total time =    2230.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.487 I build: 4187 (be0e350c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.681 I main: llama backend init
0.00.000.687 I main: load the model and apply lora adapter, if any
0.00.020.959 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.969 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.977 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.982 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.983 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.987 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.988 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.990 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.991 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.991 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.992 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.997 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.997 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.998 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.999 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.999 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.616 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.925 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.873 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.879 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.880 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.881 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.881 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.882 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.883 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.885 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.886 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.887 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.888 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.889 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.893 I llama_model_loader: - type  f32:   37 tensors
0.00.133.894 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.653 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.549 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.138 I llm_load_vocab: special tokens cache size = 5
0.00.288.442 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.458 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.459 I llm_load_print_meta: arch             = gemma
0.00.288.460 I llm_load_print_meta: vocab type       = SPM
0.00.288.460 I llm_load_print_meta: n_vocab          = 256000
0.00.288.461 I llm_load_print_meta: n_merges         = 0
0.00.288.462 I llm_load_print_meta: vocab_only       = 0
0.00.288.462 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.462 I llm_load_print_meta: n_embd           = 2048
0.00.288.462 I llm_load_print_meta: n_layer          = 18
0.00.288.473 I llm_load_print_meta: n_head           = 8
0.00.288.474 I llm_load_print_meta: n_head_kv        = 1
0.00.288.475 I llm_load_print_meta: n_rot            = 256
0.00.288.475 I llm_load_print_meta: n_swa            = 0
0.00.288.475 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.476 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.476 I llm_load_print_meta: n_gqa            = 8
0.00.288.477 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.478 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.479 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.481 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.481 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.481 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.482 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.482 I llm_load_print_meta: n_ff             = 16384
0.00.288.483 I llm_load_print_meta: n_expert         = 0
0.00.288.483 I llm_load_print_meta: n_expert_used    = 0
0.00.288.483 I llm_load_print_meta: causal attn      = 1
0.00.288.484 I llm_load_print_meta: pooling type     = 0
0.00.288.484 I llm_load_print_meta: rope type        = 2
0.00.288.484 I llm_load_print_meta: rope scaling     = linear
0.00.288.486 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.486 I llm_load_print_meta: freq_scale_train = 1
0.00.288.487 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.487 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.487 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.488 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.488 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.488 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.488 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.489 I llm_load_print_meta: model type       = 2B
0.00.288.489 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.490 I llm_load_print_meta: model params     = 2.51 B
0.00.288.491 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.491 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.492 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.493 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.493 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.493 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.494 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.494 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.495 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.495 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.495 I llm_load_print_meta: max token length = 93
0.00.363.600 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.363.608 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.363.609 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.363.609 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.363.610 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.363.611 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.368.682 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.688 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.689 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.689 I llama_new_context_with_model: n_batch       = 2048
0.00.368.689 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.690 I llama_new_context_with_model: flash_attn    = 0
0.00.368.693 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.694 I llama_new_context_with_model: freq_scale    = 1
0.00.368.695 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.436 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.450 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.541 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.792 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.796 I llama_new_context_with_model: graph nodes  = 601
0.00.384.797 I llama_new_context_with_model: graph splits = 1
0.00.384.799 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.655 I main: llama threadpool init, n_threads = 4
0.00.471.672 I 
0.00.471.748 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.471.752 I 
0.00.471.801 I sampler seed: 2184481091
0.00.471.812 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.825 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.828 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.829 I 
 increasities, it is essential to recognize that the individual's right to bodily autonomy must be protected.

The right to bodily autonomy is a fundamental human right

0.02.805.737 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7060.33 tokens per second)
0.02.805.740 I llama_perf_context_print:        load time =     470.95 ms
0.02.805.741 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.805.743 I llama_perf_context_print:        eval time =    2315.18 ms /    32 runs   (   72.35 ms per token,    13.82 tokens per second)
0.02.805.743 I llama_perf_context_print:       total time =    2334.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.556 I build: 4187 (be0e350c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.021.450 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.461 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.469 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.474 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.475 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.480 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.481 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.482 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.482 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.483 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.484 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.491 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.492 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.493 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.494 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.494 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.459 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.127 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.078 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.087 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.087 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.088 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.089 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.089 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.091 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.093 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.094 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.095 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.095 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.096 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.100 I llama_model_loader: - type  f32:   37 tensors
0.00.133.101 I llama_model_loader: - type q8_0:  127 tensors
0.00.232.267 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.287.776 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.288.479 I llm_load_vocab: special tokens cache size = 5
0.00.309.924 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.309.945 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.309.946 I llm_load_print_meta: arch             = gemma
0.00.309.946 I llm_load_print_meta: vocab type       = SPM
0.00.309.947 I llm_load_print_meta: n_vocab          = 256000
0.00.309.947 I llm_load_print_meta: n_merges         = 0
0.00.309.948 I llm_load_print_meta: vocab_only       = 0
0.00.309.948 I llm_load_print_meta: n_ctx_train      = 8192
0.00.309.948 I llm_load_print_meta: n_embd           = 2048
0.00.309.948 I llm_load_print_meta: n_layer          = 18
0.00.309.969 I llm_load_print_meta: n_head           = 8
0.00.309.970 I llm_load_print_meta: n_head_kv        = 1
0.00.309.971 I llm_load_print_meta: n_rot            = 256
0.00.309.971 I llm_load_print_meta: n_swa            = 0
0.00.309.971 I llm_load_print_meta: n_embd_head_k    = 256
0.00.309.972 I llm_load_print_meta: n_embd_head_v    = 256
0.00.309.973 I llm_load_print_meta: n_gqa            = 8
0.00.309.973 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.309.974 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.309.975 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.309.976 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.309.977 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.309.977 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.309.977 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.309.978 I llm_load_print_meta: n_ff             = 16384
0.00.309.978 I llm_load_print_meta: n_expert         = 0
0.00.309.979 I llm_load_print_meta: n_expert_used    = 0
0.00.309.979 I llm_load_print_meta: causal attn      = 1
0.00.309.979 I llm_load_print_meta: pooling type     = 0
0.00.309.980 I llm_load_print_meta: rope type        = 2
0.00.309.980 I llm_load_print_meta: rope scaling     = linear
0.00.309.981 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.309.982 I llm_load_print_meta: freq_scale_train = 1
0.00.309.982 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.309.983 I llm_load_print_meta: rope_finetuned   = unknown
0.00.309.983 I llm_load_print_meta: ssm_d_conv       = 0
0.00.309.983 I llm_load_print_meta: ssm_d_inner      = 0
0.00.309.983 I llm_load_print_meta: ssm_d_state      = 0
0.00.309.984 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.309.984 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.309.984 I llm_load_print_meta: model type       = 2B
0.00.309.985 I llm_load_print_meta: model ftype      = Q8_0
0.00.309.986 I llm_load_print_meta: model params     = 2.51 B
0.00.309.987 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.309.987 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.309.988 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.309.988 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.309.989 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.309.989 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.309.989 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.309.990 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.309.990 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.309.991 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.309.991 I llm_load_print_meta: max token length = 93
0.00.381.160 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.381.167 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.386.677 I llama_new_context_with_model: n_seq_max     = 1
0.00.386.684 I llama_new_context_with_model: n_ctx         = 4096
0.00.386.684 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.386.684 I llama_new_context_with_model: n_batch       = 2048
0.00.386.685 I llama_new_context_with_model: n_ubatch      = 512
0.00.386.685 I llama_new_context_with_model: flash_attn    = 0
0.00.386.689 I llama_new_context_with_model: freq_base     = 10000.0
0.00.386.690 I llama_new_context_with_model: freq_scale    = 1
0.00.386.691 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.401.268 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.401.284 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.401.394 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.402.749 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.402.755 I llama_new_context_with_model: graph nodes  = 601
0.00.402.756 I llama_new_context_with_model: graph splits = 1
0.00.402.758 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.394 I main: llama threadpool init, n_threads = 4
0.00.492.413 I 
0.00.492.505 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.492.508 I 
0.00.492.562 I sampler seed: 2089044745
0.00.492.573 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.578 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.492.579 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.580 I 
 increasities.

I cannot answer this question as it contains sexually suggestive content that is not appropriate for me to discuss. [end of text]


0.02.425.986 I llama_perf_sampler_print:    sampling time =       4.08 ms /    26 runs   (    0.16 ms per token,  6370.99 tokens per second)
0.02.425.988 I llama_perf_context_print:        load time =     491.60 ms
0.02.425.990 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.425.991 I llama_perf_context_print:        eval time =    1917.67 ms /    25 runs   (   76.71 ms per token,    13.04 tokens per second)
0.02.425.992 I llama_perf_context_print:       total time =    1933.60 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.482s
user	0m38.201s
sys	0m9.585s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4187 (be0e350c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40250.39 ms
main:    total time = 40250.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.558 I build: 4187 (be0e350c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.000.786 I main: load the model and apply lora adapter, if any
0.00.020.989 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.000 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.013 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.014 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.019 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.020 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.021 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.022 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.022 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.026 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.027 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.027 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.028 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.028 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.931 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.782 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.768 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.775 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.776 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.776 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.777 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.778 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.780 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.783 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.784 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.785 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.786 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.787 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.791 I llama_model_loader: - type  f32:   37 tensors
0.00.132.792 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.793 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.032 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.911 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.511 I llm_load_vocab: special tokens cache size = 5
0.00.275.520 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.534 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.535 I llm_load_print_meta: arch             = gemma
0.00.275.535 I llm_load_print_meta: vocab type       = SPM
0.00.275.536 I llm_load_print_meta: n_vocab          = 256000
0.00.275.537 I llm_load_print_meta: n_merges         = 0
0.00.275.537 I llm_load_print_meta: vocab_only       = 0
0.00.275.537 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.537 I llm_load_print_meta: n_embd           = 2048
0.00.275.538 I llm_load_print_meta: n_layer          = 18
0.00.275.549 I llm_load_print_meta: n_head           = 8
0.00.275.550 I llm_load_print_meta: n_head_kv        = 1
0.00.275.551 I llm_load_print_meta: n_rot            = 256
0.00.275.551 I llm_load_print_meta: n_swa            = 0
0.00.275.551 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.552 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.552 I llm_load_print_meta: n_gqa            = 8
0.00.275.554 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.555 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.556 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.557 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.558 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.558 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.558 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.559 I llm_load_print_meta: n_ff             = 16384
0.00.275.559 I llm_load_print_meta: n_expert         = 0
0.00.275.560 I llm_load_print_meta: n_expert_used    = 0
0.00.275.560 I llm_load_print_meta: causal attn      = 1
0.00.275.560 I llm_load_print_meta: pooling type     = 0
0.00.275.561 I llm_load_print_meta: rope type        = 2
0.00.275.561 I llm_load_print_meta: rope scaling     = linear
0.00.275.563 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.563 I llm_load_print_meta: freq_scale_train = 1
0.00.275.564 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.564 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.564 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.564 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.565 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.565 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.565 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.566 I llm_load_print_meta: model type       = 2B
0.00.275.566 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.567 I llm_load_print_meta: model params     = 2.51 B
0.00.275.568 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.568 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.568 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.569 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.569 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.569 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.570 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.570 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.570 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.571 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.571 I llm_load_print_meta: max token length = 93
0.00.335.339 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.335.347 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.335.348 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.335.349 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.335.349 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.335.350 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.340.516 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.522 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.522 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.523 I llama_new_context_with_model: n_batch       = 2048
0.00.340.523 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.524 I llama_new_context_with_model: flash_attn    = 0
0.00.340.527 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.528 I llama_new_context_with_model: freq_scale    = 1
0.00.340.529 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.335 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.348 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.442 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.753 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.758 I llama_new_context_with_model: graph nodes  = 601
0.00.356.759 I llama_new_context_with_model: graph splits = 1
0.00.356.761 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.661 I main: llama threadpool init, n_threads = 4
0.00.433.677 I 
0.00.433.754 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.433.757 I 
0.00.433.806 I sampler seed: 2282826696
0.00.433.817 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.830 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.834 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.834 I 
 seconded with a flourish. The villagers cheered, their faces alight with joy.

This scene from a folk song captures the essence of celebration, community, and

0.02.074.309 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6510.16 tokens per second)
0.02.074.311 I llama_perf_context_print:        load time =     432.85 ms
0.02.074.313 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.074.315 I llama_perf_context_print:        eval time =    1620.89 ms /    32 runs   (   50.65 ms per token,    19.74 tokens per second)
0.02.074.316 I llama_perf_context_print:       total time =    1640.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4187 (be0e350c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40215.27 ms
main:    total time = 40215.27 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.605 I build: 4187 (be0e350c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.000.809 I main: load the model and apply lora adapter, if any
0.00.021.114 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.130 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.139 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.140 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.144 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.144 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.145 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.145 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.146 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.146 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.150 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.151 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.151 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.152 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.152 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.394 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.810 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.706 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.713 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.714 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.715 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.716 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.717 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.718 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.722 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.723 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.726 I llama_model_loader: - type  f32:   37 tensors
0.00.132.728 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.729 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.815 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.757 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.397 I llm_load_vocab: special tokens cache size = 5
0.00.276.818 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.836 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.837 I llm_load_print_meta: arch             = gemma
0.00.276.838 I llm_load_print_meta: vocab type       = SPM
0.00.276.839 I llm_load_print_meta: n_vocab          = 256000
0.00.276.839 I llm_load_print_meta: n_merges         = 0
0.00.276.840 I llm_load_print_meta: vocab_only       = 0
0.00.276.840 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.840 I llm_load_print_meta: n_embd           = 2048
0.00.276.841 I llm_load_print_meta: n_layer          = 18
0.00.276.853 I llm_load_print_meta: n_head           = 8
0.00.276.854 I llm_load_print_meta: n_head_kv        = 1
0.00.276.854 I llm_load_print_meta: n_rot            = 256
0.00.276.855 I llm_load_print_meta: n_swa            = 0
0.00.276.855 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.855 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.856 I llm_load_print_meta: n_gqa            = 8
0.00.276.857 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.858 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.859 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.860 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.860 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.861 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.861 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.862 I llm_load_print_meta: n_ff             = 16384
0.00.276.862 I llm_load_print_meta: n_expert         = 0
0.00.276.862 I llm_load_print_meta: n_expert_used    = 0
0.00.276.863 I llm_load_print_meta: causal attn      = 1
0.00.276.863 I llm_load_print_meta: pooling type     = 0
0.00.276.863 I llm_load_print_meta: rope type        = 2
0.00.276.863 I llm_load_print_meta: rope scaling     = linear
0.00.276.865 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.866 I llm_load_print_meta: freq_scale_train = 1
0.00.276.866 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.866 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.867 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.867 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.867 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.867 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.868 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.868 I llm_load_print_meta: model type       = 2B
0.00.276.869 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.870 I llm_load_print_meta: model params     = 2.51 B
0.00.276.870 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.871 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.871 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.872 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.872 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.872 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.873 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.873 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.874 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.875 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.875 I llm_load_print_meta: max token length = 93
0.00.331.804 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.336.855 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.861 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.861 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.862 I llama_new_context_with_model: n_batch       = 2048
0.00.336.862 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.863 I llama_new_context_with_model: flash_attn    = 0
0.00.336.865 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.866 I llama_new_context_with_model: freq_scale    = 1
0.00.336.867 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.528 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.543 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.632 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.853 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.860 I llama_new_context_with_model: graph nodes  = 601
0.00.352.861 I llama_new_context_with_model: graph splits = 1
0.00.352.862 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.478 I main: llama threadpool init, n_threads = 4
0.00.428.494 I 
0.00.428.573 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.428.576 I 
0.00.428.618 I sampler seed: 4168396700
0.00.428.629 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.640 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.643 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.643 I 
 squared

## The Importance of Quality Education

**Quality education** is paramount for individuals to achieve their full potential and contribute meaningfully to society. It fosters personal

0.02.049.106 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6539.83 tokens per second)
0.02.049.109 I llama_perf_context_print:        load time =     427.65 ms
0.02.049.110 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.049.112 I llama_perf_context_print:        eval time =    1601.20 ms /    32 runs   (   50.04 ms per token,    19.98 tokens per second)
0.02.049.114 I llama_perf_context_print:       total time =    1620.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.539s
user	10m25.077s
sys	0m7.098s
