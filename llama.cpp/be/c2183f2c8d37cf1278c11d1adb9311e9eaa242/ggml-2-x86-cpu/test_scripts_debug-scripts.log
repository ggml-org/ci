+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.710 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.915 I main: llama backend init
0.00.000.923 I main: load the model and apply lora adapter, if any
0.00.085.547 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.560 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.657 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.680 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.685 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.690 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.692 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.694 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.696 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.698 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.699 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.708 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.712 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.714 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.716 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.718 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.287.854 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.398.126 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.422.119 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.422.129 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.422.131 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.422.133 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.422.135 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.422.137 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.422.139 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.422.143 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.422.145 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.422.147 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.422.149 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.422.151 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.422.158 I llama_model_loader: - type  f32:   37 tensors
0.00.422.160 I llama_model_loader: - type q8_0:  127 tensors
0.00.689.108 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.811.078 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.812.035 I llm_load_vocab: special tokens cache size = 5
0.01.025.481 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.025.559 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.025.564 I llm_load_print_meta: arch             = gemma
0.01.025.565 I llm_load_print_meta: vocab type       = SPM
0.01.025.566 I llm_load_print_meta: n_vocab          = 256000
0.01.025.568 I llm_load_print_meta: n_merges         = 0
0.01.025.569 I llm_load_print_meta: vocab_only       = 0
0.01.025.569 I llm_load_print_meta: n_ctx_train      = 8192
0.01.025.570 I llm_load_print_meta: n_embd           = 2048
0.01.025.570 I llm_load_print_meta: n_layer          = 18
0.01.025.649 I llm_load_print_meta: n_head           = 8
0.01.025.660 I llm_load_print_meta: n_head_kv        = 1
0.01.025.661 I llm_load_print_meta: n_rot            = 256
0.01.025.661 I llm_load_print_meta: n_swa            = 0
0.01.025.663 I llm_load_print_meta: n_embd_head_k    = 256
0.01.025.663 I llm_load_print_meta: n_embd_head_v    = 256
0.01.025.668 I llm_load_print_meta: n_gqa            = 8
0.01.025.673 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.025.680 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.025.682 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.025.683 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.025.683 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.025.684 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.025.684 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.025.689 I llm_load_print_meta: n_ff             = 16384
0.01.025.689 I llm_load_print_meta: n_expert         = 0
0.01.025.690 I llm_load_print_meta: n_expert_used    = 0
0.01.025.691 I llm_load_print_meta: causal attn      = 1
0.01.025.691 I llm_load_print_meta: pooling type     = 0
0.01.025.692 I llm_load_print_meta: rope type        = 2
0.01.025.693 I llm_load_print_meta: rope scaling     = linear
0.01.025.694 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.025.696 I llm_load_print_meta: freq_scale_train = 1
0.01.025.696 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.025.697 I llm_load_print_meta: rope_finetuned   = unknown
0.01.025.697 I llm_load_print_meta: ssm_d_conv       = 0
0.01.025.697 I llm_load_print_meta: ssm_d_inner      = 0
0.01.025.698 I llm_load_print_meta: ssm_d_state      = 0
0.01.025.699 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.025.699 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.025.702 I llm_load_print_meta: model type       = 2B
0.01.025.704 I llm_load_print_meta: model ftype      = Q8_0
0.01.025.705 I llm_load_print_meta: model params     = 2.51 B
0.01.025.706 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.025.706 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.025.707 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.025.708 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.025.709 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.025.709 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.025.710 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.025.711 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.025.717 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.025.719 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.025.719 I llm_load_print_meta: max token length = 93
0.01.127.781 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.127.792 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.127.793 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.127.794 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.127.795 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.127.795 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.134.899 I llama_new_context_with_model: n_seq_max     = 1
0.01.134.905 I llama_new_context_with_model: n_ctx         = 4096
0.01.134.906 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.134.906 I llama_new_context_with_model: n_batch       = 2048
0.01.134.907 I llama_new_context_with_model: n_ubatch      = 512
0.01.134.907 I llama_new_context_with_model: flash_attn    = 0
0.01.134.910 I llama_new_context_with_model: freq_base     = 10000.0
0.01.134.911 I llama_new_context_with_model: freq_scale    = 1
0.01.134.911 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.134.995 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.150.668 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.150.717 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.150.839 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.154.489 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.154.493 I llama_new_context_with_model: graph nodes  = 601
0.01.154.494 I llama_new_context_with_model: graph splits = 1
0.01.154.518 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.154.521 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.766.766 I main: llama threadpool init, n_threads = 4
0.01.766.783 I 
0.01.766.908 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.766.912 I 
0.01.767.168 I sampler seed: 3149655035
0.01.767.183 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.767.193 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.767.196 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.767.196 I 
 increasements.

I understand that the phrase "incredibly disrespectful" is subjective and can mean different things to different people. However, I am concerned that the

0.15.328.439 I llama_perf_sampler_print:    sampling time =      49.68 ms /    33 runs   (    1.51 ms per token,   664.24 tokens per second)
0.15.328.442 I llama_perf_context_print:        load time =    1765.75 ms
0.15.328.444 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.328.459 I llama_perf_context_print:        eval time =   13476.65 ms /    32 runs   (  421.15 ms per token,     2.37 tokens per second)
0.15.328.460 I llama_perf_context_print:       total time =   13561.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.000.821 I main: load the model and apply lora adapter, if any
0.00.090.580 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.090.683 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.090.706 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.090.708 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.090.713 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.090.715 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.090.717 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.090.719 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.090.721 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.090.722 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.090.730 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.090.733 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.090.734 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.090.736 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.090.738 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.318.033 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.417.653 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.441.363 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.441.378 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.441.380 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.441.382 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.441.384 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.441.387 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.441.389 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.441.394 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.441.396 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.441.397 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.441.399 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.441.401 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.441.410 I llama_model_loader: - type  f32:   37 tensors
0.00.441.412 I llama_model_loader: - type q8_0:  127 tensors
0.00.707.918 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.830.188 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.831.138 I llm_load_vocab: special tokens cache size = 5
0.01.048.412 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.048.491 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.048.495 I llm_load_print_meta: arch             = gemma
0.01.048.496 I llm_load_print_meta: vocab type       = SPM
0.01.048.497 I llm_load_print_meta: n_vocab          = 256000
0.01.048.499 I llm_load_print_meta: n_merges         = 0
0.01.048.500 I llm_load_print_meta: vocab_only       = 0
0.01.048.500 I llm_load_print_meta: n_ctx_train      = 8192
0.01.048.501 I llm_load_print_meta: n_embd           = 2048
0.01.048.501 I llm_load_print_meta: n_layer          = 18
0.01.048.580 I llm_load_print_meta: n_head           = 8
0.01.048.588 I llm_load_print_meta: n_head_kv        = 1
0.01.048.589 I llm_load_print_meta: n_rot            = 256
0.01.048.590 I llm_load_print_meta: n_swa            = 0
0.01.048.590 I llm_load_print_meta: n_embd_head_k    = 256
0.01.048.590 I llm_load_print_meta: n_embd_head_v    = 256
0.01.048.595 I llm_load_print_meta: n_gqa            = 8
0.01.048.600 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.048.605 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.048.606 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.048.608 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.048.608 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.048.609 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.048.609 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.048.614 I llm_load_print_meta: n_ff             = 16384
0.01.048.615 I llm_load_print_meta: n_expert         = 0
0.01.048.616 I llm_load_print_meta: n_expert_used    = 0
0.01.048.616 I llm_load_print_meta: causal attn      = 1
0.01.048.621 I llm_load_print_meta: pooling type     = 0
0.01.048.622 I llm_load_print_meta: rope type        = 2
0.01.048.622 I llm_load_print_meta: rope scaling     = linear
0.01.048.624 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.048.625 I llm_load_print_meta: freq_scale_train = 1
0.01.048.626 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.048.627 I llm_load_print_meta: rope_finetuned   = unknown
0.01.048.627 I llm_load_print_meta: ssm_d_conv       = 0
0.01.048.627 I llm_load_print_meta: ssm_d_inner      = 0
0.01.048.628 I llm_load_print_meta: ssm_d_state      = 0
0.01.048.629 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.048.629 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.048.632 I llm_load_print_meta: model type       = 2B
0.01.048.633 I llm_load_print_meta: model ftype      = Q8_0
0.01.048.634 I llm_load_print_meta: model params     = 2.51 B
0.01.048.636 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.048.636 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.048.637 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.048.637 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.048.638 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.048.639 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.048.639 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.048.640 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.048.646 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.048.648 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.048.648 I llm_load_print_meta: max token length = 93
0.01.144.436 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.151.490 I llama_new_context_with_model: n_seq_max     = 1
0.01.151.496 I llama_new_context_with_model: n_ctx         = 4096
0.01.151.496 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.151.497 I llama_new_context_with_model: n_batch       = 2048
0.01.151.497 I llama_new_context_with_model: n_ubatch      = 512
0.01.151.498 I llama_new_context_with_model: flash_attn    = 0
0.01.151.501 I llama_new_context_with_model: freq_base     = 10000.0
0.01.151.501 I llama_new_context_with_model: freq_scale    = 1
0.01.151.502 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.151.589 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.167.547 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.167.592 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.167.714 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.171.308 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.171.313 I llama_new_context_with_model: graph nodes  = 601
0.01.171.313 I llama_new_context_with_model: graph splits = 1
0.01.171.342 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.171.345 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.786.520 I main: llama threadpool init, n_threads = 4
0.01.786.537 I 
0.01.786.658 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.786.662 I 
0.01.786.894 I sampler seed: 114427734
0.01.786.907 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.786.919 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.786.919 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.786.920 I 
 increasities, such as the Great Sphinx of Giza, are testaments to ancient civilizations' knowledge, ingenuity, and artistic achievement. [end of text]


0.13.715.857 I llama_perf_sampler_print:    sampling time =      43.44 ms /    29 runs   (    1.50 ms per token,   667.56 tokens per second)
0.13.715.869 I llama_perf_context_print:        load time =    1785.62 ms
0.13.715.871 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.715.873 I llama_perf_context_print:        eval time =   11855.09 ms /    28 runs   (  423.40 ms per token,     2.36 tokens per second)
0.13.715.875 I llama_perf_context_print:       total time =   11929.35 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.000.855 I main: load the model and apply lora adapter, if any
0.00.085.636 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.085.652 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.085.751 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.772 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.775 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.780 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.782 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.784 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.785 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.788 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.790 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.798 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.800 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.801 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.803 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.805 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.292.824 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.212 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.059 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.070 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.072 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.074 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.075 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.077 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.079 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.084 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.086 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.416.088 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.090 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.416.092 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.416.100 I llama_model_loader: - type  f32:   37 tensors
0.00.416.102 I llama_model_loader: - type q8_0:  127 tensors
0.00.685.662 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.809.441 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.810.442 I llm_load_vocab: special tokens cache size = 5
0.01.032.153 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.032.232 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.032.239 I llm_load_print_meta: arch             = gemma
0.01.032.240 I llm_load_print_meta: vocab type       = SPM
0.01.032.240 I llm_load_print_meta: n_vocab          = 256000
0.01.032.243 I llm_load_print_meta: n_merges         = 0
0.01.032.245 I llm_load_print_meta: vocab_only       = 0
0.01.032.246 I llm_load_print_meta: n_ctx_train      = 8192
0.01.032.246 I llm_load_print_meta: n_embd           = 2048
0.01.032.246 I llm_load_print_meta: n_layer          = 18
0.01.032.325 I llm_load_print_meta: n_head           = 8
0.01.032.336 I llm_load_print_meta: n_head_kv        = 1
0.01.032.336 I llm_load_print_meta: n_rot            = 256
0.01.032.339 I llm_load_print_meta: n_swa            = 0
0.01.032.340 I llm_load_print_meta: n_embd_head_k    = 256
0.01.032.340 I llm_load_print_meta: n_embd_head_v    = 256
0.01.032.345 I llm_load_print_meta: n_gqa            = 8
0.01.032.350 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.032.357 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.032.358 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.032.361 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.032.363 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.032.363 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.032.363 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.032.368 I llm_load_print_meta: n_ff             = 16384
0.01.032.368 I llm_load_print_meta: n_expert         = 0
0.01.032.369 I llm_load_print_meta: n_expert_used    = 0
0.01.032.369 I llm_load_print_meta: causal attn      = 1
0.01.032.370 I llm_load_print_meta: pooling type     = 0
0.01.032.370 I llm_load_print_meta: rope type        = 2
0.01.032.370 I llm_load_print_meta: rope scaling     = linear
0.01.032.372 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.032.373 I llm_load_print_meta: freq_scale_train = 1
0.01.032.375 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.032.375 I llm_load_print_meta: rope_finetuned   = unknown
0.01.032.376 I llm_load_print_meta: ssm_d_conv       = 0
0.01.032.376 I llm_load_print_meta: ssm_d_inner      = 0
0.01.032.376 I llm_load_print_meta: ssm_d_state      = 0
0.01.032.377 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.032.377 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.032.380 I llm_load_print_meta: model type       = 2B
0.01.032.381 I llm_load_print_meta: model ftype      = Q8_0
0.01.032.382 I llm_load_print_meta: model params     = 2.51 B
0.01.032.383 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.032.385 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.032.386 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.032.387 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.032.387 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.032.387 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.032.388 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.032.389 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.032.396 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.032.397 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.032.398 I llm_load_print_meta: max token length = 93
0.01.110.895 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.110.903 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.110.904 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.110.905 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.110.905 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.110.906 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.118.020 I llama_new_context_with_model: n_seq_max     = 1
0.01.118.027 I llama_new_context_with_model: n_ctx         = 4096
0.01.118.028 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.118.028 I llama_new_context_with_model: n_batch       = 2048
0.01.118.028 I llama_new_context_with_model: n_ubatch      = 512
0.01.118.029 I llama_new_context_with_model: flash_attn    = 0
0.01.118.032 I llama_new_context_with_model: freq_base     = 10000.0
0.01.118.033 I llama_new_context_with_model: freq_scale    = 1
0.01.118.033 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.118.120 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.133.579 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.133.615 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.133.737 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.136.950 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.136.954 I llama_new_context_with_model: graph nodes  = 601
0.01.136.954 I llama_new_context_with_model: graph splits = 1
0.01.136.980 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.136.984 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.750.730 I main: llama threadpool init, n_threads = 4
0.01.750.747 I 
0.01.750.869 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.750.873 I 
0.01.751.099 I sampler seed: 3808092497
0.01.751.113 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.751.123 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.751.126 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.751.127 I 
 increasities and metaphors to convey the following ideas:

1. **The power of knowledge and understanding:** Knowledge empowers individuals and societies to navigate the complexities of life

0.15.393.024 I llama_perf_sampler_print:    sampling time =      49.92 ms /    33 runs   (    1.51 ms per token,   661.00 tokens per second)
0.15.393.027 I llama_perf_context_print:        load time =    1749.79 ms
0.15.393.029 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.393.031 I llama_perf_context_print:        eval time =   13556.90 ms /    32 runs   (  423.65 ms per token,     2.36 tokens per second)
0.15.393.032 I llama_perf_context_print:       total time =   13642.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.085.841 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.855 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.957 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.981 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.986 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.991 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.993 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.995 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.996 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.998 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.000 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.008 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.013 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.014 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.016 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.018 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.311.918 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.411.421 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.435.055 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.435.066 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.435.068 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.435.070 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.435.072 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.435.074 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.435.076 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.435.081 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.435.083 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.435.085 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.435.087 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.435.088 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.435.098 I llama_model_loader: - type  f32:   37 tensors
0.00.435.100 I llama_model_loader: - type q8_0:  127 tensors
0.00.713.356 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.840.111 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.841.099 I llm_load_vocab: special tokens cache size = 5
0.01.047.323 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.047.402 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.047.409 I llm_load_print_meta: arch             = gemma
0.01.047.410 I llm_load_print_meta: vocab type       = SPM
0.01.047.411 I llm_load_print_meta: n_vocab          = 256000
0.01.047.413 I llm_load_print_meta: n_merges         = 0
0.01.047.414 I llm_load_print_meta: vocab_only       = 0
0.01.047.415 I llm_load_print_meta: n_ctx_train      = 8192
0.01.047.415 I llm_load_print_meta: n_embd           = 2048
0.01.047.416 I llm_load_print_meta: n_layer          = 18
0.01.047.495 I llm_load_print_meta: n_head           = 8
0.01.047.506 I llm_load_print_meta: n_head_kv        = 1
0.01.047.506 I llm_load_print_meta: n_rot            = 256
0.01.047.508 I llm_load_print_meta: n_swa            = 0
0.01.047.509 I llm_load_print_meta: n_embd_head_k    = 256
0.01.047.509 I llm_load_print_meta: n_embd_head_v    = 256
0.01.047.514 I llm_load_print_meta: n_gqa            = 8
0.01.047.518 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.047.524 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.047.525 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.047.526 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.047.526 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.047.527 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.047.527 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.047.532 I llm_load_print_meta: n_ff             = 16384
0.01.047.533 I llm_load_print_meta: n_expert         = 0
0.01.047.533 I llm_load_print_meta: n_expert_used    = 0
0.01.047.533 I llm_load_print_meta: causal attn      = 1
0.01.047.534 I llm_load_print_meta: pooling type     = 0
0.01.047.534 I llm_load_print_meta: rope type        = 2
0.01.047.544 I llm_load_print_meta: rope scaling     = linear
0.01.047.556 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.047.558 I llm_load_print_meta: freq_scale_train = 1
0.01.047.559 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.047.559 I llm_load_print_meta: rope_finetuned   = unknown
0.01.047.560 I llm_load_print_meta: ssm_d_conv       = 0
0.01.047.560 I llm_load_print_meta: ssm_d_inner      = 0
0.01.047.565 I llm_load_print_meta: ssm_d_state      = 0
0.01.047.566 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.047.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.047.569 I llm_load_print_meta: model type       = 2B
0.01.047.571 I llm_load_print_meta: model ftype      = Q8_0
0.01.047.572 I llm_load_print_meta: model params     = 2.51 B
0.01.047.573 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.047.581 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.047.582 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.047.582 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.047.596 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.047.597 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.047.598 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.047.606 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.047.613 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.047.622 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.047.622 I llm_load_print_meta: max token length = 93
0.01.120.538 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.120.547 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.127.546 I llama_new_context_with_model: n_seq_max     = 1
0.01.127.551 I llama_new_context_with_model: n_ctx         = 4096
0.01.127.552 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.127.552 I llama_new_context_with_model: n_batch       = 2048
0.01.127.553 I llama_new_context_with_model: n_ubatch      = 512
0.01.127.553 I llama_new_context_with_model: flash_attn    = 0
0.01.127.555 I llama_new_context_with_model: freq_base     = 10000.0
0.01.127.556 I llama_new_context_with_model: freq_scale    = 1
0.01.127.557 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.127.639 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.141.563 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.141.600 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.141.722 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.145.232 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.145.237 I llama_new_context_with_model: graph nodes  = 601
0.01.145.237 I llama_new_context_with_model: graph splits = 1
0.01.145.262 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.145.264 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.757.725 I main: llama threadpool init, n_threads = 4
0.01.757.742 I 
0.01.757.877 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.757.882 I 
0.01.758.151 I sampler seed: 526768860
0.01.758.165 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.758.183 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.758.186 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.758.187 I 
 increasities and the resulting adaptations are presented here.

**Question:** How do increasities and adaptations resulting from them contribute to the diversification of organisms?

**

0.15.353.905 I llama_perf_sampler_print:    sampling time =      49.91 ms /    33 runs   (    1.51 ms per token,   661.19 tokens per second)
0.15.353.909 I llama_perf_context_print:        load time =    1756.77 ms
0.15.353.911 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.353.913 I llama_perf_context_print:        eval time =   13510.37 ms /    32 runs   (  422.20 ms per token,     2.37 tokens per second)
0.15.353.914 I llama_perf_context_print:       total time =   13596.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m11.547s
user	3m46.768s
sys	0m9.453s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4437 (bec2183f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186004.47 ms
main:    total time = 186004.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.000.881 I main: load the model and apply lora adapter, if any
0.00.086.170 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.181 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.283 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.306 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.311 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.317 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.319 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.321 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.323 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.324 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.326 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.334 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.339 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.340 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.342 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.289.645 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.389.209 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.412.941 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.412.954 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.412.956 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.412.958 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.412.960 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.412.962 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.412.964 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.412.968 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.412.970 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.412.972 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.412.974 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.412.976 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.412.978 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.412.985 I llama_model_loader: - type  f32:   37 tensors
0.00.412.987 I llama_model_loader: - type q4_K:  108 tensors
0.00.412.987 I llama_model_loader: - type q6_K:   19 tensors
0.00.681.277 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.807.428 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.808.404 I llm_load_vocab: special tokens cache size = 5
0.01.025.681 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.025.766 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.025.771 I llm_load_print_meta: arch             = gemma
0.01.025.772 I llm_load_print_meta: vocab type       = SPM
0.01.025.772 I llm_load_print_meta: n_vocab          = 256000
0.01.025.775 I llm_load_print_meta: n_merges         = 0
0.01.025.775 I llm_load_print_meta: vocab_only       = 0
0.01.025.776 I llm_load_print_meta: n_ctx_train      = 8192
0.01.025.776 I llm_load_print_meta: n_embd           = 2048
0.01.025.777 I llm_load_print_meta: n_layer          = 18
0.01.025.856 I llm_load_print_meta: n_head           = 8
0.01.025.866 I llm_load_print_meta: n_head_kv        = 1
0.01.025.867 I llm_load_print_meta: n_rot            = 256
0.01.025.867 I llm_load_print_meta: n_swa            = 0
0.01.025.868 I llm_load_print_meta: n_embd_head_k    = 256
0.01.025.870 I llm_load_print_meta: n_embd_head_v    = 256
0.01.025.876 I llm_load_print_meta: n_gqa            = 8
0.01.025.881 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.025.888 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.025.889 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.025.890 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.025.891 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.025.891 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.025.892 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.025.897 I llm_load_print_meta: n_ff             = 16384
0.01.025.898 I llm_load_print_meta: n_expert         = 0
0.01.025.899 I llm_load_print_meta: n_expert_used    = 0
0.01.025.900 I llm_load_print_meta: causal attn      = 1
0.01.025.900 I llm_load_print_meta: pooling type     = 0
0.01.025.901 I llm_load_print_meta: rope type        = 2
0.01.025.902 I llm_load_print_meta: rope scaling     = linear
0.01.025.904 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.025.904 I llm_load_print_meta: freq_scale_train = 1
0.01.025.905 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.025.906 I llm_load_print_meta: rope_finetuned   = unknown
0.01.025.907 I llm_load_print_meta: ssm_d_conv       = 0
0.01.025.909 I llm_load_print_meta: ssm_d_inner      = 0
0.01.025.909 I llm_load_print_meta: ssm_d_state      = 0
0.01.025.910 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.025.910 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.025.913 I llm_load_print_meta: model type       = 2B
0.01.025.915 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.025.916 I llm_load_print_meta: model params     = 2.51 B
0.01.025.917 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.025.917 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.025.919 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.025.919 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.025.920 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.025.920 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.025.921 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.025.921 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.025.927 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.025.929 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.025.929 I llm_load_print_meta: max token length = 93
0.01.087.234 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.087.245 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.087.246 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.087.247 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.087.247 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.087.248 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.094.193 I llama_new_context_with_model: n_seq_max     = 1
0.01.094.198 I llama_new_context_with_model: n_ctx         = 4096
0.01.094.198 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.094.199 I llama_new_context_with_model: n_batch       = 2048
0.01.094.199 I llama_new_context_with_model: n_ubatch      = 512
0.01.094.199 I llama_new_context_with_model: flash_attn    = 0
0.01.094.201 I llama_new_context_with_model: freq_base     = 10000.0
0.01.094.202 I llama_new_context_with_model: freq_scale    = 1
0.01.094.203 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.094.284 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.108.724 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.108.766 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.108.890 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.112.119 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.112.124 I llama_new_context_with_model: graph nodes  = 601
0.01.112.124 I llama_new_context_with_model: graph splits = 1
0.01.112.147 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.112.150 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.693.276 I main: llama threadpool init, n_threads = 4
0.01.693.292 I 
0.01.693.409 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.693.413 I 
0.01.693.644 I sampler seed: 984679361
0.01.693.659 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.693.669 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.693.672 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.693.672 I 
 seconded 6,7,8,9,10. What is the mean of the numbers in the sequence?

The mean is the sum of

0.12.784.145 I llama_perf_sampler_print:    sampling time =      49.60 ms /    33 runs   (    1.50 ms per token,   665.27 tokens per second)
0.12.784.149 I llama_perf_context_print:        load time =    1692.30 ms
0.12.784.151 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.784.153 I llama_perf_context_print:        eval time =   11005.43 ms /    32 runs   (  343.92 ms per token,     2.91 tokens per second)
0.12.784.154 I llama_perf_context_print:       total time =   11090.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4437 (bec2183f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 185956.49 ms
main:    total time = 185956.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.085.330 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.447 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.472 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.477 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.482 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.485 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.487 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.488 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.490 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.492 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.500 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.505 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.507 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.508 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.307.599 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.407.026 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.430.611 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.430.628 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.430.630 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.430.631 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.430.633 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.430.636 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.430.638 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.430.642 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.430.644 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.430.646 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.430.656 I llama_model_loader: - type  f32:   37 tensors
0.00.430.658 I llama_model_loader: - type q4_K:  108 tensors
0.00.430.658 I llama_model_loader: - type q6_K:   19 tensors
0.00.713.982 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.837.087 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.838.057 I llm_load_vocab: special tokens cache size = 5
0.01.057.215 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.057.289 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.057.294 I llm_load_print_meta: arch             = gemma
0.01.057.294 I llm_load_print_meta: vocab type       = SPM
0.01.057.295 I llm_load_print_meta: n_vocab          = 256000
0.01.057.298 I llm_load_print_meta: n_merges         = 0
0.01.057.298 I llm_load_print_meta: vocab_only       = 0
0.01.057.299 I llm_load_print_meta: n_ctx_train      = 8192
0.01.057.299 I llm_load_print_meta: n_embd           = 2048
0.01.057.300 I llm_load_print_meta: n_layer          = 18
0.01.057.377 I llm_load_print_meta: n_head           = 8
0.01.057.388 I llm_load_print_meta: n_head_kv        = 1
0.01.057.388 I llm_load_print_meta: n_rot            = 256
0.01.057.389 I llm_load_print_meta: n_swa            = 0
0.01.057.389 I llm_load_print_meta: n_embd_head_k    = 256
0.01.057.390 I llm_load_print_meta: n_embd_head_v    = 256
0.01.057.395 I llm_load_print_meta: n_gqa            = 8
0.01.057.400 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.057.405 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.057.406 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.057.408 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.057.409 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.057.409 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.057.410 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.057.416 I llm_load_print_meta: n_ff             = 16384
0.01.057.416 I llm_load_print_meta: n_expert         = 0
0.01.057.417 I llm_load_print_meta: n_expert_used    = 0
0.01.057.418 I llm_load_print_meta: causal attn      = 1
0.01.057.429 I llm_load_print_meta: pooling type     = 0
0.01.057.430 I llm_load_print_meta: rope type        = 2
0.01.057.430 I llm_load_print_meta: rope scaling     = linear
0.01.057.432 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.057.433 I llm_load_print_meta: freq_scale_train = 1
0.01.057.433 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.057.434 I llm_load_print_meta: rope_finetuned   = unknown
0.01.057.435 I llm_load_print_meta: ssm_d_conv       = 0
0.01.057.435 I llm_load_print_meta: ssm_d_inner      = 0
0.01.057.436 I llm_load_print_meta: ssm_d_state      = 0
0.01.057.436 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.057.437 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.057.440 I llm_load_print_meta: model type       = 2B
0.01.057.442 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.057.443 I llm_load_print_meta: model params     = 2.51 B
0.01.057.444 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.057.445 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.057.446 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.057.446 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.057.447 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.057.448 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.057.448 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.057.449 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.057.455 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.057.456 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.057.457 I llm_load_print_meta: max token length = 93
0.01.117.099 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.124.010 I llama_new_context_with_model: n_seq_max     = 1
0.01.124.015 I llama_new_context_with_model: n_ctx         = 4096
0.01.124.015 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.124.015 I llama_new_context_with_model: n_batch       = 2048
0.01.124.016 I llama_new_context_with_model: n_ubatch      = 512
0.01.124.016 I llama_new_context_with_model: flash_attn    = 0
0.01.124.018 I llama_new_context_with_model: freq_base     = 10000.0
0.01.124.019 I llama_new_context_with_model: freq_scale    = 1
0.01.124.020 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.124.101 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.138.885 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.138.922 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.139.043 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.142.273 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.142.277 I llama_new_context_with_model: graph nodes  = 601
0.01.142.278 I llama_new_context_with_model: graph splits = 1
0.01.142.301 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.142.304 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.722.398 I main: llama threadpool init, n_threads = 4
0.01.722.414 I 
0.01.722.536 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.722.540 I 
0.01.722.772 I sampler seed: 226722988
0.01.722.787 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.722.799 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.722.800 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.722.800 I 
 increasities in your neighborhood or school? [end of text]


0.04.854.002 I llama_perf_sampler_print:    sampling time =      14.14 ms /    10 runs   (    1.41 ms per token,   707.31 tokens per second)
0.04.854.018 I llama_perf_context_print:        load time =    1721.48 ms
0.04.854.020 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.854.021 I llama_perf_context_print:        eval time =    3106.43 ms /     9 runs   (  345.16 ms per token,     2.90 tokens per second)
0.04.854.022 I llama_perf_context_print:       total time =    3131.62 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m32.944s
user	46m10.100s
sys	0m6.268s
