+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.549 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.030.836 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.846 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.854 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.860 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.861 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.864 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.864 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.865 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.865 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.866 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.866 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.871 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.871 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.872 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.872 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.873 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.054 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.383 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.807 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.813 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.814 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.815 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.816 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.817 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.817 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.819 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.821 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.821 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.822 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.823 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.137.825 I llama_model_loader: - type  f32:   37 tensors
0.00.137.826 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.113 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.816 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.368 I llm_load_vocab: special tokens cache size = 5
0.00.271.475 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.494 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.495 I llm_load_print_meta: arch             = gemma
0.00.271.496 I llm_load_print_meta: vocab type       = SPM
0.00.271.497 I llm_load_print_meta: n_vocab          = 256000
0.00.271.497 I llm_load_print_meta: n_merges         = 0
0.00.271.498 I llm_load_print_meta: vocab_only       = 0
0.00.271.498 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.498 I llm_load_print_meta: n_embd           = 2048
0.00.271.498 I llm_load_print_meta: n_layer          = 18
0.00.271.510 I llm_load_print_meta: n_head           = 8
0.00.271.512 I llm_load_print_meta: n_head_kv        = 1
0.00.271.512 I llm_load_print_meta: n_rot            = 256
0.00.271.513 I llm_load_print_meta: n_swa            = 0
0.00.271.513 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.513 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.515 I llm_load_print_meta: n_gqa            = 8
0.00.271.517 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.518 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.519 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.520 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.521 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.521 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.521 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.523 I llm_load_print_meta: n_ff             = 16384
0.00.271.524 I llm_load_print_meta: n_expert         = 0
0.00.271.524 I llm_load_print_meta: n_expert_used    = 0
0.00.271.524 I llm_load_print_meta: causal attn      = 1
0.00.271.524 I llm_load_print_meta: pooling type     = 0
0.00.271.525 I llm_load_print_meta: rope type        = 2
0.00.271.525 I llm_load_print_meta: rope scaling     = linear
0.00.271.526 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.527 I llm_load_print_meta: freq_scale_train = 1
0.00.271.527 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.528 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.528 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.528 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.528 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.529 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.529 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.530 I llm_load_print_meta: model type       = 2B
0.00.271.532 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.533 I llm_load_print_meta: model params     = 2.51 B
0.00.271.534 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.534 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.535 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.535 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.536 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.536 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.536 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.537 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.537 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.537 I llm_load_print_meta: max token length = 93
0.00.371.368 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.371.377 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.371.378 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.371.378 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.371.379 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.371.379 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.372.727 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.731 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.731 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.732 I llama_new_context_with_model: n_batch       = 2048
0.00.372.732 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.732 I llama_new_context_with_model: flash_attn    = 0
0.00.372.734 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.735 I llama_new_context_with_model: freq_scale    = 1
0.00.372.736 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.754 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.386.646 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.659 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.753 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.600 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.605 I llama_new_context_with_model: graph nodes  = 601
0.00.388.605 I llama_new_context_with_model: graph splits = 1
0.00.388.609 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.388.609 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.543 I main: llama threadpool init, n_threads = 4
0.00.473.558 I 
0.00.473.631 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.634 I 
0.00.473.666 I sampler seed: 780889458
0.00.473.677 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.688 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.692 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.692 I 
 increasities.

This is an absurd statement that does not make any sense. It is not possible to have a conversation about absurdism without engaging in nons

0.02.713.809 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6908.10 tokens per second)
0.02.713.812 I llama_perf_context_print:        load time =     472.78 ms
0.02.713.815 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.713.816 I llama_perf_context_print:        eval time =    2221.12 ms /    32 runs   (   69.41 ms per token,    14.41 tokens per second)
0.02.713.817 I llama_perf_context_print:       total time =    2240.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.524 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.029.911 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.029.929 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.938 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.941 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.945 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.950 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.951 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.952 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.953 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.954 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.961 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.962 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.963 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.964 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.965 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.457 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.744 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.039 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.046 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.047 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.047 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.048 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.049 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.050 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.052 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.052 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.053 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.054 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.054 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.137.057 I llama_model_loader: - type  f32:   37 tensors
0.00.137.059 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.393 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.703 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.189 I llm_load_vocab: special tokens cache size = 5
0.00.264.112 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.129 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.130 I llm_load_print_meta: arch             = gemma
0.00.264.131 I llm_load_print_meta: vocab type       = SPM
0.00.264.131 I llm_load_print_meta: n_vocab          = 256000
0.00.264.132 I llm_load_print_meta: n_merges         = 0
0.00.264.132 I llm_load_print_meta: vocab_only       = 0
0.00.264.133 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.133 I llm_load_print_meta: n_embd           = 2048
0.00.264.133 I llm_load_print_meta: n_layer          = 18
0.00.264.144 I llm_load_print_meta: n_head           = 8
0.00.264.146 I llm_load_print_meta: n_head_kv        = 1
0.00.264.146 I llm_load_print_meta: n_rot            = 256
0.00.264.147 I llm_load_print_meta: n_swa            = 0
0.00.264.147 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.147 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.149 I llm_load_print_meta: n_gqa            = 8
0.00.264.151 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.152 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.153 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.155 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.155 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.156 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.156 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.157 I llm_load_print_meta: n_ff             = 16384
0.00.264.158 I llm_load_print_meta: n_expert         = 0
0.00.264.158 I llm_load_print_meta: n_expert_used    = 0
0.00.264.158 I llm_load_print_meta: causal attn      = 1
0.00.264.159 I llm_load_print_meta: pooling type     = 0
0.00.264.159 I llm_load_print_meta: rope type        = 2
0.00.264.160 I llm_load_print_meta: rope scaling     = linear
0.00.264.161 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.162 I llm_load_print_meta: freq_scale_train = 1
0.00.264.162 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.163 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.163 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.163 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.163 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.164 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.164 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.166 I llm_load_print_meta: model type       = 2B
0.00.264.167 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.167 I llm_load_print_meta: model params     = 2.51 B
0.00.264.168 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.168 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.169 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.169 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.170 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.170 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.170 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.171 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.171 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.171 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.171 I llm_load_print_meta: max token length = 93
0.00.360.713 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.119 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.123 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.124 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.124 I llama_new_context_with_model: n_batch       = 2048
0.00.362.125 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.125 I llama_new_context_with_model: flash_attn    = 0
0.00.362.127 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.128 I llama_new_context_with_model: freq_scale    = 1
0.00.362.129 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.150 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.377.125 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.140 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.230 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.114 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.121 I llama_new_context_with_model: graph nodes  = 601
0.00.379.121 I llama_new_context_with_model: graph splits = 1
0.00.379.125 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.379.125 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.955 I main: llama threadpool init, n_threads = 4
0.00.459.969 I 
0.00.460.058 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.061 I 
0.00.460.099 I sampler seed: 244415656
0.00.460.109 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.113 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.113 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.115 I 
 increasities, the world's first interstellar cruise, and the first manned mission to Mars.

These are just a few of the remarkable achievements that have marked

0.02.629.814 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6734.69 tokens per second)
0.02.629.816 I llama_perf_context_print:        load time =     459.19 ms
0.02.629.818 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.629.820 I llama_perf_context_print:        eval time =    2151.26 ms /    32 runs   (   67.23 ms per token,    14.87 tokens per second)
0.02.629.821 I llama_perf_context_print:       total time =    2169.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.545 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.030.166 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.177 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.184 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.190 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.194 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.195 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.195 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.196 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.197 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.198 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.202 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.203 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.204 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.205 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.206 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.677 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.259 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.810 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.818 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.819 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.820 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.821 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.822 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.823 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.824 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.825 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.826 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.826 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.827 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.137.830 I llama_model_loader: - type  f32:   37 tensors
0.00.137.831 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.041 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.958 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.685 I llm_load_vocab: special tokens cache size = 5
0.00.284.195 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.216 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.218 I llm_load_print_meta: arch             = gemma
0.00.284.219 I llm_load_print_meta: vocab type       = SPM
0.00.284.220 I llm_load_print_meta: n_vocab          = 256000
0.00.284.220 I llm_load_print_meta: n_merges         = 0
0.00.284.221 I llm_load_print_meta: vocab_only       = 0
0.00.284.221 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.221 I llm_load_print_meta: n_embd           = 2048
0.00.284.222 I llm_load_print_meta: n_layer          = 18
0.00.284.234 I llm_load_print_meta: n_head           = 8
0.00.284.236 I llm_load_print_meta: n_head_kv        = 1
0.00.284.236 I llm_load_print_meta: n_rot            = 256
0.00.284.237 I llm_load_print_meta: n_swa            = 0
0.00.284.237 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.237 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.239 I llm_load_print_meta: n_gqa            = 8
0.00.284.241 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.243 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.243 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.245 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.245 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.245 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.246 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.247 I llm_load_print_meta: n_ff             = 16384
0.00.284.248 I llm_load_print_meta: n_expert         = 0
0.00.284.248 I llm_load_print_meta: n_expert_used    = 0
0.00.284.248 I llm_load_print_meta: causal attn      = 1
0.00.284.248 I llm_load_print_meta: pooling type     = 0
0.00.284.249 I llm_load_print_meta: rope type        = 2
0.00.284.249 I llm_load_print_meta: rope scaling     = linear
0.00.284.251 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.251 I llm_load_print_meta: freq_scale_train = 1
0.00.284.252 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.252 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.252 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.252 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.253 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.253 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.253 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.255 I llm_load_print_meta: model type       = 2B
0.00.284.256 I llm_load_print_meta: model ftype      = Q8_0
0.00.284.257 I llm_load_print_meta: model params     = 2.51 B
0.00.284.258 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.284.258 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.258 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.259 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.259 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.260 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.260 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.260 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.261 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.261 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.261 I llm_load_print_meta: max token length = 93
0.00.360.237 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.360.244 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.360.245 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.360.246 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.360.246 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.360.247 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.361.587 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.591 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.591 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.592 I llama_new_context_with_model: n_batch       = 2048
0.00.361.592 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.593 I llama_new_context_with_model: flash_attn    = 0
0.00.361.595 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.595 I llama_new_context_with_model: freq_scale    = 1
0.00.361.596 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.614 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.375.376 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.389 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.483 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.685 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.691 I llama_new_context_with_model: graph nodes  = 601
0.00.377.691 I llama_new_context_with_model: graph splits = 1
0.00.377.694 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.377.694 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.914 I main: llama threadpool init, n_threads = 4
0.00.464.927 I 
0.00.465.012 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.465.016 I 
0.00.465.056 I sampler seed: 763802340
0.00.465.071 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.074 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.074 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.075 I 
 increasities. [end of text]


0.00.753.969 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8143.32 tokens per second)
0.00.753.971 I llama_perf_context_print:        load time =     464.14 ms
0.00.753.973 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.753.974 I llama_perf_context_print:        eval time =     285.96 ms /     4 runs   (   71.49 ms per token,    13.99 tokens per second)
0.00.753.974 I llama_perf_context_print:       total time =     289.06 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.576 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.784 I main: llama backend init
0.00.000.791 I main: load the model and apply lora adapter, if any
0.00.030.413 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.030.424 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.030.433 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.440 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.441 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.443 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.444 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.445 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.446 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.446 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.447 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.451 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.451 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.452 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.453 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.453 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.794 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.848 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.227 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.234 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.235 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.235 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.236 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.237 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.237 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.240 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.241 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.242 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.243 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.136.243 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.136.246 I llama_model_loader: - type  f32:   37 tensors
0.00.136.247 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.959 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.223 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.745 I llm_load_vocab: special tokens cache size = 5
0.00.264.919 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.936 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.938 I llm_load_print_meta: arch             = gemma
0.00.264.939 I llm_load_print_meta: vocab type       = SPM
0.00.264.939 I llm_load_print_meta: n_vocab          = 256000
0.00.264.940 I llm_load_print_meta: n_merges         = 0
0.00.264.940 I llm_load_print_meta: vocab_only       = 0
0.00.264.940 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.941 I llm_load_print_meta: n_embd           = 2048
0.00.264.941 I llm_load_print_meta: n_layer          = 18
0.00.264.958 I llm_load_print_meta: n_head           = 8
0.00.264.961 I llm_load_print_meta: n_head_kv        = 1
0.00.264.961 I llm_load_print_meta: n_rot            = 256
0.00.264.961 I llm_load_print_meta: n_swa            = 0
0.00.264.963 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.963 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.965 I llm_load_print_meta: n_gqa            = 8
0.00.264.968 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.969 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.970 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.972 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.973 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.973 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.973 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.975 I llm_load_print_meta: n_ff             = 16384
0.00.264.976 I llm_load_print_meta: n_expert         = 0
0.00.264.976 I llm_load_print_meta: n_expert_used    = 0
0.00.264.976 I llm_load_print_meta: causal attn      = 1
0.00.264.977 I llm_load_print_meta: pooling type     = 0
0.00.264.978 I llm_load_print_meta: rope type        = 2
0.00.264.978 I llm_load_print_meta: rope scaling     = linear
0.00.264.980 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.980 I llm_load_print_meta: freq_scale_train = 1
0.00.264.980 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.981 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.981 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.982 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.982 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.983 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.983 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.985 I llm_load_print_meta: model type       = 2B
0.00.264.986 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.987 I llm_load_print_meta: model params     = 2.51 B
0.00.264.987 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.988 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.991 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.991 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.992 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.992 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.992 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.992 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.993 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.993 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.993 I llm_load_print_meta: max token length = 93
0.00.335.979 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.987 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.337.265 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.269 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.270 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.270 I llama_new_context_with_model: n_batch       = 2048
0.00.337.271 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.271 I llama_new_context_with_model: flash_attn    = 0
0.00.337.274 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.275 I llama_new_context_with_model: freq_scale    = 1
0.00.337.276 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.297 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.351.504 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.517 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.617 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.840 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.847 I llama_new_context_with_model: graph nodes  = 601
0.00.353.847 I llama_new_context_with_model: graph splits = 1
0.00.353.850 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.353.851 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.231 I main: llama threadpool init, n_threads = 4
0.00.443.246 I 
0.00.443.324 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.443.327 I 
0.00.443.360 I sampler seed: 805005767
0.00.443.371 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.373 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.373 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.374 I 
 increasities of the past. It is a thrilling experience, a chance to reconnect with our shared history and to imagine the possibilities of the future.

This is

0.02.835.413 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6777.57 tokens per second)
0.02.835.416 I llama_perf_context_print:        load time =     442.42 ms
0.02.835.417 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.835.418 I llama_perf_context_print:        eval time =    2374.05 ms /    32 runs   (   74.19 ms per token,    13.48 tokens per second)
0.02.835.419 I llama_perf_context_print:       total time =    2392.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.562s
user	0m31.413s
sys	0m9.247s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4437 (bec2183f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40199.34 ms
main:    total time = 40199.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.167 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.353 I main: llama backend init
0.00.000.360 I main: load the model and apply lora adapter, if any
0.00.029.553 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.029.563 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.029.571 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.576 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.577 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.580 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.580 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.581 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.581 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.582 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.582 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.585 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.586 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.586 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.587 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.055.587 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.840 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.254 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.260 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.261 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.262 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.262 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.263 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.263 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.265 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.265 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.136.266 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.136.267 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.267 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.136.268 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.270 I llama_model_loader: - type  f32:   37 tensors
0.00.136.271 I llama_model_loader: - type q4_K:  108 tensors
0.00.136.271 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.280 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.179 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.753 I llm_load_vocab: special tokens cache size = 5
0.00.268.013 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.031 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.033 I llm_load_print_meta: arch             = gemma
0.00.268.033 I llm_load_print_meta: vocab type       = SPM
0.00.268.034 I llm_load_print_meta: n_vocab          = 256000
0.00.268.035 I llm_load_print_meta: n_merges         = 0
0.00.268.035 I llm_load_print_meta: vocab_only       = 0
0.00.268.035 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.036 I llm_load_print_meta: n_embd           = 2048
0.00.268.036 I llm_load_print_meta: n_layer          = 18
0.00.268.047 I llm_load_print_meta: n_head           = 8
0.00.268.049 I llm_load_print_meta: n_head_kv        = 1
0.00.268.049 I llm_load_print_meta: n_rot            = 256
0.00.268.050 I llm_load_print_meta: n_swa            = 0
0.00.268.050 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.050 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.052 I llm_load_print_meta: n_gqa            = 8
0.00.268.054 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.055 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.056 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.058 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.058 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.058 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.059 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.061 I llm_load_print_meta: n_ff             = 16384
0.00.268.061 I llm_load_print_meta: n_expert         = 0
0.00.268.061 I llm_load_print_meta: n_expert_used    = 0
0.00.268.062 I llm_load_print_meta: causal attn      = 1
0.00.268.062 I llm_load_print_meta: pooling type     = 0
0.00.268.062 I llm_load_print_meta: rope type        = 2
0.00.268.063 I llm_load_print_meta: rope scaling     = linear
0.00.268.064 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.065 I llm_load_print_meta: freq_scale_train = 1
0.00.268.065 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.066 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.066 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.067 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.067 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.067 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.067 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.069 I llm_load_print_meta: model type       = 2B
0.00.268.070 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.071 I llm_load_print_meta: model params     = 2.51 B
0.00.268.072 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.072 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.073 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.073 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.074 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.074 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.074 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.075 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.075 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.075 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.075 I llm_load_print_meta: max token length = 93
0.00.328.662 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.668 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.668 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.669 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.670 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.670 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.985 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.989 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.989 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.989 I llama_new_context_with_model: n_batch       = 2048
0.00.329.990 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.990 I llama_new_context_with_model: flash_attn    = 0
0.00.329.992 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.992 I llama_new_context_with_model: freq_scale    = 1
0.00.329.994 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.330.011 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.344.547 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.559 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.653 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.633 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.640 I llama_new_context_with_model: graph nodes  = 601
0.00.346.640 I llama_new_context_with_model: graph splits = 1
0.00.346.643 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.346.644 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.257 I main: llama threadpool init, n_threads = 4
0.00.422.272 I 
0.00.422.349 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.352 I 
0.00.422.383 I sampler seed: 3227124173
0.00.422.395 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.398 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.399 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.399 I 
 seconally. [end of text]


0.00.627.510 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7898.89 tokens per second)
0.00.627.523 I llama_perf_context_print:        load time =     421.88 ms
0.00.627.524 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.627.525 I llama_perf_context_print:        eval time =     201.87 ms /     4 runs   (   50.47 ms per token,    19.81 tokens per second)
0.00.627.526 I llama_perf_context_print:       total time =     205.27 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4437 (bec2183f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40198.34 ms
main:    total time = 40198.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.517 I build: 4437 (bec2183f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.713 I main: llama backend init
0.00.000.721 I main: load the model and apply lora adapter, if any
0.00.030.298 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.030.315 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.324 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.325 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.328 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.328 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.329 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.330 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.332 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.336 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.337 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.337 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.338 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.055.624 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.574 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.898 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.905 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.905 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.906 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.907 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.908 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.908 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.911 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.911 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.135.912 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.135.915 I llama_model_loader: - type  f32:   37 tensors
0.00.135.916 I llama_model_loader: - type q4_K:  108 tensors
0.00.135.917 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.053 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.207 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.757 I llm_load_vocab: special tokens cache size = 5
0.00.265.724 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.741 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.742 I llm_load_print_meta: arch             = gemma
0.00.265.743 I llm_load_print_meta: vocab type       = SPM
0.00.265.743 I llm_load_print_meta: n_vocab          = 256000
0.00.265.743 I llm_load_print_meta: n_merges         = 0
0.00.265.744 I llm_load_print_meta: vocab_only       = 0
0.00.265.744 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.744 I llm_load_print_meta: n_embd           = 2048
0.00.265.745 I llm_load_print_meta: n_layer          = 18
0.00.265.757 I llm_load_print_meta: n_head           = 8
0.00.265.759 I llm_load_print_meta: n_head_kv        = 1
0.00.265.760 I llm_load_print_meta: n_rot            = 256
0.00.265.760 I llm_load_print_meta: n_swa            = 0
0.00.265.760 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.760 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.762 I llm_load_print_meta: n_gqa            = 8
0.00.265.765 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.766 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.767 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.768 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.769 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.769 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.769 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.771 I llm_load_print_meta: n_ff             = 16384
0.00.265.772 I llm_load_print_meta: n_expert         = 0
0.00.265.772 I llm_load_print_meta: n_expert_used    = 0
0.00.265.772 I llm_load_print_meta: causal attn      = 1
0.00.265.772 I llm_load_print_meta: pooling type     = 0
0.00.265.773 I llm_load_print_meta: rope type        = 2
0.00.265.773 I llm_load_print_meta: rope scaling     = linear
0.00.265.775 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.775 I llm_load_print_meta: freq_scale_train = 1
0.00.265.776 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.776 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.776 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.777 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.777 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.777 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.777 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.779 I llm_load_print_meta: model type       = 2B
0.00.265.780 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.781 I llm_load_print_meta: model params     = 2.51 B
0.00.265.782 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.782 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.782 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.784 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.784 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.784 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.785 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.785 I llm_load_print_meta: max token length = 93
0.00.323.448 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.324.652 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.656 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.656 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.656 I llama_new_context_with_model: n_batch       = 2048
0.00.324.657 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.657 I llama_new_context_with_model: flash_attn    = 0
0.00.324.659 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.660 I llama_new_context_with_model: freq_scale    = 1
0.00.324.661 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.324.687 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.339.636 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.649 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.740 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.955 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.961 I llama_new_context_with_model: graph nodes  = 601
0.00.341.962 I llama_new_context_with_model: graph splits = 1
0.00.341.964 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.341.965 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.857 I main: llama threadpool init, n_threads = 4
0.00.415.869 I 
0.00.415.947 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.415.950 I 
0.00.415.990 I sampler seed: 1914562110
0.00.416.002 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.013 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.416.017 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.416.017 I 
 seconded into my message. I am unable to access the message.

I am unable to access the message. Could you please provide me with information on how

0.01.976.980 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6476.94 tokens per second)
0.01.976.982 I llama_perf_context_print:        load time =     415.12 ms
0.01.976.983 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.976.985 I llama_perf_context_print:        eval time =    1542.50 ms /    32 runs   (   48.20 ms per token,    20.75 tokens per second)
0.01.976.985 I llama_perf_context_print:       total time =    1561.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.848s
user	10m18.601s
sys	0m6.859s
