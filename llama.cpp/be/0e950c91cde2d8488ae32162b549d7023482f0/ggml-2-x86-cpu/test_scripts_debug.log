+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4452 (be0e950c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.000.843 I main: load the model and apply lora adapter, if any
0.00.085.838 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.852 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.945 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.967 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.969 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.974 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.976 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.978 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.979 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.981 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.983 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.989 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.991 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.992 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.994 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.995 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.307.858 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.409.318 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.433.594 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.433.605 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.433.607 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.433.609 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.433.610 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.433.612 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.433.614 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.433.619 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.433.621 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.433.624 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.433.626 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.433.627 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.433.635 I llama_model_loader: - type  f32:   37 tensors
0.00.433.637 I llama_model_loader: - type q8_0:  127 tensors
0.00.694.793 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.820.304 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.821.370 I llm_load_vocab: special tokens cache size = 5
0.01.033.703 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.033.787 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.033.791 I llm_load_print_meta: arch             = gemma
0.01.033.792 I llm_load_print_meta: vocab type       = SPM
0.01.033.793 I llm_load_print_meta: n_vocab          = 256000
0.01.033.795 I llm_load_print_meta: n_merges         = 0
0.01.033.795 I llm_load_print_meta: vocab_only       = 0
0.01.033.796 I llm_load_print_meta: n_ctx_train      = 8192
0.01.033.796 I llm_load_print_meta: n_embd           = 2048
0.01.033.796 I llm_load_print_meta: n_layer          = 18
0.01.033.877 I llm_load_print_meta: n_head           = 8
0.01.033.888 I llm_load_print_meta: n_head_kv        = 1
0.01.033.889 I llm_load_print_meta: n_rot            = 256
0.01.033.889 I llm_load_print_meta: n_swa            = 0
0.01.033.889 I llm_load_print_meta: n_embd_head_k    = 256
0.01.033.891 I llm_load_print_meta: n_embd_head_v    = 256
0.01.033.896 I llm_load_print_meta: n_gqa            = 8
0.01.033.900 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.033.906 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.033.910 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.033.911 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.033.912 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.033.912 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.033.913 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.033.918 I llm_load_print_meta: n_ff             = 16384
0.01.033.918 I llm_load_print_meta: n_expert         = 0
0.01.033.918 I llm_load_print_meta: n_expert_used    = 0
0.01.033.919 I llm_load_print_meta: causal attn      = 1
0.01.033.919 I llm_load_print_meta: pooling type     = 0
0.01.033.919 I llm_load_print_meta: rope type        = 2
0.01.033.920 I llm_load_print_meta: rope scaling     = linear
0.01.033.921 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.033.921 I llm_load_print_meta: freq_scale_train = 1
0.01.033.922 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.033.922 I llm_load_print_meta: rope_finetuned   = unknown
0.01.033.922 I llm_load_print_meta: ssm_d_conv       = 0
0.01.033.923 I llm_load_print_meta: ssm_d_inner      = 0
0.01.033.923 I llm_load_print_meta: ssm_d_state      = 0
0.01.033.924 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.033.924 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.033.927 I llm_load_print_meta: model type       = 2B
0.01.033.928 I llm_load_print_meta: model ftype      = Q8_0
0.01.033.929 I llm_load_print_meta: model params     = 2.51 B
0.01.033.930 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.033.931 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.033.931 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.033.932 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.033.933 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.033.933 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.033.934 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.033.935 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.033.941 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.033.942 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.033.943 I llm_load_print_meta: max token length = 93
0.01.137.399 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.137.409 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.137.410 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.137.411 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.137.412 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.137.412 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.144.427 I llama_new_context_with_model: n_seq_max     = 1
0.01.144.432 I llama_new_context_with_model: n_ctx         = 4096
0.01.144.432 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.144.433 I llama_new_context_with_model: n_batch       = 2048
0.01.144.433 I llama_new_context_with_model: n_ubatch      = 512
0.01.144.434 I llama_new_context_with_model: flash_attn    = 0
0.01.144.436 I llama_new_context_with_model: freq_base     = 10000.0
0.01.144.437 I llama_new_context_with_model: freq_scale    = 1
0.01.144.437 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.144.517 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.158.578 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.158.616 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.158.738 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.161.923 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.161.928 I llama_new_context_with_model: graph nodes  = 601
0.01.161.928 I llama_new_context_with_model: graph splits = 1
0.01.161.952 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.161.955 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.773.209 I main: llama threadpool init, n_threads = 4
0.01.773.227 I 
0.01.773.348 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.773.352 I 
0.01.773.582 I sampler seed: 2725753082
0.01.773.596 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.773.607 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.773.610 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.773.610 I 
 increasities with the goal of acquiring social capital and positive self-regard.

**Answer:** Social comparison. [end of text]


0.11.445.942 I llama_perf_sampler_print:    sampling time =      35.67 ms /    24 runs   (    1.49 ms per token,   672.78 tokens per second)
0.11.445.945 I llama_perf_context_print:        load time =    1772.28 ms
0.11.445.947 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.445.949 I llama_perf_context_print:        eval time =    9611.14 ms /    23 runs   (  417.88 ms per token,     2.39 tokens per second)
0.11.445.950 I llama_perf_context_print:       total time =    9672.74 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4452 (be0e950c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.879 I main: load the model and apply lora adapter, if any
0.00.085.635 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.085.754 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.779 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.785 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.790 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.792 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.794 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.796 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.797 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.799 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.806 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.809 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.816 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.818 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.820 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.300 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.443 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.670 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.681 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.683 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.685 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.686 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.688 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.690 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.695 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.696 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.414.699 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.700 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.414.702 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.414.710 I llama_model_loader: - type  f32:   37 tensors
0.00.414.712 I llama_model_loader: - type q8_0:  127 tensors
0.00.676.469 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.816.834 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.817.878 I llm_load_vocab: special tokens cache size = 5
0.01.033.992 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.034.074 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.034.078 I llm_load_print_meta: arch             = gemma
0.01.034.079 I llm_load_print_meta: vocab type       = SPM
0.01.034.080 I llm_load_print_meta: n_vocab          = 256000
0.01.034.083 I llm_load_print_meta: n_merges         = 0
0.01.034.083 I llm_load_print_meta: vocab_only       = 0
0.01.034.083 I llm_load_print_meta: n_ctx_train      = 8192
0.01.034.084 I llm_load_print_meta: n_embd           = 2048
0.01.034.084 I llm_load_print_meta: n_layer          = 18
0.01.034.163 I llm_load_print_meta: n_head           = 8
0.01.034.174 I llm_load_print_meta: n_head_kv        = 1
0.01.034.174 I llm_load_print_meta: n_rot            = 256
0.01.034.175 I llm_load_print_meta: n_swa            = 0
0.01.034.176 I llm_load_print_meta: n_embd_head_k    = 256
0.01.034.177 I llm_load_print_meta: n_embd_head_v    = 256
0.01.034.182 I llm_load_print_meta: n_gqa            = 8
0.01.034.186 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.034.191 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.034.195 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.034.196 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.034.196 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.034.197 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.034.197 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.034.202 I llm_load_print_meta: n_ff             = 16384
0.01.034.203 I llm_load_print_meta: n_expert         = 0
0.01.034.204 I llm_load_print_meta: n_expert_used    = 0
0.01.034.204 I llm_load_print_meta: causal attn      = 1
0.01.034.205 I llm_load_print_meta: pooling type     = 0
0.01.034.208 I llm_load_print_meta: rope type        = 2
0.01.034.208 I llm_load_print_meta: rope scaling     = linear
0.01.034.209 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.034.210 I llm_load_print_meta: freq_scale_train = 1
0.01.034.210 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.034.210 I llm_load_print_meta: rope_finetuned   = unknown
0.01.034.211 I llm_load_print_meta: ssm_d_conv       = 0
0.01.034.211 I llm_load_print_meta: ssm_d_inner      = 0
0.01.034.211 I llm_load_print_meta: ssm_d_state      = 0
0.01.034.212 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.034.212 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.034.215 I llm_load_print_meta: model type       = 2B
0.01.034.217 I llm_load_print_meta: model ftype      = Q8_0
0.01.034.218 I llm_load_print_meta: model params     = 2.51 B
0.01.034.219 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.034.219 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.034.220 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.034.220 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.034.221 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.034.222 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.034.223 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.034.223 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.034.229 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.034.230 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.034.231 I llm_load_print_meta: max token length = 93
0.01.131.648 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.138.526 I llama_new_context_with_model: n_seq_max     = 1
0.01.138.531 I llama_new_context_with_model: n_ctx         = 4096
0.01.138.532 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.138.532 I llama_new_context_with_model: n_batch       = 2048
0.01.138.533 I llama_new_context_with_model: n_ubatch      = 512
0.01.138.533 I llama_new_context_with_model: flash_attn    = 0
0.01.138.535 I llama_new_context_with_model: freq_base     = 10000.0
0.01.138.536 I llama_new_context_with_model: freq_scale    = 1
0.01.138.537 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.138.613 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.153.355 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.153.398 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.153.519 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.156.791 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.156.796 I llama_new_context_with_model: graph nodes  = 601
0.01.156.796 I llama_new_context_with_model: graph splits = 1
0.01.156.820 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.156.823 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.768.358 I main: llama threadpool init, n_threads = 4
0.01.768.372 I 
0.01.768.506 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.768.511 I 
0.01.768.776 I sampler seed: 659361392
0.01.768.793 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.768.808 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.768.812 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.768.813 I 
 increably. [end of text]


0.03.485.322 I llama_perf_sampler_print:    sampling time =       6.36 ms /     5 runs   (    1.27 ms per token,   786.29 tokens per second)
0.03.485.325 I llama_perf_context_print:        load time =    1767.38 ms
0.03.485.326 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.485.327 I llama_perf_context_print:        eval time =    1704.27 ms /     4 runs   (  426.07 ms per token,     2.35 tokens per second)
0.03.485.328 I llama_perf_context_print:       total time =    1716.97 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.905 I build: 4452 (be0e950c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.173 I main: llama backend init
0.00.001.182 I main: load the model and apply lora adapter, if any
0.00.088.976 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.088.989 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.089.090 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.089.112 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.089.114 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.089.120 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.089.122 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.089.124 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.089.125 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.089.127 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.089.129 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.089.136 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.089.138 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.089.139 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.089.141 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.089.142 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.301.723 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.404.778 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.429.238 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.429.250 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.429.252 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.429.254 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.429.256 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.429.258 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.429.259 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.429.264 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.429.265 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.429.267 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.429.269 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.429.271 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.429.279 I llama_model_loader: - type  f32:   37 tensors
0.00.429.282 I llama_model_loader: - type q8_0:  127 tensors
0.00.689.280 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.808.552 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.809.500 I llm_load_vocab: special tokens cache size = 5
0.01.015.007 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.015.089 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.015.094 I llm_load_print_meta: arch             = gemma
0.01.015.095 I llm_load_print_meta: vocab type       = SPM
0.01.015.096 I llm_load_print_meta: n_vocab          = 256000
0.01.015.098 I llm_load_print_meta: n_merges         = 0
0.01.015.099 I llm_load_print_meta: vocab_only       = 0
0.01.015.099 I llm_load_print_meta: n_ctx_train      = 8192
0.01.015.099 I llm_load_print_meta: n_embd           = 2048
0.01.015.100 I llm_load_print_meta: n_layer          = 18
0.01.015.182 I llm_load_print_meta: n_head           = 8
0.01.015.190 I llm_load_print_meta: n_head_kv        = 1
0.01.015.192 I llm_load_print_meta: n_rot            = 256
0.01.015.192 I llm_load_print_meta: n_swa            = 0
0.01.015.192 I llm_load_print_meta: n_embd_head_k    = 256
0.01.015.193 I llm_load_print_meta: n_embd_head_v    = 256
0.01.015.198 I llm_load_print_meta: n_gqa            = 8
0.01.015.215 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.015.226 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.015.228 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.015.233 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.015.233 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.015.234 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.015.235 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.015.243 I llm_load_print_meta: n_ff             = 16384
0.01.015.244 I llm_load_print_meta: n_expert         = 0
0.01.015.244 I llm_load_print_meta: n_expert_used    = 0
0.01.015.245 I llm_load_print_meta: causal attn      = 1
0.01.015.246 I llm_load_print_meta: pooling type     = 0
0.01.015.247 I llm_load_print_meta: rope type        = 2
0.01.015.248 I llm_load_print_meta: rope scaling     = linear
0.01.015.251 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.015.252 I llm_load_print_meta: freq_scale_train = 1
0.01.015.255 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.015.256 I llm_load_print_meta: rope_finetuned   = unknown
0.01.015.256 I llm_load_print_meta: ssm_d_conv       = 0
0.01.015.257 I llm_load_print_meta: ssm_d_inner      = 0
0.01.015.257 I llm_load_print_meta: ssm_d_state      = 0
0.01.015.258 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.015.258 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.015.262 I llm_load_print_meta: model type       = 2B
0.01.015.265 I llm_load_print_meta: model ftype      = Q8_0
0.01.015.266 I llm_load_print_meta: model params     = 2.51 B
0.01.015.267 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.015.268 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.015.269 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.015.270 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.015.274 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.015.274 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.015.275 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.015.276 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.015.283 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.015.285 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.015.286 I llm_load_print_meta: max token length = 93
0.01.094.687 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.094.700 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.094.701 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.094.701 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.094.702 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.094.703 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.101.671 I llama_new_context_with_model: n_seq_max     = 1
0.01.101.679 I llama_new_context_with_model: n_ctx         = 4096
0.01.101.679 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.101.680 I llama_new_context_with_model: n_batch       = 2048
0.01.101.680 I llama_new_context_with_model: n_ubatch      = 512
0.01.101.681 I llama_new_context_with_model: flash_attn    = 0
0.01.101.684 I llama_new_context_with_model: freq_base     = 10000.0
0.01.101.685 I llama_new_context_with_model: freq_scale    = 1
0.01.101.685 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.101.775 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.117.068 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.117.110 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.117.231 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.120.882 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.120.886 I llama_new_context_with_model: graph nodes  = 601
0.01.120.886 I llama_new_context_with_model: graph splits = 1
0.01.120.914 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.120.917 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.733.770 I main: llama threadpool init, n_threads = 4
0.01.733.787 I 
0.01.733.909 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.733.913 I 
0.01.734.145 I sampler seed: 2852893327
0.01.734.158 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.734.170 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.734.171 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.734.171 I 
 increasities and disrespect in the workplace, and propose strategies to mitigate them.

**1. Communication and Awareness**

* Educate employees on the importance of respectful

0.15.430.092 I llama_perf_sampler_print:    sampling time =      49.69 ms /    33 runs   (    1.51 ms per token,   664.06 tokens per second)
0.15.430.114 I llama_perf_context_print:        load time =    1732.48 ms
0.15.430.116 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.430.118 I llama_perf_context_print:        eval time =   13611.51 ms /    32 runs   (  425.36 ms per token,     2.35 tokens per second)
0.15.430.119 I llama_perf_context_print:       total time =   13696.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4452 (be0e950c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.840 I main: load the model and apply lora adapter, if any
0.00.086.921 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.086.933 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.087.029 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.051 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.054 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.059 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.061 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.063 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.065 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.067 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.068 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.075 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.077 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.078 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.080 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.082 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.294.004 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.395.726 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.419.991 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.420.003 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.420.005 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.420.006 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.420.008 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.420.010 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.420.012 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.420.017 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.420.019 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.420.021 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.420.023 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.420.024 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.420.032 I llama_model_loader: - type  f32:   37 tensors
0.00.420.034 I llama_model_loader: - type q8_0:  127 tensors
0.00.690.175 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.810.575 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.811.556 I llm_load_vocab: special tokens cache size = 5
0.01.028.552 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.028.632 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.028.638 I llm_load_print_meta: arch             = gemma
0.01.028.638 I llm_load_print_meta: vocab type       = SPM
0.01.028.639 I llm_load_print_meta: n_vocab          = 256000
0.01.028.641 I llm_load_print_meta: n_merges         = 0
0.01.028.642 I llm_load_print_meta: vocab_only       = 0
0.01.028.642 I llm_load_print_meta: n_ctx_train      = 8192
0.01.028.643 I llm_load_print_meta: n_embd           = 2048
0.01.028.643 I llm_load_print_meta: n_layer          = 18
0.01.028.722 I llm_load_print_meta: n_head           = 8
0.01.028.732 I llm_load_print_meta: n_head_kv        = 1
0.01.028.733 I llm_load_print_meta: n_rot            = 256
0.01.028.734 I llm_load_print_meta: n_swa            = 0
0.01.028.734 I llm_load_print_meta: n_embd_head_k    = 256
0.01.028.735 I llm_load_print_meta: n_embd_head_v    = 256
0.01.028.740 I llm_load_print_meta: n_gqa            = 8
0.01.028.745 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.028.752 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.028.754 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.028.756 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.028.758 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.028.759 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.028.759 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.028.764 I llm_load_print_meta: n_ff             = 16384
0.01.028.766 I llm_load_print_meta: n_expert         = 0
0.01.028.766 I llm_load_print_meta: n_expert_used    = 0
0.01.028.767 I llm_load_print_meta: causal attn      = 1
0.01.028.768 I llm_load_print_meta: pooling type     = 0
0.01.028.769 I llm_load_print_meta: rope type        = 2
0.01.028.769 I llm_load_print_meta: rope scaling     = linear
0.01.028.771 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.028.771 I llm_load_print_meta: freq_scale_train = 1
0.01.028.772 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.028.772 I llm_load_print_meta: rope_finetuned   = unknown
0.01.028.772 I llm_load_print_meta: ssm_d_conv       = 0
0.01.028.781 I llm_load_print_meta: ssm_d_inner      = 0
0.01.028.781 I llm_load_print_meta: ssm_d_state      = 0
0.01.028.782 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.028.782 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.028.785 I llm_load_print_meta: model type       = 2B
0.01.028.787 I llm_load_print_meta: model ftype      = Q8_0
0.01.028.787 I llm_load_print_meta: model params     = 2.51 B
0.01.028.789 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.028.789 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.028.790 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.028.792 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.028.793 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.028.793 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.028.794 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.028.794 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.028.801 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.028.802 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.028.803 I llm_load_print_meta: max token length = 93
0.01.103.237 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.103.245 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.110.214 I llama_new_context_with_model: n_seq_max     = 1
0.01.110.220 I llama_new_context_with_model: n_ctx         = 4096
0.01.110.220 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.110.220 I llama_new_context_with_model: n_batch       = 2048
0.01.110.221 I llama_new_context_with_model: n_ubatch      = 512
0.01.110.221 I llama_new_context_with_model: flash_attn    = 0
0.01.110.224 I llama_new_context_with_model: freq_base     = 10000.0
0.01.110.225 I llama_new_context_with_model: freq_scale    = 1
0.01.110.225 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.110.309 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.125.124 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.125.167 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.125.298 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.128.607 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.128.611 I llama_new_context_with_model: graph nodes  = 601
0.01.128.611 I llama_new_context_with_model: graph splits = 1
0.01.128.638 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.128.640 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.742.940 I main: llama threadpool init, n_threads = 4
0.01.742.960 I 
0.01.743.079 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.743.083 I 
0.01.743.312 I sampler seed: 3786178381
0.01.743.326 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.743.337 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.743.338 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.743.338 I 
 seconally, the given sentence.

The sentence is:

"The cat sat on the mat, and the dog barked at it."

Here is my

0.15.376.207 I llama_perf_sampler_print:    sampling time =      49.44 ms /    33 runs   (    1.50 ms per token,   667.44 tokens per second)
0.15.376.210 I llama_perf_context_print:        load time =    1742.02 ms
0.15.376.212 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.376.226 I llama_perf_context_print:        eval time =   13547.71 ms /    32 runs   (  423.37 ms per token,     2.36 tokens per second)
0.15.376.228 I llama_perf_context_print:       total time =   13633.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.689s
user	2m50.752s
sys	0m9.296s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4452 (be0e950c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186659.79 ms
main:    total time = 186659.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4452 (be0e950c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.085.613 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.627 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.730 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.751 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.753 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.758 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.763 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.765 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.768 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.770 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.772 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.779 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.782 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.784 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.785 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.290.914 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.125 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.478 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.488 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.491 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.493 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.494 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.496 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.498 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.504 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.506 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.416.508 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.416.510 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.512 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.416.513 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.416.522 I llama_model_loader: - type  f32:   37 tensors
0.00.416.524 I llama_model_loader: - type q4_K:  108 tensors
0.00.416.525 I llama_model_loader: - type q6_K:   19 tensors
0.00.679.068 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.797.507 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.798.378 I llm_load_vocab: special tokens cache size = 5
0.01.003.896 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.003.974 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.003.982 I llm_load_print_meta: arch             = gemma
0.01.003.983 I llm_load_print_meta: vocab type       = SPM
0.01.003.984 I llm_load_print_meta: n_vocab          = 256000
0.01.003.987 I llm_load_print_meta: n_merges         = 0
0.01.003.988 I llm_load_print_meta: vocab_only       = 0
0.01.003.989 I llm_load_print_meta: n_ctx_train      = 8192
0.01.003.989 I llm_load_print_meta: n_embd           = 2048
0.01.003.990 I llm_load_print_meta: n_layer          = 18
0.01.004.069 I llm_load_print_meta: n_head           = 8
0.01.004.079 I llm_load_print_meta: n_head_kv        = 1
0.01.004.080 I llm_load_print_meta: n_rot            = 256
0.01.004.080 I llm_load_print_meta: n_swa            = 0
0.01.004.081 I llm_load_print_meta: n_embd_head_k    = 256
0.01.004.081 I llm_load_print_meta: n_embd_head_v    = 256
0.01.004.086 I llm_load_print_meta: n_gqa            = 8
0.01.004.091 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.004.098 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.004.099 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.004.100 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.004.101 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.004.102 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.004.102 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.004.107 I llm_load_print_meta: n_ff             = 16384
0.01.004.108 I llm_load_print_meta: n_expert         = 0
0.01.004.108 I llm_load_print_meta: n_expert_used    = 0
0.01.004.109 I llm_load_print_meta: causal attn      = 1
0.01.004.109 I llm_load_print_meta: pooling type     = 0
0.01.004.109 I llm_load_print_meta: rope type        = 2
0.01.004.110 I llm_load_print_meta: rope scaling     = linear
0.01.004.112 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.004.113 I llm_load_print_meta: freq_scale_train = 1
0.01.004.114 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.004.114 I llm_load_print_meta: rope_finetuned   = unknown
0.01.004.115 I llm_load_print_meta: ssm_d_conv       = 0
0.01.004.115 I llm_load_print_meta: ssm_d_inner      = 0
0.01.004.116 I llm_load_print_meta: ssm_d_state      = 0
0.01.004.117 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.004.117 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.004.120 I llm_load_print_meta: model type       = 2B
0.01.004.122 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.004.122 I llm_load_print_meta: model params     = 2.51 B
0.01.004.123 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.004.124 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.004.124 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.004.124 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.004.125 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.004.126 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.004.126 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.004.127 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.004.134 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.004.136 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.004.136 I llm_load_print_meta: max token length = 93
0.01.066.563 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.066.573 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.066.574 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.066.575 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.066.576 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.066.576 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.073.580 I llama_new_context_with_model: n_seq_max     = 1
0.01.073.587 I llama_new_context_with_model: n_ctx         = 4096
0.01.073.588 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.073.588 I llama_new_context_with_model: n_batch       = 2048
0.01.073.588 I llama_new_context_with_model: n_ubatch      = 512
0.01.073.589 I llama_new_context_with_model: flash_attn    = 0
0.01.073.593 I llama_new_context_with_model: freq_base     = 10000.0
0.01.073.594 I llama_new_context_with_model: freq_scale    = 1
0.01.073.594 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.073.683 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.088.980 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.089.025 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.089.155 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.092.505 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.092.510 I llama_new_context_with_model: graph nodes  = 601
0.01.092.510 I llama_new_context_with_model: graph splits = 1
0.01.092.535 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.092.538 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.674.252 I main: llama threadpool init, n_threads = 4
0.01.674.269 I 
0.01.674.392 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.674.395 I 
0.01.674.622 I sampler seed: 1640908918
0.01.674.636 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.674.646 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.674.649 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.674.650 I 
 seconally to the text.

The text is about a man named John.

**John's Story**

John was a man of simple means and

0.12.758.702 I llama_perf_sampler_print:    sampling time =      49.61 ms /    33 runs   (    1.50 ms per token,   665.26 tokens per second)
0.12.758.716 I llama_perf_context_print:        load time =    1673.31 ms
0.12.758.718 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.758.721 I llama_perf_context_print:        eval time =   10998.62 ms /    32 runs   (  343.71 ms per token,     2.91 tokens per second)
0.12.758.722 I llama_perf_context_print:       total time =   11084.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4452 (be0e950c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186599.08 ms
main:    total time = 186599.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4452 (be0e950c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.084.787 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.084.904 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.084.930 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.084.937 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.084.943 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.084.947 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.084.952 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.084.955 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.084.959 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.084.962 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.084.974 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.084.980 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.084.983 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.084.986 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.309.762 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.411.340 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.435.575 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.435.589 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.435.591 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.435.592 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.435.594 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.435.596 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.435.598 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.435.603 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.435.605 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.435.607 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.435.616 I llama_model_loader: - type  f32:   37 tensors
0.00.435.617 I llama_model_loader: - type q4_K:  108 tensors
0.00.435.618 I llama_model_loader: - type q6_K:   19 tensors
0.00.702.029 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.824.709 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.825.699 I llm_load_vocab: special tokens cache size = 5
0.01.046.625 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.046.708 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.046.714 I llm_load_print_meta: arch             = gemma
0.01.046.715 I llm_load_print_meta: vocab type       = SPM
0.01.046.716 I llm_load_print_meta: n_vocab          = 256000
0.01.046.718 I llm_load_print_meta: n_merges         = 0
0.01.046.718 I llm_load_print_meta: vocab_only       = 0
0.01.046.718 I llm_load_print_meta: n_ctx_train      = 8192
0.01.046.719 I llm_load_print_meta: n_embd           = 2048
0.01.046.719 I llm_load_print_meta: n_layer          = 18
0.01.046.800 I llm_load_print_meta: n_head           = 8
0.01.046.814 I llm_load_print_meta: n_head_kv        = 1
0.01.046.815 I llm_load_print_meta: n_rot            = 256
0.01.046.816 I llm_load_print_meta: n_swa            = 0
0.01.046.817 I llm_load_print_meta: n_embd_head_k    = 256
0.01.046.817 I llm_load_print_meta: n_embd_head_v    = 256
0.01.046.824 I llm_load_print_meta: n_gqa            = 8
0.01.046.832 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.046.840 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.046.845 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.046.847 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.046.848 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.046.849 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.046.850 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.046.858 I llm_load_print_meta: n_ff             = 16384
0.01.046.860 I llm_load_print_meta: n_expert         = 0
0.01.046.864 I llm_load_print_meta: n_expert_used    = 0
0.01.046.864 I llm_load_print_meta: causal attn      = 1
0.01.046.864 I llm_load_print_meta: pooling type     = 0
0.01.046.865 I llm_load_print_meta: rope type        = 2
0.01.046.866 I llm_load_print_meta: rope scaling     = linear
0.01.046.867 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.046.868 I llm_load_print_meta: freq_scale_train = 1
0.01.046.869 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.046.869 I llm_load_print_meta: rope_finetuned   = unknown
0.01.046.870 I llm_load_print_meta: ssm_d_conv       = 0
0.01.046.880 I llm_load_print_meta: ssm_d_inner      = 0
0.01.046.882 I llm_load_print_meta: ssm_d_state      = 0
0.01.046.883 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.046.883 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.046.889 I llm_load_print_meta: model type       = 2B
0.01.046.894 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.046.896 I llm_load_print_meta: model params     = 2.51 B
0.01.046.897 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.046.900 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.046.901 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.046.902 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.046.903 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.046.904 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.046.904 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.046.905 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.046.913 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.046.915 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.046.916 I llm_load_print_meta: max token length = 93
0.01.107.459 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.114.734 I llama_new_context_with_model: n_seq_max     = 1
0.01.114.739 I llama_new_context_with_model: n_ctx         = 4096
0.01.114.739 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.114.740 I llama_new_context_with_model: n_batch       = 2048
0.01.114.740 I llama_new_context_with_model: n_ubatch      = 512
0.01.114.741 I llama_new_context_with_model: flash_attn    = 0
0.01.114.743 I llama_new_context_with_model: freq_base     = 10000.0
0.01.114.743 I llama_new_context_with_model: freq_scale    = 1
0.01.114.744 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.114.830 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.129.126 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.129.166 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.129.280 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.132.445 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.132.449 I llama_new_context_with_model: graph nodes  = 601
0.01.132.450 I llama_new_context_with_model: graph splits = 1
0.01.132.474 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.132.478 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.716.649 I main: llama threadpool init, n_threads = 4
0.01.716.666 I 
0.01.716.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.716.811 I 
0.01.717.053 I sampler seed: 3501844148
0.01.717.068 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.717.083 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.717.084 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.717.085 I 
 seconded. The resulting structure resembles a pyramid. A solid rectangular prism with edges of length 2 cm, 3 cm, and 4 cm is cut

0.12.887.596 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.50 tokens per second)
0.12.887.599 I llama_perf_context_print:        load time =    1715.70 ms
0.12.887.601 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.887.615 I llama_perf_context_print:        eval time =   11086.44 ms /    32 runs   (  346.45 ms per token,     2.89 tokens per second)
0.12.887.617 I llama_perf_context_print:       total time =   11170.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.160s
user	46m44.388s
sys	0m6.368s
