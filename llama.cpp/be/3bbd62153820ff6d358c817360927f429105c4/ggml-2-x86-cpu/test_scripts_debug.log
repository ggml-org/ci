+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.677 I build: 4701 (be3bbd62) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.085.255 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.268 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.364 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.385 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.390 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.395 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.398 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.399 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.401 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.403 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.405 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.412 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.416 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.418 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.420 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.421 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.288.205 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.389.639 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.154 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.167 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.169 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.171 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.173 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.175 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.176 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.181 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.182 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.413.185 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.186 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.413.188 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.413.197 I llama_model_loader: - type  f32:   37 tensors
0.00.413.199 I llama_model_loader: - type q8_0:  127 tensors
0.00.413.217 I print_info: file format = GGUF V3 (latest)
0.00.413.218 I print_info: file type   = Q8_0
0.00.413.220 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.684.344 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.815.448 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.816.439 I load: special tokens cache size = 5
0.01.046.755 I load: token to piece cache size = 1.6014 MB
0.01.046.838 I print_info: arch             = gemma
0.01.046.839 I print_info: vocab_only       = 0
0.01.046.840 I print_info: n_ctx_train      = 8192
0.01.046.840 I print_info: n_embd           = 2048
0.01.046.841 I print_info: n_layer          = 18
0.01.046.915 I print_info: n_head           = 8
0.01.046.923 I print_info: n_head_kv        = 1
0.01.046.923 I print_info: n_rot            = 256
0.01.046.923 I print_info: n_swa            = 0
0.01.046.924 I print_info: n_embd_head_k    = 256
0.01.046.924 I print_info: n_embd_head_v    = 256
0.01.046.930 I print_info: n_gqa            = 8
0.01.046.935 I print_info: n_embd_k_gqa     = 256
0.01.046.940 I print_info: n_embd_v_gqa     = 256
0.01.046.941 I print_info: f_norm_eps       = 0.0e+00
0.01.046.942 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.046.943 I print_info: f_clamp_kqv      = 0.0e+00
0.01.046.943 I print_info: f_max_alibi_bias = 0.0e+00
0.01.046.943 I print_info: f_logit_scale    = 0.0e+00
0.01.046.948 I print_info: n_ff             = 16384
0.01.046.948 I print_info: n_expert         = 0
0.01.046.949 I print_info: n_expert_used    = 0
0.01.046.949 I print_info: causal attn      = 1
0.01.046.949 I print_info: pooling type     = 0
0.01.046.949 I print_info: rope type        = 2
0.01.046.950 I print_info: rope scaling     = linear
0.01.046.952 I print_info: freq_base_train  = 10000.0
0.01.046.952 I print_info: freq_scale_train = 1
0.01.046.954 I print_info: n_ctx_orig_yarn  = 8192
0.01.046.954 I print_info: rope_finetuned   = unknown
0.01.046.955 I print_info: ssm_d_conv       = 0
0.01.046.955 I print_info: ssm_d_inner      = 0
0.01.046.955 I print_info: ssm_d_state      = 0
0.01.046.961 I print_info: ssm_dt_rank      = 0
0.01.046.961 I print_info: ssm_dt_b_c_rms   = 0
0.01.046.963 I print_info: model type       = 2B
0.01.046.963 I print_info: model params     = 2.51 B
0.01.046.964 I print_info: general.name     = gemma-1.1-2b-it
0.01.046.968 I print_info: vocab type       = SPM
0.01.046.969 I print_info: n_vocab          = 256000
0.01.046.972 I print_info: n_merges         = 0
0.01.046.975 I print_info: BOS token        = 2 '<bos>'
0.01.046.976 I print_info: EOS token        = 1 '<eos>'
0.01.046.976 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.046.977 I print_info: UNK token        = 3 '<unk>'
0.01.046.977 I print_info: PAD token        = 0 '<pad>'
0.01.046.978 I print_info: LF token         = 227 '<0x0A>'
0.01.046.984 I print_info: EOG token        = 1 '<eos>'
0.01.046.985 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.046.986 I print_info: max token length = 93
0.01.046.989 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.150.098 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.150.107 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.150.108 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.150.109 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.150.110 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.150.110 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.156.991 I llama_init_from_model: n_seq_max     = 1
0.01.156.996 I llama_init_from_model: n_ctx         = 4096
0.01.156.997 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.156.997 I llama_init_from_model: n_batch       = 2048
0.01.156.997 I llama_init_from_model: n_ubatch      = 512
0.01.156.998 I llama_init_from_model: flash_attn    = 0
0.01.157.000 I llama_init_from_model: freq_base     = 10000.0
0.01.157.001 I llama_init_from_model: freq_scale    = 1
0.01.157.002 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.157.085 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.171.142 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.171.182 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.171.308 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.174.532 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.174.536 I llama_init_from_model: graph nodes  = 601
0.01.174.537 I llama_init_from_model: graph splits = 1
0.01.174.574 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.174.578 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.810.352 I main: llama threadpool init, n_threads = 4
0.01.810.366 I 
0.01.810.461 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.810.465 I 
0.01.810.720 I sampler seed: 2140631077
0.01.810.732 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.810.742 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.810.758 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.810.762 I 
 increadibly close to this question.

I am unable to answer this question as it involves making potentially discriminatory and harmful generalizations. [end of text]


0.12.772.026 I llama_perf_sampler_print:    sampling time =      40.55 ms /    27 runs   (    1.50 ms per token,   665.93 tokens per second)
0.12.772.030 I llama_perf_context_print:        load time =    1782.61 ms
0.12.772.032 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.772.034 I llama_perf_context_print:        eval time =   10891.98 ms /    26 runs   (  418.92 ms per token,     2.39 tokens per second)
0.12.772.035 I llama_perf_context_print:       total time =   10988.43 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.699 I build: 4701 (be3bbd62) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.000.910 I main: load the model and apply lora adapter, if any
0.00.086.341 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.464 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.492 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.494 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.500 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.502 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.503 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.505 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.507 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.508 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.514 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.516 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.518 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.519 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.521 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.291.027 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.399 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.897 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.909 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.911 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.913 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.915 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.917 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.918 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.922 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.924 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.415.926 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.415.928 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.415.930 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.415.938 I llama_model_loader: - type  f32:   37 tensors
0.00.415.940 I llama_model_loader: - type q8_0:  127 tensors
0.00.415.958 I print_info: file format = GGUF V3 (latest)
0.00.415.959 I print_info: file type   = Q8_0
0.00.415.961 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.679.397 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.815.441 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.816.961 I load: special tokens cache size = 5
0.01.040.268 I load: token to piece cache size = 1.6014 MB
0.01.040.359 I print_info: arch             = gemma
0.01.040.361 I print_info: vocab_only       = 0
0.01.040.361 I print_info: n_ctx_train      = 8192
0.01.040.362 I print_info: n_embd           = 2048
0.01.040.362 I print_info: n_layer          = 18
0.01.040.441 I print_info: n_head           = 8
0.01.040.453 I print_info: n_head_kv        = 1
0.01.040.453 I print_info: n_rot            = 256
0.01.040.454 I print_info: n_swa            = 0
0.01.040.454 I print_info: n_embd_head_k    = 256
0.01.040.454 I print_info: n_embd_head_v    = 256
0.01.040.460 I print_info: n_gqa            = 8
0.01.040.464 I print_info: n_embd_k_gqa     = 256
0.01.040.469 I print_info: n_embd_v_gqa     = 256
0.01.040.474 I print_info: f_norm_eps       = 0.0e+00
0.01.040.475 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.040.475 I print_info: f_clamp_kqv      = 0.0e+00
0.01.040.476 I print_info: f_max_alibi_bias = 0.0e+00
0.01.040.476 I print_info: f_logit_scale    = 0.0e+00
0.01.040.489 I print_info: n_ff             = 16384
0.01.040.489 I print_info: n_expert         = 0
0.01.040.490 I print_info: n_expert_used    = 0
0.01.040.491 I print_info: causal attn      = 1
0.01.040.491 I print_info: pooling type     = 0
0.01.040.492 I print_info: rope type        = 2
0.01.040.492 I print_info: rope scaling     = linear
0.01.040.494 I print_info: freq_base_train  = 10000.0
0.01.040.495 I print_info: freq_scale_train = 1
0.01.040.496 I print_info: n_ctx_orig_yarn  = 8192
0.01.040.496 I print_info: rope_finetuned   = unknown
0.01.040.497 I print_info: ssm_d_conv       = 0
0.01.040.498 I print_info: ssm_d_inner      = 0
0.01.040.498 I print_info: ssm_d_state      = 0
0.01.040.499 I print_info: ssm_dt_rank      = 0
0.01.040.499 I print_info: ssm_dt_b_c_rms   = 0
0.01.040.503 I print_info: model type       = 2B
0.01.040.505 I print_info: model params     = 2.51 B
0.01.040.505 I print_info: general.name     = gemma-1.1-2b-it
0.01.040.510 I print_info: vocab type       = SPM
0.01.040.512 I print_info: n_vocab          = 256000
0.01.040.516 I print_info: n_merges         = 0
0.01.040.523 I print_info: BOS token        = 2 '<bos>'
0.01.040.526 I print_info: EOS token        = 1 '<eos>'
0.01.040.526 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.040.527 I print_info: UNK token        = 3 '<unk>'
0.01.040.527 I print_info: PAD token        = 0 '<pad>'
0.01.040.528 I print_info: LF token         = 227 '<0x0A>'
0.01.040.535 I print_info: EOG token        = 1 '<eos>'
0.01.040.536 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.040.537 I print_info: max token length = 93
0.01.040.538 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.138.461 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.145.282 I llama_init_from_model: n_seq_max     = 1
0.01.145.287 I llama_init_from_model: n_ctx         = 4096
0.01.145.288 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.145.288 I llama_init_from_model: n_batch       = 2048
0.01.145.288 I llama_init_from_model: n_ubatch      = 512
0.01.145.289 I llama_init_from_model: flash_attn    = 0
0.01.145.291 I llama_init_from_model: freq_base     = 10000.0
0.01.145.292 I llama_init_from_model: freq_scale    = 1
0.01.145.293 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.145.378 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.160.533 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.160.574 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.160.701 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.163.915 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.163.919 I llama_init_from_model: graph nodes  = 601
0.01.163.920 I llama_init_from_model: graph splits = 1
0.01.163.943 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.163.946 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.808.936 I main: llama threadpool init, n_threads = 4
0.01.808.950 I 
0.01.809.047 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.809.051 I 
0.01.809.286 I sampler seed: 954988029
0.01.809.300 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.809.309 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.809.312 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.809.313 I 
 increasities in the realm of AI, particularly in the context of generative models.

**1. Contextual Understanding and Generation**

- Generative models struggle

0.15.556.453 I llama_perf_sampler_print:    sampling time =      49.79 ms /    33 runs   (    1.51 ms per token,   662.73 tokens per second)
0.15.556.457 I llama_perf_context_print:        load time =    1781.09 ms
0.15.556.459 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.556.461 I llama_perf_context_print:        eval time =   13661.39 ms /    32 runs   (  426.92 ms per token,     2.34 tokens per second)
0.15.556.463 I llama_perf_context_print:       total time =   13774.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.649 I build: 4701 (be3bbd62) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.086.144 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.086.156 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.086.257 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.277 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.280 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.286 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.288 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.289 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.292 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.294 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.296 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.303 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.305 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.306 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.308 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.320 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.291.948 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.393.053 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.418 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.430 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.432 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.434 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.436 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.438 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.439 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.444 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.446 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.416.447 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.449 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.416.451 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.416.460 I llama_model_loader: - type  f32:   37 tensors
0.00.416.463 I llama_model_loader: - type q8_0:  127 tensors
0.00.416.481 I print_info: file format = GGUF V3 (latest)
0.00.416.482 I print_info: file type   = Q8_0
0.00.416.484 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.681.209 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.807.344 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.808.316 I load: special tokens cache size = 5
0.01.039.315 I load: token to piece cache size = 1.6014 MB
0.01.039.405 I print_info: arch             = gemma
0.01.039.405 I print_info: vocab_only       = 0
0.01.039.406 I print_info: n_ctx_train      = 8192
0.01.039.406 I print_info: n_embd           = 2048
0.01.039.407 I print_info: n_layer          = 18
0.01.039.484 I print_info: n_head           = 8
0.01.039.492 I print_info: n_head_kv        = 1
0.01.039.493 I print_info: n_rot            = 256
0.01.039.494 I print_info: n_swa            = 0
0.01.039.494 I print_info: n_embd_head_k    = 256
0.01.039.494 I print_info: n_embd_head_v    = 256
0.01.039.500 I print_info: n_gqa            = 8
0.01.039.505 I print_info: n_embd_k_gqa     = 256
0.01.039.510 I print_info: n_embd_v_gqa     = 256
0.01.039.514 I print_info: f_norm_eps       = 0.0e+00
0.01.039.515 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.039.516 I print_info: f_clamp_kqv      = 0.0e+00
0.01.039.516 I print_info: f_max_alibi_bias = 0.0e+00
0.01.039.516 I print_info: f_logit_scale    = 0.0e+00
0.01.039.521 I print_info: n_ff             = 16384
0.01.039.522 I print_info: n_expert         = 0
0.01.039.522 I print_info: n_expert_used    = 0
0.01.039.522 I print_info: causal attn      = 1
0.01.039.523 I print_info: pooling type     = 0
0.01.039.523 I print_info: rope type        = 2
0.01.039.526 I print_info: rope scaling     = linear
0.01.039.528 I print_info: freq_base_train  = 10000.0
0.01.039.528 I print_info: freq_scale_train = 1
0.01.039.529 I print_info: n_ctx_orig_yarn  = 8192
0.01.039.529 I print_info: rope_finetuned   = unknown
0.01.039.530 I print_info: ssm_d_conv       = 0
0.01.039.530 I print_info: ssm_d_inner      = 0
0.01.039.530 I print_info: ssm_d_state      = 0
0.01.039.531 I print_info: ssm_dt_rank      = 0
0.01.039.532 I print_info: ssm_dt_b_c_rms   = 0
0.01.039.535 I print_info: model type       = 2B
0.01.039.536 I print_info: model params     = 2.51 B
0.01.039.536 I print_info: general.name     = gemma-1.1-2b-it
0.01.039.541 I print_info: vocab type       = SPM
0.01.039.543 I print_info: n_vocab          = 256000
0.01.039.545 I print_info: n_merges         = 0
0.01.039.547 I print_info: BOS token        = 2 '<bos>'
0.01.039.547 I print_info: EOS token        = 1 '<eos>'
0.01.039.548 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.039.550 I print_info: UNK token        = 3 '<unk>'
0.01.039.551 I print_info: PAD token        = 0 '<pad>'
0.01.039.551 I print_info: LF token         = 227 '<0x0A>'
0.01.039.559 I print_info: EOG token        = 1 '<eos>'
0.01.039.560 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.039.561 I print_info: max token length = 93
0.01.039.563 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.116.432 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.116.445 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.116.446 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.116.446 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.116.447 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.116.448 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.123.650 I llama_init_from_model: n_seq_max     = 1
0.01.123.657 I llama_init_from_model: n_ctx         = 4096
0.01.123.657 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.123.658 I llama_init_from_model: n_batch       = 2048
0.01.123.658 I llama_init_from_model: n_ubatch      = 512
0.01.123.659 I llama_init_from_model: flash_attn    = 0
0.01.123.662 I llama_init_from_model: freq_base     = 10000.0
0.01.123.662 I llama_init_from_model: freq_scale    = 1
0.01.123.663 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.123.757 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.139.411 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.139.451 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.139.585 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.142.856 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.142.860 I llama_init_from_model: graph nodes  = 601
0.01.142.860 I llama_init_from_model: graph splits = 1
0.01.142.886 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.142.888 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.778.522 I main: llama threadpool init, n_threads = 4
0.01.778.535 I 
0.01.778.628 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.778.632 I 
0.01.778.871 I sampler seed: 3313214031
0.01.778.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.778.893 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.778.896 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.778.896 I 
 increasities.

I am unable to answer this question as it contains sexually suggestive content that is inappropriate for me to discuss. [end of text]


0.12.724.522 I llama_perf_sampler_print:    sampling time =      40.47 ms /    27 runs   (    1.50 ms per token,   667.24 tokens per second)
0.12.724.537 I llama_perf_context_print:        load time =    1750.59 ms
0.12.724.539 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.724.540 I llama_perf_context_print:        eval time =   10876.01 ms /    26 runs   (  418.31 ms per token,     2.39 tokens per second)
0.12.724.541 I llama_perf_context_print:       total time =   10972.95 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.678 I build: 4701 (be3bbd62) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.000.902 I main: load the model and apply lora adapter, if any
0.00.086.502 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.086.517 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.086.618 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.642 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.647 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.653 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.656 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.658 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.660 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.662 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.664 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.672 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.674 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.676 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.678 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.679 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.309.762 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.411.415 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.434.974 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.434.987 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.434.989 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.434.991 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.434.993 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.434.995 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.434.997 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.435.002 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.435.004 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.435.007 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.435.009 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.435.010 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.435.021 I llama_model_loader: - type  f32:   37 tensors
0.00.435.025 I llama_model_loader: - type q8_0:  127 tensors
0.00.435.043 I print_info: file format = GGUF V3 (latest)
0.00.435.046 I print_info: file type   = Q8_0
0.00.435.049 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.721.231 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.853.286 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.854.367 I load: special tokens cache size = 5
0.01.087.721 I load: token to piece cache size = 1.6014 MB
0.01.087.808 I print_info: arch             = gemma
0.01.087.809 I print_info: vocab_only       = 0
0.01.087.810 I print_info: n_ctx_train      = 8192
0.01.087.810 I print_info: n_embd           = 2048
0.01.087.811 I print_info: n_layer          = 18
0.01.087.890 I print_info: n_head           = 8
0.01.087.898 I print_info: n_head_kv        = 1
0.01.087.902 I print_info: n_rot            = 256
0.01.087.902 I print_info: n_swa            = 0
0.01.087.902 I print_info: n_embd_head_k    = 256
0.01.087.903 I print_info: n_embd_head_v    = 256
0.01.087.908 I print_info: n_gqa            = 8
0.01.087.913 I print_info: n_embd_k_gqa     = 256
0.01.087.917 I print_info: n_embd_v_gqa     = 256
0.01.087.919 I print_info: f_norm_eps       = 0.0e+00
0.01.087.921 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.087.921 I print_info: f_clamp_kqv      = 0.0e+00
0.01.087.922 I print_info: f_max_alibi_bias = 0.0e+00
0.01.087.923 I print_info: f_logit_scale    = 0.0e+00
0.01.087.928 I print_info: n_ff             = 16384
0.01.087.928 I print_info: n_expert         = 0
0.01.087.939 I print_info: n_expert_used    = 0
0.01.087.940 I print_info: causal attn      = 1
0.01.087.956 I print_info: pooling type     = 0
0.01.087.959 I print_info: rope type        = 2
0.01.087.960 I print_info: rope scaling     = linear
0.01.087.961 I print_info: freq_base_train  = 10000.0
0.01.087.962 I print_info: freq_scale_train = 1
0.01.087.962 I print_info: n_ctx_orig_yarn  = 8192
0.01.087.963 I print_info: rope_finetuned   = unknown
0.01.087.963 I print_info: ssm_d_conv       = 0
0.01.087.964 I print_info: ssm_d_inner      = 0
0.01.087.964 I print_info: ssm_d_state      = 0
0.01.087.964 I print_info: ssm_dt_rank      = 0
0.01.087.965 I print_info: ssm_dt_b_c_rms   = 0
0.01.087.967 I print_info: model type       = 2B
0.01.087.968 I print_info: model params     = 2.51 B
0.01.087.968 I print_info: general.name     = gemma-1.1-2b-it
0.01.087.972 I print_info: vocab type       = SPM
0.01.087.973 I print_info: n_vocab          = 256000
0.01.087.976 I print_info: n_merges         = 0
0.01.087.977 I print_info: BOS token        = 2 '<bos>'
0.01.087.978 I print_info: EOS token        = 1 '<eos>'
0.01.087.979 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.087.979 I print_info: UNK token        = 3 '<unk>'
0.01.087.980 I print_info: PAD token        = 0 '<pad>'
0.01.087.981 I print_info: LF token         = 227 '<0x0A>'
0.01.087.987 I print_info: EOG token        = 1 '<eos>'
0.01.087.988 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.087.989 I print_info: max token length = 93
0.01.087.991 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.160.613 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.160.625 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.167.672 I llama_init_from_model: n_seq_max     = 1
0.01.167.677 I llama_init_from_model: n_ctx         = 4096
0.01.167.677 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.167.678 I llama_init_from_model: n_batch       = 2048
0.01.167.678 I llama_init_from_model: n_ubatch      = 512
0.01.167.678 I llama_init_from_model: flash_attn    = 0
0.01.167.681 I llama_init_from_model: freq_base     = 10000.0
0.01.167.682 I llama_init_from_model: freq_scale    = 1
0.01.167.682 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.167.765 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.181.828 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.181.866 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.181.994 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.185.501 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.185.505 I llama_init_from_model: graph nodes  = 601
0.01.185.506 I llama_init_from_model: graph splits = 1
0.01.185.530 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.185.533 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.824.158 I main: llama threadpool init, n_threads = 4
0.01.824.173 I 
0.01.824.269 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.824.269 I 
0.01.824.512 I sampler seed: 3655535684
0.01.824.527 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.824.539 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.824.539 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.824.539 I 
 seconded
## A Guide to Understanding Secondary Metabolism

**Secondary metabolism** is a crucial metabolic pathway that generates metabolites beyond those directly involved in the central carbon

0.15.466.345 I llama_perf_sampler_print:    sampling time =      49.83 ms /    33 runs   (    1.51 ms per token,   662.29 tokens per second)
0.15.466.348 I llama_perf_context_print:        load time =    1796.28 ms
0.15.466.350 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.466.352 I llama_perf_context_print:        eval time =   13557.04 ms /    32 runs   (  423.66 ms per token,     2.36 tokens per second)
0.15.466.353 I llama_perf_context_print:       total time =   13669.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.288s
user	3m33.317s
sys	0m9.360s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4701 (be3bbd62)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 185948.62 ms
main:    total time = 185948.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.705 I build: 4701 (be3bbd62) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.927 I main: llama backend init
0.00.000.935 I main: load the model and apply lora adapter, if any
0.00.085.642 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.657 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.761 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.785 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.790 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.796 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.797 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.799 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.801 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.803 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.804 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.812 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.813 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.815 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.817 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.302.197 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.403.560 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.427.005 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.427.016 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.427.017 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.427.019 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.427.021 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.427.023 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.427.025 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.427.029 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.427.031 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.427.033 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.427.035 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.427.037 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.427.039 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.427.049 I llama_model_loader: - type  f32:   37 tensors
0.00.427.051 I llama_model_loader: - type q4_K:  108 tensors
0.00.427.052 I llama_model_loader: - type q6_K:   19 tensors
0.00.427.070 I print_info: file format = GGUF V3 (latest)
0.00.427.074 I print_info: file type   = Q4_K - Medium
0.00.427.076 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.697.218 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.831.251 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.832.236 I load: special tokens cache size = 5
0.01.055.404 I load: token to piece cache size = 1.6014 MB
0.01.055.489 I print_info: arch             = gemma
0.01.055.490 I print_info: vocab_only       = 0
0.01.055.491 I print_info: n_ctx_train      = 8192
0.01.055.491 I print_info: n_embd           = 2048
0.01.055.492 I print_info: n_layer          = 18
0.01.055.566 I print_info: n_head           = 8
0.01.055.573 I print_info: n_head_kv        = 1
0.01.055.575 I print_info: n_rot            = 256
0.01.055.575 I print_info: n_swa            = 0
0.01.055.576 I print_info: n_embd_head_k    = 256
0.01.055.576 I print_info: n_embd_head_v    = 256
0.01.055.581 I print_info: n_gqa            = 8
0.01.055.585 I print_info: n_embd_k_gqa     = 256
0.01.055.590 I print_info: n_embd_v_gqa     = 256
0.01.055.594 I print_info: f_norm_eps       = 0.0e+00
0.01.055.595 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.055.596 I print_info: f_clamp_kqv      = 0.0e+00
0.01.055.596 I print_info: f_max_alibi_bias = 0.0e+00
0.01.055.596 I print_info: f_logit_scale    = 0.0e+00
0.01.055.601 I print_info: n_ff             = 16384
0.01.055.602 I print_info: n_expert         = 0
0.01.055.602 I print_info: n_expert_used    = 0
0.01.055.602 I print_info: causal attn      = 1
0.01.055.602 I print_info: pooling type     = 0
0.01.055.603 I print_info: rope type        = 2
0.01.055.604 I print_info: rope scaling     = linear
0.01.055.606 I print_info: freq_base_train  = 10000.0
0.01.055.607 I print_info: freq_scale_train = 1
0.01.055.607 I print_info: n_ctx_orig_yarn  = 8192
0.01.055.618 I print_info: rope_finetuned   = unknown
0.01.055.619 I print_info: ssm_d_conv       = 0
0.01.055.620 I print_info: ssm_d_inner      = 0
0.01.055.620 I print_info: ssm_d_state      = 0
0.01.055.621 I print_info: ssm_dt_rank      = 0
0.01.055.622 I print_info: ssm_dt_b_c_rms   = 0
0.01.055.623 I print_info: model type       = 2B
0.01.055.624 I print_info: model params     = 2.51 B
0.01.055.625 I print_info: general.name     = gemma-1.1-2b-it
0.01.055.628 I print_info: vocab type       = SPM
0.01.055.630 I print_info: n_vocab          = 256000
0.01.055.632 I print_info: n_merges         = 0
0.01.055.633 I print_info: BOS token        = 2 '<bos>'
0.01.055.634 I print_info: EOS token        = 1 '<eos>'
0.01.055.635 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.055.635 I print_info: UNK token        = 3 '<unk>'
0.01.055.636 I print_info: PAD token        = 0 '<pad>'
0.01.055.637 I print_info: LF token         = 227 '<0x0A>'
0.01.055.643 I print_info: EOG token        = 1 '<eos>'
0.01.055.644 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.055.644 I print_info: max token length = 93
0.01.055.646 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.117.900 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.117.910 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.117.911 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.117.911 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.117.912 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.117.913 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.124.920 I llama_init_from_model: n_seq_max     = 1
0.01.124.925 I llama_init_from_model: n_ctx         = 4096
0.01.124.926 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.124.926 I llama_init_from_model: n_batch       = 2048
0.01.124.927 I llama_init_from_model: n_ubatch      = 512
0.01.124.927 I llama_init_from_model: flash_attn    = 0
0.01.124.929 I llama_init_from_model: freq_base     = 10000.0
0.01.124.930 I llama_init_from_model: freq_scale    = 1
0.01.124.930 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.125.012 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.139.601 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.139.643 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.139.778 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.143.031 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.143.035 I llama_init_from_model: graph nodes  = 601
0.01.143.035 I llama_init_from_model: graph splits = 1
0.01.143.062 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.143.065 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.753.629 I main: llama threadpool init, n_threads = 4
0.01.753.643 I 
0.01.753.736 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.753.740 I 
0.01.753.990 I sampler seed: 3716967219
0.01.754.002 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.754.025 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.754.030 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.754.030 I 
 encompassing a wide range of topics, from the latest technological advancements to cultural trends, and even personal experiences. [end of text]


0.09.750.652 I llama_perf_sampler_print:    sampling time =      35.86 ms /    24 runs   (    1.49 ms per token,   669.23 tokens per second)
0.09.750.656 I llama_perf_context_print:        load time =    1725.73 ms
0.09.750.669 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.750.671 I llama_perf_context_print:        eval time =    7935.16 ms /    23 runs   (  345.01 ms per token,     2.90 tokens per second)
0.09.750.672 I llama_perf_context_print:       total time =    8023.85 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4701 (be3bbd62)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 185959.32 ms
main:    total time = 185959.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.649 I build: 4701 (be3bbd62) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.085.682 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.803 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.826 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.829 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.833 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.835 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.837 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.840 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.853 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.860 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.865 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.876 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.878 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.305.963 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.408.309 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.431.828 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.431.843 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.431.845 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.431.847 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.431.849 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.431.851 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.431.852 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.431.857 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.431.859 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.431.861 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.431.870 I llama_model_loader: - type  f32:   37 tensors
0.00.431.872 I llama_model_loader: - type q4_K:  108 tensors
0.00.431.873 I llama_model_loader: - type q6_K:   19 tensors
0.00.431.892 I print_info: file format = GGUF V3 (latest)
0.00.431.893 I print_info: file type   = Q4_K - Medium
0.00.431.895 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.718.001 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.848.692 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.849.634 I load: special tokens cache size = 5
0.01.077.544 I load: token to piece cache size = 1.6014 MB
0.01.077.627 I print_info: arch             = gemma
0.01.077.628 I print_info: vocab_only       = 0
0.01.077.629 I print_info: n_ctx_train      = 8192
0.01.077.629 I print_info: n_embd           = 2048
0.01.077.630 I print_info: n_layer          = 18
0.01.077.707 I print_info: n_head           = 8
0.01.077.719 I print_info: n_head_kv        = 1
0.01.077.720 I print_info: n_rot            = 256
0.01.077.720 I print_info: n_swa            = 0
0.01.077.721 I print_info: n_embd_head_k    = 256
0.01.077.721 I print_info: n_embd_head_v    = 256
0.01.077.725 I print_info: n_gqa            = 8
0.01.077.730 I print_info: n_embd_k_gqa     = 256
0.01.077.736 I print_info: n_embd_v_gqa     = 256
0.01.077.737 I print_info: f_norm_eps       = 0.0e+00
0.01.077.738 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.077.739 I print_info: f_clamp_kqv      = 0.0e+00
0.01.077.739 I print_info: f_max_alibi_bias = 0.0e+00
0.01.077.740 I print_info: f_logit_scale    = 0.0e+00
0.01.077.745 I print_info: n_ff             = 16384
0.01.077.745 I print_info: n_expert         = 0
0.01.077.747 I print_info: n_expert_used    = 0
0.01.077.747 I print_info: causal attn      = 1
0.01.077.748 I print_info: pooling type     = 0
0.01.077.748 I print_info: rope type        = 2
0.01.077.748 I print_info: rope scaling     = linear
0.01.077.750 I print_info: freq_base_train  = 10000.0
0.01.077.751 I print_info: freq_scale_train = 1
0.01.077.751 I print_info: n_ctx_orig_yarn  = 8192
0.01.077.751 I print_info: rope_finetuned   = unknown
0.01.077.752 I print_info: ssm_d_conv       = 0
0.01.077.753 I print_info: ssm_d_inner      = 0
0.01.077.753 I print_info: ssm_d_state      = 0
0.01.077.753 I print_info: ssm_dt_rank      = 0
0.01.077.754 I print_info: ssm_dt_b_c_rms   = 0
0.01.077.755 I print_info: model type       = 2B
0.01.077.756 I print_info: model params     = 2.51 B
0.01.077.756 I print_info: general.name     = gemma-1.1-2b-it
0.01.077.760 I print_info: vocab type       = SPM
0.01.077.761 I print_info: n_vocab          = 256000
0.01.077.764 I print_info: n_merges         = 0
0.01.077.765 I print_info: BOS token        = 2 '<bos>'
0.01.077.765 I print_info: EOS token        = 1 '<eos>'
0.01.077.766 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.077.766 I print_info: UNK token        = 3 '<unk>'
0.01.077.780 I print_info: PAD token        = 0 '<pad>'
0.01.077.781 I print_info: LF token         = 227 '<0x0A>'
0.01.077.789 I print_info: EOG token        = 1 '<eos>'
0.01.077.790 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.077.790 I print_info: max token length = 93
0.01.077.792 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.135.313 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.142.097 I llama_init_from_model: n_seq_max     = 1
0.01.142.103 I llama_init_from_model: n_ctx         = 4096
0.01.142.104 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.142.104 I llama_init_from_model: n_batch       = 2048
0.01.142.104 I llama_init_from_model: n_ubatch      = 512
0.01.142.105 I llama_init_from_model: flash_attn    = 0
0.01.142.107 I llama_init_from_model: freq_base     = 10000.0
0.01.142.108 I llama_init_from_model: freq_scale    = 1
0.01.142.109 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.142.214 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.157.230 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.157.274 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.157.395 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.160.616 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.160.620 I llama_init_from_model: graph nodes  = 601
0.01.160.620 I llama_init_from_model: graph splits = 1
0.01.160.644 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.160.647 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.769.109 I main: llama threadpool init, n_threads = 4
0.01.769.122 I 
0.01.769.217 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.769.221 I 
0.01.769.463 I sampler seed: 2101720355
0.01.769.475 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.769.484 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.769.485 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.769.485 I 
 encomporn a malevolent entity and witnessed a horrifying vision.

As the sun began to set, the shadows of the forest seemed to writhe and twist,

0.12.958.332 I llama_perf_sampler_print:    sampling time =      49.84 ms /    33 runs   (    1.51 ms per token,   662.11 tokens per second)
0.12.958.336 I llama_perf_context_print:        load time =    1741.35 ms
0.12.958.337 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.958.338 I llama_perf_context_print:        eval time =   11103.35 ms /    32 runs   (  346.98 ms per token,     2.88 tokens per second)
0.12.958.362 I llama_perf_context_print:       total time =   11216.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m37.956s
user	46m30.509s
sys	0m6.182s
