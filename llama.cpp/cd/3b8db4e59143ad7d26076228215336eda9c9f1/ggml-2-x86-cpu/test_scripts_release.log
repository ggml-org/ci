+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.574 I build: 4109 (cd3b8db4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.782 I main: llama backend init
0.00.000.788 I main: load the model and apply lora adapter, if any
0.00.021.155 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.164 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.172 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.181 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.185 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.188 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.189 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.190 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.191 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.192 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.195 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.196 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.197 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.197 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.198 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.705 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.786 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.572 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.578 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.579 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.580 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.581 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.582 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.582 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.585 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.585 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.586 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.586 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.587 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.589 I llama_model_loader: - type  f32:   37 tensors
0.00.130.590 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.600 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.663 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.190 I llm_load_vocab: special tokens cache size = 5
0.00.261.967 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.982 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.983 I llm_load_print_meta: arch             = gemma
0.00.261.983 I llm_load_print_meta: vocab type       = SPM
0.00.261.984 I llm_load_print_meta: n_vocab          = 256000
0.00.261.985 I llm_load_print_meta: n_merges         = 0
0.00.261.985 I llm_load_print_meta: vocab_only       = 0
0.00.261.986 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.986 I llm_load_print_meta: n_embd           = 2048
0.00.261.986 I llm_load_print_meta: n_layer          = 18
0.00.261.998 I llm_load_print_meta: n_head           = 8
0.00.261.999 I llm_load_print_meta: n_head_kv        = 1
0.00.261.999 I llm_load_print_meta: n_rot            = 256
0.00.262.000 I llm_load_print_meta: n_swa            = 0
0.00.262.000 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.000 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.001 I llm_load_print_meta: n_gqa            = 8
0.00.262.002 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.003 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.004 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.005 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.006 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.006 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.006 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.007 I llm_load_print_meta: n_ff             = 16384
0.00.262.007 I llm_load_print_meta: n_expert         = 0
0.00.262.008 I llm_load_print_meta: n_expert_used    = 0
0.00.262.008 I llm_load_print_meta: causal attn      = 1
0.00.262.008 I llm_load_print_meta: pooling type     = 0
0.00.262.008 I llm_load_print_meta: rope type        = 2
0.00.262.009 I llm_load_print_meta: rope scaling     = linear
0.00.262.010 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.011 I llm_load_print_meta: freq_scale_train = 1
0.00.262.011 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.012 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.012 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.012 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.012 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.012 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.013 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.013 I llm_load_print_meta: model type       = 2B
0.00.262.014 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.014 I llm_load_print_meta: model params     = 2.51 B
0.00.262.015 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.016 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.016 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.016 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.017 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.017 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.017 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.018 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.018 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.018 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.019 I llm_load_print_meta: max token length = 93
0.00.362.693 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.362.700 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.362.701 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.362.701 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.362.702 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.362.702 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.367.990 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.996 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.996 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.997 I llama_new_context_with_model: n_batch       = 2048
0.00.367.997 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.997 I llama_new_context_with_model: flash_attn    = 0
0.00.368.000 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.000 I llama_new_context_with_model: freq_scale    = 1
0.00.368.001 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.509 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.524 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.615 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.948 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.954 I llama_new_context_with_model: graph nodes  = 601
0.00.383.955 I llama_new_context_with_model: graph splits = 1
0.00.383.956 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.784 I main: llama threadpool init, n_threads = 4
0.00.468.797 I 
0.00.468.871 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.468.874 I 
0.00.468.915 I sampler seed: 752248255
0.00.468.926 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.928 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.929 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.930 I 
 increasively.

I'm curious about the history of the word "incredibly".

**Incredibly** is an adverb that means "very much"

0.02.709.075 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6380.51 tokens per second)
0.02.709.087 I llama_perf_context_print:        load time =     467.97 ms
0.02.709.089 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.709.091 I llama_perf_context_print:        eval time =    2220.33 ms /    32 runs   (   69.39 ms per token,    14.41 tokens per second)
0.02.709.092 I llama_perf_context_print:       total time =    2240.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.446 I build: 4109 (cd3b8db4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.641 I main: llama backend init
0.00.000.647 I main: load the model and apply lora adapter, if any
0.00.021.064 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.081 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.088 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.092 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.096 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.098 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.099 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.100 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.101 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.101 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.105 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.105 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.106 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.106 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.107 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.261 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.553 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.399 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.407 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.408 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.408 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.409 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.410 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.410 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.413 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.413 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.414 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.414 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.415 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.420 I llama_model_loader: - type  f32:   37 tensors
0.00.130.421 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.290 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.830 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.410 I llm_load_vocab: special tokens cache size = 5
0.00.266.155 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.171 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.172 I llm_load_print_meta: arch             = gemma
0.00.266.172 I llm_load_print_meta: vocab type       = SPM
0.00.266.173 I llm_load_print_meta: n_vocab          = 256000
0.00.266.173 I llm_load_print_meta: n_merges         = 0
0.00.266.174 I llm_load_print_meta: vocab_only       = 0
0.00.266.174 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.174 I llm_load_print_meta: n_embd           = 2048
0.00.266.174 I llm_load_print_meta: n_layer          = 18
0.00.266.188 I llm_load_print_meta: n_head           = 8
0.00.266.189 I llm_load_print_meta: n_head_kv        = 1
0.00.266.189 I llm_load_print_meta: n_rot            = 256
0.00.266.189 I llm_load_print_meta: n_swa            = 0
0.00.266.190 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.190 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.191 I llm_load_print_meta: n_gqa            = 8
0.00.266.192 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.193 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.193 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.195 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.196 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.196 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.196 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.197 I llm_load_print_meta: n_ff             = 16384
0.00.266.197 I llm_load_print_meta: n_expert         = 0
0.00.266.198 I llm_load_print_meta: n_expert_used    = 0
0.00.266.198 I llm_load_print_meta: causal attn      = 1
0.00.266.198 I llm_load_print_meta: pooling type     = 0
0.00.266.198 I llm_load_print_meta: rope type        = 2
0.00.266.199 I llm_load_print_meta: rope scaling     = linear
0.00.266.201 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.201 I llm_load_print_meta: freq_scale_train = 1
0.00.266.202 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.202 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.202 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.203 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.203 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.203 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.204 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.204 I llm_load_print_meta: model type       = 2B
0.00.266.205 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.205 I llm_load_print_meta: model params     = 2.51 B
0.00.266.206 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.207 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.208 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.208 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.208 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.209 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.209 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.209 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.210 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.210 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.210 I llm_load_print_meta: max token length = 93
0.00.360.986 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.126 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.133 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.133 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.134 I llama_new_context_with_model: n_batch       = 2048
0.00.366.134 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.135 I llama_new_context_with_model: flash_attn    = 0
0.00.366.137 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.137 I llama_new_context_with_model: freq_scale    = 1
0.00.366.138 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.496 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.510 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.606 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.891 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.898 I llama_new_context_with_model: graph nodes  = 601
0.00.381.899 I llama_new_context_with_model: graph splits = 1
0.00.381.900 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.399 I main: llama threadpool init, n_threads = 4
0.00.462.413 I 
0.00.462.487 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.462.490 I 
0.00.462.537 I sampler seed: 190151404
0.00.462.549 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.552 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.553 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.554 I 
 increasities, and other forms of genital mutilation.

**Harmful effects:**

- Physical trauma and pain
- Emotional distress and depression
- Mental health

0.02.624.652 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7007.86 tokens per second)
0.02.624.654 I llama_perf_context_print:        load time =     461.73 ms
0.02.624.656 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.624.657 I llama_perf_context_print:        eval time =    2144.20 ms /    32 runs   (   67.01 ms per token,    14.92 tokens per second)
0.02.624.658 I llama_perf_context_print:       total time =    2162.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.549 I build: 4109 (cd3b8db4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.274 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.282 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.290 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.295 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.299 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.303 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.304 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.305 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.305 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.306 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.307 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.312 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.313 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.314 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.314 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.315 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.491 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.528 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.372 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.378 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.379 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.380 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.381 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.382 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.383 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.387 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.387 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.388 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.389 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.390 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.395 I llama_model_loader: - type  f32:   37 tensors
0.00.130.397 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.867 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.934 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.479 I llm_load_vocab: special tokens cache size = 5
0.00.262.371 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.388 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.389 I llm_load_print_meta: arch             = gemma
0.00.262.389 I llm_load_print_meta: vocab type       = SPM
0.00.262.390 I llm_load_print_meta: n_vocab          = 256000
0.00.262.391 I llm_load_print_meta: n_merges         = 0
0.00.262.391 I llm_load_print_meta: vocab_only       = 0
0.00.262.391 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.392 I llm_load_print_meta: n_embd           = 2048
0.00.262.392 I llm_load_print_meta: n_layer          = 18
0.00.262.404 I llm_load_print_meta: n_head           = 8
0.00.262.405 I llm_load_print_meta: n_head_kv        = 1
0.00.262.405 I llm_load_print_meta: n_rot            = 256
0.00.262.406 I llm_load_print_meta: n_swa            = 0
0.00.262.406 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.406 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.407 I llm_load_print_meta: n_gqa            = 8
0.00.262.408 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.409 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.410 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.411 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.411 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.412 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.412 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.413 I llm_load_print_meta: n_ff             = 16384
0.00.262.413 I llm_load_print_meta: n_expert         = 0
0.00.262.413 I llm_load_print_meta: n_expert_used    = 0
0.00.262.414 I llm_load_print_meta: causal attn      = 1
0.00.262.414 I llm_load_print_meta: pooling type     = 0
0.00.262.414 I llm_load_print_meta: rope type        = 2
0.00.262.415 I llm_load_print_meta: rope scaling     = linear
0.00.262.416 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.416 I llm_load_print_meta: freq_scale_train = 1
0.00.262.417 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.417 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.417 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.417 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.417 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.418 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.418 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.419 I llm_load_print_meta: model type       = 2B
0.00.262.419 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.420 I llm_load_print_meta: model params     = 2.51 B
0.00.262.421 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.421 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.421 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.422 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.422 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.422 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.423 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.423 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.423 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.424 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.424 I llm_load_print_meta: max token length = 93
0.00.338.327 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.338.334 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.338.335 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.338.336 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.338.336 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.338.337 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.343.741 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.749 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.749 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.750 I llama_new_context_with_model: n_batch       = 2048
0.00.343.750 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.750 I llama_new_context_with_model: flash_attn    = 0
0.00.343.753 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.754 I llama_new_context_with_model: freq_scale    = 1
0.00.343.755 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.592 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.606 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.719 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.021 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.027 I llama_new_context_with_model: graph nodes  = 601
0.00.360.027 I llama_new_context_with_model: graph splits = 1
0.00.360.030 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.229 I main: llama threadpool init, n_threads = 4
0.00.445.244 I 
0.00.445.331 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.335 I 
0.00.445.385 I sampler seed: 1618797222
0.00.445.394 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.397 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.398 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.398 I 
 increasities that provide opportunities for growth and transformation.

**Question:** What is the meaning of these words?

The provided text does not contain any specific definitions

0.02.678.750 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6731.95 tokens per second)
0.02.678.753 I llama_perf_context_print:        load time =     444.44 ms
0.02.678.754 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.678.756 I llama_perf_context_print:        eval time =    2214.59 ms /    32 runs   (   69.21 ms per token,    14.45 tokens per second)
0.02.678.757 I llama_perf_context_print:       total time =    2233.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.530 I build: 4109 (cd3b8db4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.020.979 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.989 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.997 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.006 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.011 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.015 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.016 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.017 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.018 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.019 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.019 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.025 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.026 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.027 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.028 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.029 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.287 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.811 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.628 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.635 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.635 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.636 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.637 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.637 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.640 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.640 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.641 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.641 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.643 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.647 I llama_model_loader: - type  f32:   37 tensors
0.00.129.648 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.523 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.255 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.770 I llm_load_vocab: special tokens cache size = 5
0.00.260.611 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.628 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.628 I llm_load_print_meta: arch             = gemma
0.00.260.629 I llm_load_print_meta: vocab type       = SPM
0.00.260.629 I llm_load_print_meta: n_vocab          = 256000
0.00.260.630 I llm_load_print_meta: n_merges         = 0
0.00.260.630 I llm_load_print_meta: vocab_only       = 0
0.00.260.630 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.631 I llm_load_print_meta: n_embd           = 2048
0.00.260.631 I llm_load_print_meta: n_layer          = 18
0.00.260.643 I llm_load_print_meta: n_head           = 8
0.00.260.644 I llm_load_print_meta: n_head_kv        = 1
0.00.260.644 I llm_load_print_meta: n_rot            = 256
0.00.260.644 I llm_load_print_meta: n_swa            = 0
0.00.260.644 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.645 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.646 I llm_load_print_meta: n_gqa            = 8
0.00.260.647 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.648 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.649 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.651 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.652 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.652 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.652 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.653 I llm_load_print_meta: n_ff             = 16384
0.00.260.656 I llm_load_print_meta: n_expert         = 0
0.00.260.657 I llm_load_print_meta: n_expert_used    = 0
0.00.260.657 I llm_load_print_meta: causal attn      = 1
0.00.260.657 I llm_load_print_meta: pooling type     = 0
0.00.260.658 I llm_load_print_meta: rope type        = 2
0.00.260.658 I llm_load_print_meta: rope scaling     = linear
0.00.260.660 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.661 I llm_load_print_meta: freq_scale_train = 1
0.00.260.661 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.662 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.662 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.662 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.663 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.663 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.666 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.666 I llm_load_print_meta: model type       = 2B
0.00.260.667 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.668 I llm_load_print_meta: model params     = 2.51 B
0.00.260.669 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.669 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.670 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.670 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.670 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.671 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.671 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.671 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.672 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.673 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.673 I llm_load_print_meta: max token length = 93
0.00.332.075 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.332.082 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.337.286 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.292 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.292 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.293 I llama_new_context_with_model: n_batch       = 2048
0.00.337.293 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.293 I llama_new_context_with_model: flash_attn    = 0
0.00.337.295 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.296 I llama_new_context_with_model: freq_scale    = 1
0.00.337.297 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.275 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.290 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.388 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.640 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.646 I llama_new_context_with_model: graph nodes  = 601
0.00.352.647 I llama_new_context_with_model: graph splits = 1
0.00.352.648 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.902 I main: llama threadpool init, n_threads = 4
0.00.440.915 I 
0.00.440.995 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.440.999 I 
0.00.441.054 I sampler seed: 3417340606
0.00.441.066 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.069 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.070 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.070 I 
 seconded.

I am unable to answer this question because it contains inappropriate and potentially harmful content. [end of text]


0.02.036.348 I llama_perf_sampler_print:    sampling time =       3.56 ms /    22 runs   (    0.16 ms per token,  6186.73 tokens per second)
0.02.036.350 I llama_perf_context_print:        load time =     440.14 ms
0.02.036.351 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.036.353 I llama_perf_context_print:        eval time =    1581.59 ms /    21 runs   (   75.31 ms per token,    13.28 tokens per second)
0.02.036.353 I llama_perf_context_print:       total time =    1595.45 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.779s
user	0m35.762s
sys	0m9.235s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4109 (cd3b8db4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40224.37 ms
main:    total time = 40224.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 4109 (cd3b8db4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.275 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.286 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.295 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.300 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.302 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.305 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.307 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.307 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.308 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.308 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.309 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.312 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.313 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.314 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.314 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.315 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.586 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.854 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.696 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.703 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.703 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.704 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.704 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.705 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.706 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.708 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.709 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.709 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.710 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.711 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.714 I llama_model_loader: - type  f32:   37 tensors
0.00.130.715 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.717 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.976 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.938 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.461 I llm_load_vocab: special tokens cache size = 5
0.00.269.348 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.366 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.366 I llm_load_print_meta: arch             = gemma
0.00.269.367 I llm_load_print_meta: vocab type       = SPM
0.00.269.368 I llm_load_print_meta: n_vocab          = 256000
0.00.269.368 I llm_load_print_meta: n_merges         = 0
0.00.269.369 I llm_load_print_meta: vocab_only       = 0
0.00.269.369 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.369 I llm_load_print_meta: n_embd           = 2048
0.00.269.370 I llm_load_print_meta: n_layer          = 18
0.00.269.380 I llm_load_print_meta: n_head           = 8
0.00.269.381 I llm_load_print_meta: n_head_kv        = 1
0.00.269.382 I llm_load_print_meta: n_rot            = 256
0.00.269.382 I llm_load_print_meta: n_swa            = 0
0.00.269.382 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.383 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.383 I llm_load_print_meta: n_gqa            = 8
0.00.269.384 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.386 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.386 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.387 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.388 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.388 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.388 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.389 I llm_load_print_meta: n_ff             = 16384
0.00.269.390 I llm_load_print_meta: n_expert         = 0
0.00.269.390 I llm_load_print_meta: n_expert_used    = 0
0.00.269.390 I llm_load_print_meta: causal attn      = 1
0.00.269.391 I llm_load_print_meta: pooling type     = 0
0.00.269.391 I llm_load_print_meta: rope type        = 2
0.00.269.391 I llm_load_print_meta: rope scaling     = linear
0.00.269.392 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.393 I llm_load_print_meta: freq_scale_train = 1
0.00.269.393 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.394 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.394 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.394 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.394 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.395 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.395 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.395 I llm_load_print_meta: model type       = 2B
0.00.269.396 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.397 I llm_load_print_meta: model params     = 2.51 B
0.00.269.397 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.398 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.398 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.398 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.399 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.399 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.400 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.400 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.400 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.401 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.401 I llm_load_print_meta: max token length = 93
0.00.328.204 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.213 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.214 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.214 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.215 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.215 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.333.448 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.455 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.456 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.456 I llama_new_context_with_model: n_batch       = 2048
0.00.333.456 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.457 I llama_new_context_with_model: flash_attn    = 0
0.00.333.460 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.461 I llama_new_context_with_model: freq_scale    = 1
0.00.333.461 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.594 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.608 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.703 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.077 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.083 I llama_new_context_with_model: graph nodes  = 601
0.00.350.083 I llama_new_context_with_model: graph splits = 1
0.00.350.085 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.243 I main: llama threadpool init, n_threads = 4
0.00.425.256 I 
0.00.425.331 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.425.334 I 
0.00.425.375 I sampler seed: 3621298588
0.00.425.386 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.388 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.389 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.390 I 
 seconally and with fervor. The storm raged on, the sky a bruised purple canvas, the wind howling a mournful tune.

The air was thick with tension

0.01.983.744 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6468.05 tokens per second)
0.01.983.746 I llama_perf_context_print:        load time =     424.46 ms
0.01.983.747 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.983.749 I llama_perf_context_print:        eval time =    1540.07 ms /    32 runs   (   48.13 ms per token,    20.78 tokens per second)
0.01.983.750 I llama_perf_context_print:       total time =    1558.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4109 (cd3b8db4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40174.46 ms
main:    total time = 40174.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.527 I build: 4109 (cd3b8db4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.717 I main: llama backend init
0.00.000.724 I main: load the model and apply lora adapter, if any
0.00.021.183 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.200 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.210 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.212 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.216 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.217 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.218 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.219 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.219 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.219 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.223 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.223 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.224 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.225 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.531 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.490 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.385 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.391 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.392 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.392 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.393 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.393 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.394 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.396 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.397 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.400 I llama_model_loader: - type  f32:   37 tensors
0.00.130.401 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.401 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.381 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.644 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.095 I llm_load_vocab: special tokens cache size = 5
0.00.257.678 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.257.693 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.257.694 I llm_load_print_meta: arch             = gemma
0.00.257.694 I llm_load_print_meta: vocab type       = SPM
0.00.257.695 I llm_load_print_meta: n_vocab          = 256000
0.00.257.696 I llm_load_print_meta: n_merges         = 0
0.00.257.696 I llm_load_print_meta: vocab_only       = 0
0.00.257.696 I llm_load_print_meta: n_ctx_train      = 8192
0.00.257.696 I llm_load_print_meta: n_embd           = 2048
0.00.257.697 I llm_load_print_meta: n_layer          = 18
0.00.257.708 I llm_load_print_meta: n_head           = 8
0.00.257.709 I llm_load_print_meta: n_head_kv        = 1
0.00.257.709 I llm_load_print_meta: n_rot            = 256
0.00.257.709 I llm_load_print_meta: n_swa            = 0
0.00.257.709 I llm_load_print_meta: n_embd_head_k    = 256
0.00.257.710 I llm_load_print_meta: n_embd_head_v    = 256
0.00.257.711 I llm_load_print_meta: n_gqa            = 8
0.00.257.712 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.257.713 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.257.713 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.257.715 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.257.716 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.257.716 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.257.716 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.257.717 I llm_load_print_meta: n_ff             = 16384
0.00.257.717 I llm_load_print_meta: n_expert         = 0
0.00.257.718 I llm_load_print_meta: n_expert_used    = 0
0.00.257.718 I llm_load_print_meta: causal attn      = 1
0.00.257.718 I llm_load_print_meta: pooling type     = 0
0.00.257.719 I llm_load_print_meta: rope type        = 2
0.00.257.719 I llm_load_print_meta: rope scaling     = linear
0.00.257.720 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.257.721 I llm_load_print_meta: freq_scale_train = 1
0.00.257.721 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.257.722 I llm_load_print_meta: rope_finetuned   = unknown
0.00.257.722 I llm_load_print_meta: ssm_d_conv       = 0
0.00.257.722 I llm_load_print_meta: ssm_d_inner      = 0
0.00.257.722 I llm_load_print_meta: ssm_d_state      = 0
0.00.257.723 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.257.723 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.257.723 I llm_load_print_meta: model type       = 2B
0.00.257.724 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.257.725 I llm_load_print_meta: model params     = 2.51 B
0.00.257.726 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.257.726 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.257.726 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.257.727 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.257.727 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.257.728 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.257.728 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.257.728 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.257.729 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.257.729 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.257.729 I llm_load_print_meta: max token length = 93
0.00.314.603 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.319.651 I llama_new_context_with_model: n_seq_max     = 1
0.00.319.657 I llama_new_context_with_model: n_ctx         = 4096
0.00.319.657 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.319.657 I llama_new_context_with_model: n_batch       = 2048
0.00.319.658 I llama_new_context_with_model: n_ubatch      = 512
0.00.319.658 I llama_new_context_with_model: flash_attn    = 0
0.00.319.661 I llama_new_context_with_model: freq_base     = 10000.0
0.00.319.661 I llama_new_context_with_model: freq_scale    = 1
0.00.319.662 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.334.038 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.334.052 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.334.146 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.335.360 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.335.367 I llama_new_context_with_model: graph nodes  = 601
0.00.335.367 I llama_new_context_with_model: graph splits = 1
0.00.335.369 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.411.411 I main: llama threadpool init, n_threads = 4
0.00.411.426 I 
0.00.411.505 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.411.508 I 
0.00.411.552 I sampler seed: 4184657367
0.00.411.562 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.411.569 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.411.572 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.411.572 I 
 fufilling and playful with a touch of vintage charm.

**Product description:**

- Hand-painted ceramic mug featuring a charming owl design.
- Comfortable

0.01.961.089 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6521.74 tokens per second)
0.01.961.091 I llama_perf_context_print:        load time =     410.67 ms
0.01.961.092 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.961.093 I llama_perf_context_print:        eval time =    1531.12 ms /    32 runs   (   47.85 ms per token,    20.90 tokens per second)
0.01.961.094 I llama_perf_context_print:       total time =    1549.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.094s
user	10m23.539s
sys	0m6.899s
