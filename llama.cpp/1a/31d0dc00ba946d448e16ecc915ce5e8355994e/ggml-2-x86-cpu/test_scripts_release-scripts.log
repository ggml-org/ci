+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.187 I build: 4306 (1a31d0dc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.377 I main: llama backend init
0.00.000.383 I main: load the model and apply lora adapter, if any
0.00.020.810 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.820 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.828 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.833 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.834 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.838 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.839 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.840 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.840 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.841 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.841 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.846 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.846 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.847 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.847 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.847 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.143 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.389 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.180 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.186 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.187 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.187 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.188 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.189 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.190 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.193 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.193 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.194 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.195 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.196 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.199 I llama_model_loader: - type  f32:   37 tensors
0.00.130.200 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.125 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.000 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.673 I llm_load_vocab: special tokens cache size = 5
0.00.271.569 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.588 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.588 I llm_load_print_meta: arch             = gemma
0.00.271.589 I llm_load_print_meta: vocab type       = SPM
0.00.271.590 I llm_load_print_meta: n_vocab          = 256000
0.00.271.590 I llm_load_print_meta: n_merges         = 0
0.00.271.591 I llm_load_print_meta: vocab_only       = 0
0.00.271.591 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.592 I llm_load_print_meta: n_embd           = 2048
0.00.271.592 I llm_load_print_meta: n_layer          = 18
0.00.271.604 I llm_load_print_meta: n_head           = 8
0.00.271.605 I llm_load_print_meta: n_head_kv        = 1
0.00.271.606 I llm_load_print_meta: n_rot            = 256
0.00.271.606 I llm_load_print_meta: n_swa            = 0
0.00.271.606 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.607 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.608 I llm_load_print_meta: n_gqa            = 8
0.00.271.609 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.610 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.610 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.612 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.612 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.612 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.613 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.614 I llm_load_print_meta: n_ff             = 16384
0.00.271.614 I llm_load_print_meta: n_expert         = 0
0.00.271.614 I llm_load_print_meta: n_expert_used    = 0
0.00.271.615 I llm_load_print_meta: causal attn      = 1
0.00.271.616 I llm_load_print_meta: pooling type     = 0
0.00.271.616 I llm_load_print_meta: rope type        = 2
0.00.271.616 I llm_load_print_meta: rope scaling     = linear
0.00.271.618 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.618 I llm_load_print_meta: freq_scale_train = 1
0.00.271.619 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.619 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.619 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.620 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.620 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.621 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.621 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.621 I llm_load_print_meta: model type       = 2B
0.00.271.622 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.623 I llm_load_print_meta: model params     = 2.51 B
0.00.271.624 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.624 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.624 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.625 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.625 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.629 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.629 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.630 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.630 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.630 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.631 I llm_load_print_meta: max token length = 93
0.00.373.187 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.373.193 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.373.194 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.373.194 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.373.195 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.373.195 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.378.499 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.505 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.505 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.506 I llama_new_context_with_model: n_batch       = 2048
0.00.378.506 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.507 I llama_new_context_with_model: flash_attn    = 0
0.00.378.510 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.511 I llama_new_context_with_model: freq_scale    = 1
0.00.378.512 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.200 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.214 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.309 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.573 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.580 I llama_new_context_with_model: graph nodes  = 601
0.00.394.581 I llama_new_context_with_model: graph splits = 1
0.00.394.583 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.523 I main: llama threadpool init, n_threads = 4
0.00.484.539 I 
0.00.484.610 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.613 I 
0.00.484.661 I sampler seed: 757926066
0.00.484.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.685 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.689 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.689 I 
 increasities?

I am unable to answer this question as it contains sexually suggestive content. I am programmed to respect user privacy and am unable to provide information that

0.02.767.991 I llama_perf_sampler_print:    sampling time =       5.60 ms /    33 runs   (    0.17 ms per token,  5896.02 tokens per second)
0.02.767.994 I llama_perf_context_print:        load time =     484.12 ms
0.02.767.996 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.767.998 I llama_perf_context_print:        eval time =    2263.37 ms /    32 runs   (   70.73 ms per token,    14.14 tokens per second)
0.02.768.000 I llama_perf_context_print:       total time =    2283.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.533 I build: 4306 (1a31d0dc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.020.849 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.864 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.871 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.872 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.877 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.881 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.882 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.883 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.884 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.885 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.891 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.892 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.893 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.894 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.894 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.920 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.051 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.983 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.990 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.991 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.991 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.992 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.993 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.994 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.996 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.998 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.999 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.001 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.002 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.006 I llama_model_loader: - type  f32:   37 tensors
0.00.131.007 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.101 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.846 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.583 I llm_load_vocab: special tokens cache size = 5
0.00.271.824 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.860 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.861 I llm_load_print_meta: arch             = gemma
0.00.271.862 I llm_load_print_meta: vocab type       = SPM
0.00.271.879 I llm_load_print_meta: n_vocab          = 256000
0.00.271.883 I llm_load_print_meta: n_merges         = 0
0.00.271.884 I llm_load_print_meta: vocab_only       = 0
0.00.271.884 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.885 I llm_load_print_meta: n_embd           = 2048
0.00.271.885 I llm_load_print_meta: n_layer          = 18
0.00.271.900 I llm_load_print_meta: n_head           = 8
0.00.271.905 I llm_load_print_meta: n_head_kv        = 1
0.00.271.906 I llm_load_print_meta: n_rot            = 256
0.00.271.906 I llm_load_print_meta: n_swa            = 0
0.00.271.907 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.907 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.909 I llm_load_print_meta: n_gqa            = 8
0.00.271.911 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.913 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.915 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.917 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.917 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.918 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.919 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.920 I llm_load_print_meta: n_ff             = 16384
0.00.271.921 I llm_load_print_meta: n_expert         = 0
0.00.271.922 I llm_load_print_meta: n_expert_used    = 0
0.00.271.922 I llm_load_print_meta: causal attn      = 1
0.00.271.923 I llm_load_print_meta: pooling type     = 0
0.00.271.923 I llm_load_print_meta: rope type        = 2
0.00.271.924 I llm_load_print_meta: rope scaling     = linear
0.00.271.926 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.927 I llm_load_print_meta: freq_scale_train = 1
0.00.271.927 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.928 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.931 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.932 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.932 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.933 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.933 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.933 I llm_load_print_meta: model type       = 2B
0.00.271.935 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.936 I llm_load_print_meta: model params     = 2.51 B
0.00.271.937 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.938 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.939 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.939 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.940 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.943 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.943 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.944 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.944 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.945 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.945 I llm_load_print_meta: max token length = 93
0.00.364.995 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.370.430 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.436 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.436 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.437 I llama_new_context_with_model: n_batch       = 2048
0.00.370.437 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.438 I llama_new_context_with_model: flash_attn    = 0
0.00.370.441 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.442 I llama_new_context_with_model: freq_scale    = 1
0.00.370.443 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.128 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.143 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.244 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.546 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.552 I llama_new_context_with_model: graph nodes  = 601
0.00.386.552 I llama_new_context_with_model: graph splits = 1
0.00.386.554 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.032 I main: llama threadpool init, n_threads = 4
0.00.468.049 I 
0.00.468.138 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.468.141 I 
0.00.468.195 I sampler seed: 3128224598
0.00.468.205 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.216 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.220 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.221 I 
 increasities!

I cannot answer this question as it contains inappropriate language and imagery. [end of text]


0.01.710.863 I llama_perf_sampler_print:    sampling time =       3.08 ms /    19 runs   (    0.16 ms per token,  6166.83 tokens per second)
0.01.710.866 I llama_perf_context_print:        load time =     467.26 ms
0.01.710.867 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.710.868 I llama_perf_context_print:        eval time =    1231.35 ms /    18 runs   (   68.41 ms per token,    14.62 tokens per second)
0.01.710.869 I llama_perf_context_print:       total time =    1242.84 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.205 I build: 4306 (1a31d0dc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.436 I main: llama backend init
0.00.000.443 I main: load the model and apply lora adapter, if any
0.00.020.750 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.759 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.767 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.772 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.774 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.780 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.784 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.785 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.786 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.787 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.788 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.794 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.795 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.796 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.797 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.798 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.407 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.177 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.994 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.001 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.002 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.002 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.003 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.005 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.007 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.008 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.009 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.010 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.011 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.016 I llama_model_loader: - type  f32:   37 tensors
0.00.131.018 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.883 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.506 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.047 I llm_load_vocab: special tokens cache size = 5
0.00.269.811 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.829 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.829 I llm_load_print_meta: arch             = gemma
0.00.269.830 I llm_load_print_meta: vocab type       = SPM
0.00.269.831 I llm_load_print_meta: n_vocab          = 256000
0.00.269.832 I llm_load_print_meta: n_merges         = 0
0.00.269.832 I llm_load_print_meta: vocab_only       = 0
0.00.269.836 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.836 I llm_load_print_meta: n_embd           = 2048
0.00.269.836 I llm_load_print_meta: n_layer          = 18
0.00.269.848 I llm_load_print_meta: n_head           = 8
0.00.269.849 I llm_load_print_meta: n_head_kv        = 1
0.00.269.850 I llm_load_print_meta: n_rot            = 256
0.00.269.850 I llm_load_print_meta: n_swa            = 0
0.00.269.850 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.851 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.852 I llm_load_print_meta: n_gqa            = 8
0.00.269.853 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.853 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.854 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.856 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.857 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.857 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.858 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.859 I llm_load_print_meta: n_ff             = 16384
0.00.269.860 I llm_load_print_meta: n_expert         = 0
0.00.269.861 I llm_load_print_meta: n_expert_used    = 0
0.00.269.861 I llm_load_print_meta: causal attn      = 1
0.00.269.862 I llm_load_print_meta: pooling type     = 0
0.00.269.862 I llm_load_print_meta: rope type        = 2
0.00.269.866 I llm_load_print_meta: rope scaling     = linear
0.00.269.869 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.870 I llm_load_print_meta: freq_scale_train = 1
0.00.269.870 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.871 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.871 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.872 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.872 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.873 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.874 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.874 I llm_load_print_meta: model type       = 2B
0.00.269.875 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.876 I llm_load_print_meta: model params     = 2.51 B
0.00.269.877 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.878 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.879 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.879 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.880 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.883 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.883 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.884 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.884 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.885 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.885 I llm_load_print_meta: max token length = 93
0.00.347.396 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.347.403 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.404 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.347.405 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.347.405 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.406 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.352.679 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.685 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.686 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.686 I llama_new_context_with_model: n_batch       = 2048
0.00.352.686 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.687 I llama_new_context_with_model: flash_attn    = 0
0.00.352.690 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.691 I llama_new_context_with_model: freq_scale    = 1
0.00.352.692 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.110 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.128 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.238 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.612 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.617 I llama_new_context_with_model: graph nodes  = 601
0.00.368.618 I llama_new_context_with_model: graph splits = 1
0.00.368.620 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.342 I main: llama threadpool init, n_threads = 4
0.00.477.357 I 
0.00.477.446 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.450 I 
0.00.477.500 I sampler seed: 2911119523
0.00.477.512 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.517 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.518 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.518 I 
 increamically, the narrator's relationship with his best friend, Kevin.

From the time they met as awkward kids in the sandbox, our bond grew stronger

0.02.765.742 I llama_perf_sampler_print:    sampling time =       5.41 ms /    33 runs   (    0.16 ms per token,  6102.07 tokens per second)
0.02.765.745 I llama_perf_context_print:        load time =     476.88 ms
0.02.765.746 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.765.748 I llama_perf_context_print:        eval time =    2268.91 ms /    32 runs   (   70.90 ms per token,    14.10 tokens per second)
0.02.765.748 I llama_perf_context_print:       total time =    2288.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.198 I build: 4306 (1a31d0dc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.419 I main: llama backend init
0.00.000.426 I main: load the model and apply lora adapter, if any
0.00.021.159 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.170 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.178 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.189 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.194 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.203 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.207 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.208 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.209 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.210 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.211 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.219 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.220 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.220 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.221 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.222 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.972 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.571 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.477 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.485 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.486 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.486 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.487 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.489 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.490 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.494 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.494 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.495 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.496 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.497 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.502 I llama_model_loader: - type  f32:   37 tensors
0.00.131.504 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.550 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.614 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.285 I llm_load_vocab: special tokens cache size = 5
0.00.284.261 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.281 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.282 I llm_load_print_meta: arch             = gemma
0.00.284.282 I llm_load_print_meta: vocab type       = SPM
0.00.284.283 I llm_load_print_meta: n_vocab          = 256000
0.00.284.283 I llm_load_print_meta: n_merges         = 0
0.00.284.284 I llm_load_print_meta: vocab_only       = 0
0.00.284.285 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.285 I llm_load_print_meta: n_embd           = 2048
0.00.284.287 I llm_load_print_meta: n_layer          = 18
0.00.284.300 I llm_load_print_meta: n_head           = 8
0.00.284.301 I llm_load_print_meta: n_head_kv        = 1
0.00.284.302 I llm_load_print_meta: n_rot            = 256
0.00.284.302 I llm_load_print_meta: n_swa            = 0
0.00.284.302 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.303 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.304 I llm_load_print_meta: n_gqa            = 8
0.00.284.306 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.307 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.308 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.310 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.311 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.312 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.313 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.314 I llm_load_print_meta: n_ff             = 16384
0.00.284.314 I llm_load_print_meta: n_expert         = 0
0.00.284.316 I llm_load_print_meta: n_expert_used    = 0
0.00.284.316 I llm_load_print_meta: causal attn      = 1
0.00.284.317 I llm_load_print_meta: pooling type     = 0
0.00.284.317 I llm_load_print_meta: rope type        = 2
0.00.284.321 I llm_load_print_meta: rope scaling     = linear
0.00.284.323 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.324 I llm_load_print_meta: freq_scale_train = 1
0.00.284.324 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.325 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.325 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.325 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.326 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.330 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.330 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.331 I llm_load_print_meta: model type       = 2B
0.00.284.332 I llm_load_print_meta: model ftype      = Q8_0
0.00.284.333 I llm_load_print_meta: model params     = 2.51 B
0.00.284.334 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.284.335 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.335 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.336 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.337 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.337 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.338 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.338 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.339 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.339 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.340 I llm_load_print_meta: max token length = 93
0.00.355.795 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.355.802 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.361.082 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.089 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.089 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.089 I llama_new_context_with_model: n_batch       = 2048
0.00.361.090 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.090 I llama_new_context_with_model: flash_attn    = 0
0.00.361.094 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.095 I llama_new_context_with_model: freq_scale    = 1
0.00.361.095 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.609 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.623 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.724 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.011 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.018 I llama_new_context_with_model: graph nodes  = 601
0.00.377.018 I llama_new_context_with_model: graph splits = 1
0.00.377.020 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.164 I main: llama threadpool init, n_threads = 4
0.00.466.178 I 
0.00.466.266 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.466.269 I 
0.00.466.322 I sampler seed: 63060155
0.00.466.334 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.338 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.339 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.340 I 
 increadibly long hair.

He combs his hair with a silver comb, a symbol of elegance and tradition.

The sunlight streams through the window, casting a

0.02.902.641 I llama_perf_sampler_print:    sampling time =       5.50 ms /    33 runs   (    0.17 ms per token,  6001.09 tokens per second)
0.02.902.643 I llama_perf_context_print:        load time =     465.72 ms
0.02.902.644 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.902.646 I llama_perf_context_print:        eval time =    2416.69 ms /    32 runs   (   75.52 ms per token,    13.24 tokens per second)
0.02.902.646 I llama_perf_context_print:       total time =    2436.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.852s
user	0m36.052s
sys	0m9.434s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4306 (1a31d0dc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40229.82 ms
main:    total time = 40229.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.531 I build: 4306 (1a31d0dc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.265 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.273 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.281 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.286 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.287 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.291 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.291 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.292 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.292 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.294 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.294 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.298 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.299 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.299 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.299 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.300 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.844 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.721 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.728 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.728 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.729 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.730 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.731 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.731 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.734 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.735 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.736 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.736 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.737 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.740 I llama_model_loader: - type  f32:   37 tensors
0.00.130.741 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.742 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.979 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.377 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.071 I llm_load_vocab: special tokens cache size = 5
0.00.279.122 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.141 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.142 I llm_load_print_meta: arch             = gemma
0.00.279.142 I llm_load_print_meta: vocab type       = SPM
0.00.279.143 I llm_load_print_meta: n_vocab          = 256000
0.00.279.144 I llm_load_print_meta: n_merges         = 0
0.00.279.144 I llm_load_print_meta: vocab_only       = 0
0.00.279.144 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.145 I llm_load_print_meta: n_embd           = 2048
0.00.279.145 I llm_load_print_meta: n_layer          = 18
0.00.279.156 I llm_load_print_meta: n_head           = 8
0.00.279.157 I llm_load_print_meta: n_head_kv        = 1
0.00.279.158 I llm_load_print_meta: n_rot            = 256
0.00.279.158 I llm_load_print_meta: n_swa            = 0
0.00.279.158 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.158 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.159 I llm_load_print_meta: n_gqa            = 8
0.00.279.160 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.161 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.162 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.164 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.164 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.164 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.164 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.165 I llm_load_print_meta: n_ff             = 16384
0.00.279.166 I llm_load_print_meta: n_expert         = 0
0.00.279.166 I llm_load_print_meta: n_expert_used    = 0
0.00.279.166 I llm_load_print_meta: causal attn      = 1
0.00.279.166 I llm_load_print_meta: pooling type     = 0
0.00.279.167 I llm_load_print_meta: rope type        = 2
0.00.279.167 I llm_load_print_meta: rope scaling     = linear
0.00.279.169 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.169 I llm_load_print_meta: freq_scale_train = 1
0.00.279.170 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.170 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.170 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.171 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.171 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.171 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.171 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.172 I llm_load_print_meta: model type       = 2B
0.00.279.172 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.173 I llm_load_print_meta: model params     = 2.51 B
0.00.279.174 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.174 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.174 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.175 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.175 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.175 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.176 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.176 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.176 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.177 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.177 I llm_load_print_meta: max token length = 93
0.00.338.451 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.338.460 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.338.461 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.338.462 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.338.462 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.338.463 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.343.691 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.698 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.699 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.699 I llama_new_context_with_model: n_batch       = 2048
0.00.343.699 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.700 I llama_new_context_with_model: flash_attn    = 0
0.00.343.702 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.703 I llama_new_context_with_model: freq_scale    = 1
0.00.343.704 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.166 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.182 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.281 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.523 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.530 I llama_new_context_with_model: graph nodes  = 601
0.00.359.530 I llama_new_context_with_model: graph splits = 1
0.00.359.532 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.440 I main: llama threadpool init, n_threads = 4
0.00.434.456 I 
0.00.434.528 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.434.531 I 
0.00.434.573 I sampler seed: 2517839514
0.00.434.585 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.596 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.599 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.599 I 
 encompates an extensive range of topics, including:

**Historical and Cultural Analysis:**
* The evolution of empires and societies
* Cultural transmission and adaptation


0.02.054.925 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6012.02 tokens per second)
0.02.054.928 I llama_perf_context_print:        load time =     433.68 ms
0.02.054.929 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.054.931 I llama_perf_context_print:        eval time =    1600.86 ms /    32 runs   (   50.03 ms per token,    19.99 tokens per second)
0.02.054.931 I llama_perf_context_print:       total time =    1620.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4306 (1a31d0dc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40206.00 ms
main:    total time = 40206.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.531 I build: 4306 (1a31d0dc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.021.289 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.301 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.310 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.314 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.317 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.318 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.319 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.319 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.320 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.320 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.324 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.324 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.325 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.325 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.326 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.231 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.423 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.550 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.556 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.557 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.558 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.558 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.559 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.559 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.562 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.563 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.566 I llama_model_loader: - type  f32:   37 tensors
0.00.131.567 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.568 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.322 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.991 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.597 I llm_load_vocab: special tokens cache size = 5
0.00.268.455 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.473 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.473 I llm_load_print_meta: arch             = gemma
0.00.268.474 I llm_load_print_meta: vocab type       = SPM
0.00.268.490 I llm_load_print_meta: n_vocab          = 256000
0.00.268.491 I llm_load_print_meta: n_merges         = 0
0.00.268.492 I llm_load_print_meta: vocab_only       = 0
0.00.268.492 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.492 I llm_load_print_meta: n_embd           = 2048
0.00.268.493 I llm_load_print_meta: n_layer          = 18
0.00.268.505 I llm_load_print_meta: n_head           = 8
0.00.268.506 I llm_load_print_meta: n_head_kv        = 1
0.00.268.507 I llm_load_print_meta: n_rot            = 256
0.00.268.507 I llm_load_print_meta: n_swa            = 0
0.00.268.507 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.508 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.509 I llm_load_print_meta: n_gqa            = 8
0.00.268.510 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.511 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.512 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.514 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.514 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.515 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.515 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.516 I llm_load_print_meta: n_ff             = 16384
0.00.268.516 I llm_load_print_meta: n_expert         = 0
0.00.268.516 I llm_load_print_meta: n_expert_used    = 0
0.00.268.517 I llm_load_print_meta: causal attn      = 1
0.00.268.517 I llm_load_print_meta: pooling type     = 0
0.00.268.518 I llm_load_print_meta: rope type        = 2
0.00.268.518 I llm_load_print_meta: rope scaling     = linear
0.00.268.520 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.520 I llm_load_print_meta: freq_scale_train = 1
0.00.268.521 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.522 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.522 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.522 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.523 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.523 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.523 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.524 I llm_load_print_meta: model type       = 2B
0.00.268.525 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.526 I llm_load_print_meta: model params     = 2.51 B
0.00.268.526 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.527 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.527 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.528 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.528 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.528 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.529 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.529 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.530 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.530 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.531 I llm_load_print_meta: max token length = 93
0.00.326.441 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.598 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.605 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.605 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.606 I llama_new_context_with_model: n_batch       = 2048
0.00.331.606 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.607 I llama_new_context_with_model: flash_attn    = 0
0.00.331.609 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.610 I llama_new_context_with_model: freq_scale    = 1
0.00.331.611 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.989 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.005 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.301 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.307 I llama_new_context_with_model: graph nodes  = 601
0.00.348.307 I llama_new_context_with_model: graph splits = 1
0.00.348.309 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.520 I main: llama threadpool init, n_threads = 4
0.00.423.536 I 
0.00.423.613 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.616 I 
0.00.423.661 I sampler seed: 2152816723
0.00.423.672 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.676 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.677 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.677 I 
 increasities. [end of text]


0.00.629.311 I llama_perf_sampler_print:    sampling time =       0.72 ms /     5 runs   (    0.14 ms per token,  6925.21 tokens per second)
0.00.629.314 I llama_perf_context_print:        load time =     422.78 ms
0.00.629.317 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.629.319 I llama_perf_context_print:        eval time =     202.19 ms /     4 runs   (   50.55 ms per token,    19.78 tokens per second)
0.00.629.319 I llama_perf_context_print:       total time =     205.80 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.903s
user	10m18.586s
sys	0m6.995s
