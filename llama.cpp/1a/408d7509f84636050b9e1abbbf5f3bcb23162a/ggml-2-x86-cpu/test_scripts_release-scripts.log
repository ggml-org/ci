+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.549 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.001.851 I main: load the model and apply lora adapter, if any
0.00.022.646 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.697 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.707 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.719 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.720 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.724 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.725 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.726 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.726 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.727 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.728 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.732 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.733 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.734 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.734 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.735 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.196 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.157 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.163 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.164 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.165 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.166 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.168 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.168 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.172 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.172 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.173 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.174 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.175 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.178 I llama_model_loader: - type  f32:   37 tensors
0.00.132.181 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.199 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.187 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.824 I llm_load_vocab: special tokens cache size = 5
0.00.276.756 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.775 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.775 I llm_load_print_meta: arch             = gemma
0.00.276.775 I llm_load_print_meta: vocab type       = SPM
0.00.276.776 I llm_load_print_meta: n_vocab          = 256000
0.00.276.777 I llm_load_print_meta: n_merges         = 0
0.00.276.777 I llm_load_print_meta: vocab_only       = 0
0.00.276.777 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.778 I llm_load_print_meta: n_embd           = 2048
0.00.276.778 I llm_load_print_meta: n_layer          = 18
0.00.276.789 I llm_load_print_meta: n_head           = 8
0.00.276.790 I llm_load_print_meta: n_head_kv        = 1
0.00.276.790 I llm_load_print_meta: n_rot            = 256
0.00.276.790 I llm_load_print_meta: n_swa            = 0
0.00.276.790 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.791 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.792 I llm_load_print_meta: n_gqa            = 8
0.00.276.793 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.794 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.794 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.796 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.796 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.796 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.796 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.798 I llm_load_print_meta: n_ff             = 16384
0.00.276.798 I llm_load_print_meta: n_expert         = 0
0.00.276.798 I llm_load_print_meta: n_expert_used    = 0
0.00.276.799 I llm_load_print_meta: causal attn      = 1
0.00.276.799 I llm_load_print_meta: pooling type     = 0
0.00.276.799 I llm_load_print_meta: rope type        = 2
0.00.276.799 I llm_load_print_meta: rope scaling     = linear
0.00.276.801 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.801 I llm_load_print_meta: freq_scale_train = 1
0.00.276.802 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.802 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.802 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.802 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.803 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.803 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.804 I llm_load_print_meta: model type       = 2B
0.00.276.804 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.805 I llm_load_print_meta: model params     = 2.51 B
0.00.276.806 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.806 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.807 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.807 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.807 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.808 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.808 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.808 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.808 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.809 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.809 I llm_load_print_meta: max token length = 93
0.00.387.202 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.387.213 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.387.213 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.387.214 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.387.214 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.387.215 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.392.389 I llama_new_context_with_model: n_ctx      = 8192
0.00.392.396 I llama_new_context_with_model: n_batch    = 2048
0.00.392.396 I llama_new_context_with_model: n_ubatch   = 512
0.00.392.397 I llama_new_context_with_model: flash_attn = 0
0.00.392.399 I llama_new_context_with_model: freq_base  = 10000.0
0.00.392.400 I llama_new_context_with_model: freq_scale = 1
0.00.423.668 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.423.685 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.423.789 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.425.072 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.425.080 I llama_new_context_with_model: graph nodes  = 601
0.00.425.081 I llama_new_context_with_model: graph splits = 1
0.00.425.083 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.520.330 I main: llama threadpool init, n_threads = 4
0.00.520.345 I 
0.00.520.424 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.520.427 I 
0.00.520.471 I sampler seed: 4240240788
0.00.520.482 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.520.490 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.520.491 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.520.491 I 
 increably.

I am unable to generate a response because the provided text contains inappropriate and sexually suggestive language. I am programmed to adhere to safety protocols and cannot

0.02.857.983 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6349.82 tokens per second)
0.02.857.986 I llama_perf_context_print:        load time =     518.46 ms
0.02.857.988 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.857.991 I llama_perf_context_print:        eval time =    2317.14 ms /    32 runs   (   72.41 ms per token,    13.81 tokens per second)
0.02.857.991 I llama_perf_context_print:       total time =    2337.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.524 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.711 I main: llama backend init
0.00.001.770 I main: load the model and apply lora adapter, if any
0.00.022.044 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.053 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.060 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.061 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.066 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.067 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.068 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.069 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.070 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.070 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.075 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.075 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.076 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.076 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.077 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.255 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.563 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.443 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.450 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.451 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.451 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.452 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.452 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.453 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.455 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.456 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.456 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.457 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.458 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.461 I llama_model_loader: - type  f32:   37 tensors
0.00.131.464 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.000 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.896 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.479 I llm_load_vocab: special tokens cache size = 5
0.00.269.124 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.141 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.141 I llm_load_print_meta: arch             = gemma
0.00.269.142 I llm_load_print_meta: vocab type       = SPM
0.00.269.143 I llm_load_print_meta: n_vocab          = 256000
0.00.269.143 I llm_load_print_meta: n_merges         = 0
0.00.269.143 I llm_load_print_meta: vocab_only       = 0
0.00.269.144 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.144 I llm_load_print_meta: n_embd           = 2048
0.00.269.144 I llm_load_print_meta: n_layer          = 18
0.00.269.155 I llm_load_print_meta: n_head           = 8
0.00.269.156 I llm_load_print_meta: n_head_kv        = 1
0.00.269.157 I llm_load_print_meta: n_rot            = 256
0.00.269.157 I llm_load_print_meta: n_swa            = 0
0.00.269.157 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.157 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.158 I llm_load_print_meta: n_gqa            = 8
0.00.269.159 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.160 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.161 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.162 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.163 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.163 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.163 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.164 I llm_load_print_meta: n_ff             = 16384
0.00.269.165 I llm_load_print_meta: n_expert         = 0
0.00.269.165 I llm_load_print_meta: n_expert_used    = 0
0.00.269.165 I llm_load_print_meta: causal attn      = 1
0.00.269.166 I llm_load_print_meta: pooling type     = 0
0.00.269.166 I llm_load_print_meta: rope type        = 2
0.00.269.166 I llm_load_print_meta: rope scaling     = linear
0.00.269.167 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.168 I llm_load_print_meta: freq_scale_train = 1
0.00.269.168 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.169 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.169 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.169 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.169 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.170 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.170 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.170 I llm_load_print_meta: model type       = 2B
0.00.269.171 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.172 I llm_load_print_meta: model params     = 2.51 B
0.00.269.173 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.173 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.174 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.174 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.175 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.175 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.175 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.176 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.176 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.176 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.176 I llm_load_print_meta: max token length = 93
0.00.366.844 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.954 I llama_new_context_with_model: n_ctx      = 8192
0.00.371.961 I llama_new_context_with_model: n_batch    = 2048
0.00.371.961 I llama_new_context_with_model: n_ubatch   = 512
0.00.371.962 I llama_new_context_with_model: flash_attn = 0
0.00.371.965 I llama_new_context_with_model: freq_base  = 10000.0
0.00.371.965 I llama_new_context_with_model: freq_scale = 1
0.00.401.449 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.401.465 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.401.564 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.402.814 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.402.820 I llama_new_context_with_model: graph nodes  = 601
0.00.402.820 I llama_new_context_with_model: graph splits = 1
0.00.402.822 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.468 I main: llama threadpool init, n_threads = 4
0.00.491.483 I 
0.00.491.558 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.561 I 
0.00.491.608 I sampler seed: 4127097865
0.00.491.619 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.623 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.624 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.624 I 
 increasities are a recurring theme in my writing, and I'm seeking advice on how to handle them effectively.

**1. Acknowledge and define the issue

0.02.760.735 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6857.86 tokens per second)
0.02.760.737 I llama_perf_context_print:        load time =     489.68 ms
0.02.760.738 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.760.740 I llama_perf_context_print:        eval time =    2249.08 ms /    32 runs   (   70.28 ms per token,    14.23 tokens per second)
0.02.760.740 I llama_perf_context_print:       total time =    2269.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.591 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.795 I main: llama backend init
0.00.001.894 I main: load the model and apply lora adapter, if any
0.00.022.114 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.165 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.177 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.188 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.196 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.197 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.197 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.198 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.198 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.199 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.204 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.205 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.206 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.207 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.207 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.740 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.989 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.813 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.819 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.820 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.821 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.821 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.822 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.823 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.826 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.826 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.828 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.829 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.829 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.834 I llama_model_loader: - type  f32:   37 tensors
0.00.131.837 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.425 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.916 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.566 I llm_load_vocab: special tokens cache size = 5
0.00.281.438 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.456 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.456 I llm_load_print_meta: arch             = gemma
0.00.281.457 I llm_load_print_meta: vocab type       = SPM
0.00.281.457 I llm_load_print_meta: n_vocab          = 256000
0.00.281.458 I llm_load_print_meta: n_merges         = 0
0.00.281.458 I llm_load_print_meta: vocab_only       = 0
0.00.281.458 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.459 I llm_load_print_meta: n_embd           = 2048
0.00.281.459 I llm_load_print_meta: n_layer          = 18
0.00.281.472 I llm_load_print_meta: n_head           = 8
0.00.281.473 I llm_load_print_meta: n_head_kv        = 1
0.00.281.473 I llm_load_print_meta: n_rot            = 256
0.00.281.473 I llm_load_print_meta: n_swa            = 0
0.00.281.474 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.474 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.475 I llm_load_print_meta: n_gqa            = 8
0.00.281.476 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.477 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.478 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.479 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.479 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.480 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.480 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.481 I llm_load_print_meta: n_ff             = 16384
0.00.281.481 I llm_load_print_meta: n_expert         = 0
0.00.281.481 I llm_load_print_meta: n_expert_used    = 0
0.00.281.482 I llm_load_print_meta: causal attn      = 1
0.00.281.482 I llm_load_print_meta: pooling type     = 0
0.00.281.482 I llm_load_print_meta: rope type        = 2
0.00.281.483 I llm_load_print_meta: rope scaling     = linear
0.00.281.484 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.485 I llm_load_print_meta: freq_scale_train = 1
0.00.281.485 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.486 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.486 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.486 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.486 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.487 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.487 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.488 I llm_load_print_meta: model type       = 2B
0.00.281.488 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.489 I llm_load_print_meta: model params     = 2.51 B
0.00.281.490 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.490 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.491 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.491 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.492 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.492 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.492 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.492 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.493 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.493 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.493 I llm_load_print_meta: max token length = 93
0.00.377.944 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.377.951 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.377.952 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.377.953 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.377.953 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.377.954 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.382.981 I llama_new_context_with_model: n_ctx      = 8192
0.00.382.987 I llama_new_context_with_model: n_batch    = 2048
0.00.382.987 I llama_new_context_with_model: n_ubatch   = 512
0.00.382.987 I llama_new_context_with_model: flash_attn = 0
0.00.382.989 I llama_new_context_with_model: freq_base  = 10000.0
0.00.382.990 I llama_new_context_with_model: freq_scale = 1
0.00.412.522 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.412.536 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.412.625 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.413.837 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.413.843 I llama_new_context_with_model: graph nodes  = 601
0.00.413.844 I llama_new_context_with_model: graph splits = 1
0.00.413.845 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.503.406 I main: llama threadpool init, n_threads = 4
0.00.503.419 I 
0.00.503.493 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.503.497 I 
0.00.503.539 I sampler seed: 1364140242
0.00.503.550 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.503.558 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.503.568 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.503.572 I 
 increasities, which are all the more significant because they violate one or more of the following ethical principles:
* Transparency
* Confidentiality
* Fairness
*

0.02.736.606 I llama_perf_sampler_print:    sampling time =       5.43 ms /    33 runs   (    0.16 ms per token,  6079.59 tokens per second)
0.02.736.609 I llama_perf_context_print:        load time =     501.49 ms
0.02.736.610 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.736.612 I llama_perf_context_print:        eval time =    2212.87 ms /    32 runs   (   69.15 ms per token,    14.46 tokens per second)
0.02.736.613 I llama_perf_context_print:       total time =    2233.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.546 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.001.822 I main: load the model and apply lora adapter, if any
0.00.021.958 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.004 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.011 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.017 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.020 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.023 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.024 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.025 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.026 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.026 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.027 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.032 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.032 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.033 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.033 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.034 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.600 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.056 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.286 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.292 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.293 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.293 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.294 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.295 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.295 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.298 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.298 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.299 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.300 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.134.301 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.306 I llama_model_loader: - type  f32:   37 tensors
0.00.134.308 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.829 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.016 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.617 I llm_load_vocab: special tokens cache size = 5
0.00.279.494 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.512 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.513 I llm_load_print_meta: arch             = gemma
0.00.279.513 I llm_load_print_meta: vocab type       = SPM
0.00.279.514 I llm_load_print_meta: n_vocab          = 256000
0.00.279.514 I llm_load_print_meta: n_merges         = 0
0.00.279.515 I llm_load_print_meta: vocab_only       = 0
0.00.279.515 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.515 I llm_load_print_meta: n_embd           = 2048
0.00.279.516 I llm_load_print_meta: n_layer          = 18
0.00.279.527 I llm_load_print_meta: n_head           = 8
0.00.279.528 I llm_load_print_meta: n_head_kv        = 1
0.00.279.528 I llm_load_print_meta: n_rot            = 256
0.00.279.528 I llm_load_print_meta: n_swa            = 0
0.00.279.529 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.529 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.530 I llm_load_print_meta: n_gqa            = 8
0.00.279.531 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.532 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.532 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.533 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.534 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.534 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.535 I llm_load_print_meta: n_ff             = 16384
0.00.279.535 I llm_load_print_meta: n_expert         = 0
0.00.279.536 I llm_load_print_meta: n_expert_used    = 0
0.00.279.536 I llm_load_print_meta: causal attn      = 1
0.00.279.536 I llm_load_print_meta: pooling type     = 0
0.00.279.537 I llm_load_print_meta: rope type        = 2
0.00.279.537 I llm_load_print_meta: rope scaling     = linear
0.00.279.539 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.539 I llm_load_print_meta: freq_scale_train = 1
0.00.279.540 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.540 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.540 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.540 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.541 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.541 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.541 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.542 I llm_load_print_meta: model type       = 2B
0.00.279.542 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.543 I llm_load_print_meta: model params     = 2.51 B
0.00.279.544 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.544 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.544 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.545 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.545 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.545 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.546 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.546 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.546 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.548 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.548 I llm_load_print_meta: max token length = 93
0.00.370.717 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.370.725 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.375.672 I llama_new_context_with_model: n_ctx      = 8192
0.00.375.679 I llama_new_context_with_model: n_batch    = 2048
0.00.375.679 I llama_new_context_with_model: n_ubatch   = 512
0.00.375.679 I llama_new_context_with_model: flash_attn = 0
0.00.375.681 I llama_new_context_with_model: freq_base  = 10000.0
0.00.375.682 I llama_new_context_with_model: freq_scale = 1
0.00.404.742 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.404.760 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.404.848 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.084 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.406.089 I llama_new_context_with_model: graph nodes  = 601
0.00.406.090 I llama_new_context_with_model: graph splits = 1
0.00.406.092 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.494.275 I main: llama threadpool init, n_threads = 4
0.00.494.288 I 
0.00.494.361 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.494.367 I 
0.00.494.414 I sampler seed: 2756798542
0.00.494.426 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.494.429 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.494.430 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.494.431 I 
 seconary effects can be observed in which of the following situations?

A) Single-factor ANOVA
B) Multiple-factor ANOVA
C) Correlation analysis

0.02.706.895 I llama_perf_sampler_print:    sampling time =       4.74 ms /    33 runs   (    0.14 ms per token,  6956.16 tokens per second)
0.02.706.898 I llama_perf_context_print:        load time =     492.43 ms
0.02.706.899 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.706.901 I llama_perf_context_print:        eval time =    2192.34 ms /    32 runs   (   68.51 ms per token,    14.60 tokens per second)
0.02.706.901 I llama_perf_context_print:       total time =    2212.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m21.351s
user	0m39.160s
sys	0m9.760s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (1a408d75)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32086.74 ms
main:    total time = 32086.74 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.531 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.827 I main: load the model and apply lora adapter, if any
0.00.021.961 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.010 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.021 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.028 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.032 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.035 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.036 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.037 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.037 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.038 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.038 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.042 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.042 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.043 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.044 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.044 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.999 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.129 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.017 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.024 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.025 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.026 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.026 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.027 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.028 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.030 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.031 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.031 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.032 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.033 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.037 I llama_model_loader: - type  f32:   37 tensors
0.00.131.040 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.040 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.296 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.908 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.534 I llm_load_vocab: special tokens cache size = 5
0.00.281.360 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.379 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.379 I llm_load_print_meta: arch             = gemma
0.00.281.379 I llm_load_print_meta: vocab type       = SPM
0.00.281.380 I llm_load_print_meta: n_vocab          = 256000
0.00.281.380 I llm_load_print_meta: n_merges         = 0
0.00.281.381 I llm_load_print_meta: vocab_only       = 0
0.00.281.381 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.381 I llm_load_print_meta: n_embd           = 2048
0.00.281.382 I llm_load_print_meta: n_layer          = 18
0.00.281.394 I llm_load_print_meta: n_head           = 8
0.00.281.395 I llm_load_print_meta: n_head_kv        = 1
0.00.281.395 I llm_load_print_meta: n_rot            = 256
0.00.281.395 I llm_load_print_meta: n_swa            = 0
0.00.281.396 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.396 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.397 I llm_load_print_meta: n_gqa            = 8
0.00.281.398 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.399 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.400 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.401 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.402 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.402 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.402 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.403 I llm_load_print_meta: n_ff             = 16384
0.00.281.404 I llm_load_print_meta: n_expert         = 0
0.00.281.404 I llm_load_print_meta: n_expert_used    = 0
0.00.281.404 I llm_load_print_meta: causal attn      = 1
0.00.281.405 I llm_load_print_meta: pooling type     = 0
0.00.281.405 I llm_load_print_meta: rope type        = 2
0.00.281.405 I llm_load_print_meta: rope scaling     = linear
0.00.281.407 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.408 I llm_load_print_meta: freq_scale_train = 1
0.00.281.408 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.408 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.408 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.409 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.409 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.409 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.410 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.410 I llm_load_print_meta: model type       = 2B
0.00.281.411 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.411 I llm_load_print_meta: model params     = 2.51 B
0.00.281.412 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.412 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.413 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.413 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.414 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.414 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.414 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.414 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.415 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.415 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.415 I llm_load_print_meta: max token length = 93
0.00.342.880 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.342.888 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.342.888 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.342.889 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.342.890 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.342.890 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.347.978 I llama_new_context_with_model: n_ctx      = 8192
0.00.347.983 I llama_new_context_with_model: n_batch    = 2048
0.00.347.983 I llama_new_context_with_model: n_ubatch   = 512
0.00.347.984 I llama_new_context_with_model: flash_attn = 0
0.00.347.986 I llama_new_context_with_model: freq_base  = 10000.0
0.00.347.987 I llama_new_context_with_model: freq_scale = 1
0.00.376.747 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.376.761 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.376.853 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.076 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.378.082 I llama_new_context_with_model: graph nodes  = 601
0.00.378.082 I llama_new_context_with_model: graph splits = 1
0.00.378.084 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.384 I main: llama threadpool init, n_threads = 4
0.00.459.400 I 
0.00.459.478 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.459.481 I 
0.00.459.523 I sampler seed: 1625958384
0.00.459.534 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.539 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.540 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.540 I 
 encompassing the 1970s and 1980s.

**Clothing:**

* High-waisted denim skirts and jackets


0.02.165.589 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6432.75 tokens per second)
0.02.165.591 I llama_perf_context_print:        load time =     457.54 ms
0.02.165.593 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.165.594 I llama_perf_context_print:        eval time =    1686.19 ms /    32 runs   (   52.69 ms per token,    18.98 tokens per second)
0.02.165.595 I llama_perf_context_print:       total time =    1706.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (1a408d75)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32149.96 ms
main:    total time = 32149.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.546 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.001.879 I main: load the model and apply lora adapter, if any
0.00.022.457 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.471 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.478 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.479 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.484 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.484 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.485 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.486 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.486 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.487 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.492 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.492 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.493 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.494 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.494 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.194 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.284 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.199 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.206 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.207 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.208 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.209 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.210 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.211 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.214 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.215 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.219 I llama_model_loader: - type  f32:   37 tensors
0.00.132.222 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.223 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.261 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.926 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.613 I llm_load_vocab: special tokens cache size = 5
0.00.284.754 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.776 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.776 I llm_load_print_meta: arch             = gemma
0.00.284.777 I llm_load_print_meta: vocab type       = SPM
0.00.284.778 I llm_load_print_meta: n_vocab          = 256000
0.00.284.778 I llm_load_print_meta: n_merges         = 0
0.00.284.779 I llm_load_print_meta: vocab_only       = 0
0.00.284.779 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.779 I llm_load_print_meta: n_embd           = 2048
0.00.284.780 I llm_load_print_meta: n_layer          = 18
0.00.284.792 I llm_load_print_meta: n_head           = 8
0.00.284.793 I llm_load_print_meta: n_head_kv        = 1
0.00.284.793 I llm_load_print_meta: n_rot            = 256
0.00.284.793 I llm_load_print_meta: n_swa            = 0
0.00.284.794 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.794 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.795 I llm_load_print_meta: n_gqa            = 8
0.00.284.796 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.797 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.798 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.799 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.799 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.800 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.800 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.801 I llm_load_print_meta: n_ff             = 16384
0.00.284.801 I llm_load_print_meta: n_expert         = 0
0.00.284.802 I llm_load_print_meta: n_expert_used    = 0
0.00.284.802 I llm_load_print_meta: causal attn      = 1
0.00.284.802 I llm_load_print_meta: pooling type     = 0
0.00.284.802 I llm_load_print_meta: rope type        = 2
0.00.284.803 I llm_load_print_meta: rope scaling     = linear
0.00.284.804 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.805 I llm_load_print_meta: freq_scale_train = 1
0.00.284.805 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.805 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.806 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.806 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.806 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.806 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.807 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.807 I llm_load_print_meta: model type       = 2B
0.00.284.808 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.284.809 I llm_load_print_meta: model params     = 2.51 B
0.00.284.809 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.284.810 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.810 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.811 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.811 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.811 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.812 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.812 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.812 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.813 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.813 I llm_load_print_meta: max token length = 93
0.00.345.251 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.350.334 I llama_new_context_with_model: n_ctx      = 8192
0.00.350.339 I llama_new_context_with_model: n_batch    = 2048
0.00.350.339 I llama_new_context_with_model: n_ubatch   = 512
0.00.350.340 I llama_new_context_with_model: flash_attn = 0
0.00.350.342 I llama_new_context_with_model: freq_base  = 10000.0
0.00.350.343 I llama_new_context_with_model: freq_scale = 1
0.00.380.008 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.380.027 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.380.128 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.402 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.381.408 I llama_new_context_with_model: graph nodes  = 601
0.00.381.408 I llama_new_context_with_model: graph splits = 1
0.00.381.410 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.746 I main: llama threadpool init, n_threads = 4
0.00.460.760 I 
0.00.460.834 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.837 I 
0.00.460.884 I sampler seed: 2794830570
0.00.460.895 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.897 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.898 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.898 I 
 seconally to the following prompt:

I am unable to generate a response that meets the prompt as I am unable to access the necessary information or context to fulfill

0.02.165.207 I llama_perf_sampler_print:    sampling time =       5.58 ms /    33 runs   (    0.17 ms per token,  5910.80 tokens per second)
0.02.165.210 I llama_perf_context_print:        load time =     458.84 ms
0.02.165.211 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.165.212 I llama_perf_context_print:        eval time =    1683.40 ms /    32 runs   (   52.61 ms per token,    19.01 tokens per second)
0.02.165.213 I llama_perf_context_print:       total time =    1704.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.459s
user	8m15.389s
sys	0m7.304s
