+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.024.876 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.085 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.177 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.189 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.195 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.196 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.198 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.199 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.201 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.203 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.209 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.210 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.211 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.212 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.213 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.712 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.274.592 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.293.519 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.293.528 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.293.529 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.293.530 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.293.531 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.293.532 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.293.533 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.293.537 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.293.538 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.293.539 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.293.540 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.293.541 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.293.550 I llama_model_loader: - type  f32:   37 tensors
0.00.293.554 I llama_model_loader: - type q8_0:  127 tensors
0.00.474.315 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.813 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.545.806 I llm_load_vocab: special tokens cache size = 5
0.00.642.307 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.642.378 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.642.383 I llm_load_print_meta: arch             = gemma
0.00.642.383 I llm_load_print_meta: vocab type       = SPM
0.00.642.384 I llm_load_print_meta: n_vocab          = 256000
0.00.642.387 I llm_load_print_meta: n_merges         = 0
0.00.642.388 I llm_load_print_meta: vocab_only       = 0
0.00.642.388 I llm_load_print_meta: n_ctx_train      = 8192
0.00.642.388 I llm_load_print_meta: n_embd           = 2048
0.00.642.389 I llm_load_print_meta: n_layer          = 18
0.00.642.452 I llm_load_print_meta: n_head           = 8
0.00.642.464 I llm_load_print_meta: n_head_kv        = 1
0.00.642.478 I llm_load_print_meta: n_rot            = 256
0.00.642.481 I llm_load_print_meta: n_swa            = 0
0.00.642.482 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.482 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.488 I llm_load_print_meta: n_gqa            = 8
0.00.642.493 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.498 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.499 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.642.501 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.642.501 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.642.502 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.642.503 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.642.508 I llm_load_print_meta: n_ff             = 16384
0.00.642.508 I llm_load_print_meta: n_expert         = 0
0.00.642.510 I llm_load_print_meta: n_expert_used    = 0
0.00.642.510 I llm_load_print_meta: causal attn      = 1
0.00.642.511 I llm_load_print_meta: pooling type     = 0
0.00.642.511 I llm_load_print_meta: rope type        = 2
0.00.642.528 I llm_load_print_meta: rope scaling     = linear
0.00.642.532 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.642.533 I llm_load_print_meta: freq_scale_train = 1
0.00.642.533 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.642.534 I llm_load_print_meta: rope_finetuned   = unknown
0.00.642.534 I llm_load_print_meta: ssm_d_conv       = 0
0.00.642.534 I llm_load_print_meta: ssm_d_inner      = 0
0.00.642.535 I llm_load_print_meta: ssm_d_state      = 0
0.00.642.535 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.642.535 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.642.536 I llm_load_print_meta: model type       = 2B
0.00.642.537 I llm_load_print_meta: model ftype      = Q8_0
0.00.642.538 I llm_load_print_meta: model params     = 2.51 B
0.00.642.539 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.642.539 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.642.540 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.642.541 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.642.542 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.642.551 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.642.552 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.642.553 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.642.558 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.642.561 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.642.562 I llm_load_print_meta: max token length = 93
0.00.754.034 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.754.046 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.754.047 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.754.048 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.754.049 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.754.049 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.759.876 I llama_new_context_with_model: n_ctx      = 8192
0.00.759.884 I llama_new_context_with_model: n_batch    = 2048
0.00.759.884 I llama_new_context_with_model: n_ubatch   = 512
0.00.759.885 I llama_new_context_with_model: flash_attn = 0
0.00.759.887 I llama_new_context_with_model: freq_base  = 10000.0
0.00.759.888 I llama_new_context_with_model: freq_scale = 1
0.00.789.874 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.789.912 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.790.025 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.792.518 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.792.522 I llama_new_context_with_model: graph nodes  = 601
0.00.792.522 I llama_new_context_with_model: graph splits = 1
0.00.792.539 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.406.428 I main: llama threadpool init, n_threads = 4
0.01.406.442 I 
0.01.406.551 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.406.555 I 
0.01.406.808 I sampler seed: 1576332712
0.01.406.820 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.406.828 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.406.829 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.406.829 I 
 increamically, and then fade away, leaving only a whisper of memory.

What is the poem trying to convey?

The poem is trying to convey the

0.14.807.742 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.84 tokens per second)
0.14.807.757 I llama_perf_context_print:        load time =    1403.54 ms
0.14.807.759 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.807.761 I llama_perf_context_print:        eval time =   13305.22 ms /    32 runs   (  415.79 ms per token,     2.41 tokens per second)
0.14.807.762 I llama_perf_context_print:       total time =   13401.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.024.764 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.866 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.881 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.882 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.889 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.892 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.893 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.894 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.895 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.904 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.912 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.921 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.925 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.926 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.927 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.057 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.965 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.886 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.895 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.896 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.897 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.898 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.899 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.900 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.904 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.905 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.906 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.907 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.908 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.916 I llama_model_loader: - type  f32:   37 tensors
0.00.269.920 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.292 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.035 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.029 I llm_load_vocab: special tokens cache size = 5
0.00.637.024 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.095 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.099 I llm_load_print_meta: arch             = gemma
0.00.637.100 I llm_load_print_meta: vocab type       = SPM
0.00.637.101 I llm_load_print_meta: n_vocab          = 256000
0.00.637.103 I llm_load_print_meta: n_merges         = 0
0.00.637.103 I llm_load_print_meta: vocab_only       = 0
0.00.637.104 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.104 I llm_load_print_meta: n_embd           = 2048
0.00.637.104 I llm_load_print_meta: n_layer          = 18
0.00.637.169 I llm_load_print_meta: n_head           = 8
0.00.637.178 I llm_load_print_meta: n_head_kv        = 1
0.00.637.180 I llm_load_print_meta: n_rot            = 256
0.00.637.180 I llm_load_print_meta: n_swa            = 0
0.00.637.181 I llm_load_print_meta: n_embd_head_k    = 256
0.00.637.181 I llm_load_print_meta: n_embd_head_v    = 256
0.00.637.186 I llm_load_print_meta: n_gqa            = 8
0.00.637.193 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.199 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.209 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.211 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.212 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.212 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.637.213 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.637.218 I llm_load_print_meta: n_ff             = 16384
0.00.637.218 I llm_load_print_meta: n_expert         = 0
0.00.637.219 I llm_load_print_meta: n_expert_used    = 0
0.00.637.219 I llm_load_print_meta: causal attn      = 1
0.00.637.219 I llm_load_print_meta: pooling type     = 0
0.00.637.220 I llm_load_print_meta: rope type        = 2
0.00.637.220 I llm_load_print_meta: rope scaling     = linear
0.00.637.222 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.637.223 I llm_load_print_meta: freq_scale_train = 1
0.00.637.224 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.637.224 I llm_load_print_meta: rope_finetuned   = unknown
0.00.637.224 I llm_load_print_meta: ssm_d_conv       = 0
0.00.637.225 I llm_load_print_meta: ssm_d_inner      = 0
0.00.637.225 I llm_load_print_meta: ssm_d_state      = 0
0.00.637.226 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.637.226 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.637.226 I llm_load_print_meta: model type       = 2B
0.00.637.230 I llm_load_print_meta: model ftype      = Q8_0
0.00.637.230 I llm_load_print_meta: model params     = 2.51 B
0.00.637.231 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.637.232 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.232 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.233 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.233 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.233 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.234 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.234 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.241 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.242 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.243 I llm_load_print_meta: max token length = 93
0.00.736.665 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.742.347 I llama_new_context_with_model: n_ctx      = 8192
0.00.742.356 I llama_new_context_with_model: n_batch    = 2048
0.00.742.356 I llama_new_context_with_model: n_ubatch   = 512
0.00.742.357 I llama_new_context_with_model: flash_attn = 0
0.00.742.361 I llama_new_context_with_model: freq_base  = 10000.0
0.00.742.361 I llama_new_context_with_model: freq_scale = 1
0.00.772.312 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.772.357 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.772.474 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.774.872 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.774.876 I llama_new_context_with_model: graph nodes  = 601
0.00.774.876 I llama_new_context_with_model: graph splits = 1
0.00.774.893 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.387.592 I main: llama threadpool init, n_threads = 4
0.01.387.607 I 
0.01.387.727 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.387.732 I 
0.01.388.009 I sampler seed: 801803966
0.01.388.022 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.388.029 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.388.032 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.388.032 I 
 increasities, and the like.

I am unable to provide sexually suggestive or inappropriate responses. [end of text]


0.09.760.688 I llama_perf_sampler_print:    sampling time =      30.87 ms /    21 runs   (    1.47 ms per token,   680.27 tokens per second)
0.09.760.691 I llama_perf_context_print:        load time =    1384.67 ms
0.09.760.692 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.760.707 I llama_perf_context_print:        eval time =    8312.24 ms /    20 runs   (  415.61 ms per token,     2.41 tokens per second)
0.09.760.708 I llama_perf_context_print:       total time =    8373.11 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.800 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.027 I main: llama backend init
0.00.003.763 I main: load the model and apply lora adapter, if any
0.00.030.755 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.975 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.031.077 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.089 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.091 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.097 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.100 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.101 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.102 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.103 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.104 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.113 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.114 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.115 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.116 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.117 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.164.404 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.271.401 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.290.272 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.290.282 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.290.283 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.290.284 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.290.285 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.290.287 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.290.288 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.290.292 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.290.293 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.290.294 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.290.295 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.290.297 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.290.306 I llama_model_loader: - type  f32:   37 tensors
0.00.290.311 I llama_model_loader: - type q8_0:  127 tensors
0.00.477.327 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.545.528 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.546.522 I llm_load_vocab: special tokens cache size = 5
0.00.642.832 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.642.903 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.642.903 I llm_load_print_meta: arch             = gemma
0.00.642.904 I llm_load_print_meta: vocab type       = SPM
0.00.642.905 I llm_load_print_meta: n_vocab          = 256000
0.00.642.907 I llm_load_print_meta: n_merges         = 0
0.00.642.907 I llm_load_print_meta: vocab_only       = 0
0.00.642.908 I llm_load_print_meta: n_ctx_train      = 8192
0.00.642.908 I llm_load_print_meta: n_embd           = 2048
0.00.642.909 I llm_load_print_meta: n_layer          = 18
0.00.642.974 I llm_load_print_meta: n_head           = 8
0.00.642.981 I llm_load_print_meta: n_head_kv        = 1
0.00.642.982 I llm_load_print_meta: n_rot            = 256
0.00.642.982 I llm_load_print_meta: n_swa            = 0
0.00.642.982 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.983 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.987 I llm_load_print_meta: n_gqa            = 8
0.00.642.992 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.997 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.998 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.643.000 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.643.000 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.643.000 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.643.001 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.643.005 I llm_load_print_meta: n_ff             = 16384
0.00.643.006 I llm_load_print_meta: n_expert         = 0
0.00.643.006 I llm_load_print_meta: n_expert_used    = 0
0.00.643.007 I llm_load_print_meta: causal attn      = 1
0.00.643.007 I llm_load_print_meta: pooling type     = 0
0.00.643.007 I llm_load_print_meta: rope type        = 2
0.00.643.008 I llm_load_print_meta: rope scaling     = linear
0.00.643.010 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.643.010 I llm_load_print_meta: freq_scale_train = 1
0.00.643.011 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.643.011 I llm_load_print_meta: rope_finetuned   = unknown
0.00.643.011 I llm_load_print_meta: ssm_d_conv       = 0
0.00.643.011 I llm_load_print_meta: ssm_d_inner      = 0
0.00.643.012 I llm_load_print_meta: ssm_d_state      = 0
0.00.643.012 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.643.012 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.643.013 I llm_load_print_meta: model type       = 2B
0.00.643.014 I llm_load_print_meta: model ftype      = Q8_0
0.00.643.014 I llm_load_print_meta: model params     = 2.51 B
0.00.643.015 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.643.015 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.643.016 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.643.017 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.643.017 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.643.017 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.643.018 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.643.018 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.643.037 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.643.038 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.643.039 I llm_load_print_meta: max token length = 93
0.00.743.514 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.743.525 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.743.526 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.743.526 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.743.527 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.743.527 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.749.229 I llama_new_context_with_model: n_ctx      = 8192
0.00.749.237 I llama_new_context_with_model: n_batch    = 2048
0.00.749.237 I llama_new_context_with_model: n_ubatch   = 512
0.00.749.238 I llama_new_context_with_model: flash_attn = 0
0.00.749.241 I llama_new_context_with_model: freq_base  = 10000.0
0.00.749.241 I llama_new_context_with_model: freq_scale = 1
0.00.779.541 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.779.579 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.779.690 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.782.141 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.782.146 I llama_new_context_with_model: graph nodes  = 601
0.00.782.146 I llama_new_context_with_model: graph splits = 1
0.00.782.163 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.429.675 I main: llama threadpool init, n_threads = 4
0.01.429.687 I 
0.01.429.798 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.429.802 I 
0.01.430.035 I sampler seed: 1406869818
0.01.430.048 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.430.057 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.430.058 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.430.060 I 
 maneuvled the sentence to show the meaning and grammatical structure.

The sentence is:

"I am curious about the meaning of life."

The rewritten

0.14.887.618 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.70 tokens per second)
0.14.887.632 I llama_perf_context_print:        load time =    1425.77 ms
0.14.887.634 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.887.636 I llama_perf_context_print:        eval time =   13362.48 ms /    32 runs   (  417.58 ms per token,     2.39 tokens per second)
0.14.887.637 I llama_perf_context_print:       total time =   13457.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.683 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.891 I main: llama backend init
0.00.002.839 I main: load the model and apply lora adapter, if any
0.00.025.121 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.336 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.437 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.449 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.451 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.455 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.459 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.460 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.461 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.462 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.463 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.470 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.471 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.473 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.474 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.475 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.593 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.359 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.319 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.329 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.331 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.332 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.333 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.334 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.335 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.339 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.340 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.341 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.357 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.361 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.370 I llama_model_loader: - type  f32:   37 tensors
0.00.271.374 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.130 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.530.263 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.531.240 I llm_load_vocab: special tokens cache size = 5
0.00.636.073 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.143 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.144 I llm_load_print_meta: arch             = gemma
0.00.636.145 I llm_load_print_meta: vocab type       = SPM
0.00.636.146 I llm_load_print_meta: n_vocab          = 256000
0.00.636.148 I llm_load_print_meta: n_merges         = 0
0.00.636.149 I llm_load_print_meta: vocab_only       = 0
0.00.636.149 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.150 I llm_load_print_meta: n_embd           = 2048
0.00.636.150 I llm_load_print_meta: n_layer          = 18
0.00.636.215 I llm_load_print_meta: n_head           = 8
0.00.636.222 I llm_load_print_meta: n_head_kv        = 1
0.00.636.223 I llm_load_print_meta: n_rot            = 256
0.00.636.223 I llm_load_print_meta: n_swa            = 0
0.00.636.224 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.224 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.229 I llm_load_print_meta: n_gqa            = 8
0.00.636.233 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.238 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.239 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.240 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.241 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.241 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.241 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.247 I llm_load_print_meta: n_ff             = 16384
0.00.636.248 I llm_load_print_meta: n_expert         = 0
0.00.636.253 I llm_load_print_meta: n_expert_used    = 0
0.00.636.253 I llm_load_print_meta: causal attn      = 1
0.00.636.253 I llm_load_print_meta: pooling type     = 0
0.00.636.254 I llm_load_print_meta: rope type        = 2
0.00.636.254 I llm_load_print_meta: rope scaling     = linear
0.00.636.256 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.256 I llm_load_print_meta: freq_scale_train = 1
0.00.636.257 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.258 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.258 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.259 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.259 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.259 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.263 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.263 I llm_load_print_meta: model type       = 2B
0.00.636.264 I llm_load_print_meta: model ftype      = Q8_0
0.00.636.265 I llm_load_print_meta: model params     = 2.51 B
0.00.636.266 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.636.266 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.267 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.267 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.268 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.268 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.269 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.269 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.275 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.277 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.278 I llm_load_print_meta: max token length = 93
0.00.727.736 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.727.748 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.733.410 I llama_new_context_with_model: n_ctx      = 8192
0.00.733.418 I llama_new_context_with_model: n_batch    = 2048
0.00.733.419 I llama_new_context_with_model: n_ubatch   = 512
0.00.733.419 I llama_new_context_with_model: flash_attn = 0
0.00.733.422 I llama_new_context_with_model: freq_base  = 10000.0
0.00.733.423 I llama_new_context_with_model: freq_scale = 1
0.00.764.317 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.764.355 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.764.470 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.766.966 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.766.970 I llama_new_context_with_model: graph nodes  = 601
0.00.766.971 I llama_new_context_with_model: graph splits = 1
0.00.766.988 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.377.983 I main: llama threadpool init, n_threads = 4
0.01.377.995 I 
0.01.378.106 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.378.109 I 
0.01.378.340 I sampler seed: 2701685631
0.01.378.354 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.378.361 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.378.364 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.378.364 I 
 increasities and a flamboyant lifestyle.

**Lifestyle:**

* Frequent travels to exotic destinations
* Pursuit of art, culture, and intellectual pursuits
* Extensive

0.14.892.006 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.09 tokens per second)
0.14.892.022 I llama_perf_context_print:        load time =    1375.02 ms
0.14.892.023 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.892.025 I llama_perf_context_print:        eval time =   13418.22 ms /    32 runs   (  419.32 ms per token,     2.38 tokens per second)
0.14.892.025 I llama_perf_context_print:       total time =   13514.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.852s
user	3m28.052s
sys	0m9.804s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (1a408d75)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198442.62 ms
main:    total time = 198442.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.024.633 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.847 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.936 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.947 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.948 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.953 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.954 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.956 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.957 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.958 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.959 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.965 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.968 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.969 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.970 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.972 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.737 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.827 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.768 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.777 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.778 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.779 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.780 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.781 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.782 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.786 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.787 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.788 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.789 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.790 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.798 I llama_model_loader: - type  f32:   37 tensors
0.00.268.803 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.803 I llama_model_loader: - type q6_K:   19 tensors
0.00.459.309 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.539 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.415 I llm_load_vocab: special tokens cache size = 5
0.00.619.079 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.153 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.154 I llm_load_print_meta: arch             = gemma
0.00.619.155 I llm_load_print_meta: vocab type       = SPM
0.00.619.156 I llm_load_print_meta: n_vocab          = 256000
0.00.619.158 I llm_load_print_meta: n_merges         = 0
0.00.619.158 I llm_load_print_meta: vocab_only       = 0
0.00.619.159 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.159 I llm_load_print_meta: n_embd           = 2048
0.00.619.159 I llm_load_print_meta: n_layer          = 18
0.00.619.224 I llm_load_print_meta: n_head           = 8
0.00.619.231 I llm_load_print_meta: n_head_kv        = 1
0.00.619.231 I llm_load_print_meta: n_rot            = 256
0.00.619.232 I llm_load_print_meta: n_swa            = 0
0.00.619.232 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.232 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.237 I llm_load_print_meta: n_gqa            = 8
0.00.619.242 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.247 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.248 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.250 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.250 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.251 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.251 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.256 I llm_load_print_meta: n_ff             = 16384
0.00.619.256 I llm_load_print_meta: n_expert         = 0
0.00.619.257 I llm_load_print_meta: n_expert_used    = 0
0.00.619.257 I llm_load_print_meta: causal attn      = 1
0.00.619.257 I llm_load_print_meta: pooling type     = 0
0.00.619.258 I llm_load_print_meta: rope type        = 2
0.00.619.258 I llm_load_print_meta: rope scaling     = linear
0.00.619.259 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.260 I llm_load_print_meta: freq_scale_train = 1
0.00.619.260 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.261 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.261 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.261 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.261 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.262 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.262 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.263 I llm_load_print_meta: model type       = 2B
0.00.619.264 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.619.264 I llm_load_print_meta: model params     = 2.51 B
0.00.619.265 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.619.266 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.266 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.266 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.267 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.267 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.268 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.268 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.275 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.276 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.277 I llm_load_print_meta: max token length = 93
0.00.682.969 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.682.981 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.682.982 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.682.982 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.682.983 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.682.984 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.688.641 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.650 I llama_new_context_with_model: n_batch    = 2048
0.00.688.650 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.651 I llama_new_context_with_model: flash_attn = 0
0.00.688.654 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.655 I llama_new_context_with_model: freq_scale = 1
0.00.718.308 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.347 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.461 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.851 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.855 I llama_new_context_with_model: graph nodes  = 601
0.00.720.855 I llama_new_context_with_model: graph splits = 1
0.00.720.871 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.271 I main: llama threadpool init, n_threads = 4
0.01.297.285 I 
0.01.297.395 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.399 I 
0.01.297.631 I sampler seed: 4292244304
0.01.297.644 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.651 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.297.652 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.653 I 
 maneuorn, a young knight, and a seasoned warrior named Sir Eldred stand against an invading horde.

**Scene:** A narrow valley, shrouded in darkness

0.12.211.759 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.09 tokens per second)
0.12.211.776 I llama_perf_context_print:        load time =    1294.41 ms
0.12.211.778 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.211.779 I llama_perf_context_print:        eval time =   10818.98 ms /    32 runs   (  338.09 ms per token,     2.96 tokens per second)
0.12.211.795 I llama_perf_context_print:       total time =   10914.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (1a408d75)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197902.26 ms
main:    total time = 197902.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3984 (1a408d75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.002.872 I main: load the model and apply lora adapter, if any
0.00.025.073 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.176 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.192 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.196 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.200 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.202 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.203 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.204 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.205 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.206 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.213 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.223 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.225 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.226 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.227 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.543 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.929 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.861 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.872 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.873 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.875 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.876 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.877 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.878 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.882 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.883 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.891 I llama_model_loader: - type  f32:   37 tensors
0.00.271.895 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.896 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.471 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.314 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.309 I llm_load_vocab: special tokens cache size = 5
0.00.633.199 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.633.271 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.633.272 I llm_load_print_meta: arch             = gemma
0.00.633.273 I llm_load_print_meta: vocab type       = SPM
0.00.633.274 I llm_load_print_meta: n_vocab          = 256000
0.00.633.276 I llm_load_print_meta: n_merges         = 0
0.00.633.277 I llm_load_print_meta: vocab_only       = 0
0.00.633.277 I llm_load_print_meta: n_ctx_train      = 8192
0.00.633.278 I llm_load_print_meta: n_embd           = 2048
0.00.633.278 I llm_load_print_meta: n_layer          = 18
0.00.633.343 I llm_load_print_meta: n_head           = 8
0.00.633.350 I llm_load_print_meta: n_head_kv        = 1
0.00.633.350 I llm_load_print_meta: n_rot            = 256
0.00.633.351 I llm_load_print_meta: n_swa            = 0
0.00.633.351 I llm_load_print_meta: n_embd_head_k    = 256
0.00.633.351 I llm_load_print_meta: n_embd_head_v    = 256
0.00.633.356 I llm_load_print_meta: n_gqa            = 8
0.00.633.360 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.633.366 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.633.367 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.633.369 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.633.369 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.633.370 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.633.370 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.633.375 I llm_load_print_meta: n_ff             = 16384
0.00.633.375 I llm_load_print_meta: n_expert         = 0
0.00.633.376 I llm_load_print_meta: n_expert_used    = 0
0.00.633.376 I llm_load_print_meta: causal attn      = 1
0.00.633.376 I llm_load_print_meta: pooling type     = 0
0.00.633.377 I llm_load_print_meta: rope type        = 2
0.00.633.377 I llm_load_print_meta: rope scaling     = linear
0.00.633.378 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.633.379 I llm_load_print_meta: freq_scale_train = 1
0.00.633.380 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.633.380 I llm_load_print_meta: rope_finetuned   = unknown
0.00.633.380 I llm_load_print_meta: ssm_d_conv       = 0
0.00.633.381 I llm_load_print_meta: ssm_d_inner      = 0
0.00.633.381 I llm_load_print_meta: ssm_d_state      = 0
0.00.633.381 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.633.381 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.633.382 I llm_load_print_meta: model type       = 2B
0.00.633.383 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.633.384 I llm_load_print_meta: model params     = 2.51 B
0.00.633.385 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.633.385 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.633.386 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.633.386 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.633.387 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.633.387 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.633.387 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.633.388 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.633.407 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.633.410 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.633.410 I llm_load_print_meta: max token length = 93
0.00.694.851 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.700.662 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.669 I llama_new_context_with_model: n_batch    = 2048
0.00.700.669 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.670 I llama_new_context_with_model: flash_attn = 0
0.00.700.672 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.673 I llama_new_context_with_model: freq_scale = 1
0.00.730.214 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.730.256 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.730.371 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.732.875 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.732.879 I llama_new_context_with_model: graph nodes  = 601
0.00.732.879 I llama_new_context_with_model: graph splits = 1
0.00.732.896 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.308.924 I main: llama threadpool init, n_threads = 4
0.01.308.938 I 
0.01.309.065 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.070 I 
0.01.309.303 I sampler seed: 2701069361
0.01.309.315 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.309.322 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.309.325 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.309.326 I 
 seconary in the presence of a prime number p.

**Solution:**
$$x^p + 2x^{p-1} + 2

0.12.183.437 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.04 tokens per second)
0.12.183.441 I llama_perf_context_print:        load time =    1305.95 ms
0.12.183.442 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.183.455 I llama_perf_context_print:        eval time =   10779.18 ms /    32 runs   (  336.85 ms per token,     2.97 tokens per second)
0.12.183.457 I llama_perf_context_print:       total time =   10874.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.742s
user	49m56.698s
sys	0m6.681s
