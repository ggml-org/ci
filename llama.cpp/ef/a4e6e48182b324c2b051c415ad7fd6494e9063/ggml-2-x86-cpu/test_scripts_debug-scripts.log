+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.684 I build: 3946 (efa4e6e4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.024.719 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.912 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.002 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.012 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.013 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.019 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.020 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.022 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.023 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.024 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.030 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.032 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.033 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.041 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.042 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.145 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.131 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.647 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.654 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.655 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.656 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.657 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.658 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.660 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.663 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.664 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.665 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.666 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.667 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.674 I llama_model_loader: - type  f32:   37 tensors
0.00.271.679 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.075 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.596 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.544 I llm_load_vocab: special tokens cache size = 5
0.00.603.602 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.672 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.673 I llm_load_print_meta: arch             = gemma
0.00.603.674 I llm_load_print_meta: vocab type       = SPM
0.00.603.675 I llm_load_print_meta: n_vocab          = 256000
0.00.603.678 I llm_load_print_meta: n_merges         = 0
0.00.603.678 I llm_load_print_meta: vocab_only       = 0
0.00.603.679 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.679 I llm_load_print_meta: n_embd           = 2048
0.00.603.680 I llm_load_print_meta: n_layer          = 18
0.00.603.746 I llm_load_print_meta: n_head           = 8
0.00.603.753 I llm_load_print_meta: n_head_kv        = 1
0.00.603.753 I llm_load_print_meta: n_rot            = 256
0.00.603.754 I llm_load_print_meta: n_swa            = 0
0.00.603.754 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.755 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.761 I llm_load_print_meta: n_gqa            = 8
0.00.603.766 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.771 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.776 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.785 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.786 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.787 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.787 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.792 I llm_load_print_meta: n_ff             = 16384
0.00.603.794 I llm_load_print_meta: n_expert         = 0
0.00.603.794 I llm_load_print_meta: n_expert_used    = 0
0.00.603.794 I llm_load_print_meta: causal attn      = 1
0.00.603.795 I llm_load_print_meta: pooling type     = 0
0.00.603.795 I llm_load_print_meta: rope type        = 2
0.00.603.796 I llm_load_print_meta: rope scaling     = linear
0.00.603.797 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.798 I llm_load_print_meta: freq_scale_train = 1
0.00.603.798 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.799 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.800 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.800 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.800 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.801 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.801 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.802 I llm_load_print_meta: model type       = 2B
0.00.603.803 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.804 I llm_load_print_meta: model params     = 2.51 B
0.00.603.805 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.806 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.806 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.807 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.808 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.809 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.809 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.816 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.830 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.831 I llm_load_print_meta: max token length = 93
0.00.604.001 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.704.348 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.704.357 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.704.358 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.704.359 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.704.359 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.704.360 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.709.978 I llama_new_context_with_model: n_ctx      = 8192
0.00.709.984 I llama_new_context_with_model: n_batch    = 2048
0.00.709.985 I llama_new_context_with_model: n_ubatch   = 512
0.00.709.985 I llama_new_context_with_model: flash_attn = 0
0.00.709.987 I llama_new_context_with_model: freq_base  = 10000.0
0.00.709.988 I llama_new_context_with_model: freq_scale = 1
0.00.739.319 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.739.359 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.739.475 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.912 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.740.917 I llama_new_context_with_model: graph nodes  = 601
0.00.740.917 I llama_new_context_with_model: graph splits = 1
0.00.740.934 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.226 I main: llama threadpool init, n_threads = 4
0.01.353.238 I 
0.01.353.347 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.352 I 
0.01.353.534 I sampler seed: 2722223859
0.01.353.546 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.554 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.353.554 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.555 I 
 increasities.

I am unable to generate a response that meets your requirements because it contains sexually suggestive content. [end of text]


0.11.004.004 I llama_perf_sampler_print:    sampling time =      34.30 ms /    24 runs   (    1.43 ms per token,   699.77 tokens per second)
0.11.004.008 I llama_perf_context_print:        load time =    1350.32 ms
0.11.004.021 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.004.023 I llama_perf_context_print:        eval time =    9583.50 ms /    23 runs   (  416.67 ms per token,     2.40 tokens per second)
0.11.004.025 I llama_perf_context_print:       total time =    9650.79 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3946 (efa4e6e4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.804 I main: load the model and apply lora adapter, if any
0.00.025.118 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.213 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.228 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.295 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.306 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.307 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.308 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.309 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.339 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.358 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.363 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.365 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.367 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.368 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.928 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.846 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.246 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.254 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.255 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.256 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.257 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.258 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.259 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.263 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.264 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.265 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.266 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.277.267 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.276 I llama_model_loader: - type  f32:   37 tensors
0.00.277.281 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.882 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.617 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.634 I llm_load_vocab: special tokens cache size = 5
0.00.615.779 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.852 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.853 I llm_load_print_meta: arch             = gemma
0.00.615.854 I llm_load_print_meta: vocab type       = SPM
0.00.615.855 I llm_load_print_meta: n_vocab          = 256000
0.00.615.857 I llm_load_print_meta: n_merges         = 0
0.00.615.858 I llm_load_print_meta: vocab_only       = 0
0.00.615.858 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.859 I llm_load_print_meta: n_embd           = 2048
0.00.615.859 I llm_load_print_meta: n_layer          = 18
0.00.615.926 I llm_load_print_meta: n_head           = 8
0.00.615.933 I llm_load_print_meta: n_head_kv        = 1
0.00.615.933 I llm_load_print_meta: n_rot            = 256
0.00.615.934 I llm_load_print_meta: n_swa            = 0
0.00.615.934 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.934 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.939 I llm_load_print_meta: n_gqa            = 8
0.00.615.944 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.949 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.950 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.952 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.952 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.952 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.953 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.958 I llm_load_print_meta: n_ff             = 16384
0.00.615.958 I llm_load_print_meta: n_expert         = 0
0.00.615.958 I llm_load_print_meta: n_expert_used    = 0
0.00.615.959 I llm_load_print_meta: causal attn      = 1
0.00.615.959 I llm_load_print_meta: pooling type     = 0
0.00.615.960 I llm_load_print_meta: rope type        = 2
0.00.615.960 I llm_load_print_meta: rope scaling     = linear
0.00.615.961 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.962 I llm_load_print_meta: freq_scale_train = 1
0.00.615.962 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.963 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.963 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.963 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.963 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.964 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.964 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.965 I llm_load_print_meta: model type       = 2B
0.00.615.966 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.966 I llm_load_print_meta: model params     = 2.51 B
0.00.615.967 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.967 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.968 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.969 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.969 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.969 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.970 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.970 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.975 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.976 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.977 I llm_load_print_meta: max token length = 93
0.00.616.147 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.711.508 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.717.394 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.402 I llama_new_context_with_model: n_batch    = 2048
0.00.717.402 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.403 I llama_new_context_with_model: flash_attn = 0
0.00.717.405 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.406 I llama_new_context_with_model: freq_scale = 1
0.00.747.131 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.173 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.287 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.679 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.684 I llama_new_context_with_model: graph nodes  = 601
0.00.748.685 I llama_new_context_with_model: graph splits = 1
0.00.748.701 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.362.216 I main: llama threadpool init, n_threads = 4
0.01.362.229 I 
0.01.362.346 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.362.351 I 
0.01.362.537 I sampler seed: 2999105426
0.01.362.549 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.362.559 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.362.560 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.362.560 I 
 increasements for the following sentence:

The patient's vital signs were unstable and trending upward.

a) The patient's vital signs were trending upward

0.14.901.110 I llama_perf_sampler_print:    sampling time =      48.14 ms /    33 runs   (    1.46 ms per token,   685.53 tokens per second)
0.14.901.126 I llama_perf_context_print:        load time =    1359.32 ms
0.14.901.128 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.901.129 I llama_perf_context_print:        eval time =   13444.93 ms /    32 runs   (  420.15 ms per token,     2.38 tokens per second)
0.14.901.131 I llama_perf_context_print:       total time =   13538.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 3946 (efa4e6e4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.801 I main: load the model and apply lora adapter, if any
0.00.024.676 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.922 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.018 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.030 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.032 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.038 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.040 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.041 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.042 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.044 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.045 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.055 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.057 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.058 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.060 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.062 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.768 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.115 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.670 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.680 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.681 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.682 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.683 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.685 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.686 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.690 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.702 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.704 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.705 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.719 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.729 I llama_model_loader: - type  f32:   37 tensors
0.00.270.736 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.608 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.750 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.663 I llm_load_vocab: special tokens cache size = 5
0.00.610.739 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.810 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.811 I llm_load_print_meta: arch             = gemma
0.00.610.812 I llm_load_print_meta: vocab type       = SPM
0.00.610.813 I llm_load_print_meta: n_vocab          = 256000
0.00.610.815 I llm_load_print_meta: n_merges         = 0
0.00.610.816 I llm_load_print_meta: vocab_only       = 0
0.00.610.816 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.816 I llm_load_print_meta: n_embd           = 2048
0.00.610.817 I llm_load_print_meta: n_layer          = 18
0.00.610.879 I llm_load_print_meta: n_head           = 8
0.00.610.886 I llm_load_print_meta: n_head_kv        = 1
0.00.610.886 I llm_load_print_meta: n_rot            = 256
0.00.610.887 I llm_load_print_meta: n_swa            = 0
0.00.610.888 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.889 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.893 I llm_load_print_meta: n_gqa            = 8
0.00.610.898 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.903 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.904 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.906 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.907 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.907 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.908 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.913 I llm_load_print_meta: n_ff             = 16384
0.00.610.914 I llm_load_print_meta: n_expert         = 0
0.00.610.915 I llm_load_print_meta: n_expert_used    = 0
0.00.610.915 I llm_load_print_meta: causal attn      = 1
0.00.610.916 I llm_load_print_meta: pooling type     = 0
0.00.610.916 I llm_load_print_meta: rope type        = 2
0.00.610.917 I llm_load_print_meta: rope scaling     = linear
0.00.610.918 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.930 I llm_load_print_meta: freq_scale_train = 1
0.00.610.935 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.935 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.936 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.936 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.937 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.949 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.950 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.951 I llm_load_print_meta: model type       = 2B
0.00.610.952 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.953 I llm_load_print_meta: model params     = 2.51 B
0.00.610.954 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.955 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.956 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.956 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.957 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.957 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.958 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.958 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.965 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.966 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.966 I llm_load_print_meta: max token length = 93
0.00.611.142 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.688.262 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.688.272 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.688.272 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.688.273 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.688.274 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.688.274 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.694.077 I llama_new_context_with_model: n_ctx      = 8192
0.00.694.084 I llama_new_context_with_model: n_batch    = 2048
0.00.694.085 I llama_new_context_with_model: n_ubatch   = 512
0.00.694.085 I llama_new_context_with_model: flash_attn = 0
0.00.694.087 I llama_new_context_with_model: freq_base  = 10000.0
0.00.694.088 I llama_new_context_with_model: freq_scale = 1
0.00.723.039 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.723.081 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.199 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.619 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.624 I llama_new_context_with_model: graph nodes  = 601
0.00.724.624 I llama_new_context_with_model: graph splits = 1
0.00.724.641 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.508 I main: llama threadpool init, n_threads = 4
0.01.335.521 I 
0.01.335.639 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.335.645 I 
0.01.335.838 I sampler seed: 2284661446
0.01.335.850 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.335.858 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.335.859 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.335.859 I 
 maneuvringly with your ex, and it feels like you're both trapped in a loop of negativity and mistrust.

**Response:**

I understand

0.14.750.861 I llama_perf_sampler_print:    sampling time =      48.27 ms /    33 runs   (    1.46 ms per token,   683.67 tokens per second)
0.14.750.864 I llama_perf_context_print:        load time =    1332.62 ms
0.14.750.866 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.750.867 I llama_perf_context_print:        eval time =   13320.19 ms /    32 runs   (  416.26 ms per token,     2.40 tokens per second)
0.14.750.893 I llama_perf_context_print:       total time =   13415.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3946 (efa4e6e4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.832 I main: load the model and apply lora adapter, if any
0.00.024.559 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.772 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.862 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.874 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.876 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.881 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.886 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.888 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.890 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.892 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.893 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.901 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.903 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.905 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.907 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.909 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.706 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.340 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.920 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.930 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.931 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.932 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.933 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.934 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.935 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.939 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.940 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.941 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.942 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.944 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.951 I llama_model_loader: - type  f32:   37 tensors
0.00.271.955 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.851 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.199 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.105 I llm_load_vocab: special tokens cache size = 5
0.00.602.589 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.664 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.665 I llm_load_print_meta: arch             = gemma
0.00.602.666 I llm_load_print_meta: vocab type       = SPM
0.00.602.667 I llm_load_print_meta: n_vocab          = 256000
0.00.602.670 I llm_load_print_meta: n_merges         = 0
0.00.602.671 I llm_load_print_meta: vocab_only       = 0
0.00.602.671 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.671 I llm_load_print_meta: n_embd           = 2048
0.00.602.672 I llm_load_print_meta: n_layer          = 18
0.00.602.735 I llm_load_print_meta: n_head           = 8
0.00.602.741 I llm_load_print_meta: n_head_kv        = 1
0.00.602.742 I llm_load_print_meta: n_rot            = 256
0.00.602.742 I llm_load_print_meta: n_swa            = 0
0.00.602.743 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.743 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.747 I llm_load_print_meta: n_gqa            = 8
0.00.602.752 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.757 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.758 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.785 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.787 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.787 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.788 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.798 I llm_load_print_meta: n_ff             = 16384
0.00.602.804 I llm_load_print_meta: n_expert         = 0
0.00.602.805 I llm_load_print_meta: n_expert_used    = 0
0.00.602.806 I llm_load_print_meta: causal attn      = 1
0.00.602.806 I llm_load_print_meta: pooling type     = 0
0.00.602.808 I llm_load_print_meta: rope type        = 2
0.00.602.808 I llm_load_print_meta: rope scaling     = linear
0.00.602.811 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.812 I llm_load_print_meta: freq_scale_train = 1
0.00.602.813 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.813 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.814 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.815 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.815 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.816 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.817 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.827 I llm_load_print_meta: model type       = 2B
0.00.602.829 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.830 I llm_load_print_meta: model params     = 2.51 B
0.00.602.832 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.832 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.833 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.834 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.838 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.839 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.840 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.840 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.848 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.851 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.852 I llm_load_print_meta: max token length = 93
0.00.603.040 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.117 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.674.127 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.679.889 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.896 I llama_new_context_with_model: n_batch    = 2048
0.00.679.897 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.897 I llama_new_context_with_model: flash_attn = 0
0.00.679.899 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.900 I llama_new_context_with_model: freq_scale = 1
0.00.709.711 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.755 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.876 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.260 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.711.265 I llama_new_context_with_model: graph nodes  = 601
0.00.711.265 I llama_new_context_with_model: graph splits = 1
0.00.711.282 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.329.301 I main: llama threadpool init, n_threads = 4
0.01.329.314 I 
0.01.329.433 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.329.438 I 
0.01.329.621 I sampler seed: 2721079638
0.01.329.632 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.329.640 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.329.643 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.329.643 I 
 increasively.

I am a young programmer, and I am eager to learn the latest technologies and trends in the programming world.

**What are the most

0.14.819.491 I llama_perf_sampler_print:    sampling time =      47.70 ms /    33 runs   (    1.45 ms per token,   691.85 tokens per second)
0.14.819.517 I llama_perf_context_print:        load time =    1326.38 ms
0.14.819.519 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.819.521 I llama_perf_context_print:        eval time =   13397.01 ms /    32 runs   (  418.66 ms per token,     2.39 tokens per second)
0.14.819.522 I llama_perf_context_print:       total time =   13490.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.342s
user	3m33.026s
sys	0m9.378s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3946 (efa4e6e4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199408.10 ms
main:    total time = 199408.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.678 I build: 3946 (efa4e6e4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.820 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.036 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.131 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.143 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.145 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.150 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.154 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.155 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.156 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.157 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.158 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.166 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.167 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.168 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.169 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.171 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.171 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.090 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.546 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.555 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.556 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.557 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.557 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.558 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.560 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.563 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.564 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.565 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.566 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.273.567 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.576 I llama_model_loader: - type  f32:   37 tensors
0.00.273.580 I llama_model_loader: - type q4_K:  108 tensors
0.00.273.580 I llama_model_loader: - type q6_K:   19 tensors
0.00.460.528 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.073 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.991 I llm_load_vocab: special tokens cache size = 5
0.00.620.529 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.598 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.599 I llm_load_print_meta: arch             = gemma
0.00.620.599 I llm_load_print_meta: vocab type       = SPM
0.00.620.600 I llm_load_print_meta: n_vocab          = 256000
0.00.620.603 I llm_load_print_meta: n_merges         = 0
0.00.620.611 I llm_load_print_meta: vocab_only       = 0
0.00.620.612 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.612 I llm_load_print_meta: n_embd           = 2048
0.00.620.612 I llm_load_print_meta: n_layer          = 18
0.00.620.676 I llm_load_print_meta: n_head           = 8
0.00.620.687 I llm_load_print_meta: n_head_kv        = 1
0.00.620.688 I llm_load_print_meta: n_rot            = 256
0.00.620.688 I llm_load_print_meta: n_swa            = 0
0.00.620.688 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.689 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.693 I llm_load_print_meta: n_gqa            = 8
0.00.620.698 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.703 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.705 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.706 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.707 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.707 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.709 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.714 I llm_load_print_meta: n_ff             = 16384
0.00.620.714 I llm_load_print_meta: n_expert         = 0
0.00.620.715 I llm_load_print_meta: n_expert_used    = 0
0.00.620.715 I llm_load_print_meta: causal attn      = 1
0.00.620.716 I llm_load_print_meta: pooling type     = 0
0.00.620.716 I llm_load_print_meta: rope type        = 2
0.00.620.717 I llm_load_print_meta: rope scaling     = linear
0.00.620.720 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.729 I llm_load_print_meta: freq_scale_train = 1
0.00.620.729 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.730 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.731 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.731 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.731 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.732 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.733 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.734 I llm_load_print_meta: model type       = 2B
0.00.620.735 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.620.736 I llm_load_print_meta: model params     = 2.51 B
0.00.620.740 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.620.740 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.741 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.741 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.741 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.742 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.742 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.742 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.748 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.749 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.749 I llm_load_print_meta: max token length = 93
0.00.620.911 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.680.975 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.680.983 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.680.984 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.680.985 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.680.985 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.680.986 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.686.435 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.441 I llama_new_context_with_model: n_batch    = 2048
0.00.686.442 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.442 I llama_new_context_with_model: flash_attn = 0
0.00.686.444 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.445 I llama_new_context_with_model: freq_scale = 1
0.00.716.919 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.960 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.717.081 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.460 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.718.465 I llama_new_context_with_model: graph nodes  = 601
0.00.718.466 I llama_new_context_with_model: graph splits = 1
0.00.718.481 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.902 I main: llama threadpool init, n_threads = 4
0.01.298.914 I 
0.01.299.018 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.299.022 I 
0.01.299.202 I sampler seed: 3790936323
0.01.299.213 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.299.219 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.299.220 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.299.232 I 
 encompates a vast range of topics, including:

**Politics:**

* Government policies and regulations
* Election campaigns and voting
* Political parties and ideologies

0.12.208.364 I llama_perf_sampler_print:    sampling time =      47.59 ms /    33 runs   (    1.44 ms per token,   693.36 tokens per second)
0.12.208.367 I llama_perf_context_print:        load time =    1296.01 ms
0.12.208.369 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.208.370 I llama_perf_context_print:        eval time =   10816.29 ms /    32 runs   (  338.01 ms per token,     2.96 tokens per second)
0.12.208.385 I llama_perf_context_print:       total time =   10909.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3946 (efa4e6e4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199326.87 ms
main:    total time = 199326.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 3946 (efa4e6e4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.024.718 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.806 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.819 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.823 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.827 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.829 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.830 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.838 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.840 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.841 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.849 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.850 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.851 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.853 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.854 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.026 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.317 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.620 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.628 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.629 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.631 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.632 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.633 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.634 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.638 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.639 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.648 I llama_model_loader: - type  f32:   37 tensors
0.00.270.652 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.652 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.274 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.408 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.390 I llm_load_vocab: special tokens cache size = 5
0.00.597.466 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.531 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.532 I llm_load_print_meta: arch             = gemma
0.00.597.533 I llm_load_print_meta: vocab type       = SPM
0.00.597.534 I llm_load_print_meta: n_vocab          = 256000
0.00.597.536 I llm_load_print_meta: n_merges         = 0
0.00.597.537 I llm_load_print_meta: vocab_only       = 0
0.00.597.537 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.537 I llm_load_print_meta: n_embd           = 2048
0.00.597.538 I llm_load_print_meta: n_layer          = 18
0.00.597.599 I llm_load_print_meta: n_head           = 8
0.00.597.606 I llm_load_print_meta: n_head_kv        = 1
0.00.597.606 I llm_load_print_meta: n_rot            = 256
0.00.597.607 I llm_load_print_meta: n_swa            = 0
0.00.597.607 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.607 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.612 I llm_load_print_meta: n_gqa            = 8
0.00.597.616 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.621 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.622 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.623 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.624 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.624 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.624 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.629 I llm_load_print_meta: n_ff             = 16384
0.00.597.630 I llm_load_print_meta: n_expert         = 0
0.00.597.630 I llm_load_print_meta: n_expert_used    = 0
0.00.597.630 I llm_load_print_meta: causal attn      = 1
0.00.597.632 I llm_load_print_meta: pooling type     = 0
0.00.597.633 I llm_load_print_meta: rope type        = 2
0.00.597.643 I llm_load_print_meta: rope scaling     = linear
0.00.597.644 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.645 I llm_load_print_meta: freq_scale_train = 1
0.00.597.645 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.646 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.651 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.651 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.651 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.652 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.652 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.665 I llm_load_print_meta: model type       = 2B
0.00.597.666 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.597.667 I llm_load_print_meta: model params     = 2.51 B
0.00.597.668 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.597.669 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.670 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.670 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.671 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.672 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.672 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.672 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.679 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.680 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.681 I llm_load_print_meta: max token length = 93
0.00.597.848 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.656.043 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.661.611 I llama_new_context_with_model: n_ctx      = 8192
0.00.661.618 I llama_new_context_with_model: n_batch    = 2048
0.00.661.618 I llama_new_context_with_model: n_ubatch   = 512
0.00.661.619 I llama_new_context_with_model: flash_attn = 0
0.00.661.621 I llama_new_context_with_model: freq_base  = 10000.0
0.00.661.622 I llama_new_context_with_model: freq_scale = 1
0.00.691.276 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.691.318 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.691.436 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.692.775 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.692.780 I llama_new_context_with_model: graph nodes  = 601
0.00.692.781 I llama_new_context_with_model: graph splits = 1
0.00.692.796 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.818 I main: llama threadpool init, n_threads = 4
0.01.271.831 I 
0.01.271.938 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.942 I 
0.01.272.123 I sampler seed: 4164191687
0.01.272.135 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.144 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.272.147 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.147 I 
 seconally:

1. **Identify the key features of the project.**
2. **Summarize the key challenges and opportunities of the project.**
3

0.12.200.681 I llama_perf_sampler_print:    sampling time =      48.07 ms /    33 runs   (    1.46 ms per token,   686.54 tokens per second)
0.12.200.695 I llama_perf_context_print:        load time =    1268.96 ms
0.12.200.697 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.200.699 I llama_perf_context_print:        eval time =   10834.88 ms /    32 runs   (  338.59 ms per token,     2.95 tokens per second)
0.12.200.700 I llama_perf_context_print:       total time =   10928.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.996s
user	50m12.618s
sys	0m6.337s
