+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.648 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.854 I main: llama backend init
0.00.001.955 I main: load the model and apply lora adapter, if any
0.00.022.386 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.436 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.447 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.453 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.457 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.462 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.462 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.463 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.464 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.464 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.464 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.469 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.470 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.471 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.472 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.472 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.663 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.282 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.344 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.352 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.352 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.353 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.354 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.354 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.355 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.358 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.359 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.360 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.361 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.362 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.367 I llama_model_loader: - type  f32:   37 tensors
0.00.134.369 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.264 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.223.058 I llm_load_vocab: special tokens cache size = 5
0.00.241.671 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.241.689 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.241.689 I llm_load_print_meta: arch             = gemma
0.00.241.690 I llm_load_print_meta: vocab type       = SPM
0.00.241.691 I llm_load_print_meta: n_vocab          = 256000
0.00.241.691 I llm_load_print_meta: n_merges         = 0
0.00.241.692 I llm_load_print_meta: vocab_only       = 0
0.00.241.692 I llm_load_print_meta: n_ctx_train      = 8192
0.00.241.692 I llm_load_print_meta: n_embd           = 2048
0.00.241.692 I llm_load_print_meta: n_layer          = 18
0.00.241.707 I llm_load_print_meta: n_head           = 8
0.00.241.708 I llm_load_print_meta: n_head_kv        = 1
0.00.241.708 I llm_load_print_meta: n_rot            = 256
0.00.241.708 I llm_load_print_meta: n_swa            = 0
0.00.241.709 I llm_load_print_meta: n_embd_head_k    = 256
0.00.241.709 I llm_load_print_meta: n_embd_head_v    = 256
0.00.241.710 I llm_load_print_meta: n_gqa            = 8
0.00.241.711 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.241.712 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.241.712 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.241.714 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.241.714 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.241.714 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.241.714 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.241.715 I llm_load_print_meta: n_ff             = 16384
0.00.241.715 I llm_load_print_meta: n_expert         = 0
0.00.241.716 I llm_load_print_meta: n_expert_used    = 0
0.00.241.717 I llm_load_print_meta: causal attn      = 1
0.00.241.717 I llm_load_print_meta: pooling type     = 0
0.00.241.717 I llm_load_print_meta: rope type        = 2
0.00.241.718 I llm_load_print_meta: rope scaling     = linear
0.00.241.719 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.241.720 I llm_load_print_meta: freq_scale_train = 1
0.00.241.720 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.241.720 I llm_load_print_meta: rope_finetuned   = unknown
0.00.241.720 I llm_load_print_meta: ssm_d_conv       = 0
0.00.241.721 I llm_load_print_meta: ssm_d_inner      = 0
0.00.241.721 I llm_load_print_meta: ssm_d_state      = 0
0.00.241.721 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.241.721 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.241.722 I llm_load_print_meta: model type       = 2B
0.00.241.722 I llm_load_print_meta: model ftype      = Q8_0
0.00.241.723 I llm_load_print_meta: model params     = 2.51 B
0.00.241.724 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.241.725 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.241.725 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.241.725 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.241.726 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.241.726 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.241.727 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.241.727 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.241.728 I llm_load_print_meta: max token length = 93
0.00.241.750 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.340.961 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.340.970 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.340.971 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.340.972 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.340.972 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.340.973 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.346.298 I llama_new_context_with_model: n_ctx      = 8192
0.00.346.307 I llama_new_context_with_model: n_batch    = 2048
0.00.346.307 I llama_new_context_with_model: n_ubatch   = 512
0.00.346.308 I llama_new_context_with_model: flash_attn = 0
0.00.346.312 I llama_new_context_with_model: freq_base  = 10000.0
0.00.346.313 I llama_new_context_with_model: freq_scale = 1
0.00.378.366 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.378.383 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.378.482 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.390 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.379.398 I llama_new_context_with_model: graph nodes  = 601
0.00.379.399 I llama_new_context_with_model: graph splits = 1
0.00.379.401 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.056 I main: llama threadpool init, n_threads = 4
0.00.475.071 I 
0.00.475.145 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.149 I 
0.00.475.186 I sampler seed: 2105527180
0.00.475.196 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.199 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.475.200 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.00.771.253 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8000.00 tokens per second)
0.00.771.255 I llama_perf_context_print:        load time =     473.08 ms
0.00.771.256 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.771.258 I llama_perf_context_print:        eval time =     292.68 ms /     4 runs   (   73.17 ms per token,    13.67 tokens per second)
0.00.771.258 I llama_perf_context_print:       total time =     296.20 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.572 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.800 I main: llama backend init
0.00.001.951 I main: load the model and apply lora adapter, if any
0.00.022.581 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.594 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.602 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.603 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.607 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.608 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.609 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.609 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.610 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.611 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.616 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.617 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.617 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.618 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.618 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.631 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.092 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.003 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.011 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.012 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.013 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.014 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.015 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.016 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.020 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.021 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.022 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.022 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.134.024 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.028 I llama_model_loader: - type  f32:   37 tensors
0.00.134.031 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.749 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.207.553 I llm_load_vocab: special tokens cache size = 5
0.00.226.061 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.226.078 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.226.079 I llm_load_print_meta: arch             = gemma
0.00.226.080 I llm_load_print_meta: vocab type       = SPM
0.00.226.080 I llm_load_print_meta: n_vocab          = 256000
0.00.226.081 I llm_load_print_meta: n_merges         = 0
0.00.226.081 I llm_load_print_meta: vocab_only       = 0
0.00.226.082 I llm_load_print_meta: n_ctx_train      = 8192
0.00.226.082 I llm_load_print_meta: n_embd           = 2048
0.00.226.082 I llm_load_print_meta: n_layer          = 18
0.00.226.095 I llm_load_print_meta: n_head           = 8
0.00.226.096 I llm_load_print_meta: n_head_kv        = 1
0.00.226.096 I llm_load_print_meta: n_rot            = 256
0.00.226.097 I llm_load_print_meta: n_swa            = 0
0.00.226.097 I llm_load_print_meta: n_embd_head_k    = 256
0.00.226.097 I llm_load_print_meta: n_embd_head_v    = 256
0.00.226.098 I llm_load_print_meta: n_gqa            = 8
0.00.226.099 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.226.100 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.226.101 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.226.102 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.226.103 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.226.103 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.226.103 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.226.104 I llm_load_print_meta: n_ff             = 16384
0.00.226.104 I llm_load_print_meta: n_expert         = 0
0.00.226.104 I llm_load_print_meta: n_expert_used    = 0
0.00.226.105 I llm_load_print_meta: causal attn      = 1
0.00.226.105 I llm_load_print_meta: pooling type     = 0
0.00.226.105 I llm_load_print_meta: rope type        = 2
0.00.226.106 I llm_load_print_meta: rope scaling     = linear
0.00.226.107 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.226.108 I llm_load_print_meta: freq_scale_train = 1
0.00.226.108 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.226.109 I llm_load_print_meta: rope_finetuned   = unknown
0.00.226.109 I llm_load_print_meta: ssm_d_conv       = 0
0.00.226.109 I llm_load_print_meta: ssm_d_inner      = 0
0.00.226.109 I llm_load_print_meta: ssm_d_state      = 0
0.00.226.109 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.226.109 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.226.110 I llm_load_print_meta: model type       = 2B
0.00.226.110 I llm_load_print_meta: model ftype      = Q8_0
0.00.226.111 I llm_load_print_meta: model params     = 2.51 B
0.00.226.112 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.226.112 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.226.113 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.226.113 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.226.114 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.226.114 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.226.114 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.226.115 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.226.115 I llm_load_print_meta: max token length = 93
0.00.226.144 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.320.520 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.325.888 I llama_new_context_with_model: n_ctx      = 8192
0.00.325.896 I llama_new_context_with_model: n_batch    = 2048
0.00.325.897 I llama_new_context_with_model: n_ubatch   = 512
0.00.325.897 I llama_new_context_with_model: flash_attn = 0
0.00.325.900 I llama_new_context_with_model: freq_base  = 10000.0
0.00.325.901 I llama_new_context_with_model: freq_scale = 1
0.00.359.096 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.359.112 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.359.205 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.052 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.360.059 I llama_new_context_with_model: graph nodes  = 601
0.00.360.060 I llama_new_context_with_model: graph splits = 1
0.00.360.061 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.174 I main: llama threadpool init, n_threads = 4
0.00.451.189 I 
0.00.451.263 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.451.267 I 
0.00.451.296 I sampler seed: 2585064678
0.00.451.306 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.310 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.451.311 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities of the modern world. [end of text]


0.01.014.961 I llama_perf_sampler_print:    sampling time =       1.32 ms /     9 runs   (    0.15 ms per token,  6828.53 tokens per second)
0.01.014.964 I llama_perf_context_print:        load time =     449.20 ms
0.01.014.965 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.014.966 I llama_perf_context_print:        eval time =     558.01 ms /     8 runs   (   69.75 ms per token,    14.34 tokens per second)
0.01.014.967 I llama_perf_context_print:       total time =     563.79 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.665 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.877 I main: llama backend init
0.00.002.017 I main: load the model and apply lora adapter, if any
0.00.024.262 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.318 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.351 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.361 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.363 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.368 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.373 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.374 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.375 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.376 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.376 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.384 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.386 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.387 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.388 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.389 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.052.475 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.653 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.646 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.655 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.655 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.656 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.657 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.658 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.659 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.662 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.662 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.664 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.664 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.135.665 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.669 I llama_model_loader: - type  f32:   37 tensors
0.00.135.672 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.976 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.217.788 I llm_load_vocab: special tokens cache size = 5
0.00.236.324 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.236.354 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.236.355 I llm_load_print_meta: arch             = gemma
0.00.236.355 I llm_load_print_meta: vocab type       = SPM
0.00.236.356 I llm_load_print_meta: n_vocab          = 256000
0.00.236.356 I llm_load_print_meta: n_merges         = 0
0.00.236.357 I llm_load_print_meta: vocab_only       = 0
0.00.236.357 I llm_load_print_meta: n_ctx_train      = 8192
0.00.236.358 I llm_load_print_meta: n_embd           = 2048
0.00.236.358 I llm_load_print_meta: n_layer          = 18
0.00.236.372 I llm_load_print_meta: n_head           = 8
0.00.236.373 I llm_load_print_meta: n_head_kv        = 1
0.00.236.373 I llm_load_print_meta: n_rot            = 256
0.00.236.374 I llm_load_print_meta: n_swa            = 0
0.00.236.374 I llm_load_print_meta: n_embd_head_k    = 256
0.00.236.374 I llm_load_print_meta: n_embd_head_v    = 256
0.00.236.375 I llm_load_print_meta: n_gqa            = 8
0.00.236.376 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.236.377 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.236.378 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.236.379 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.236.380 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.236.380 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.236.380 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.236.381 I llm_load_print_meta: n_ff             = 16384
0.00.236.381 I llm_load_print_meta: n_expert         = 0
0.00.236.381 I llm_load_print_meta: n_expert_used    = 0
0.00.236.382 I llm_load_print_meta: causal attn      = 1
0.00.236.382 I llm_load_print_meta: pooling type     = 0
0.00.236.383 I llm_load_print_meta: rope type        = 2
0.00.236.383 I llm_load_print_meta: rope scaling     = linear
0.00.236.384 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.236.385 I llm_load_print_meta: freq_scale_train = 1
0.00.236.385 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.236.386 I llm_load_print_meta: rope_finetuned   = unknown
0.00.236.386 I llm_load_print_meta: ssm_d_conv       = 0
0.00.236.386 I llm_load_print_meta: ssm_d_inner      = 0
0.00.236.386 I llm_load_print_meta: ssm_d_state      = 0
0.00.236.386 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.236.387 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.236.387 I llm_load_print_meta: model type       = 2B
0.00.236.388 I llm_load_print_meta: model ftype      = Q8_0
0.00.236.389 I llm_load_print_meta: model params     = 2.51 B
0.00.236.390 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.236.390 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.236.391 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.236.391 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.236.391 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.236.392 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.236.392 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.236.393 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.236.393 I llm_load_print_meta: max token length = 93
0.00.236.413 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.312.236 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.312.244 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.312.245 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.312.246 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.312.246 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.312.247 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.317.543 I llama_new_context_with_model: n_ctx      = 8192
0.00.317.552 I llama_new_context_with_model: n_batch    = 2048
0.00.317.553 I llama_new_context_with_model: n_ubatch   = 512
0.00.317.553 I llama_new_context_with_model: flash_attn = 0
0.00.317.558 I llama_new_context_with_model: freq_base  = 10000.0
0.00.317.558 I llama_new_context_with_model: freq_scale = 1
0.00.348.708 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.348.723 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.348.817 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.694 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.349.702 I llama_new_context_with_model: graph nodes  = 601
0.00.349.702 I llama_new_context_with_model: graph splits = 1
0.00.349.704 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.582 I main: llama threadpool init, n_threads = 4
0.00.445.595 I 
0.00.445.678 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.682 I 
0.00.445.728 I sampler seed: 765225426
0.00.445.740 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.743 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.445.743 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities with a whimsical touch.

**Verse 1:**
A ladybug in a tutu, her crown adorned with pearls,
Dancing through the garden,

0.02.869.521 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6555.42 tokens per second)
0.02.869.523 I llama_perf_context_print:        load time =     443.55 ms
0.02.869.524 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.869.526 I llama_perf_context_print:        eval time =    2404.61 ms /    32 runs   (   75.14 ms per token,    13.31 tokens per second)
0.02.869.527 I llama_perf_context_print:       total time =    2423.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.567 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.001.850 I main: load the model and apply lora adapter, if any
0.00.022.025 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.074 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.089 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.098 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.099 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.103 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.104 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.104 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.105 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.105 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.106 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.111 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.111 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.112 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.113 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.114 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.090 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.575 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.586 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.594 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.595 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.596 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.596 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.597 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.598 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.601 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.602 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.602 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.603 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.604 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.608 I llama_model_loader: - type  f32:   37 tensors
0.00.133.612 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.930 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.210.731 I llm_load_vocab: special tokens cache size = 5
0.00.229.372 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.229.389 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.229.390 I llm_load_print_meta: arch             = gemma
0.00.229.391 I llm_load_print_meta: vocab type       = SPM
0.00.229.392 I llm_load_print_meta: n_vocab          = 256000
0.00.229.392 I llm_load_print_meta: n_merges         = 0
0.00.229.393 I llm_load_print_meta: vocab_only       = 0
0.00.229.393 I llm_load_print_meta: n_ctx_train      = 8192
0.00.229.393 I llm_load_print_meta: n_embd           = 2048
0.00.229.393 I llm_load_print_meta: n_layer          = 18
0.00.229.407 I llm_load_print_meta: n_head           = 8
0.00.229.408 I llm_load_print_meta: n_head_kv        = 1
0.00.229.408 I llm_load_print_meta: n_rot            = 256
0.00.229.408 I llm_load_print_meta: n_swa            = 0
0.00.229.409 I llm_load_print_meta: n_embd_head_k    = 256
0.00.229.409 I llm_load_print_meta: n_embd_head_v    = 256
0.00.229.410 I llm_load_print_meta: n_gqa            = 8
0.00.229.411 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.229.412 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.229.412 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.229.413 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.229.414 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.229.414 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.229.414 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.229.415 I llm_load_print_meta: n_ff             = 16384
0.00.229.415 I llm_load_print_meta: n_expert         = 0
0.00.229.416 I llm_load_print_meta: n_expert_used    = 0
0.00.229.416 I llm_load_print_meta: causal attn      = 1
0.00.229.416 I llm_load_print_meta: pooling type     = 0
0.00.229.417 I llm_load_print_meta: rope type        = 2
0.00.229.417 I llm_load_print_meta: rope scaling     = linear
0.00.229.419 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.229.419 I llm_load_print_meta: freq_scale_train = 1
0.00.229.419 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.229.420 I llm_load_print_meta: rope_finetuned   = unknown
0.00.229.420 I llm_load_print_meta: ssm_d_conv       = 0
0.00.229.420 I llm_load_print_meta: ssm_d_inner      = 0
0.00.229.421 I llm_load_print_meta: ssm_d_state      = 0
0.00.229.421 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.229.421 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.229.422 I llm_load_print_meta: model type       = 2B
0.00.229.422 I llm_load_print_meta: model ftype      = Q8_0
0.00.229.423 I llm_load_print_meta: model params     = 2.51 B
0.00.229.424 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.229.424 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.229.425 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.229.425 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.229.425 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.229.426 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.229.426 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.229.426 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.229.427 I llm_load_print_meta: max token length = 93
0.00.229.447 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.299.862 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.299.871 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.304.978 I llama_new_context_with_model: n_ctx      = 8192
0.00.304.987 I llama_new_context_with_model: n_batch    = 2048
0.00.304.987 I llama_new_context_with_model: n_ubatch   = 512
0.00.304.988 I llama_new_context_with_model: flash_attn = 0
0.00.304.991 I llama_new_context_with_model: freq_base  = 10000.0
0.00.304.992 I llama_new_context_with_model: freq_scale = 1
0.00.337.242 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.337.262 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.337.361 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.338.320 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.338.329 I llama_new_context_with_model: graph nodes  = 601
0.00.338.330 I llama_new_context_with_model: graph splits = 1
0.00.338.332 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.734 I main: llama threadpool init, n_threads = 4
0.00.440.749 I 
0.00.440.827 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.440.830 I 
0.00.440.870 I sampler seed: 456958303
0.00.440.880 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.884 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.440.884 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I am unable to find the requested information in the provided context. Therefore, I am unable to answer this question. [end of text]


0.02.639.380 I llama_perf_sampler_print:    sampling time =       4.80 ms /    29 runs   (    0.17 ms per token,  6042.93 tokens per second)
0.02.639.383 I llama_perf_context_print:        load time =     438.87 ms
0.02.639.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.639.385 I llama_perf_context_print:        eval time =    2181.12 ms /    28 runs   (   77.90 ms per token,    12.84 tokens per second)
0.02.639.386 I llama_perf_context_print:       total time =    2198.65 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.158s
user	0m24.831s
sys	0m9.737s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3778 (5f95dcce)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32243.53 ms
main:    total time = 32243.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.593 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.001.924 I main: load the model and apply lora adapter, if any
0.00.022.645 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.696 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.708 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.715 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.716 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.720 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.721 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.721 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.722 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.722 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.722 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.728 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.728 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.729 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.729 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.730 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.433 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.367 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.265 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.273 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.274 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.274 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.275 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.275 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.276 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.279 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.280 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.280 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.281 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.135.281 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.286 I llama_model_loader: - type  f32:   37 tensors
0.00.135.290 I llama_model_loader: - type q4_K:  108 tensors
0.00.135.290 I llama_model_loader: - type q6_K:   19 tensors
0.00.225.935 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.226.749 I llm_load_vocab: special tokens cache size = 5
0.00.245.514 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.245.532 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.245.533 I llm_load_print_meta: arch             = gemma
0.00.245.533 I llm_load_print_meta: vocab type       = SPM
0.00.245.534 I llm_load_print_meta: n_vocab          = 256000
0.00.245.535 I llm_load_print_meta: n_merges         = 0
0.00.245.535 I llm_load_print_meta: vocab_only       = 0
0.00.245.536 I llm_load_print_meta: n_ctx_train      = 8192
0.00.245.536 I llm_load_print_meta: n_embd           = 2048
0.00.245.536 I llm_load_print_meta: n_layer          = 18
0.00.245.550 I llm_load_print_meta: n_head           = 8
0.00.245.552 I llm_load_print_meta: n_head_kv        = 1
0.00.245.552 I llm_load_print_meta: n_rot            = 256
0.00.245.552 I llm_load_print_meta: n_swa            = 0
0.00.245.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.245.553 I llm_load_print_meta: n_embd_head_v    = 256
0.00.245.554 I llm_load_print_meta: n_gqa            = 8
0.00.245.555 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.245.556 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.245.557 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.245.558 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.245.558 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.245.558 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.245.559 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.245.560 I llm_load_print_meta: n_ff             = 16384
0.00.245.560 I llm_load_print_meta: n_expert         = 0
0.00.245.560 I llm_load_print_meta: n_expert_used    = 0
0.00.245.561 I llm_load_print_meta: causal attn      = 1
0.00.245.561 I llm_load_print_meta: pooling type     = 0
0.00.245.561 I llm_load_print_meta: rope type        = 2
0.00.245.562 I llm_load_print_meta: rope scaling     = linear
0.00.245.563 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.245.564 I llm_load_print_meta: freq_scale_train = 1
0.00.245.564 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.245.564 I llm_load_print_meta: rope_finetuned   = unknown
0.00.245.564 I llm_load_print_meta: ssm_d_conv       = 0
0.00.245.565 I llm_load_print_meta: ssm_d_inner      = 0
0.00.245.565 I llm_load_print_meta: ssm_d_state      = 0
0.00.245.565 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.245.565 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.245.566 I llm_load_print_meta: model type       = 2B
0.00.245.567 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.245.567 I llm_load_print_meta: model params     = 2.51 B
0.00.245.568 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.245.569 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.245.569 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.245.569 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.245.570 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.245.570 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.245.570 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.245.571 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.245.571 I llm_load_print_meta: max token length = 93
0.00.245.600 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.303.362 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.303.372 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.303.373 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.303.374 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.303.374 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.303.375 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.308.673 I llama_new_context_with_model: n_ctx      = 8192
0.00.308.681 I llama_new_context_with_model: n_batch    = 2048
0.00.308.682 I llama_new_context_with_model: n_ubatch   = 512
0.00.308.682 I llama_new_context_with_model: flash_attn = 0
0.00.308.686 I llama_new_context_with_model: freq_base  = 10000.0
0.00.308.686 I llama_new_context_with_model: freq_scale = 1
0.00.340.567 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.340.582 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.340.676 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.544 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.341.553 I llama_new_context_with_model: graph nodes  = 601
0.00.341.553 I llama_new_context_with_model: graph splits = 1
0.00.341.555 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.139 I main: llama threadpool init, n_threads = 4
0.00.429.152 I 
0.00.429.229 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.429.232 I 
0.00.429.262 I sampler seed: 33966146
0.00.429.271 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.274 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.429.275 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively with increasing data volume.

**Challenges:**

* Data inconsistency
* Data quality issues
* Performance bottlenecks
* Scalability limitations

**Solutions

0.02.152.008 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6363.29 tokens per second)
0.02.152.011 I llama_perf_context_print:        load time =     427.20 ms
0.02.152.013 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.152.015 I llama_perf_context_print:        eval time =    1703.80 ms /    32 runs   (   53.24 ms per token,    18.78 tokens per second)
0.02.152.016 I llama_perf_context_print:       total time =    1722.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3778 (5f95dcce)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32153.50 ms
main:    total time = 32153.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.595 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.001.919 I main: load the model and apply lora adapter, if any
0.00.022.418 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.436 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.447 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.448 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.453 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.453 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.454 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.455 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.456 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.456 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.461 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.461 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.462 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.462 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.464 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.476 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.852 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.905 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.913 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.914 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.915 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.915 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.916 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.917 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.920 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.921 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.923 I llama_model_loader: - type  f32:   37 tensors
0.00.133.927 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.927 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.470 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.217.306 I llm_load_vocab: special tokens cache size = 5
0.00.235.879 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.235.894 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.235.895 I llm_load_print_meta: arch             = gemma
0.00.235.895 I llm_load_print_meta: vocab type       = SPM
0.00.235.896 I llm_load_print_meta: n_vocab          = 256000
0.00.235.897 I llm_load_print_meta: n_merges         = 0
0.00.235.897 I llm_load_print_meta: vocab_only       = 0
0.00.235.897 I llm_load_print_meta: n_ctx_train      = 8192
0.00.235.898 I llm_load_print_meta: n_embd           = 2048
0.00.235.898 I llm_load_print_meta: n_layer          = 18
0.00.235.911 I llm_load_print_meta: n_head           = 8
0.00.235.912 I llm_load_print_meta: n_head_kv        = 1
0.00.235.912 I llm_load_print_meta: n_rot            = 256
0.00.235.912 I llm_load_print_meta: n_swa            = 0
0.00.235.913 I llm_load_print_meta: n_embd_head_k    = 256
0.00.235.913 I llm_load_print_meta: n_embd_head_v    = 256
0.00.235.914 I llm_load_print_meta: n_gqa            = 8
0.00.235.915 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.235.916 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.235.917 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.235.918 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.235.919 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.235.919 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.235.919 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.235.920 I llm_load_print_meta: n_ff             = 16384
0.00.235.920 I llm_load_print_meta: n_expert         = 0
0.00.235.921 I llm_load_print_meta: n_expert_used    = 0
0.00.235.921 I llm_load_print_meta: causal attn      = 1
0.00.235.921 I llm_load_print_meta: pooling type     = 0
0.00.235.921 I llm_load_print_meta: rope type        = 2
0.00.235.922 I llm_load_print_meta: rope scaling     = linear
0.00.235.924 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.235.924 I llm_load_print_meta: freq_scale_train = 1
0.00.235.925 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.235.925 I llm_load_print_meta: rope_finetuned   = unknown
0.00.235.925 I llm_load_print_meta: ssm_d_conv       = 0
0.00.235.926 I llm_load_print_meta: ssm_d_inner      = 0
0.00.235.926 I llm_load_print_meta: ssm_d_state      = 0
0.00.235.926 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.235.926 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.235.927 I llm_load_print_meta: model type       = 2B
0.00.235.927 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.235.928 I llm_load_print_meta: model params     = 2.51 B
0.00.235.929 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.235.929 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.235.929 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.235.930 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.235.930 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.235.931 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.235.932 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.235.932 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.235.932 I llm_load_print_meta: max token length = 93
0.00.235.950 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.291.632 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.296.726 I llama_new_context_with_model: n_ctx      = 8192
0.00.296.733 I llama_new_context_with_model: n_batch    = 2048
0.00.296.733 I llama_new_context_with_model: n_ubatch   = 512
0.00.296.734 I llama_new_context_with_model: flash_attn = 0
0.00.296.736 I llama_new_context_with_model: freq_base  = 10000.0
0.00.296.738 I llama_new_context_with_model: freq_scale = 1
0.00.327.498 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.327.514 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.327.605 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.328.473 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.328.481 I llama_new_context_with_model: graph nodes  = 601
0.00.328.481 I llama_new_context_with_model: graph splits = 1
0.00.328.483 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.410.374 I main: llama threadpool init, n_threads = 4
0.00.410.388 I 
0.00.410.466 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.410.470 I 
0.00.410.509 I sampler seed: 2241154760
0.00.410.519 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.410.521 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.410.522 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

The answer is:

The answer is: Incredibly.

The meaning of the word "incredibly" is extremely impressive or remarkable.

0.02.089.494 I llama_perf_sampler_print:    sampling time =       5.47 ms /    33 runs   (    0.17 ms per token,  6029.60 tokens per second)
0.02.089.496 I llama_perf_context_print:        load time =     408.44 ms
0.02.089.497 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.089.498 I llama_perf_context_print:        eval time =    1659.83 ms /    32 runs   (   51.87 ms per token,    19.28 tokens per second)
0.02.089.499 I llama_perf_context_print:       total time =    1679.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.509s
user	8m15.524s
sys	0m7.426s
