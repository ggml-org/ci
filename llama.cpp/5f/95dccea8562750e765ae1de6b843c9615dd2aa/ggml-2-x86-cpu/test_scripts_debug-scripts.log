+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.689 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.002.853 I main: load the model and apply lora adapter, if any
0.00.025.080 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.275 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.370 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.382 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.383 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.388 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.389 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.390 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.391 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.391 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.392 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.399 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.402 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.403 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.404 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.405 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.878 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.169 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.714 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.723 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.724 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.725 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.726 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.727 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.728 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.731 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.732 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.733 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.733 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.734 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.743 I llama_model_loader: - type  f32:   37 tensors
0.00.197.747 I llama_model_loader: - type q8_0:  127 tensors
0.00.503.713 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.829 I llm_load_vocab: special tokens cache size = 5
0.00.562.234 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.562.297 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.562.298 I llm_load_print_meta: arch             = gemma
0.00.562.299 I llm_load_print_meta: vocab type       = SPM
0.00.562.300 I llm_load_print_meta: n_vocab          = 256000
0.00.562.302 I llm_load_print_meta: n_merges         = 0
0.00.562.303 I llm_load_print_meta: vocab_only       = 0
0.00.562.303 I llm_load_print_meta: n_ctx_train      = 8192
0.00.562.303 I llm_load_print_meta: n_embd           = 2048
0.00.562.304 I llm_load_print_meta: n_layer          = 18
0.00.562.338 I llm_load_print_meta: n_head           = 8
0.00.562.345 I llm_load_print_meta: n_head_kv        = 1
0.00.562.346 I llm_load_print_meta: n_rot            = 256
0.00.562.346 I llm_load_print_meta: n_swa            = 0
0.00.562.347 I llm_load_print_meta: n_embd_head_k    = 256
0.00.562.347 I llm_load_print_meta: n_embd_head_v    = 256
0.00.562.351 I llm_load_print_meta: n_gqa            = 8
0.00.562.356 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.562.361 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.562.362 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.562.363 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.562.364 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.562.364 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.562.364 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.562.369 I llm_load_print_meta: n_ff             = 16384
0.00.562.369 I llm_load_print_meta: n_expert         = 0
0.00.562.370 I llm_load_print_meta: n_expert_used    = 0
0.00.562.370 I llm_load_print_meta: causal attn      = 1
0.00.562.371 I llm_load_print_meta: pooling type     = 0
0.00.562.371 I llm_load_print_meta: rope type        = 2
0.00.562.371 I llm_load_print_meta: rope scaling     = linear
0.00.562.373 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.562.374 I llm_load_print_meta: freq_scale_train = 1
0.00.562.374 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.562.375 I llm_load_print_meta: rope_finetuned   = unknown
0.00.562.375 I llm_load_print_meta: ssm_d_conv       = 0
0.00.562.375 I llm_load_print_meta: ssm_d_inner      = 0
0.00.562.376 I llm_load_print_meta: ssm_d_state      = 0
0.00.562.376 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.562.376 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.562.377 I llm_load_print_meta: model type       = 2B
0.00.562.378 I llm_load_print_meta: model ftype      = Q8_0
0.00.562.379 I llm_load_print_meta: model params     = 2.51 B
0.00.562.380 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.562.380 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.562.381 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.562.381 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.562.382 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.562.382 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.562.383 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.562.383 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.562.384 I llm_load_print_meta: max token length = 93
0.00.562.563 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.663.179 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.663.191 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.663.192 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.663.193 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.663.193 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.663.194 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.669.100 I llama_new_context_with_model: n_ctx      = 8192
0.00.669.110 I llama_new_context_with_model: n_batch    = 2048
0.00.669.110 I llama_new_context_with_model: n_ubatch   = 512
0.00.669.111 I llama_new_context_with_model: flash_attn = 0
0.00.669.115 I llama_new_context_with_model: freq_base  = 10000.0
0.00.669.115 I llama_new_context_with_model: freq_scale = 1
0.00.701.762 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.805 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.923 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.703.400 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.407 I llama_new_context_with_model: graph nodes  = 601
0.00.703.408 I llama_new_context_with_model: graph splits = 1
0.00.703.424 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.315.443 I main: llama threadpool init, n_threads = 4
0.01.315.456 I 
0.01.315.547 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.315.547 I 
0.01.315.710 I sampler seed: 2340101311
0.01.315.721 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.315.725 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.315.726 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively and carelessly, knocking over furniture and flinging clothes across the room. [end of text]


0.08.465.570 I llama_perf_sampler_print:    sampling time =      26.20 ms /    18 runs   (    1.46 ms per token,   687.05 tokens per second)
0.08.465.573 I llama_perf_context_print:        load time =    1312.48 ms
0.08.465.574 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.465.576 I llama_perf_context_print:        eval time =    7105.72 ms /    17 runs   (  417.98 ms per token,     2.39 tokens per second)
0.08.465.577 I llama_perf_context_print:       total time =    7150.14 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.660 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.025.450 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.556 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.572 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.575 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.580 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.581 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.583 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.584 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.584 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.585 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.592 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.593 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.594 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.594 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.596 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.106 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.312 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.755 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.765 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.766 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.767 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.768 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.769 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.770 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.773 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.774 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.775 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.776 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.777 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.786 I llama_model_loader: - type  f32:   37 tensors
0.00.197.790 I llama_model_loader: - type q8_0:  127 tensors
0.00.509.255 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.346 I llm_load_vocab: special tokens cache size = 5
0.00.568.026 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.568.090 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.568.091 I llm_load_print_meta: arch             = gemma
0.00.568.092 I llm_load_print_meta: vocab type       = SPM
0.00.568.093 I llm_load_print_meta: n_vocab          = 256000
0.00.568.095 I llm_load_print_meta: n_merges         = 0
0.00.568.096 I llm_load_print_meta: vocab_only       = 0
0.00.568.096 I llm_load_print_meta: n_ctx_train      = 8192
0.00.568.097 I llm_load_print_meta: n_embd           = 2048
0.00.568.097 I llm_load_print_meta: n_layer          = 18
0.00.568.130 I llm_load_print_meta: n_head           = 8
0.00.568.137 I llm_load_print_meta: n_head_kv        = 1
0.00.568.138 I llm_load_print_meta: n_rot            = 256
0.00.568.138 I llm_load_print_meta: n_swa            = 0
0.00.568.138 I llm_load_print_meta: n_embd_head_k    = 256
0.00.568.139 I llm_load_print_meta: n_embd_head_v    = 256
0.00.568.143 I llm_load_print_meta: n_gqa            = 8
0.00.568.147 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.568.152 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.568.153 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.568.154 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.568.155 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.568.155 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.568.156 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.568.160 I llm_load_print_meta: n_ff             = 16384
0.00.568.160 I llm_load_print_meta: n_expert         = 0
0.00.568.160 I llm_load_print_meta: n_expert_used    = 0
0.00.568.161 I llm_load_print_meta: causal attn      = 1
0.00.568.161 I llm_load_print_meta: pooling type     = 0
0.00.568.161 I llm_load_print_meta: rope type        = 2
0.00.568.162 I llm_load_print_meta: rope scaling     = linear
0.00.568.163 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.568.164 I llm_load_print_meta: freq_scale_train = 1
0.00.568.164 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.568.165 I llm_load_print_meta: rope_finetuned   = unknown
0.00.568.165 I llm_load_print_meta: ssm_d_conv       = 0
0.00.568.165 I llm_load_print_meta: ssm_d_inner      = 0
0.00.568.166 I llm_load_print_meta: ssm_d_state      = 0
0.00.568.166 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.568.166 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.568.167 I llm_load_print_meta: model type       = 2B
0.00.568.167 I llm_load_print_meta: model ftype      = Q8_0
0.00.568.168 I llm_load_print_meta: model params     = 2.51 B
0.00.568.169 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.568.169 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.568.170 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.568.171 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.568.171 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.568.171 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.568.172 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.568.172 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.568.173 I llm_load_print_meta: max token length = 93
0.00.568.348 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.662.317 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.668.103 I llama_new_context_with_model: n_ctx      = 8192
0.00.668.111 I llama_new_context_with_model: n_batch    = 2048
0.00.668.112 I llama_new_context_with_model: n_ubatch   = 512
0.00.668.112 I llama_new_context_with_model: flash_attn = 0
0.00.668.116 I llama_new_context_with_model: freq_base  = 10000.0
0.00.668.117 I llama_new_context_with_model: freq_scale = 1
0.00.698.915 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.698.959 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.699.072 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.700.441 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.700.447 I llama_new_context_with_model: graph nodes  = 601
0.00.700.448 I llama_new_context_with_model: graph splits = 1
0.00.700.464 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.295 I main: llama threadpool init, n_threads = 4
0.01.316.309 I 
0.01.316.413 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.418 I 
0.01.316.598 I sampler seed: 3415551352
0.01.316.610 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.316.617 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.316.618 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.

I am unable to answer this question as it contains sexually suggestive and inappropriate content. I am programmed to provide safe and appropriate responses. [end of text]


0.14.426.478 I llama_perf_sampler_print:    sampling time =      47.86 ms /    32 runs   (    1.50 ms per token,   668.67 tokens per second)
0.14.426.481 I llama_perf_context_print:        load time =    1313.39 ms
0.14.426.483 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.426.485 I llama_perf_context_print:        eval time =   13030.38 ms /    31 runs   (  420.33 ms per token,     2.38 tokens per second)
0.14.426.498 I llama_perf_context_print:       total time =   13110.19 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.634 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.821 I main: load the model and apply lora adapter, if any
0.00.025.356 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.573 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.676 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.690 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.692 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.698 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.703 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.705 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.706 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.707 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.709 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.718 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.719 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.720 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.721 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.724 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.100 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.630 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.022 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.033 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.034 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.035 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.036 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.037 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.038 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.042 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.042 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.043 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.044 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.198.045 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.053 I llama_model_loader: - type  f32:   37 tensors
0.00.198.057 I llama_model_loader: - type q8_0:  127 tensors
0.00.502.421 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.497 I llm_load_vocab: special tokens cache size = 5
0.00.560.792 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.560.854 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.560.855 I llm_load_print_meta: arch             = gemma
0.00.560.856 I llm_load_print_meta: vocab type       = SPM
0.00.560.857 I llm_load_print_meta: n_vocab          = 256000
0.00.560.859 I llm_load_print_meta: n_merges         = 0
0.00.560.860 I llm_load_print_meta: vocab_only       = 0
0.00.560.861 I llm_load_print_meta: n_ctx_train      = 8192
0.00.560.862 I llm_load_print_meta: n_embd           = 2048
0.00.560.862 I llm_load_print_meta: n_layer          = 18
0.00.560.896 I llm_load_print_meta: n_head           = 8
0.00.560.906 I llm_load_print_meta: n_head_kv        = 1
0.00.560.907 I llm_load_print_meta: n_rot            = 256
0.00.560.907 I llm_load_print_meta: n_swa            = 0
0.00.560.908 I llm_load_print_meta: n_embd_head_k    = 256
0.00.560.908 I llm_load_print_meta: n_embd_head_v    = 256
0.00.560.913 I llm_load_print_meta: n_gqa            = 8
0.00.560.917 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.560.922 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.560.924 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.560.925 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.560.926 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.560.927 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.560.927 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.560.932 I llm_load_print_meta: n_ff             = 16384
0.00.560.932 I llm_load_print_meta: n_expert         = 0
0.00.560.932 I llm_load_print_meta: n_expert_used    = 0
0.00.560.934 I llm_load_print_meta: causal attn      = 1
0.00.560.934 I llm_load_print_meta: pooling type     = 0
0.00.560.935 I llm_load_print_meta: rope type        = 2
0.00.560.936 I llm_load_print_meta: rope scaling     = linear
0.00.560.937 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.560.938 I llm_load_print_meta: freq_scale_train = 1
0.00.560.940 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.560.941 I llm_load_print_meta: rope_finetuned   = unknown
0.00.560.941 I llm_load_print_meta: ssm_d_conv       = 0
0.00.560.942 I llm_load_print_meta: ssm_d_inner      = 0
0.00.560.942 I llm_load_print_meta: ssm_d_state      = 0
0.00.560.942 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.560.942 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.560.943 I llm_load_print_meta: model type       = 2B
0.00.560.944 I llm_load_print_meta: model ftype      = Q8_0
0.00.560.944 I llm_load_print_meta: model params     = 2.51 B
0.00.560.945 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.560.946 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.560.947 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.560.947 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.560.948 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.560.949 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.560.950 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.560.951 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.560.951 I llm_load_print_meta: max token length = 93
0.00.561.148 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.637.931 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.637.943 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.637.944 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.637.944 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.637.945 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.637.946 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.643.833 I llama_new_context_with_model: n_ctx      = 8192
0.00.643.841 I llama_new_context_with_model: n_batch    = 2048
0.00.643.842 I llama_new_context_with_model: n_ubatch   = 512
0.00.643.842 I llama_new_context_with_model: flash_attn = 0
0.00.643.846 I llama_new_context_with_model: freq_base  = 10000.0
0.00.643.847 I llama_new_context_with_model: freq_scale = 1
0.00.675.630 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.675.679 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.675.796 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.677.246 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.677.254 I llama_new_context_with_model: graph nodes  = 601
0.00.677.255 I llama_new_context_with_model: graph splits = 1
0.00.677.272 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.417 I main: llama threadpool init, n_threads = 4
0.01.290.430 I 
0.01.290.528 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.532 I 
0.01.290.702 I sampler seed: 991152754
0.01.290.718 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.290.726 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.290.727 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly for the love of the game.

I apologize for the inconvenience, but I am unable to access or provide information related to online games or personal activities

0.14.852.163 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.50 tokens per second)
0.14.852.166 I llama_perf_context_print:        load time =    1287.51 ms
0.14.852.167 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.852.169 I llama_perf_context_print:        eval time =   13477.52 ms /    32 runs   (  421.17 ms per token,     2.37 tokens per second)
0.14.852.170 I llama_perf_context_print:       total time =   13561.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.636 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.781 I main: load the model and apply lora adapter, if any
0.00.025.061 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.257 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.352 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.364 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.365 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.370 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.373 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.374 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.375 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.376 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.376 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.384 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.385 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.386 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.387 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.044 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.968 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.400 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.413 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.414 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.415 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.416 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.417 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.418 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.422 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.423 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.424 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.424 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.426 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.435 I llama_model_loader: - type  f32:   37 tensors
0.00.197.439 I llama_model_loader: - type q8_0:  127 tensors
0.00.518.496 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.620 I llm_load_vocab: special tokens cache size = 5
0.00.576.885 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.576.949 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.576.950 I llm_load_print_meta: arch             = gemma
0.00.576.952 I llm_load_print_meta: vocab type       = SPM
0.00.576.953 I llm_load_print_meta: n_vocab          = 256000
0.00.576.955 I llm_load_print_meta: n_merges         = 0
0.00.576.956 I llm_load_print_meta: vocab_only       = 0
0.00.576.956 I llm_load_print_meta: n_ctx_train      = 8192
0.00.576.957 I llm_load_print_meta: n_embd           = 2048
0.00.576.957 I llm_load_print_meta: n_layer          = 18
0.00.576.991 I llm_load_print_meta: n_head           = 8
0.00.576.997 I llm_load_print_meta: n_head_kv        = 1
0.00.576.997 I llm_load_print_meta: n_rot            = 256
0.00.576.998 I llm_load_print_meta: n_swa            = 0
0.00.576.998 I llm_load_print_meta: n_embd_head_k    = 256
0.00.576.998 I llm_load_print_meta: n_embd_head_v    = 256
0.00.577.003 I llm_load_print_meta: n_gqa            = 8
0.00.577.007 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.577.012 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.577.013 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.577.037 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.577.038 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.577.038 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.577.039 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.577.044 I llm_load_print_meta: n_ff             = 16384
0.00.577.045 I llm_load_print_meta: n_expert         = 0
0.00.577.045 I llm_load_print_meta: n_expert_used    = 0
0.00.577.046 I llm_load_print_meta: causal attn      = 1
0.00.577.047 I llm_load_print_meta: pooling type     = 0
0.00.577.048 I llm_load_print_meta: rope type        = 2
0.00.577.048 I llm_load_print_meta: rope scaling     = linear
0.00.577.051 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.577.051 I llm_load_print_meta: freq_scale_train = 1
0.00.577.052 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.577.052 I llm_load_print_meta: rope_finetuned   = unknown
0.00.577.052 I llm_load_print_meta: ssm_d_conv       = 0
0.00.577.053 I llm_load_print_meta: ssm_d_inner      = 0
0.00.577.053 I llm_load_print_meta: ssm_d_state      = 0
0.00.577.054 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.577.054 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.577.055 I llm_load_print_meta: model type       = 2B
0.00.577.056 I llm_load_print_meta: model ftype      = Q8_0
0.00.577.056 I llm_load_print_meta: model params     = 2.51 B
0.00.577.058 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.577.058 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.577.059 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.577.060 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.577.061 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.577.061 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.577.062 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.577.063 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.577.063 I llm_load_print_meta: max token length = 93
0.00.577.232 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.649.058 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.649.071 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.654.814 I llama_new_context_with_model: n_ctx      = 8192
0.00.654.823 I llama_new_context_with_model: n_batch    = 2048
0.00.654.823 I llama_new_context_with_model: n_ubatch   = 512
0.00.654.824 I llama_new_context_with_model: flash_attn = 0
0.00.654.827 I llama_new_context_with_model: freq_base  = 10000.0
0.00.654.828 I llama_new_context_with_model: freq_scale = 1
0.00.685.239 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.685.282 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.685.394 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.686.788 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.686.795 I llama_new_context_with_model: graph nodes  = 601
0.00.686.795 I llama_new_context_with_model: graph splits = 1
0.00.686.812 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.299.770 I main: llama threadpool init, n_threads = 4
0.01.299.783 I 
0.01.299.875 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.299.878 I 
0.01.300.039 I sampler seed: 1442999786
0.01.300.050 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.300.054 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.300.054 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

The phrase "incredibly" is used excessively in contemporary English.

Indeed, the overuse of "incredibly" has become a widespread concern

0.14.837.254 I llama_perf_sampler_print:    sampling time =      49.62 ms /    33 runs   (    1.50 ms per token,   665.11 tokens per second)
0.14.837.285 I llama_perf_context_print:        load time =    1296.91 ms
0.14.837.287 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.837.289 I llama_perf_context_print:        eval time =   13452.84 ms /    32 runs   (  420.40 ms per token,     2.38 tokens per second)
0.14.837.290 I llama_perf_context_print:       total time =   13537.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.540s
user	3m21.995s
sys	0m9.676s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3778 (5f95dcce)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199160.11 ms
main:    total time = 199160.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.684 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.908 I main: llama backend init
0.00.002.849 I main: load the model and apply lora adapter, if any
0.00.024.562 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.758 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.859 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.872 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.873 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.878 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.882 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.882 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.883 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.884 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.884 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.892 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.893 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.894 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.895 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.896 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.346 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.532 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.943 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.953 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.954 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.955 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.956 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.957 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.957 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.961 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.962 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.963 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.963 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.964 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.974 I llama_model_loader: - type  f32:   37 tensors
0.00.196.978 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.978 I llama_model_loader: - type q6_K:   19 tensors
0.00.513.351 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.365 I llm_load_vocab: special tokens cache size = 5
0.00.571.735 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.571.798 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.571.799 I llm_load_print_meta: arch             = gemma
0.00.571.800 I llm_load_print_meta: vocab type       = SPM
0.00.571.801 I llm_load_print_meta: n_vocab          = 256000
0.00.571.804 I llm_load_print_meta: n_merges         = 0
0.00.571.804 I llm_load_print_meta: vocab_only       = 0
0.00.571.805 I llm_load_print_meta: n_ctx_train      = 8192
0.00.571.805 I llm_load_print_meta: n_embd           = 2048
0.00.571.805 I llm_load_print_meta: n_layer          = 18
0.00.571.842 I llm_load_print_meta: n_head           = 8
0.00.571.849 I llm_load_print_meta: n_head_kv        = 1
0.00.571.849 I llm_load_print_meta: n_rot            = 256
0.00.571.849 I llm_load_print_meta: n_swa            = 0
0.00.571.850 I llm_load_print_meta: n_embd_head_k    = 256
0.00.571.850 I llm_load_print_meta: n_embd_head_v    = 256
0.00.571.855 I llm_load_print_meta: n_gqa            = 8
0.00.571.859 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.571.864 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.571.865 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.571.867 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.571.867 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.571.868 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.571.868 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.571.873 I llm_load_print_meta: n_ff             = 16384
0.00.571.873 I llm_load_print_meta: n_expert         = 0
0.00.571.874 I llm_load_print_meta: n_expert_used    = 0
0.00.571.874 I llm_load_print_meta: causal attn      = 1
0.00.571.874 I llm_load_print_meta: pooling type     = 0
0.00.571.875 I llm_load_print_meta: rope type        = 2
0.00.571.875 I llm_load_print_meta: rope scaling     = linear
0.00.571.876 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.571.877 I llm_load_print_meta: freq_scale_train = 1
0.00.571.877 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.571.878 I llm_load_print_meta: rope_finetuned   = unknown
0.00.571.878 I llm_load_print_meta: ssm_d_conv       = 0
0.00.571.878 I llm_load_print_meta: ssm_d_inner      = 0
0.00.571.878 I llm_load_print_meta: ssm_d_state      = 0
0.00.571.879 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.571.879 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.571.880 I llm_load_print_meta: model type       = 2B
0.00.571.880 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.571.881 I llm_load_print_meta: model params     = 2.51 B
0.00.571.882 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.571.882 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.571.883 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.571.884 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.571.884 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.571.884 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.571.885 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.571.885 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.571.886 I llm_load_print_meta: max token length = 93
0.00.572.077 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.631.780 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.631.790 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.631.791 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.631.792 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.631.792 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.631.793 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.637.335 I llama_new_context_with_model: n_ctx      = 8192
0.00.637.343 I llama_new_context_with_model: n_batch    = 2048
0.00.637.343 I llama_new_context_with_model: n_ubatch   = 512
0.00.637.344 I llama_new_context_with_model: flash_attn = 0
0.00.637.347 I llama_new_context_with_model: freq_base  = 10000.0
0.00.637.348 I llama_new_context_with_model: freq_scale = 1
0.00.668.029 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.668.083 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.668.192 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.669.563 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.669.569 I llama_new_context_with_model: graph nodes  = 601
0.00.669.570 I llama_new_context_with_model: graph splits = 1
0.00.669.585 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.245.699 I main: llama threadpool init, n_threads = 4
0.01.245.712 I 
0.01.245.807 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.245.811 I 
0.01.245.974 I sampler seed: 2768676140
0.01.245.986 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.245.991 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.245.992 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally, the sun shines brightly, and the birds sing sweetly.

**Explanation:**

The sentence uses figurative language to create a peaceful and idyllic scene.

0.12.233.383 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.42 tokens per second)
0.12.233.386 I llama_perf_context_print:        load time =    1242.76 ms
0.12.233.388 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.233.389 I llama_perf_context_print:        eval time =   10903.35 ms /    32 runs   (  340.73 ms per token,     2.93 tokens per second)
0.12.233.402 I llama_perf_context_print:       total time =   10987.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3778 (5f95dcce)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198953.13 ms
main:    total time = 198953.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.656 I build: 3778 (5f95dcce) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.002.844 I main: load the model and apply lora adapter, if any
0.00.025.035 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.137 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.153 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.157 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.162 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.163 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.164 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.164 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.165 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.166 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.173 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.175 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.176 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.180 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.181 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.198 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.183 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.587 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.599 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.600 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.601 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.602 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.603 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.604 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.608 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.608 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.617 I llama_model_loader: - type  f32:   37 tensors
0.00.196.621 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.622 I llama_model_loader: - type q6_K:   19 tensors
0.00.498.264 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.333 I llm_load_vocab: special tokens cache size = 5
0.00.556.511 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.556.570 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.556.571 I llm_load_print_meta: arch             = gemma
0.00.556.572 I llm_load_print_meta: vocab type       = SPM
0.00.556.573 I llm_load_print_meta: n_vocab          = 256000
0.00.556.576 I llm_load_print_meta: n_merges         = 0
0.00.556.576 I llm_load_print_meta: vocab_only       = 0
0.00.556.577 I llm_load_print_meta: n_ctx_train      = 8192
0.00.556.577 I llm_load_print_meta: n_embd           = 2048
0.00.556.577 I llm_load_print_meta: n_layer          = 18
0.00.556.613 I llm_load_print_meta: n_head           = 8
0.00.556.620 I llm_load_print_meta: n_head_kv        = 1
0.00.556.620 I llm_load_print_meta: n_rot            = 256
0.00.556.621 I llm_load_print_meta: n_swa            = 0
0.00.556.621 I llm_load_print_meta: n_embd_head_k    = 256
0.00.556.621 I llm_load_print_meta: n_embd_head_v    = 256
0.00.556.626 I llm_load_print_meta: n_gqa            = 8
0.00.556.631 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.556.635 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.556.636 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.556.638 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.556.638 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.556.639 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.556.639 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.556.644 I llm_load_print_meta: n_ff             = 16384
0.00.556.644 I llm_load_print_meta: n_expert         = 0
0.00.556.645 I llm_load_print_meta: n_expert_used    = 0
0.00.556.645 I llm_load_print_meta: causal attn      = 1
0.00.556.645 I llm_load_print_meta: pooling type     = 0
0.00.556.646 I llm_load_print_meta: rope type        = 2
0.00.556.646 I llm_load_print_meta: rope scaling     = linear
0.00.556.647 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.556.648 I llm_load_print_meta: freq_scale_train = 1
0.00.556.648 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.556.649 I llm_load_print_meta: rope_finetuned   = unknown
0.00.556.649 I llm_load_print_meta: ssm_d_conv       = 0
0.00.556.649 I llm_load_print_meta: ssm_d_inner      = 0
0.00.556.650 I llm_load_print_meta: ssm_d_state      = 0
0.00.556.650 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.556.650 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.556.651 I llm_load_print_meta: model type       = 2B
0.00.556.652 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.556.653 I llm_load_print_meta: model params     = 2.51 B
0.00.556.653 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.556.654 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.556.654 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.556.655 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.556.655 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.556.656 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.556.656 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.556.657 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.556.657 I llm_load_print_meta: max token length = 93
0.00.556.835 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.613.731 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.619.480 I llama_new_context_with_model: n_ctx      = 8192
0.00.619.489 I llama_new_context_with_model: n_batch    = 2048
0.00.619.489 I llama_new_context_with_model: n_ubatch   = 512
0.00.619.490 I llama_new_context_with_model: flash_attn = 0
0.00.619.494 I llama_new_context_with_model: freq_base  = 10000.0
0.00.619.495 I llama_new_context_with_model: freq_scale = 1
0.00.650.965 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.651.008 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.651.118 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.652.527 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.652.533 I llama_new_context_with_model: graph nodes  = 601
0.00.652.534 I llama_new_context_with_model: graph splits = 1
0.00.652.552 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.230.104 I main: llama threadpool init, n_threads = 4
0.01.230.116 I 
0.01.230.208 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.230.212 I 
0.01.230.373 I sampler seed: 3264617010
0.01.230.383 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.230.388 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.230.388 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED TEXT: The text is not formatted properly. Please provide a formatted version.

I am unable to provide a formatted version of the text as I am

0.12.095.784 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.98 tokens per second)
0.12.095.787 I llama_perf_context_print:        load time =    1227.17 ms
0.12.095.798 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.095.801 I llama_perf_context_print:        eval time =   10783.13 ms /    32 runs   (  336.97 ms per token,     2.97 tokens per second)
0.12.095.802 I llama_perf_context_print:       total time =   10865.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.351s
user	50m10.354s
sys	0m6.540s
