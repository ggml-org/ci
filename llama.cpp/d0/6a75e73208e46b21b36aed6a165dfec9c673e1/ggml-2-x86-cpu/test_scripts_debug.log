+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.787 I main: load the model and apply lora adapter, if any
0.00.024.720 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.928 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.016 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.027 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.029 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.033 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.038 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.039 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.040 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.041 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.042 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.052 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.053 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.054 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.055 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.056 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.458 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.708 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.294 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.301 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.302 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.303 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.304 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.305 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.306 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.310 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.311 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.312 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.313 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.314 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.322 I llama_model_loader: - type  f32:   37 tensors
0.00.268.326 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.021 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.742 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.637 I llm_load_vocab: special tokens cache size = 5
0.00.596.993 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.063 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.064 I llm_load_print_meta: arch             = gemma
0.00.597.065 I llm_load_print_meta: vocab type       = SPM
0.00.597.066 I llm_load_print_meta: n_vocab          = 256000
0.00.597.068 I llm_load_print_meta: n_merges         = 0
0.00.597.068 I llm_load_print_meta: vocab_only       = 0
0.00.597.069 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.069 I llm_load_print_meta: n_embd           = 2048
0.00.597.070 I llm_load_print_meta: n_layer          = 18
0.00.597.133 I llm_load_print_meta: n_head           = 8
0.00.597.140 I llm_load_print_meta: n_head_kv        = 1
0.00.597.141 I llm_load_print_meta: n_rot            = 256
0.00.597.142 I llm_load_print_meta: n_swa            = 0
0.00.597.143 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.143 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.148 I llm_load_print_meta: n_gqa            = 8
0.00.597.153 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.158 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.159 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.160 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.160 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.161 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.162 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.167 I llm_load_print_meta: n_ff             = 16384
0.00.597.167 I llm_load_print_meta: n_expert         = 0
0.00.597.168 I llm_load_print_meta: n_expert_used    = 0
0.00.597.168 I llm_load_print_meta: causal attn      = 1
0.00.597.192 I llm_load_print_meta: pooling type     = 0
0.00.597.192 I llm_load_print_meta: rope type        = 2
0.00.597.193 I llm_load_print_meta: rope scaling     = linear
0.00.597.195 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.195 I llm_load_print_meta: freq_scale_train = 1
0.00.597.196 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.197 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.197 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.197 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.198 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.199 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.199 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.200 I llm_load_print_meta: model type       = 2B
0.00.597.201 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.202 I llm_load_print_meta: model params     = 2.51 B
0.00.597.203 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.204 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.204 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.205 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.206 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.207 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.207 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.208 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.214 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.215 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.216 I llm_load_print_meta: max token length = 93
0.00.700.019 I llm_load_tensors:        CPU model buffer size =   865.98 MiB
0.00.700.029 I llm_load_tensors:        CPU model buffer size =   334.74 MiB
0.00.700.029 I llm_load_tensors:        CPU model buffer size =   402.73 MiB
0.00.700.030 I llm_load_tensors:        CPU model buffer size =   335.27 MiB
0.00.700.031 I llm_load_tensors:        CPU model buffer size =   338.98 MiB
0.00.700.031 I llm_load_tensors:        CPU model buffer size =   261.96 MiB
..............................................................
0.00.705.741 I llama_new_context_with_model: n_ctx      = 8192
0.00.705.748 I llama_new_context_with_model: n_batch    = 2048
0.00.705.749 I llama_new_context_with_model: n_ubatch   = 512
0.00.705.749 I llama_new_context_with_model: flash_attn = 0
0.00.705.752 I llama_new_context_with_model: freq_base  = 10000.0
0.00.705.752 I llama_new_context_with_model: freq_scale = 1
0.00.734.363 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.734.400 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.516 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.737.640 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.737.644 I llama_new_context_with_model: graph nodes  = 601
0.00.737.645 I llama_new_context_with_model: graph splits = 1
0.00.737.660 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.344.773 I main: llama threadpool init, n_threads = 4
0.01.344.786 I 
0.01.344.896 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.901 I 
0.01.345.147 I sampler seed: 1367460311
0.01.345.160 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.166 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.167 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.168 I 
 increasities that are a part of the evolution of organisms.

**Answer:** Evolutionary adaptations. [end of text]


0.09.714.767 I llama_perf_sampler_print:    sampling time =      30.95 ms /    21 runs   (    1.47 ms per token,   678.47 tokens per second)
0.09.714.769 I llama_perf_context_print:        load time =    1341.89 ms
0.09.714.771 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.714.772 I llama_perf_context_print:        eval time =    8309.86 ms /    20 runs   (  415.49 ms per token,     2.41 tokens per second)
0.09.714.773 I llama_perf_context_print:       total time =    8370.00 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.002.840 I main: load the model and apply lora adapter, if any
0.00.025.364 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.458 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.472 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.474 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.478 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.481 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.483 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.486 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.488 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.489 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.502 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.508 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.509 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.511 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.513 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.055 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.669 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.468 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.475 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.477 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.478 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.479 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.480 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.481 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.485 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.486 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.487 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.488 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.489 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.498 I llama_model_loader: - type  f32:   37 tensors
0.00.271.501 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.554 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.541 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.489 I llm_load_vocab: special tokens cache size = 5
0.00.605.892 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.959 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.960 I llm_load_print_meta: arch             = gemma
0.00.605.960 I llm_load_print_meta: vocab type       = SPM
0.00.605.962 I llm_load_print_meta: n_vocab          = 256000
0.00.605.964 I llm_load_print_meta: n_merges         = 0
0.00.605.964 I llm_load_print_meta: vocab_only       = 0
0.00.605.965 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.965 I llm_load_print_meta: n_embd           = 2048
0.00.605.966 I llm_load_print_meta: n_layer          = 18
0.00.606.031 I llm_load_print_meta: n_head           = 8
0.00.606.038 I llm_load_print_meta: n_head_kv        = 1
0.00.606.038 I llm_load_print_meta: n_rot            = 256
0.00.606.040 I llm_load_print_meta: n_swa            = 0
0.00.606.040 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.040 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.046 I llm_load_print_meta: n_gqa            = 8
0.00.606.050 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.056 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.057 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.058 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.058 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.059 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.059 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.064 I llm_load_print_meta: n_ff             = 16384
0.00.606.065 I llm_load_print_meta: n_expert         = 0
0.00.606.065 I llm_load_print_meta: n_expert_used    = 0
0.00.606.067 I llm_load_print_meta: causal attn      = 1
0.00.606.067 I llm_load_print_meta: pooling type     = 0
0.00.606.068 I llm_load_print_meta: rope type        = 2
0.00.606.078 I llm_load_print_meta: rope scaling     = linear
0.00.606.080 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.092 I llm_load_print_meta: freq_scale_train = 1
0.00.606.096 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.097 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.097 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.097 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.097 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.098 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.107 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.115 I llm_load_print_meta: model type       = 2B
0.00.606.116 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.124 I llm_load_print_meta: model params     = 2.51 B
0.00.606.126 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.127 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.127 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.127 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.128 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.128 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.129 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.129 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.135 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.136 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.137 I llm_load_print_meta: max token length = 93
0.00.703.336 I llm_load_tensors:        CPU model buffer size =  2539.66 MiB
..............................................................
0.00.709.324 I llama_new_context_with_model: n_ctx      = 8192
0.00.709.331 I llama_new_context_with_model: n_batch    = 2048
0.00.709.331 I llama_new_context_with_model: n_ubatch   = 512
0.00.709.332 I llama_new_context_with_model: flash_attn = 0
0.00.709.334 I llama_new_context_with_model: freq_base  = 10000.0
0.00.709.335 I llama_new_context_with_model: freq_scale = 1
0.00.740.565 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.740.604 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.740.724 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.832 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.743.836 I llama_new_context_with_model: graph nodes  = 601
0.00.743.837 I llama_new_context_with_model: graph splits = 1
0.00.743.852 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.789 I main: llama threadpool init, n_threads = 4
0.01.350.801 I 
0.01.350.920 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.350.924 I 
0.01.351.160 I sampler seed: 1248236116
0.01.351.173 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.181 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.351.182 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.182 I 
 increasities!

I cannot answer this question as it contains sexually suggestive content. [end of text]


0.08.493.173 I llama_perf_sampler_print:    sampling time =      26.29 ms /    18 runs   (    1.46 ms per token,   684.75 tokens per second)
0.08.493.188 I llama_perf_context_print:        load time =    1347.84 ms
0.08.493.189 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.493.191 I llama_perf_context_print:        eval time =    7090.89 ms /    17 runs   (  417.11 ms per token,     2.40 tokens per second)
0.08.493.192 I llama_perf_context_print:       total time =    7142.39 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.025.006 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.228 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.329 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.341 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.343 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.348 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.350 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.351 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.353 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.355 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.359 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.371 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.373 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.375 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.377 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.378 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.439 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.363 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.017 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.025 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.026 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.027 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.028 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.029 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.030 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.034 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.035 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.036 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.037 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.038 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.046 I llama_model_loader: - type  f32:   37 tensors
0.00.270.050 I llama_model_loader: - type q8_0:  127 tensors
0.00.436.419 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.237 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.175 I llm_load_vocab: special tokens cache size = 5
0.00.591.254 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.327 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.328 I llm_load_print_meta: arch             = gemma
0.00.591.329 I llm_load_print_meta: vocab type       = SPM
0.00.591.330 I llm_load_print_meta: n_vocab          = 256000
0.00.591.332 I llm_load_print_meta: n_merges         = 0
0.00.591.332 I llm_load_print_meta: vocab_only       = 0
0.00.591.333 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.333 I llm_load_print_meta: n_embd           = 2048
0.00.591.333 I llm_load_print_meta: n_layer          = 18
0.00.591.395 I llm_load_print_meta: n_head           = 8
0.00.591.406 I llm_load_print_meta: n_head_kv        = 1
0.00.591.408 I llm_load_print_meta: n_rot            = 256
0.00.591.408 I llm_load_print_meta: n_swa            = 0
0.00.591.409 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.410 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.416 I llm_load_print_meta: n_gqa            = 8
0.00.591.423 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.430 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.432 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.433 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.434 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.435 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.436 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.443 I llm_load_print_meta: n_ff             = 16384
0.00.591.443 I llm_load_print_meta: n_expert         = 0
0.00.591.444 I llm_load_print_meta: n_expert_used    = 0
0.00.591.445 I llm_load_print_meta: causal attn      = 1
0.00.591.447 I llm_load_print_meta: pooling type     = 0
0.00.591.447 I llm_load_print_meta: rope type        = 2
0.00.591.458 I llm_load_print_meta: rope scaling     = linear
0.00.591.461 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.462 I llm_load_print_meta: freq_scale_train = 1
0.00.591.462 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.463 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.477 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.478 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.479 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.480 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.481 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.482 I llm_load_print_meta: model type       = 2B
0.00.591.483 I llm_load_print_meta: model ftype      = Q8_0
0.00.591.484 I llm_load_print_meta: model params     = 2.51 B
0.00.591.486 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.591.486 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.488 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.489 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.490 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.499 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.501 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.501 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.509 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.519 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.520 I llm_load_print_meta: max token length = 93
0.00.670.657 I llm_load_tensors:        CPU model buffer size =   967.99 MiB
0.00.670.667 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.00.670.668 I llm_load_tensors:        CPU model buffer size =   411.77 MiB
0.00.670.669 I llm_load_tensors:        CPU model buffer size =   437.27 MiB
0.00.670.669 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.00.670.670 I llm_load_tensors:        CPU model buffer size =    34.02 MiB
..............................................................
0.00.676.442 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.450 I llama_new_context_with_model: n_batch    = 2048
0.00.676.451 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.451 I llama_new_context_with_model: flash_attn = 0
0.00.676.454 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.455 I llama_new_context_with_model: freq_scale = 1
0.00.705.543 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.581 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.698 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.763 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.768 I llama_new_context_with_model: graph nodes  = 601
0.00.708.769 I llama_new_context_with_model: graph splits = 1
0.00.708.785 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.614 I main: llama threadpool init, n_threads = 4
0.01.316.628 I 
0.01.316.745 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.749 I 
0.01.316.980 I sampler seed: 2336821598
0.01.316.992 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.000 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.317.001 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.001 I 
 increasities. 

The correct answer is: absurdity.

Absurdity is a state of incongruity or apparent lack of logical coherence in relation to

0.14.828.939 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.31 tokens per second)
0.14.828.954 I llama_perf_context_print:        load time =    1313.72 ms
0.14.828.956 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.828.958 I llama_perf_context_print:        eval time =   13416.72 ms /    32 runs   (  419.27 ms per token,     2.39 tokens per second)
0.14.828.959 I llama_perf_context_print:       total time =   13512.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.749 I main: load the model and apply lora adapter, if any
0.00.024.342 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.549 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.633 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.643 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.644 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.648 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.650 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.652 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.653 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.654 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.655 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.664 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.668 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.669 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.670 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.671 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.139 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.539 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.160 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.167 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.168 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.169 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.170 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.171 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.172 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.176 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.177 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.178 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.179 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.180 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.189 I llama_model_loader: - type  f32:   37 tensors
0.00.268.193 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.100 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.971 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.961 I llm_load_vocab: special tokens cache size = 5
0.00.598.692 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.761 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.762 I llm_load_print_meta: arch             = gemma
0.00.598.763 I llm_load_print_meta: vocab type       = SPM
0.00.598.763 I llm_load_print_meta: n_vocab          = 256000
0.00.598.766 I llm_load_print_meta: n_merges         = 0
0.00.598.766 I llm_load_print_meta: vocab_only       = 0
0.00.598.767 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.767 I llm_load_print_meta: n_embd           = 2048
0.00.598.768 I llm_load_print_meta: n_layer          = 18
0.00.598.831 I llm_load_print_meta: n_head           = 8
0.00.598.839 I llm_load_print_meta: n_head_kv        = 1
0.00.598.839 I llm_load_print_meta: n_rot            = 256
0.00.598.840 I llm_load_print_meta: n_swa            = 0
0.00.598.841 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.842 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.847 I llm_load_print_meta: n_gqa            = 8
0.00.598.851 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.856 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.857 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.864 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.865 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.865 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.866 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.870 I llm_load_print_meta: n_ff             = 16384
0.00.598.872 I llm_load_print_meta: n_expert         = 0
0.00.598.872 I llm_load_print_meta: n_expert_used    = 0
0.00.598.873 I llm_load_print_meta: causal attn      = 1
0.00.598.874 I llm_load_print_meta: pooling type     = 0
0.00.598.874 I llm_load_print_meta: rope type        = 2
0.00.598.875 I llm_load_print_meta: rope scaling     = linear
0.00.598.876 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.877 I llm_load_print_meta: freq_scale_train = 1
0.00.598.878 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.878 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.878 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.879 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.879 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.879 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.880 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.881 I llm_load_print_meta: model type       = 2B
0.00.598.882 I llm_load_print_meta: model ftype      = Q8_0
0.00.598.883 I llm_load_print_meta: model params     = 2.51 B
0.00.598.884 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.598.884 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.885 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.886 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.886 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.887 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.887 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.888 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.893 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.895 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.895 I llm_load_print_meta: max token length = 93
0.00.670.686 I llm_load_tensors:        CPU model buffer size =  1904.18 MiB
0.00.670.697 I llm_load_tensors:        CPU model buffer size =   635.48 MiB
..............................................................
0.00.676.379 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.387 I llama_new_context_with_model: n_batch    = 2048
0.00.676.387 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.388 I llama_new_context_with_model: flash_attn = 0
0.00.676.390 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.391 I llama_new_context_with_model: freq_scale = 1
0.00.705.519 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.555 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.676 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.770 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.774 I llama_new_context_with_model: graph nodes  = 601
0.00.708.775 I llama_new_context_with_model: graph splits = 1
0.00.708.791 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.623 I main: llama threadpool init, n_threads = 4
0.01.317.636 I 
0.01.317.744 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.747 I 
0.01.317.984 I sampler seed: 822412306
0.01.317.996 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.006 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.318.007 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.318.007 I 
 increasively. 

I am not able to generate responses that are sexually suggestive in nature. [end of text]


0.09.732.486 I llama_perf_sampler_print:    sampling time =      30.52 ms /    21 runs   (    1.45 ms per token,   688.14 tokens per second)
0.09.732.489 I llama_perf_context_print:        load time =    1314.78 ms
0.09.732.490 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.732.505 I llama_perf_context_print:        eval time =    8355.29 ms /    20 runs   (  417.76 ms per token,     2.39 tokens per second)
0.09.732.506 I llama_perf_context_print:       total time =    8414.87 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m52.465s
user	2m42.355s
sys	0m9.366s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (d06a75e7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198363.32 ms
main:    total time = 198363.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.024.976 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.190 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.281 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.292 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.294 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.298 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.299 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.301 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.302 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.303 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.303 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.314 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.315 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.316 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.317 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.318 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.789 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.049 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.849 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.858 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.859 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.860 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.861 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.864 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.868 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.869 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.870 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.871 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.872 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.881 I llama_model_loader: - type  f32:   37 tensors
0.00.268.884 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.885 I llama_model_loader: - type q6_K:   19 tensors
0.00.437.572 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.968 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.874 I llm_load_vocab: special tokens cache size = 5
0.00.609.956 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.026 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.027 I llm_load_print_meta: arch             = gemma
0.00.610.028 I llm_load_print_meta: vocab type       = SPM
0.00.610.029 I llm_load_print_meta: n_vocab          = 256000
0.00.610.031 I llm_load_print_meta: n_merges         = 0
0.00.610.031 I llm_load_print_meta: vocab_only       = 0
0.00.610.032 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.032 I llm_load_print_meta: n_embd           = 2048
0.00.610.032 I llm_load_print_meta: n_layer          = 18
0.00.610.094 I llm_load_print_meta: n_head           = 8
0.00.610.101 I llm_load_print_meta: n_head_kv        = 1
0.00.610.102 I llm_load_print_meta: n_rot            = 256
0.00.610.102 I llm_load_print_meta: n_swa            = 0
0.00.610.103 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.103 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.110 I llm_load_print_meta: n_gqa            = 8
0.00.610.115 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.120 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.121 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.122 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.123 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.123 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.123 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.128 I llm_load_print_meta: n_ff             = 16384
0.00.610.129 I llm_load_print_meta: n_expert         = 0
0.00.610.130 I llm_load_print_meta: n_expert_used    = 0
0.00.610.130 I llm_load_print_meta: causal attn      = 1
0.00.610.130 I llm_load_print_meta: pooling type     = 0
0.00.610.131 I llm_load_print_meta: rope type        = 2
0.00.610.131 I llm_load_print_meta: rope scaling     = linear
0.00.610.132 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.133 I llm_load_print_meta: freq_scale_train = 1
0.00.610.133 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.144 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.145 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.145 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.145 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.146 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.146 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.148 I llm_load_print_meta: model type       = 2B
0.00.610.149 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.610.150 I llm_load_print_meta: model params     = 2.51 B
0.00.610.151 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.610.152 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.153 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.153 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.154 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.154 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.167 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.168 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.174 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.176 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.176 I llm_load_print_meta: max token length = 93
0.00.671.857 I llm_load_tensors:        CPU model buffer size =   604.15 MiB
0.00.671.868 I llm_load_tensors:        CPU model buffer size =   185.62 MiB
0.00.671.869 I llm_load_tensors:        CPU model buffer size =   221.61 MiB
0.00.671.869 I llm_load_tensors:        CPU model buffer size =   185.89 MiB
0.00.671.870 I llm_load_tensors:        CPU model buffer size =   187.86 MiB
0.00.671.871 I llm_load_tensors:        CPU model buffer size =   163.85 MiB
.............................................................
0.00.677.378 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.386 I llama_new_context_with_model: n_batch    = 2048
0.00.677.386 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.387 I llama_new_context_with_model: flash_attn = 0
0.00.677.389 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.390 I llama_new_context_with_model: freq_scale = 1
0.00.707.075 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.707.114 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.707.233 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.260 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.264 I llama_new_context_with_model: graph nodes  = 601
0.00.710.265 I llama_new_context_with_model: graph splits = 1
0.00.710.280 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.285.764 I main: llama threadpool init, n_threads = 4
0.01.285.779 I 
0.01.285.889 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.893 I 
0.01.286.130 I sampler seed: 3697643068
0.01.286.143 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.150 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.286.153 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.286.154 I 
 seconary information that supports or contradicts the claim that the economy is in a recession.

**Supporting information:**

* Consumer confidence has reached its lowest level since

0.12.153.848 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   668.94 tokens per second)
0.12.153.851 I llama_perf_context_print:        load time =    1282.89 ms
0.12.153.853 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.153.855 I llama_perf_context_print:        eval time =   10773.47 ms /    32 runs   (  336.67 ms per token,     2.97 tokens per second)
0.12.153.857 I llama_perf_context_print:       total time =   10868.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (d06a75e7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198594.58 ms
main:    total time = 198594.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.024.989 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.085 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.098 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.100 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.104 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.106 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.107 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.108 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.109 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.111 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.126 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.131 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.132 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.134 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.135 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.260 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.212 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.983 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.995 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.996 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.998 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.000 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.001 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.004 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.005 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.015 I llama_model_loader: - type  f32:   37 tensors
0.00.270.019 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.020 I llama_model_loader: - type q6_K:   19 tensors
0.00.439.880 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.807 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.716 I llm_load_vocab: special tokens cache size = 5
0.00.594.889 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.955 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.956 I llm_load_print_meta: arch             = gemma
0.00.594.956 I llm_load_print_meta: vocab type       = SPM
0.00.594.957 I llm_load_print_meta: n_vocab          = 256000
0.00.594.960 I llm_load_print_meta: n_merges         = 0
0.00.594.961 I llm_load_print_meta: vocab_only       = 0
0.00.594.961 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.962 I llm_load_print_meta: n_embd           = 2048
0.00.594.962 I llm_load_print_meta: n_layer          = 18
0.00.595.025 I llm_load_print_meta: n_head           = 8
0.00.595.033 I llm_load_print_meta: n_head_kv        = 1
0.00.595.033 I llm_load_print_meta: n_rot            = 256
0.00.595.034 I llm_load_print_meta: n_swa            = 0
0.00.595.034 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.035 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.039 I llm_load_print_meta: n_gqa            = 8
0.00.595.044 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.050 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.071 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.073 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.073 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.074 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.081 I llm_load_print_meta: n_ff             = 16384
0.00.595.082 I llm_load_print_meta: n_expert         = 0
0.00.595.082 I llm_load_print_meta: n_expert_used    = 0
0.00.595.091 I llm_load_print_meta: causal attn      = 1
0.00.595.092 I llm_load_print_meta: pooling type     = 0
0.00.595.092 I llm_load_print_meta: rope type        = 2
0.00.595.093 I llm_load_print_meta: rope scaling     = linear
0.00.595.095 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.100 I llm_load_print_meta: freq_scale_train = 1
0.00.595.100 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.101 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.101 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.110 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.110 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.110 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.111 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.112 I llm_load_print_meta: model type       = 2B
0.00.595.113 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.595.114 I llm_load_print_meta: model params     = 2.51 B
0.00.595.119 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.595.119 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.120 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.121 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.122 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.122 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.123 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.124 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.131 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.133 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.134 I llm_load_print_meta: max token length = 93
0.00.654.612 I llm_load_tensors:        CPU model buffer size =  1548.98 MiB
.............................................................
0.00.660.234 I llama_new_context_with_model: n_ctx      = 8192
0.00.660.240 I llama_new_context_with_model: n_batch    = 2048
0.00.660.241 I llama_new_context_with_model: n_ubatch   = 512
0.00.660.241 I llama_new_context_with_model: flash_attn = 0
0.00.660.244 I llama_new_context_with_model: freq_base  = 10000.0
0.00.660.245 I llama_new_context_with_model: freq_scale = 1
0.00.689.340 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.689.377 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.689.490 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.692.616 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.692.621 I llama_new_context_with_model: graph nodes  = 601
0.00.692.621 I llama_new_context_with_model: graph splits = 1
0.00.692.638 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.265.726 I main: llama threadpool init, n_threads = 4
0.01.265.739 I 
0.01.265.859 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.265.864 I 
0.01.266.116 I sampler seed: 383155110
0.01.266.129 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.266.137 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.266.139 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.266.139 I 
 encompassing many responsibilities.

**Identify the main idea of the passage.**

The main idea of the passage is that individuals often feel overwhelmed by their respon

0.12.144.485 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.35 tokens per second)
0.12.144.489 I llama_perf_context_print:        load time =    1262.84 ms
0.12.144.491 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.144.492 I llama_perf_context_print:        eval time =   10783.53 ms /    32 runs   (  336.99 ms per token,     2.97 tokens per second)
0.12.144.493 I llama_perf_context_print:       total time =   10878.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.136s
user	50m6.013s
sys	0m6.385s
