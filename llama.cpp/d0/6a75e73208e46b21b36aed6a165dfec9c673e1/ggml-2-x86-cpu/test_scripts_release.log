+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.610 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.809 I main: llama backend init
0.00.001.901 I main: load the model and apply lora adapter, if any
0.00.022.161 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.211 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.221 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.231 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.234 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.238 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.239 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.240 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.241 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.241 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.242 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.247 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.247 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.248 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.249 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.249 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.288 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.218 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.990 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.996 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.996 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.998 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.999 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.999 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.001 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.002 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.002 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.003 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.004 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.007 I llama_model_loader: - type  f32:   37 tensors
0.00.132.010 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.530 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.473 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.997 I llm_load_vocab: special tokens cache size = 5
0.00.264.089 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.114 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.114 I llm_load_print_meta: arch             = gemma
0.00.264.115 I llm_load_print_meta: vocab type       = SPM
0.00.264.115 I llm_load_print_meta: n_vocab          = 256000
0.00.264.116 I llm_load_print_meta: n_merges         = 0
0.00.264.116 I llm_load_print_meta: vocab_only       = 0
0.00.264.117 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.117 I llm_load_print_meta: n_embd           = 2048
0.00.264.117 I llm_load_print_meta: n_layer          = 18
0.00.264.128 I llm_load_print_meta: n_head           = 8
0.00.264.129 I llm_load_print_meta: n_head_kv        = 1
0.00.264.130 I llm_load_print_meta: n_rot            = 256
0.00.264.130 I llm_load_print_meta: n_swa            = 0
0.00.264.130 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.131 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.132 I llm_load_print_meta: n_gqa            = 8
0.00.264.133 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.134 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.134 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.136 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.136 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.136 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.137 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.138 I llm_load_print_meta: n_ff             = 16384
0.00.264.138 I llm_load_print_meta: n_expert         = 0
0.00.264.139 I llm_load_print_meta: n_expert_used    = 0
0.00.264.139 I llm_load_print_meta: causal attn      = 1
0.00.264.139 I llm_load_print_meta: pooling type     = 0
0.00.264.139 I llm_load_print_meta: rope type        = 2
0.00.264.140 I llm_load_print_meta: rope scaling     = linear
0.00.264.141 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.142 I llm_load_print_meta: freq_scale_train = 1
0.00.264.142 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.142 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.142 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.143 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.143 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.143 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.143 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.144 I llm_load_print_meta: model type       = 2B
0.00.264.144 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.145 I llm_load_print_meta: model params     = 2.51 B
0.00.264.146 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.146 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.147 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.147 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.148 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.148 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.148 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.148 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.149 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.149 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.150 I llm_load_print_meta: max token length = 93
0.00.366.046 I llm_load_tensors:        CPU model buffer size =   865.98 MiB
0.00.366.053 I llm_load_tensors:        CPU model buffer size =   334.74 MiB
0.00.366.054 I llm_load_tensors:        CPU model buffer size =   402.73 MiB
0.00.366.055 I llm_load_tensors:        CPU model buffer size =   335.27 MiB
0.00.366.055 I llm_load_tensors:        CPU model buffer size =   338.98 MiB
0.00.366.056 I llm_load_tensors:        CPU model buffer size =   261.96 MiB
..............................................................
0.00.371.264 I llama_new_context_with_model: n_ctx      = 8192
0.00.371.270 I llama_new_context_with_model: n_batch    = 2048
0.00.371.270 I llama_new_context_with_model: n_ubatch   = 512
0.00.371.271 I llama_new_context_with_model: flash_attn = 0
0.00.371.273 I llama_new_context_with_model: freq_base  = 10000.0
0.00.371.274 I llama_new_context_with_model: freq_scale = 1
0.00.399.922 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.399.936 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.400.029 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.884 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.401.891 I llama_new_context_with_model: graph nodes  = 601
0.00.401.891 I llama_new_context_with_model: graph splits = 1
0.00.401.893 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.490.978 I main: llama threadpool init, n_threads = 4
0.00.490.993 I 
0.00.491.069 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.072 I 
0.00.491.113 I sampler seed: 2536577669
0.00.491.124 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.133 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.134 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.134 I 
 increasities to a more modern context.

**Assistant**

I am unable to provide assistance with generating sexually suggestive or inappropriate content. [end of text]


0.02.458.382 I llama_perf_sampler_print:    sampling time =       4.22 ms /    29 runs   (    0.15 ms per token,  6868.78 tokens per second)
0.02.458.384 I llama_perf_context_print:        load time =     489.06 ms
0.02.458.385 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.458.386 I llama_perf_context_print:        eval time =    1949.55 ms /    28 runs   (   69.63 ms per token,    14.36 tokens per second)
0.02.458.387 I llama_perf_context_print:       total time =    1967.41 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.537 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.812 I main: load the model and apply lora adapter, if any
0.00.021.660 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.671 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.677 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.678 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.682 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.682 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.683 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.684 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.685 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.686 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.690 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.691 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.692 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.692 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.693 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.886 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.743 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.522 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.528 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.528 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.529 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.529 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.530 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.531 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.533 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.534 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.534 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.535 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.535 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.538 I llama_model_loader: - type  f32:   37 tensors
0.00.130.540 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.272 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.631 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.215 I llm_load_vocab: special tokens cache size = 5
0.00.268.282 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.301 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.302 I llm_load_print_meta: arch             = gemma
0.00.268.302 I llm_load_print_meta: vocab type       = SPM
0.00.268.304 I llm_load_print_meta: n_vocab          = 256000
0.00.268.304 I llm_load_print_meta: n_merges         = 0
0.00.268.305 I llm_load_print_meta: vocab_only       = 0
0.00.268.305 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.305 I llm_load_print_meta: n_embd           = 2048
0.00.268.306 I llm_load_print_meta: n_layer          = 18
0.00.268.317 I llm_load_print_meta: n_head           = 8
0.00.268.318 I llm_load_print_meta: n_head_kv        = 1
0.00.268.318 I llm_load_print_meta: n_rot            = 256
0.00.268.319 I llm_load_print_meta: n_swa            = 0
0.00.268.319 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.320 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.321 I llm_load_print_meta: n_gqa            = 8
0.00.268.322 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.324 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.325 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.329 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.329 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.330 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.330 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.331 I llm_load_print_meta: n_ff             = 16384
0.00.268.332 I llm_load_print_meta: n_expert         = 0
0.00.268.332 I llm_load_print_meta: n_expert_used    = 0
0.00.268.333 I llm_load_print_meta: causal attn      = 1
0.00.268.334 I llm_load_print_meta: pooling type     = 0
0.00.268.354 I llm_load_print_meta: rope type        = 2
0.00.268.354 I llm_load_print_meta: rope scaling     = linear
0.00.268.357 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.357 I llm_load_print_meta: freq_scale_train = 1
0.00.268.358 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.359 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.359 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.359 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.360 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.360 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.360 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.361 I llm_load_print_meta: model type       = 2B
0.00.268.362 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.363 I llm_load_print_meta: model params     = 2.51 B
0.00.268.364 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.370 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.371 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.371 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.372 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.372 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.373 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.373 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.373 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.374 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.374 I llm_load_print_meta: max token length = 93
0.00.364.609 I llm_load_tensors:        CPU model buffer size =  2539.66 MiB
..............................................................
0.00.369.796 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.802 I llama_new_context_with_model: n_batch    = 2048
0.00.369.803 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.804 I llama_new_context_with_model: flash_attn = 0
0.00.369.806 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.807 I llama_new_context_with_model: freq_scale = 1
0.00.400.422 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.400.437 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.400.530 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.402.357 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.402.364 I llama_new_context_with_model: graph nodes  = 601
0.00.402.364 I llama_new_context_with_model: graph splits = 1
0.00.402.366 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.008 I main: llama threadpool init, n_threads = 4
0.00.489.024 I 
0.00.489.101 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.105 I 
0.00.489.150 I sampler seed: 2332226464
0.00.489.162 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.166 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.166 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.166 I 
 increadibly! [end of text]


0.00.761.784 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8077.54 tokens per second)
0.00.761.787 I llama_perf_context_print:        load time =     487.18 ms
0.00.761.788 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.761.789 I llama_perf_context_print:        eval time =     269.47 ms /     4 runs   (   67.37 ms per token,    14.84 tokens per second)
0.00.761.790 I llama_perf_context_print:       total time =     272.78 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.516 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.707 I main: llama backend init
0.00.001.762 I main: load the model and apply lora adapter, if any
0.00.021.709 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.758 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.765 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.770 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.771 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.775 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.776 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.777 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.777 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.778 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.778 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.782 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.782 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.783 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.783 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.784 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.970 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.033 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.945 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.953 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.954 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.954 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.955 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.956 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.957 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.960 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.960 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.961 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.962 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.963 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.967 I llama_model_loader: - type  f32:   37 tensors
0.00.130.970 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.344 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.186 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.752 I llm_load_vocab: special tokens cache size = 5
0.00.263.792 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.807 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.807 I llm_load_print_meta: arch             = gemma
0.00.263.808 I llm_load_print_meta: vocab type       = SPM
0.00.263.809 I llm_load_print_meta: n_vocab          = 256000
0.00.263.809 I llm_load_print_meta: n_merges         = 0
0.00.263.809 I llm_load_print_meta: vocab_only       = 0
0.00.263.810 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.810 I llm_load_print_meta: n_embd           = 2048
0.00.263.810 I llm_load_print_meta: n_layer          = 18
0.00.263.822 I llm_load_print_meta: n_head           = 8
0.00.263.823 I llm_load_print_meta: n_head_kv        = 1
0.00.263.823 I llm_load_print_meta: n_rot            = 256
0.00.263.823 I llm_load_print_meta: n_swa            = 0
0.00.263.824 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.824 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.825 I llm_load_print_meta: n_gqa            = 8
0.00.263.826 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.827 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.827 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.829 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.829 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.830 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.830 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.831 I llm_load_print_meta: n_ff             = 16384
0.00.263.831 I llm_load_print_meta: n_expert         = 0
0.00.263.832 I llm_load_print_meta: n_expert_used    = 0
0.00.263.832 I llm_load_print_meta: causal attn      = 1
0.00.263.833 I llm_load_print_meta: pooling type     = 0
0.00.263.833 I llm_load_print_meta: rope type        = 2
0.00.263.833 I llm_load_print_meta: rope scaling     = linear
0.00.263.835 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.835 I llm_load_print_meta: freq_scale_train = 1
0.00.263.836 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.836 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.836 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.836 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.837 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.837 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.837 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.838 I llm_load_print_meta: model type       = 2B
0.00.263.838 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.839 I llm_load_print_meta: model params     = 2.51 B
0.00.263.840 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.840 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.841 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.841 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.841 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.842 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.842 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.842 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.842 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.843 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.843 I llm_load_print_meta: max token length = 93
0.00.340.392 I llm_load_tensors:        CPU model buffer size =   967.99 MiB
0.00.340.399 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.00.340.400 I llm_load_tensors:        CPU model buffer size =   411.77 MiB
0.00.340.401 I llm_load_tensors:        CPU model buffer size =   437.27 MiB
0.00.340.401 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.00.340.402 I llm_load_tensors:        CPU model buffer size =    34.02 MiB
..............................................................
0.00.345.427 I llama_new_context_with_model: n_ctx      = 8192
0.00.345.433 I llama_new_context_with_model: n_batch    = 2048
0.00.345.433 I llama_new_context_with_model: n_ubatch   = 512
0.00.345.433 I llama_new_context_with_model: flash_attn = 0
0.00.345.435 I llama_new_context_with_model: freq_base  = 10000.0
0.00.345.436 I llama_new_context_with_model: freq_scale = 1
0.00.373.462 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.373.477 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.373.579 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.564 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.375.571 I llama_new_context_with_model: graph nodes  = 601
0.00.375.571 I llama_new_context_with_model: graph splits = 1
0.00.375.573 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.651 I main: llama threadpool init, n_threads = 4
0.00.462.665 I 
0.00.462.740 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.462.743 I 
0.00.462.789 I sampler seed: 3821979670
0.00.462.800 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.803 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.804 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.805 I 
 increasities in the human population, such as lactose intolerance, gluten intolerance, and histamine intolerance.

**Lactose Intolerance:**

* Symptoms of lactose intolerance

0.02.708.325 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6630.50 tokens per second)
0.02.708.327 I llama_perf_context_print:        load time =     460.87 ms
0.02.708.329 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.708.330 I llama_perf_context_print:        eval time =    2225.76 ms /    32 runs   (   69.56 ms per token,    14.38 tokens per second)
0.02.708.330 I llama_perf_context_print:       total time =    2245.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.573 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.790 I main: llama backend init
0.00.001.935 I main: load the model and apply lora adapter, if any
0.00.022.215 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.260 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.271 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.280 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.284 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.289 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.290 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.291 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.291 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.292 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.292 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.296 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.297 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.297 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.298 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.298 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.495 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.639 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.477 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.484 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.484 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.485 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.485 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.486 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.487 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.489 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.490 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.491 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.491 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.492 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.496 I llama_model_loader: - type  f32:   37 tensors
0.00.131.499 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.494 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.370 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.888 I llm_load_vocab: special tokens cache size = 5
0.00.264.930 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.948 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.948 I llm_load_print_meta: arch             = gemma
0.00.264.949 I llm_load_print_meta: vocab type       = SPM
0.00.264.949 I llm_load_print_meta: n_vocab          = 256000
0.00.264.950 I llm_load_print_meta: n_merges         = 0
0.00.264.950 I llm_load_print_meta: vocab_only       = 0
0.00.264.951 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.951 I llm_load_print_meta: n_embd           = 2048
0.00.264.952 I llm_load_print_meta: n_layer          = 18
0.00.264.963 I llm_load_print_meta: n_head           = 8
0.00.264.964 I llm_load_print_meta: n_head_kv        = 1
0.00.264.964 I llm_load_print_meta: n_rot            = 256
0.00.264.965 I llm_load_print_meta: n_swa            = 0
0.00.264.965 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.965 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.967 I llm_load_print_meta: n_gqa            = 8
0.00.264.968 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.969 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.970 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.971 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.972 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.972 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.972 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.973 I llm_load_print_meta: n_ff             = 16384
0.00.264.973 I llm_load_print_meta: n_expert         = 0
0.00.264.974 I llm_load_print_meta: n_expert_used    = 0
0.00.264.974 I llm_load_print_meta: causal attn      = 1
0.00.264.974 I llm_load_print_meta: pooling type     = 0
0.00.264.975 I llm_load_print_meta: rope type        = 2
0.00.264.975 I llm_load_print_meta: rope scaling     = linear
0.00.264.976 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.977 I llm_load_print_meta: freq_scale_train = 1
0.00.264.977 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.978 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.978 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.978 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.978 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.979 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.979 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.979 I llm_load_print_meta: model type       = 2B
0.00.264.980 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.981 I llm_load_print_meta: model params     = 2.51 B
0.00.264.982 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.982 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.982 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.983 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.983 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.984 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.984 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.984 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.984 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.985 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.985 I llm_load_print_meta: max token length = 93
0.00.335.831 I llm_load_tensors:        CPU model buffer size =  1904.18 MiB
0.00.335.838 I llm_load_tensors:        CPU model buffer size =   635.48 MiB
..............................................................
0.00.340.825 I llama_new_context_with_model: n_ctx      = 8192
0.00.340.832 I llama_new_context_with_model: n_batch    = 2048
0.00.340.832 I llama_new_context_with_model: n_ubatch   = 512
0.00.340.832 I llama_new_context_with_model: flash_attn = 0
0.00.340.834 I llama_new_context_with_model: freq_base  = 10000.0
0.00.340.835 I llama_new_context_with_model: freq_scale = 1
0.00.370.117 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.370.134 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.370.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.153 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.372.160 I llama_new_context_with_model: graph nodes  = 601
0.00.372.160 I llama_new_context_with_model: graph splits = 1
0.00.372.162 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.571 I main: llama threadpool init, n_threads = 4
0.00.467.585 I 
0.00.467.661 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.467.664 I 
0.00.467.709 I sampler seed: 1034547128
0.00.467.721 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.724 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.725 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.725 I 
 increasities for the best and most engaging experience. [end of text]


0.01.300.738 I llama_perf_sampler_print:    sampling time =       1.79 ms /    12 runs   (    0.15 ms per token,  6718.92 tokens per second)
0.01.300.740 I llama_perf_context_print:        load time =     465.61 ms
0.01.300.741 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.300.742 I llama_perf_context_print:        eval time =     825.69 ms /    11 runs   (   75.06 ms per token,    13.32 tokens per second)
0.01.300.743 I llama_perf_context_print:       total time =     833.17 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.007s
user	0m24.120s
sys	0m9.409s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (d06a75e7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32219.35 ms
main:    total time = 32219.35 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.519 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.001.806 I main: load the model and apply lora adapter, if any
0.00.022.179 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.229 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.236 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.241 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.242 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.246 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.246 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.247 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.247 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.249 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.250 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.253 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.254 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.254 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.255 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.256 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.028 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.053 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.928 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.934 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.935 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.936 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.936 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.937 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.938 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.940 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.941 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.942 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.943 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.136.944 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.947 I llama_model_loader: - type  f32:   37 tensors
0.00.136.949 I llama_model_loader: - type q4_K:  108 tensors
0.00.136.950 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.258 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.947 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.520 I llm_load_vocab: special tokens cache size = 5
0.00.271.623 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.640 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.640 I llm_load_print_meta: arch             = gemma
0.00.271.641 I llm_load_print_meta: vocab type       = SPM
0.00.271.641 I llm_load_print_meta: n_vocab          = 256000
0.00.271.642 I llm_load_print_meta: n_merges         = 0
0.00.271.642 I llm_load_print_meta: vocab_only       = 0
0.00.271.642 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.642 I llm_load_print_meta: n_embd           = 2048
0.00.271.643 I llm_load_print_meta: n_layer          = 18
0.00.271.657 I llm_load_print_meta: n_head           = 8
0.00.271.658 I llm_load_print_meta: n_head_kv        = 1
0.00.271.658 I llm_load_print_meta: n_rot            = 256
0.00.271.658 I llm_load_print_meta: n_swa            = 0
0.00.271.658 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.659 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.660 I llm_load_print_meta: n_gqa            = 8
0.00.271.661 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.662 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.663 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.664 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.665 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.665 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.666 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.667 I llm_load_print_meta: n_ff             = 16384
0.00.271.668 I llm_load_print_meta: n_expert         = 0
0.00.271.669 I llm_load_print_meta: n_expert_used    = 0
0.00.271.669 I llm_load_print_meta: causal attn      = 1
0.00.271.669 I llm_load_print_meta: pooling type     = 0
0.00.271.670 I llm_load_print_meta: rope type        = 2
0.00.271.670 I llm_load_print_meta: rope scaling     = linear
0.00.271.672 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.673 I llm_load_print_meta: freq_scale_train = 1
0.00.271.673 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.674 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.674 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.678 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.678 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.679 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.679 I llm_load_print_meta: model type       = 2B
0.00.271.680 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.680 I llm_load_print_meta: model params     = 2.51 B
0.00.271.681 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.682 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.682 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.683 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.683 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.683 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.683 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.684 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.685 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.686 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.686 I llm_load_print_meta: max token length = 93
0.00.330.847 I llm_load_tensors:        CPU model buffer size =   604.15 MiB
0.00.330.854 I llm_load_tensors:        CPU model buffer size =   185.62 MiB
0.00.330.855 I llm_load_tensors:        CPU model buffer size =   221.61 MiB
0.00.330.856 I llm_load_tensors:        CPU model buffer size =   185.89 MiB
0.00.330.856 I llm_load_tensors:        CPU model buffer size =   187.86 MiB
0.00.330.857 I llm_load_tensors:        CPU model buffer size =   163.85 MiB
.............................................................
0.00.336.030 I llama_new_context_with_model: n_ctx      = 8192
0.00.336.035 I llama_new_context_with_model: n_batch    = 2048
0.00.336.035 I llama_new_context_with_model: n_ubatch   = 512
0.00.336.036 I llama_new_context_with_model: flash_attn = 0
0.00.336.038 I llama_new_context_with_model: freq_base  = 10000.0
0.00.336.039 I llama_new_context_with_model: freq_scale = 1
0.00.365.545 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.365.559 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.365.660 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.485 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.367.492 I llama_new_context_with_model: graph nodes  = 601
0.00.367.492 I llama_new_context_with_model: graph splits = 1
0.00.367.494 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.176 I main: llama threadpool init, n_threads = 4
0.00.446.189 I 
0.00.446.264 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.267 I 
0.00.446.315 I sampler seed: 2706665537
0.00.446.325 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.330 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.331 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.331 I 
 increasively.

The correct answer is:

The more we learn, the more we know.

This is an example of an adage that highlights the idea

0.02.042.230 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6954.69 tokens per second)
0.02.042.233 I llama_perf_context_print:        load time =     444.35 ms
0.02.042.234 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.042.235 I llama_perf_context_print:        eval time =    1577.16 ms /    32 runs   (   49.29 ms per token,    20.29 tokens per second)
0.02.042.236 I llama_perf_context_print:       total time =    1596.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (d06a75e7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31987.29 ms
main:    total time = 31987.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.533 I build: 3984 (d06a75e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.001.865 I main: load the model and apply lora adapter, if any
0.00.022.023 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.034 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.040 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.041 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.045 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.048 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.049 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.049 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.050 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.050 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.053 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.055 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.055 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.056 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.057 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.212 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.988 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.788 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.794 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.795 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.796 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.796 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.797 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.798 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.800 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.801 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.804 I llama_model_loader: - type  f32:   37 tensors
0.00.130.806 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.807 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.904 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.955 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.425 I llm_load_vocab: special tokens cache size = 5
0.00.258.364 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.380 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.381 I llm_load_print_meta: arch             = gemma
0.00.258.381 I llm_load_print_meta: vocab type       = SPM
0.00.258.382 I llm_load_print_meta: n_vocab          = 256000
0.00.258.382 I llm_load_print_meta: n_merges         = 0
0.00.258.383 I llm_load_print_meta: vocab_only       = 0
0.00.258.383 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.383 I llm_load_print_meta: n_embd           = 2048
0.00.258.383 I llm_load_print_meta: n_layer          = 18
0.00.258.394 I llm_load_print_meta: n_head           = 8
0.00.258.395 I llm_load_print_meta: n_head_kv        = 1
0.00.258.395 I llm_load_print_meta: n_rot            = 256
0.00.258.396 I llm_load_print_meta: n_swa            = 0
0.00.258.396 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.397 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.398 I llm_load_print_meta: n_gqa            = 8
0.00.258.399 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.400 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.401 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.402 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.402 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.403 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.403 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.404 I llm_load_print_meta: n_ff             = 16384
0.00.258.405 I llm_load_print_meta: n_expert         = 0
0.00.258.405 I llm_load_print_meta: n_expert_used    = 0
0.00.258.405 I llm_load_print_meta: causal attn      = 1
0.00.258.406 I llm_load_print_meta: pooling type     = 0
0.00.258.406 I llm_load_print_meta: rope type        = 2
0.00.258.407 I llm_load_print_meta: rope scaling     = linear
0.00.258.409 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.410 I llm_load_print_meta: freq_scale_train = 1
0.00.258.410 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.410 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.411 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.411 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.411 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.411 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.412 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.412 I llm_load_print_meta: model type       = 2B
0.00.258.413 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.258.414 I llm_load_print_meta: model params     = 2.51 B
0.00.258.415 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.258.415 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.415 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.416 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.416 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.416 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.417 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.417 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.418 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.418 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.419 I llm_load_print_meta: max token length = 93
0.00.315.952 I llm_load_tensors:        CPU model buffer size =  1548.98 MiB
.............................................................
0.00.321.044 I llama_new_context_with_model: n_ctx      = 8192
0.00.321.050 I llama_new_context_with_model: n_batch    = 2048
0.00.321.051 I llama_new_context_with_model: n_ubatch   = 512
0.00.321.051 I llama_new_context_with_model: flash_attn = 0
0.00.321.054 I llama_new_context_with_model: freq_base  = 10000.0
0.00.321.055 I llama_new_context_with_model: freq_scale = 1
0.00.349.670 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.349.685 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.349.783 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.731 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.351.737 I llama_new_context_with_model: graph nodes  = 601
0.00.351.737 I llama_new_context_with_model: graph splits = 1
0.00.351.739 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.461 I main: llama threadpool init, n_threads = 4
0.00.429.476 I 
0.00.429.549 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.429.553 I 
0.00.429.597 I sampler seed: 688112894
0.00.429.610 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.614 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.614 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.615 I 
 seconally. I can't help but notice that my thoughts are becoming increasingly erratic and disconnected.

I am concerned that this may be a symptom of anxiety

0.02.010.956 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6605.28 tokens per second)
0.02.010.958 I llama_perf_context_print:        load time =     427.58 ms
0.02.010.960 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.010.962 I llama_perf_context_print:        eval time =    1561.68 ms /    32 runs   (   48.80 ms per token,    20.49 tokens per second)
0.02.010.963 I llama_perf_context_print:       total time =    1581.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.401s
user	8m14.509s
sys	0m6.867s
