+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4050 (d05b3127) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.001.079 I main: load the model and apply lora adapter, if any
0.00.023.634 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.645 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.732 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.743 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.745 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.749 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.750 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.751 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.752 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.754 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.756 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.763 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.764 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.766 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.767 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.768 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.754 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.834 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.379 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.388 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.389 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.390 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.391 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.392 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.394 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.398 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.399 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.400 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.401 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.402 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.411 I llama_model_loader: - type  f32:   37 tensors
0.00.268.413 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.832 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.615 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.497 I llm_load_vocab: special tokens cache size = 5
0.00.597.698 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.769 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.770 I llm_load_print_meta: arch             = gemma
0.00.597.771 I llm_load_print_meta: vocab type       = SPM
0.00.597.772 I llm_load_print_meta: n_vocab          = 256000
0.00.597.774 I llm_load_print_meta: n_merges         = 0
0.00.597.774 I llm_load_print_meta: vocab_only       = 0
0.00.597.775 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.775 I llm_load_print_meta: n_embd           = 2048
0.00.597.775 I llm_load_print_meta: n_layer          = 18
0.00.597.838 I llm_load_print_meta: n_head           = 8
0.00.597.846 I llm_load_print_meta: n_head_kv        = 1
0.00.597.846 I llm_load_print_meta: n_rot            = 256
0.00.597.847 I llm_load_print_meta: n_swa            = 0
0.00.597.848 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.848 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.853 I llm_load_print_meta: n_gqa            = 8
0.00.597.857 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.862 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.866 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.867 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.868 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.879 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.880 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.885 I llm_load_print_meta: n_ff             = 16384
0.00.597.889 I llm_load_print_meta: n_expert         = 0
0.00.597.890 I llm_load_print_meta: n_expert_used    = 0
0.00.597.890 I llm_load_print_meta: causal attn      = 1
0.00.597.890 I llm_load_print_meta: pooling type     = 0
0.00.597.891 I llm_load_print_meta: rope type        = 2
0.00.597.892 I llm_load_print_meta: rope scaling     = linear
0.00.597.893 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.894 I llm_load_print_meta: freq_scale_train = 1
0.00.597.894 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.895 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.895 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.907 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.909 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.910 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.910 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.911 I llm_load_print_meta: model type       = 2B
0.00.597.912 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.912 I llm_load_print_meta: model params     = 2.51 B
0.00.597.922 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.922 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.926 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.927 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.927 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.927 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.928 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.928 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.935 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.937 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.938 I llm_load_print_meta: max token length = 93
0.00.699.840 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.699.850 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.699.851 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.699.852 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.699.853 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.699.853 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.705.804 I llama_new_context_with_model: n_seq_max     = 1
0.00.705.813 I llama_new_context_with_model: n_ctx         = 4096
0.00.705.813 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.705.813 I llama_new_context_with_model: n_batch       = 2048
0.00.705.814 I llama_new_context_with_model: n_ubatch      = 512
0.00.705.814 I llama_new_context_with_model: flash_attn    = 0
0.00.705.818 I llama_new_context_with_model: freq_base     = 10000.0
0.00.705.819 I llama_new_context_with_model: freq_scale    = 1
0.00.705.820 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.722.972 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.723.014 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.723.140 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.725.678 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.725.683 I llama_new_context_with_model: graph nodes  = 601
0.00.725.683 I llama_new_context_with_model: graph splits = 1
0.00.725.707 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.331.902 I main: llama threadpool init, n_threads = 4
0.01.331.915 I 
0.01.332.026 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.029 I 
0.01.332.268 I sampler seed: 2116836971
0.01.332.280 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.287 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.332.290 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.290 I 
 increasements. [end of text]


0.03.019.757 I llama_perf_sampler_print:    sampling time =       6.19 ms /     5 runs   (    1.24 ms per token,   807.62 tokens per second)
0.03.019.777 I llama_perf_context_print:        load time =    1330.73 ms
0.03.019.779 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.019.781 I llama_perf_context_print:        eval time =    1675.20 ms /     4 runs   (  418.80 ms per token,     2.39 tokens per second)
0.03.019.787 I llama_perf_context_print:       total time =    1687.87 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4050 (d05b3127) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.001.092 I main: load the model and apply lora adapter, if any
0.00.023.465 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.557 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.570 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.572 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.576 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.580 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.582 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.583 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.584 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.585 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.592 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.593 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.595 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.595 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.597 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.520 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.412 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.980 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.989 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.990 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.991 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.992 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.993 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.995 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.999 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.000 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.001 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.002 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.003 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.011 I llama_model_loader: - type  f32:   37 tensors
0.00.268.014 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.490 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.097 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.094 I llm_load_vocab: special tokens cache size = 5
0.00.603.650 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.727 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.731 I llm_load_print_meta: arch             = gemma
0.00.603.732 I llm_load_print_meta: vocab type       = SPM
0.00.603.733 I llm_load_print_meta: n_vocab          = 256000
0.00.603.736 I llm_load_print_meta: n_merges         = 0
0.00.603.736 I llm_load_print_meta: vocab_only       = 0
0.00.603.736 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.737 I llm_load_print_meta: n_embd           = 2048
0.00.603.737 I llm_load_print_meta: n_layer          = 18
0.00.603.801 I llm_load_print_meta: n_head           = 8
0.00.603.811 I llm_load_print_meta: n_head_kv        = 1
0.00.603.812 I llm_load_print_meta: n_rot            = 256
0.00.603.815 I llm_load_print_meta: n_swa            = 0
0.00.603.815 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.815 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.820 I llm_load_print_meta: n_gqa            = 8
0.00.603.825 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.830 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.831 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.833 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.833 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.834 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.835 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.840 I llm_load_print_meta: n_ff             = 16384
0.00.603.840 I llm_load_print_meta: n_expert         = 0
0.00.603.841 I llm_load_print_meta: n_expert_used    = 0
0.00.603.851 I llm_load_print_meta: causal attn      = 1
0.00.603.852 I llm_load_print_meta: pooling type     = 0
0.00.603.852 I llm_load_print_meta: rope type        = 2
0.00.603.864 I llm_load_print_meta: rope scaling     = linear
0.00.603.868 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.869 I llm_load_print_meta: freq_scale_train = 1
0.00.603.869 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.869 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.870 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.870 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.870 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.871 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.871 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.872 I llm_load_print_meta: model type       = 2B
0.00.603.873 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.873 I llm_load_print_meta: model params     = 2.51 B
0.00.603.883 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.883 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.884 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.885 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.885 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.885 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.886 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.887 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.893 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.895 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.896 I llm_load_print_meta: max token length = 93
0.00.701.986 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.707.880 I llama_new_context_with_model: n_seq_max     = 1
0.00.707.887 I llama_new_context_with_model: n_ctx         = 4096
0.00.707.887 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.707.887 I llama_new_context_with_model: n_batch       = 2048
0.00.707.888 I llama_new_context_with_model: n_ubatch      = 512
0.00.707.888 I llama_new_context_with_model: flash_attn    = 0
0.00.707.890 I llama_new_context_with_model: freq_base     = 10000.0
0.00.707.891 I llama_new_context_with_model: freq_scale    = 1
0.00.707.892 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.724.489 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.724.527 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.724.650 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.156 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.727.161 I llama_new_context_with_model: graph nodes  = 601
0.00.727.161 I llama_new_context_with_model: graph splits = 1
0.00.727.185 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.845 I main: llama threadpool init, n_threads = 4
0.01.332.858 I 
0.01.332.962 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.965 I 
0.01.333.190 I sampler seed: 3914659850
0.01.333.202 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.208 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.333.211 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.212 I 
 increadibly! [end of text]


0.03.014.177 I llama_perf_sampler_print:    sampling time =       6.08 ms /     5 runs   (    1.22 ms per token,   822.91 tokens per second)
0.03.014.193 I llama_perf_context_print:        load time =    1331.66 ms
0.03.014.194 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.014.196 I llama_perf_context_print:        eval time =    1668.67 ms /     4 runs   (  417.17 ms per token,     2.40 tokens per second)
0.03.014.196 I llama_perf_context_print:       total time =    1681.34 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4050 (d05b3127) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.001.131 I main: load the model and apply lora adapter, if any
0.00.025.368 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.379 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.469 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.481 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.483 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.487 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.488 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.489 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.490 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.492 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.494 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.503 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.507 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.508 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.509 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.510 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.161.048 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.264.436 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.283.040 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.283.049 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.283.050 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.283.051 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.283.052 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.283.053 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.283.055 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.283.058 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.283.059 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.283.060 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.283.061 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.283.062 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.283.071 I llama_model_loader: - type  f32:   37 tensors
0.00.283.073 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.889 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.537.015 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.029 I llm_load_vocab: special tokens cache size = 5
0.00.638.401 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.638.475 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.638.476 I llm_load_print_meta: arch             = gemma
0.00.638.477 I llm_load_print_meta: vocab type       = SPM
0.00.638.478 I llm_load_print_meta: n_vocab          = 256000
0.00.638.480 I llm_load_print_meta: n_merges         = 0
0.00.638.480 I llm_load_print_meta: vocab_only       = 0
0.00.638.481 I llm_load_print_meta: n_ctx_train      = 8192
0.00.638.482 I llm_load_print_meta: n_embd           = 2048
0.00.638.482 I llm_load_print_meta: n_layer          = 18
0.00.638.548 I llm_load_print_meta: n_head           = 8
0.00.638.556 I llm_load_print_meta: n_head_kv        = 1
0.00.638.556 I llm_load_print_meta: n_rot            = 256
0.00.638.557 I llm_load_print_meta: n_swa            = 0
0.00.638.557 I llm_load_print_meta: n_embd_head_k    = 256
0.00.638.558 I llm_load_print_meta: n_embd_head_v    = 256
0.00.638.563 I llm_load_print_meta: n_gqa            = 8
0.00.638.587 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.638.595 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.638.596 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.638.598 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.638.599 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.638.599 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.638.600 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.638.605 I llm_load_print_meta: n_ff             = 16384
0.00.638.605 I llm_load_print_meta: n_expert         = 0
0.00.638.606 I llm_load_print_meta: n_expert_used    = 0
0.00.638.607 I llm_load_print_meta: causal attn      = 1
0.00.638.607 I llm_load_print_meta: pooling type     = 0
0.00.638.607 I llm_load_print_meta: rope type        = 2
0.00.638.608 I llm_load_print_meta: rope scaling     = linear
0.00.638.610 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.638.611 I llm_load_print_meta: freq_scale_train = 1
0.00.638.611 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.638.612 I llm_load_print_meta: rope_finetuned   = unknown
0.00.638.612 I llm_load_print_meta: ssm_d_conv       = 0
0.00.638.612 I llm_load_print_meta: ssm_d_inner      = 0
0.00.638.613 I llm_load_print_meta: ssm_d_state      = 0
0.00.638.613 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.638.614 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.638.614 I llm_load_print_meta: model type       = 2B
0.00.638.616 I llm_load_print_meta: model ftype      = Q8_0
0.00.638.617 I llm_load_print_meta: model params     = 2.51 B
0.00.638.629 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.638.629 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.638.630 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.638.631 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.638.631 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.638.632 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.638.633 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.638.633 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.638.639 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.638.640 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.638.641 I llm_load_print_meta: max token length = 93
0.00.728.202 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.728.210 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.728.211 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.728.212 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.728.212 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.728.213 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.733.966 I llama_new_context_with_model: n_seq_max     = 1
0.00.733.974 I llama_new_context_with_model: n_ctx         = 4096
0.00.733.974 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.733.974 I llama_new_context_with_model: n_batch       = 2048
0.00.733.975 I llama_new_context_with_model: n_ubatch      = 512
0.00.733.975 I llama_new_context_with_model: flash_attn    = 0
0.00.733.978 I llama_new_context_with_model: freq_base     = 10000.0
0.00.733.979 I llama_new_context_with_model: freq_scale    = 1
0.00.733.980 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.750.443 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.750.479 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.750.596 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.753.129 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.753.133 I llama_new_context_with_model: graph nodes  = 601
0.00.753.133 I llama_new_context_with_model: graph splits = 1
0.00.753.156 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.361.183 I main: llama threadpool init, n_threads = 4
0.01.361.196 I 
0.01.361.301 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.361.305 I 
0.01.361.535 I sampler seed: 3217443517
0.01.361.547 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.553 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.361.556 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.556 I 
 seconally, but do not rephrase or change the meaning.

1. The question is about the relationship between the Earth and the moon.
2.

0.15.082.559 I llama_perf_sampler_print:    sampling time =      48.32 ms /    33 runs   (    1.46 ms per token,   682.96 tokens per second)
0.15.082.562 I llama_perf_context_print:        load time =    1359.95 ms
0.15.082.564 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.082.565 I llama_perf_context_print:        eval time =   13632.09 ms /    32 runs   (  426.00 ms per token,     2.35 tokens per second)
0.15.082.566 I llama_perf_context_print:       total time =   13721.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4050 (d05b3127) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.001.089 I main: load the model and apply lora adapter, if any
0.00.023.732 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.742 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.827 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.838 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.839 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.843 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.845 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.854 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.859 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.860 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.861 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.866 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.867 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.868 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.894 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.900 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.450 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.343 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.886 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.894 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.895 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.896 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.897 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.899 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.900 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.903 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.904 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.905 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.906 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.907 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.916 I llama_model_loader: - type  f32:   37 tensors
0.00.270.918 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.290 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.999 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.040 I llm_load_vocab: special tokens cache size = 5
0.00.603.662 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.735 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.736 I llm_load_print_meta: arch             = gemma
0.00.603.737 I llm_load_print_meta: vocab type       = SPM
0.00.603.738 I llm_load_print_meta: n_vocab          = 256000
0.00.603.740 I llm_load_print_meta: n_merges         = 0
0.00.603.740 I llm_load_print_meta: vocab_only       = 0
0.00.603.741 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.742 I llm_load_print_meta: n_embd           = 2048
0.00.603.742 I llm_load_print_meta: n_layer          = 18
0.00.603.804 I llm_load_print_meta: n_head           = 8
0.00.603.812 I llm_load_print_meta: n_head_kv        = 1
0.00.603.812 I llm_load_print_meta: n_rot            = 256
0.00.603.813 I llm_load_print_meta: n_swa            = 0
0.00.603.813 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.813 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.842 I llm_load_print_meta: n_gqa            = 8
0.00.603.848 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.853 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.854 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.856 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.856 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.857 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.862 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.890 I llm_load_print_meta: n_ff             = 16384
0.00.603.896 I llm_load_print_meta: n_expert         = 0
0.00.603.896 I llm_load_print_meta: n_expert_used    = 0
0.00.603.907 I llm_load_print_meta: causal attn      = 1
0.00.603.907 I llm_load_print_meta: pooling type     = 0
0.00.603.908 I llm_load_print_meta: rope type        = 2
0.00.603.908 I llm_load_print_meta: rope scaling     = linear
0.00.603.912 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.913 I llm_load_print_meta: freq_scale_train = 1
0.00.603.913 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.913 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.914 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.914 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.914 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.915 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.915 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.916 I llm_load_print_meta: model type       = 2B
0.00.603.918 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.919 I llm_load_print_meta: model params     = 2.51 B
0.00.603.928 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.929 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.930 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.931 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.931 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.932 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.932 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.941 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.948 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.950 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.957 I llm_load_print_meta: max token length = 93
0.00.676.467 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.676.477 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.682.348 I llama_new_context_with_model: n_seq_max     = 1
0.00.682.353 I llama_new_context_with_model: n_ctx         = 4096
0.00.682.354 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.682.354 I llama_new_context_with_model: n_batch       = 2048
0.00.682.354 I llama_new_context_with_model: n_ubatch      = 512
0.00.682.355 I llama_new_context_with_model: flash_attn    = 0
0.00.682.357 I llama_new_context_with_model: freq_base     = 10000.0
0.00.682.358 I llama_new_context_with_model: freq_scale    = 1
0.00.682.358 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.698.415 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.698.455 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.698.581 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.701.121 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.701.125 I llama_new_context_with_model: graph nodes  = 601
0.00.701.126 I llama_new_context_with_model: graph splits = 1
0.00.701.149 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.787 I main: llama threadpool init, n_threads = 4
0.01.309.801 I 
0.01.309.904 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.908 I 
0.01.310.135 I sampler seed: 756298629
0.01.310.148 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.310.153 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.310.157 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.310.157 I 
 increabling and escalating to a crescendo of absurdity. [end of text]


0.05.970.862 I llama_perf_sampler_print:    sampling time =      16.78 ms /    12 runs   (    1.40 ms per token,   715.05 tokens per second)
0.05.970.881 I llama_perf_context_print:        load time =    1308.60 ms
0.05.970.883 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.970.885 I llama_perf_context_print:        eval time =    4629.11 ms /    11 runs   (  420.83 ms per token,     2.38 tokens per second)
0.05.970.886 I llama_perf_context_print:       total time =    4661.08 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m36.556s
user	1m39.628s
sys	0m9.342s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4050 (d05b3127)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198657.80 ms
main:    total time = 198657.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4050 (d05b3127) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.001.088 I main: load the model and apply lora adapter, if any
0.00.023.649 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.661 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.754 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.767 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.769 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.774 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.778 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.779 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.780 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.781 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.782 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.788 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.790 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.792 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.793 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.794 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.936 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.777 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.359 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.367 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.368 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.369 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.370 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.371 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.372 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.376 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.377 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.378 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.379 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.380 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.387 I llama_model_loader: - type  f32:   37 tensors
0.00.268.389 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.389 I llama_model_loader: - type q6_K:   19 tensors
0.00.440.658 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.943 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.827 I llm_load_vocab: special tokens cache size = 5
0.00.594.800 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.868 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.868 I llm_load_print_meta: arch             = gemma
0.00.594.869 I llm_load_print_meta: vocab type       = SPM
0.00.594.870 I llm_load_print_meta: n_vocab          = 256000
0.00.594.872 I llm_load_print_meta: n_merges         = 0
0.00.594.873 I llm_load_print_meta: vocab_only       = 0
0.00.594.873 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.874 I llm_load_print_meta: n_embd           = 2048
0.00.594.874 I llm_load_print_meta: n_layer          = 18
0.00.594.938 I llm_load_print_meta: n_head           = 8
0.00.594.945 I llm_load_print_meta: n_head_kv        = 1
0.00.594.945 I llm_load_print_meta: n_rot            = 256
0.00.594.946 I llm_load_print_meta: n_swa            = 0
0.00.594.946 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.946 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.969 I llm_load_print_meta: n_gqa            = 8
0.00.594.975 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.980 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.981 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.983 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.984 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.985 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.985 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.990 I llm_load_print_meta: n_ff             = 16384
0.00.594.991 I llm_load_print_meta: n_expert         = 0
0.00.594.991 I llm_load_print_meta: n_expert_used    = 0
0.00.594.992 I llm_load_print_meta: causal attn      = 1
0.00.594.992 I llm_load_print_meta: pooling type     = 0
0.00.594.993 I llm_load_print_meta: rope type        = 2
0.00.594.993 I llm_load_print_meta: rope scaling     = linear
0.00.594.995 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.996 I llm_load_print_meta: freq_scale_train = 1
0.00.594.996 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.997 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.997 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.997 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.998 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.998 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.999 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.000 I llm_load_print_meta: model type       = 2B
0.00.595.001 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.595.002 I llm_load_print_meta: model params     = 2.51 B
0.00.595.010 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.595.011 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.012 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.012 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.013 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.013 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.014 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.020 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.022 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.022 I llm_load_print_meta: max token length = 93
0.00.658.807 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.658.815 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.658.816 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.658.816 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.658.817 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.658.818 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.664.563 I llama_new_context_with_model: n_seq_max     = 1
0.00.664.570 I llama_new_context_with_model: n_ctx         = 4096
0.00.664.570 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.664.570 I llama_new_context_with_model: n_batch       = 2048
0.00.664.571 I llama_new_context_with_model: n_ubatch      = 512
0.00.664.571 I llama_new_context_with_model: flash_attn    = 0
0.00.664.573 I llama_new_context_with_model: freq_base     = 10000.0
0.00.664.574 I llama_new_context_with_model: freq_scale    = 1
0.00.664.575 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.681.592 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.681.631 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.681.753 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.684.295 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.684.299 I llama_new_context_with_model: graph nodes  = 601
0.00.684.299 I llama_new_context_with_model: graph splits = 1
0.00.684.323 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.254.705 I main: llama threadpool init, n_threads = 4
0.01.254.717 I 
0.01.254.822 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.254.826 I 
0.01.255.055 I sampler seed: 3801016305
0.01.255.068 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.255.074 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.255.077 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.255.077 I 
 increasities. [end of text]


0.02.613.901 I llama_perf_sampler_print:    sampling time =       6.10 ms /     5 runs   (    1.22 ms per token,   819.13 tokens per second)
0.02.613.906 I llama_perf_context_print:        load time =    1253.53 ms
0.02.613.908 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.613.910 I llama_perf_context_print:        eval time =    1346.58 ms /     4 runs   (  336.65 ms per token,     2.97 tokens per second)
0.02.613.911 I llama_perf_context_print:       total time =    1359.20 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4050 (d05b3127)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198627.18 ms
main:    total time = 198627.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4050 (d05b3127) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.001.082 I main: load the model and apply lora adapter, if any
0.00.023.497 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.594 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.607 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.609 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.613 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.617 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.618 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.619 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.620 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.621 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.627 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.628 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.629 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.631 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.633 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.473 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.224 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.725 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.734 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.735 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.736 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.737 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.738 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.740 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.744 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.745 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.752 I llama_model_loader: - type  f32:   37 tensors
0.00.269.754 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.755 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.308 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.621 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.529 I llm_load_vocab: special tokens cache size = 5
0.00.603.882 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.948 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.949 I llm_load_print_meta: arch             = gemma
0.00.603.949 I llm_load_print_meta: vocab type       = SPM
0.00.603.950 I llm_load_print_meta: n_vocab          = 256000
0.00.603.952 I llm_load_print_meta: n_merges         = 0
0.00.603.952 I llm_load_print_meta: vocab_only       = 0
0.00.603.953 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.953 I llm_load_print_meta: n_embd           = 2048
0.00.603.954 I llm_load_print_meta: n_layer          = 18
0.00.604.019 I llm_load_print_meta: n_head           = 8
0.00.604.026 I llm_load_print_meta: n_head_kv        = 1
0.00.604.027 I llm_load_print_meta: n_rot            = 256
0.00.604.028 I llm_load_print_meta: n_swa            = 0
0.00.604.028 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.029 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.033 I llm_load_print_meta: n_gqa            = 8
0.00.604.038 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.043 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.045 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.046 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.047 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.047 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.047 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.053 I llm_load_print_meta: n_ff             = 16384
0.00.604.053 I llm_load_print_meta: n_expert         = 0
0.00.604.054 I llm_load_print_meta: n_expert_used    = 0
0.00.604.054 I llm_load_print_meta: causal attn      = 1
0.00.604.055 I llm_load_print_meta: pooling type     = 0
0.00.604.055 I llm_load_print_meta: rope type        = 2
0.00.604.056 I llm_load_print_meta: rope scaling     = linear
0.00.604.058 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.059 I llm_load_print_meta: freq_scale_train = 1
0.00.604.060 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.060 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.060 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.061 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.061 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.062 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.062 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.062 I llm_load_print_meta: model type       = 2B
0.00.604.063 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.604.064 I llm_load_print_meta: model params     = 2.51 B
0.00.604.073 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.604.074 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.074 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.075 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.075 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.076 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.076 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.076 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.083 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.084 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.084 I llm_load_print_meta: max token length = 93
0.00.663.711 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.669.442 I llama_new_context_with_model: n_seq_max     = 1
0.00.669.449 I llama_new_context_with_model: n_ctx         = 4096
0.00.669.449 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.669.450 I llama_new_context_with_model: n_batch       = 2048
0.00.669.450 I llama_new_context_with_model: n_ubatch      = 512
0.00.669.451 I llama_new_context_with_model: flash_attn    = 0
0.00.669.452 I llama_new_context_with_model: freq_base     = 10000.0
0.00.669.453 I llama_new_context_with_model: freq_scale    = 1
0.00.669.454 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.685.861 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.685.902 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.686.021 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.688.595 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.688.599 I llama_new_context_with_model: graph nodes  = 601
0.00.688.600 I llama_new_context_with_model: graph splits = 1
0.00.688.624 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.262.030 I main: llama threadpool init, n_threads = 4
0.01.262.043 I 
0.01.262.149 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.262.153 I 
0.01.262.382 I sampler seed: 2307879217
0.01.262.395 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.262.402 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.262.405 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.262.405 I 
 seconally.

I'm trying to figure out how to make a custom function in JavaScript.

**Step 1: Create a Function Declaration**



0.12.169.749 I llama_perf_sampler_print:    sampling time =      48.11 ms /    33 runs   (    1.46 ms per token,   685.87 tokens per second)
0.12.169.753 I llama_perf_context_print:        load time =    1260.86 ms
0.12.169.755 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.169.757 I llama_perf_context_print:        eval time =   10818.28 ms /    32 runs   (  338.07 ms per token,     2.96 tokens per second)
0.12.169.758 I llama_perf_context_print:       total time =   10907.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m54.935s
user	49m33.250s
sys	0m6.241s
