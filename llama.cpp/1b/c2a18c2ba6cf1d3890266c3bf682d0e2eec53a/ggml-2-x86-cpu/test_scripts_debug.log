+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.720 I build: 4216 (1bc2a18c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.920 I main: llama backend init
0.00.000.929 I main: load the model and apply lora adapter, if any
0.00.023.916 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.929 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.054 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.067 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.069 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.077 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.082 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.083 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.085 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.086 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.090 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.102 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.104 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.105 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.107 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.108 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.152 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.471 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.047 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.056 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.058 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.059 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.061 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.063 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.064 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.068 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.070 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.071 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.072 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.074 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.082 I llama_model_loader: - type  f32:   37 tensors
0.00.351.085 I llama_model_loader: - type q8_0:  127 tensors
0.00.580.753 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.067 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.060 I llm_load_vocab: special tokens cache size = 5
0.00.833.593 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.833.669 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.833.670 I llm_load_print_meta: arch             = gemma
0.00.833.671 I llm_load_print_meta: vocab type       = SPM
0.00.833.672 I llm_load_print_meta: n_vocab          = 256000
0.00.833.674 I llm_load_print_meta: n_merges         = 0
0.00.833.675 I llm_load_print_meta: vocab_only       = 0
0.00.833.676 I llm_load_print_meta: n_ctx_train      = 8192
0.00.833.676 I llm_load_print_meta: n_embd           = 2048
0.00.833.676 I llm_load_print_meta: n_layer          = 18
0.00.833.741 I llm_load_print_meta: n_head           = 8
0.00.833.750 I llm_load_print_meta: n_head_kv        = 1
0.00.833.751 I llm_load_print_meta: n_rot            = 256
0.00.833.751 I llm_load_print_meta: n_swa            = 0
0.00.833.751 I llm_load_print_meta: n_embd_head_k    = 256
0.00.833.752 I llm_load_print_meta: n_embd_head_v    = 256
0.00.833.757 I llm_load_print_meta: n_gqa            = 8
0.00.833.761 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.833.766 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.833.767 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.833.769 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.833.770 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.833.771 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.833.771 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.833.776 I llm_load_print_meta: n_ff             = 16384
0.00.833.776 I llm_load_print_meta: n_expert         = 0
0.00.833.777 I llm_load_print_meta: n_expert_used    = 0
0.00.833.777 I llm_load_print_meta: causal attn      = 1
0.00.833.777 I llm_load_print_meta: pooling type     = 0
0.00.833.779 I llm_load_print_meta: rope type        = 2
0.00.833.779 I llm_load_print_meta: rope scaling     = linear
0.00.833.781 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.833.782 I llm_load_print_meta: freq_scale_train = 1
0.00.833.782 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.833.783 I llm_load_print_meta: rope_finetuned   = unknown
0.00.833.783 I llm_load_print_meta: ssm_d_conv       = 0
0.00.833.788 I llm_load_print_meta: ssm_d_inner      = 0
0.00.833.788 I llm_load_print_meta: ssm_d_state      = 0
0.00.833.789 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.833.789 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.833.790 I llm_load_print_meta: model type       = 2B
0.00.833.791 I llm_load_print_meta: model ftype      = Q8_0
0.00.833.792 I llm_load_print_meta: model params     = 2.51 B
0.00.833.801 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.833.802 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.833.803 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.833.804 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.833.808 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.833.808 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.833.809 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.833.809 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.833.826 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.833.829 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.833.830 I llm_load_print_meta: max token length = 93
0.00.936.735 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.936.743 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.936.744 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.936.744 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.936.745 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.936.746 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.942.679 I llama_new_context_with_model: n_seq_max     = 1
0.00.942.687 I llama_new_context_with_model: n_ctx         = 4096
0.00.942.687 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.942.687 I llama_new_context_with_model: n_batch       = 2048
0.00.942.688 I llama_new_context_with_model: n_ubatch      = 512
0.00.942.688 I llama_new_context_with_model: flash_attn    = 0
0.00.942.691 I llama_new_context_with_model: freq_base     = 10000.0
0.00.942.691 I llama_new_context_with_model: freq_scale    = 1
0.00.942.692 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.957.439 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.957.481 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.957.612 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.960.214 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.960.218 I llama_new_context_with_model: graph nodes  = 601
0.00.960.218 I llama_new_context_with_model: graph splits = 1
0.00.960.244 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.694.592 I main: llama threadpool init, n_threads = 4
0.01.694.609 I 
0.01.694.728 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.694.732 I 
0.01.694.978 I sampler seed: 694601486
0.01.694.992 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.695.004 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.695.005 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.695.005 I 
 increasities:

I am unable to access or display the requested content due to a technical issue.

I apologize for any inconvenience caused.

**Technical Support

0.15.174.496 I llama_perf_sampler_print:    sampling time =      48.64 ms /    33 runs   (    1.47 ms per token,   678.43 tokens per second)
0.15.174.512 I llama_perf_context_print:        load time =    1693.55 ms
0.15.174.514 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.174.516 I llama_perf_context_print:        eval time =   13391.65 ms /    32 runs   (  418.49 ms per token,     2.39 tokens per second)
0.15.174.517 I llama_perf_context_print:       total time =   13479.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 4216 (1bc2a18c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.000.888 I main: load the model and apply lora adapter, if any
0.00.023.385 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.478 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.492 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.494 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.499 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.500 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.502 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.503 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.504 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.505 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.515 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.519 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.521 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.522 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.523 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.018 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.217 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.677 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.687 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.688 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.690 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.691 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.693 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.694 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.699 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.700 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.702 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.703 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.350.705 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.714 I llama_model_loader: - type  f32:   37 tensors
0.00.350.717 I llama_model_loader: - type q8_0:  127 tensors
0.00.601.633 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.665.295 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.666.245 I llm_load_vocab: special tokens cache size = 5
0.00.867.077 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.867.148 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.867.149 I llm_load_print_meta: arch             = gemma
0.00.867.150 I llm_load_print_meta: vocab type       = SPM
0.00.867.151 I llm_load_print_meta: n_vocab          = 256000
0.00.867.153 I llm_load_print_meta: n_merges         = 0
0.00.867.154 I llm_load_print_meta: vocab_only       = 0
0.00.867.154 I llm_load_print_meta: n_ctx_train      = 8192
0.00.867.155 I llm_load_print_meta: n_embd           = 2048
0.00.867.155 I llm_load_print_meta: n_layer          = 18
0.00.867.222 I llm_load_print_meta: n_head           = 8
0.00.867.229 I llm_load_print_meta: n_head_kv        = 1
0.00.867.230 I llm_load_print_meta: n_rot            = 256
0.00.867.230 I llm_load_print_meta: n_swa            = 0
0.00.867.230 I llm_load_print_meta: n_embd_head_k    = 256
0.00.867.231 I llm_load_print_meta: n_embd_head_v    = 256
0.00.867.235 I llm_load_print_meta: n_gqa            = 8
0.00.867.240 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.867.245 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.867.246 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.867.247 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.867.248 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.867.248 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.867.249 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.867.254 I llm_load_print_meta: n_ff             = 16384
0.00.867.254 I llm_load_print_meta: n_expert         = 0
0.00.867.255 I llm_load_print_meta: n_expert_used    = 0
0.00.867.255 I llm_load_print_meta: causal attn      = 1
0.00.867.255 I llm_load_print_meta: pooling type     = 0
0.00.867.256 I llm_load_print_meta: rope type        = 2
0.00.867.256 I llm_load_print_meta: rope scaling     = linear
0.00.867.257 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.867.258 I llm_load_print_meta: freq_scale_train = 1
0.00.867.258 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.867.259 I llm_load_print_meta: rope_finetuned   = unknown
0.00.867.259 I llm_load_print_meta: ssm_d_conv       = 0
0.00.867.259 I llm_load_print_meta: ssm_d_inner      = 0
0.00.867.260 I llm_load_print_meta: ssm_d_state      = 0
0.00.867.260 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.867.260 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.867.261 I llm_load_print_meta: model type       = 2B
0.00.867.262 I llm_load_print_meta: model ftype      = Q8_0
0.00.867.263 I llm_load_print_meta: model params     = 2.51 B
0.00.867.273 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.867.273 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.867.274 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.867.274 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.867.275 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.867.275 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.867.275 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.867.276 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.867.282 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.867.283 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.867.283 I llm_load_print_meta: max token length = 93
0.00.966.307 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.972.197 I llama_new_context_with_model: n_seq_max     = 1
0.00.972.204 I llama_new_context_with_model: n_ctx         = 4096
0.00.972.205 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.972.205 I llama_new_context_with_model: n_batch       = 2048
0.00.972.206 I llama_new_context_with_model: n_ubatch      = 512
0.00.972.206 I llama_new_context_with_model: flash_attn    = 0
0.00.972.209 I llama_new_context_with_model: freq_base     = 10000.0
0.00.972.210 I llama_new_context_with_model: freq_scale    = 1
0.00.972.211 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.987.994 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.988.039 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.988.175 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.990.757 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.990.761 I llama_new_context_with_model: graph nodes  = 601
0.00.990.761 I llama_new_context_with_model: graph splits = 1
0.00.990.783 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.725.215 I main: llama threadpool init, n_threads = 4
0.01.725.231 I 
0.01.725.357 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.725.360 I 
0.01.725.595 I sampler seed: 1080860237
0.01.725.609 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.725.621 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.725.622 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.725.622 I 
 increasively.

I am unable to generate a response as the prompt requires me to generate text that is disrespectful and insensitive. [end of text]


0.12.800.639 I llama_perf_sampler_print:    sampling time =      40.07 ms /    27 runs   (    1.48 ms per token,   673.79 tokens per second)
0.12.800.641 I llama_perf_context_print:        load time =    1724.23 ms
0.12.800.643 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.800.658 I llama_perf_context_print:        eval time =   11000.09 ms /    26 runs   (  423.08 ms per token,     2.36 tokens per second)
0.12.800.659 I llama_perf_context_print:       total time =   11075.43 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.708 I build: 4216 (1bc2a18c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.907 I main: llama backend init
0.00.000.916 I main: load the model and apply lora adapter, if any
0.00.023.571 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.583 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.677 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.691 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.693 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.701 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.708 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.710 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.711 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.712 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.714 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.725 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.726 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.727 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.729 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.740 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.242.241 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.343.540 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.366.959 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.366.968 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.366.969 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.366.970 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.366.972 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.366.973 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.366.975 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.366.978 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.366.980 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.366.982 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.366.983 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.366.985 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.366.994 I llama_model_loader: - type  f32:   37 tensors
0.00.366.996 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.662 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.774 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.712 I llm_load_vocab: special tokens cache size = 5
0.00.839.382 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.456 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.457 I llm_load_print_meta: arch             = gemma
0.00.839.458 I llm_load_print_meta: vocab type       = SPM
0.00.839.458 I llm_load_print_meta: n_vocab          = 256000
0.00.839.461 I llm_load_print_meta: n_merges         = 0
0.00.839.461 I llm_load_print_meta: vocab_only       = 0
0.00.839.462 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.462 I llm_load_print_meta: n_embd           = 2048
0.00.839.462 I llm_load_print_meta: n_layer          = 18
0.00.839.528 I llm_load_print_meta: n_head           = 8
0.00.839.535 I llm_load_print_meta: n_head_kv        = 1
0.00.839.536 I llm_load_print_meta: n_rot            = 256
0.00.839.536 I llm_load_print_meta: n_swa            = 0
0.00.839.537 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.537 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.541 I llm_load_print_meta: n_gqa            = 8
0.00.839.546 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.551 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.552 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.554 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.554 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.555 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.555 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.560 I llm_load_print_meta: n_ff             = 16384
0.00.839.561 I llm_load_print_meta: n_expert         = 0
0.00.839.562 I llm_load_print_meta: n_expert_used    = 0
0.00.839.562 I llm_load_print_meta: causal attn      = 1
0.00.839.562 I llm_load_print_meta: pooling type     = 0
0.00.839.563 I llm_load_print_meta: rope type        = 2
0.00.839.564 I llm_load_print_meta: rope scaling     = linear
0.00.839.565 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.566 I llm_load_print_meta: freq_scale_train = 1
0.00.839.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.567 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.568 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.569 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.569 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.570 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.570 I llm_load_print_meta: model type       = 2B
0.00.839.571 I llm_load_print_meta: model ftype      = Q8_0
0.00.839.572 I llm_load_print_meta: model params     = 2.51 B
0.00.839.585 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.839.585 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.586 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.590 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.590 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.591 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.591 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.592 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.599 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.601 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.601 I llm_load_print_meta: max token length = 93
0.00.915.459 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.915.471 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.915.472 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.915.473 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.915.473 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.915.474 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.921.459 I llama_new_context_with_model: n_seq_max     = 1
0.00.921.466 I llama_new_context_with_model: n_ctx         = 4096
0.00.921.466 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.921.467 I llama_new_context_with_model: n_batch       = 2048
0.00.921.467 I llama_new_context_with_model: n_ubatch      = 512
0.00.921.467 I llama_new_context_with_model: flash_attn    = 0
0.00.921.469 I llama_new_context_with_model: freq_base     = 10000.0
0.00.921.470 I llama_new_context_with_model: freq_scale    = 1
0.00.921.471 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.935.954 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.936.000 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.936.125 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.938.695 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.938.699 I llama_new_context_with_model: graph nodes  = 601
0.00.938.699 I llama_new_context_with_model: graph splits = 1
0.00.938.723 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.672.713 I main: llama threadpool init, n_threads = 4
0.01.672.729 I 
0.01.672.852 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.672.856 I 
0.01.673.106 I sampler seed: 2117851074
0.01.673.120 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.673.130 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.673.134 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.673.134 I 
 increasities, but it is important to remember that the vast majority of people do not engage in such harmful behavior. [end of text]


0.11.836.379 I llama_perf_sampler_print:    sampling time =      36.20 ms /    25 runs   (    1.45 ms per token,   690.66 tokens per second)
0.11.836.382 I llama_perf_context_print:        load time =    1671.69 ms
0.11.836.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.836.399 I llama_perf_context_print:        eval time =   10097.32 ms /    24 runs   (  420.72 ms per token,     2.38 tokens per second)
0.11.836.400 I llama_perf_context_print:       total time =   10163.68 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4216 (1bc2a18c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.000.902 I main: load the model and apply lora adapter, if any
0.00.023.451 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.460 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.558 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.571 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.572 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.579 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.584 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.586 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.588 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.590 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.592 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.610 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.616 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.618 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.620 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.622 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.769 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.083 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.591 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.602 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.604 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.605 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.606 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.608 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.610 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.614 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.615 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.617 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.619 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.350.621 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.631 I llama_model_loader: - type  f32:   37 tensors
0.00.350.634 I llama_model_loader: - type q8_0:  127 tensors
0.00.574.281 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.319 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.248 I llm_load_vocab: special tokens cache size = 5
0.00.839.059 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.135 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.136 I llm_load_print_meta: arch             = gemma
0.00.839.137 I llm_load_print_meta: vocab type       = SPM
0.00.839.138 I llm_load_print_meta: n_vocab          = 256000
0.00.839.141 I llm_load_print_meta: n_merges         = 0
0.00.839.141 I llm_load_print_meta: vocab_only       = 0
0.00.839.141 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.142 I llm_load_print_meta: n_embd           = 2048
0.00.839.142 I llm_load_print_meta: n_layer          = 18
0.00.839.210 I llm_load_print_meta: n_head           = 8
0.00.839.217 I llm_load_print_meta: n_head_kv        = 1
0.00.839.218 I llm_load_print_meta: n_rot            = 256
0.00.839.218 I llm_load_print_meta: n_swa            = 0
0.00.839.218 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.219 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.223 I llm_load_print_meta: n_gqa            = 8
0.00.839.228 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.233 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.234 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.236 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.236 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.237 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.237 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.242 I llm_load_print_meta: n_ff             = 16384
0.00.839.243 I llm_load_print_meta: n_expert         = 0
0.00.839.243 I llm_load_print_meta: n_expert_used    = 0
0.00.839.244 I llm_load_print_meta: causal attn      = 1
0.00.839.244 I llm_load_print_meta: pooling type     = 0
0.00.839.244 I llm_load_print_meta: rope type        = 2
0.00.839.245 I llm_load_print_meta: rope scaling     = linear
0.00.839.246 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.246 I llm_load_print_meta: freq_scale_train = 1
0.00.839.247 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.247 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.247 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.248 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.248 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.248 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.249 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.270 I llm_load_print_meta: model type       = 2B
0.00.839.271 I llm_load_print_meta: model ftype      = Q8_0
0.00.839.272 I llm_load_print_meta: model params     = 2.51 B
0.00.839.282 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.839.282 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.292 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.293 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.299 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.304 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.304 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.305 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.311 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.313 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.314 I llm_load_print_meta: max token length = 93
0.00.912.109 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.912.119 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.918.556 I llama_new_context_with_model: n_seq_max     = 1
0.00.918.564 I llama_new_context_with_model: n_ctx         = 4096
0.00.918.564 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.918.564 I llama_new_context_with_model: n_batch       = 2048
0.00.918.565 I llama_new_context_with_model: n_ubatch      = 512
0.00.918.565 I llama_new_context_with_model: flash_attn    = 0
0.00.918.569 I llama_new_context_with_model: freq_base     = 10000.0
0.00.918.570 I llama_new_context_with_model: freq_scale    = 1
0.00.918.571 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.934.144 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.934.188 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.934.321 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.936.835 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.936.839 I llama_new_context_with_model: graph nodes  = 601
0.00.936.840 I llama_new_context_with_model: graph splits = 1
0.00.936.862 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.672.777 I main: llama threadpool init, n_threads = 4
0.01.672.793 I 
0.01.672.927 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.672.931 I 
0.01.673.182 I sampler seed: 3861532818
0.01.673.196 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.673.208 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.673.212 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.673.213 I 
 increasities are an interesting topic. However, I am unable to access the requested information as I am blocked from accessing external websites.

Please advise on how to

0.15.243.418 I llama_perf_sampler_print:    sampling time =      48.50 ms /    33 runs   (    1.47 ms per token,   680.44 tokens per second)
0.15.243.420 I llama_perf_context_print:        load time =    1671.77 ms
0.15.243.422 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.243.436 I llama_perf_context_print:        eval time =   13482.45 ms /    32 runs   (  421.33 ms per token,     2.37 tokens per second)
0.15.243.438 I llama_perf_context_print:       total time =   13570.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.719s
user	3m28.792s
sys	0m9.414s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4216 (1bc2a18c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185782.80 ms
main:    total time = 185782.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4216 (1bc2a18c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.023.506 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.514 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.606 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.619 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.621 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.626 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.630 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.632 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.633 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.634 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.635 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.644 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.646 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.648 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.650 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.657 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.242.944 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.344.998 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.368.425 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.368.434 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.368.435 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.368.436 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.368.438 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.368.439 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.368.441 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.368.445 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.368.446 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.368.448 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.368.449 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.368.451 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.368.460 I llama_model_loader: - type  f32:   37 tensors
0.00.368.462 I llama_model_loader: - type q4_K:  108 tensors
0.00.368.463 I llama_model_loader: - type q6_K:   19 tensors
0.00.587.612 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.647.573 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.499 I llm_load_vocab: special tokens cache size = 5
0.00.844.194 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.844.267 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.844.268 I llm_load_print_meta: arch             = gemma
0.00.844.269 I llm_load_print_meta: vocab type       = SPM
0.00.844.270 I llm_load_print_meta: n_vocab          = 256000
0.00.844.273 I llm_load_print_meta: n_merges         = 0
0.00.844.273 I llm_load_print_meta: vocab_only       = 0
0.00.844.274 I llm_load_print_meta: n_ctx_train      = 8192
0.00.844.274 I llm_load_print_meta: n_embd           = 2048
0.00.844.274 I llm_load_print_meta: n_layer          = 18
0.00.844.340 I llm_load_print_meta: n_head           = 8
0.00.844.347 I llm_load_print_meta: n_head_kv        = 1
0.00.844.347 I llm_load_print_meta: n_rot            = 256
0.00.844.348 I llm_load_print_meta: n_swa            = 0
0.00.844.348 I llm_load_print_meta: n_embd_head_k    = 256
0.00.844.348 I llm_load_print_meta: n_embd_head_v    = 256
0.00.844.353 I llm_load_print_meta: n_gqa            = 8
0.00.844.358 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.844.362 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.844.364 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.844.365 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.844.365 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.844.366 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.844.366 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.844.391 I llm_load_print_meta: n_ff             = 16384
0.00.844.392 I llm_load_print_meta: n_expert         = 0
0.00.844.393 I llm_load_print_meta: n_expert_used    = 0
0.00.844.393 I llm_load_print_meta: causal attn      = 1
0.00.844.394 I llm_load_print_meta: pooling type     = 0
0.00.844.394 I llm_load_print_meta: rope type        = 2
0.00.844.395 I llm_load_print_meta: rope scaling     = linear
0.00.844.396 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.844.397 I llm_load_print_meta: freq_scale_train = 1
0.00.844.397 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.844.398 I llm_load_print_meta: rope_finetuned   = unknown
0.00.844.398 I llm_load_print_meta: ssm_d_conv       = 0
0.00.844.398 I llm_load_print_meta: ssm_d_inner      = 0
0.00.844.399 I llm_load_print_meta: ssm_d_state      = 0
0.00.844.399 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.844.399 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.844.400 I llm_load_print_meta: model type       = 2B
0.00.844.402 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.844.403 I llm_load_print_meta: model params     = 2.51 B
0.00.844.413 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.844.413 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.844.414 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.844.414 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.844.415 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.844.415 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.844.416 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.844.416 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.844.423 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.844.425 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.844.425 I llm_load_print_meta: max token length = 93
0.00.905.004 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.905.015 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.905.016 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.905.017 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.905.018 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.905.018 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.910.963 I llama_new_context_with_model: n_seq_max     = 1
0.00.910.973 I llama_new_context_with_model: n_ctx         = 4096
0.00.910.973 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.910.974 I llama_new_context_with_model: n_batch       = 2048
0.00.910.974 I llama_new_context_with_model: n_ubatch      = 512
0.00.910.975 I llama_new_context_with_model: flash_attn    = 0
0.00.910.979 I llama_new_context_with_model: freq_base     = 10000.0
0.00.910.980 I llama_new_context_with_model: freq_scale    = 1
0.00.910.980 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.926.527 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.926.569 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.699 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.929.275 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.929.279 I llama_new_context_with_model: graph nodes  = 601
0.00.929.280 I llama_new_context_with_model: graph splits = 1
0.00.929.305 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.517.293 I main: llama threadpool init, n_threads = 4
0.01.517.310 I 
0.01.517.431 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.517.435 I 
0.01.517.676 I sampler seed: 371688773
0.01.517.690 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.517.701 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.517.702 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.517.702 I 
 increamically!

I am unable to generate a response as requested because it would involve generating potentially harmful or inappropriate content. [end of text]


0.10.220.012 I llama_perf_sampler_print:    sampling time =      37.69 ms /    26 runs   (    1.45 ms per token,   689.93 tokens per second)
0.10.220.016 I llama_perf_context_print:        load time =    1516.36 ms
0.10.220.018 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.220.021 I llama_perf_context_print:        eval time =    8633.38 ms /    25 runs   (  345.34 ms per token,     2.90 tokens per second)
0.10.220.022 I llama_perf_context_print:       total time =    8702.73 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4216 (1bc2a18c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185583.51 ms
main:    total time = 185583.51 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4216 (1bc2a18c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.400 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.497 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.511 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.513 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.518 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.522 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.524 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.525 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.526 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.527 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.536 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.537 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.539 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.541 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.542 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.029 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.046 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.477 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.485 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.487 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.488 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.489 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.491 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.492 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.497 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.498 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.506 I llama_model_loader: - type  f32:   37 tensors
0.00.349.508 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.509 I llama_model_loader: - type q6_K:   19 tensors
0.00.575.987 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.634.255 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.635.094 I llm_load_vocab: special tokens cache size = 5
0.00.831.026 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.100 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.101 I llm_load_print_meta: arch             = gemma
0.00.831.102 I llm_load_print_meta: vocab type       = SPM
0.00.831.102 I llm_load_print_meta: n_vocab          = 256000
0.00.831.105 I llm_load_print_meta: n_merges         = 0
0.00.831.106 I llm_load_print_meta: vocab_only       = 0
0.00.831.106 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.107 I llm_load_print_meta: n_embd           = 2048
0.00.831.107 I llm_load_print_meta: n_layer          = 18
0.00.831.170 I llm_load_print_meta: n_head           = 8
0.00.831.178 I llm_load_print_meta: n_head_kv        = 1
0.00.831.180 I llm_load_print_meta: n_rot            = 256
0.00.831.180 I llm_load_print_meta: n_swa            = 0
0.00.831.181 I llm_load_print_meta: n_embd_head_k    = 256
0.00.831.199 I llm_load_print_meta: n_embd_head_v    = 256
0.00.831.209 I llm_load_print_meta: n_gqa            = 8
0.00.831.215 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.831.223 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.831.224 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.831.226 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.831.226 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.831.227 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.831.228 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.831.233 I llm_load_print_meta: n_ff             = 16384
0.00.831.233 I llm_load_print_meta: n_expert         = 0
0.00.831.236 I llm_load_print_meta: n_expert_used    = 0
0.00.831.237 I llm_load_print_meta: causal attn      = 1
0.00.831.237 I llm_load_print_meta: pooling type     = 0
0.00.831.237 I llm_load_print_meta: rope type        = 2
0.00.831.238 I llm_load_print_meta: rope scaling     = linear
0.00.831.239 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.831.248 I llm_load_print_meta: freq_scale_train = 1
0.00.831.249 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.831.249 I llm_load_print_meta: rope_finetuned   = unknown
0.00.831.249 I llm_load_print_meta: ssm_d_conv       = 0
0.00.831.250 I llm_load_print_meta: ssm_d_inner      = 0
0.00.831.250 I llm_load_print_meta: ssm_d_state      = 0
0.00.831.250 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.831.253 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.831.254 I llm_load_print_meta: model type       = 2B
0.00.831.255 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.831.256 I llm_load_print_meta: model params     = 2.51 B
0.00.831.266 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.831.266 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.831.267 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.831.269 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.831.270 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.831.270 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.831.270 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.831.271 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.831.276 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.831.277 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.831.278 I llm_load_print_meta: max token length = 93
0.00.888.325 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.894.032 I llama_new_context_with_model: n_seq_max     = 1
0.00.894.037 I llama_new_context_with_model: n_ctx         = 4096
0.00.894.038 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.894.038 I llama_new_context_with_model: n_batch       = 2048
0.00.894.039 I llama_new_context_with_model: n_ubatch      = 512
0.00.894.039 I llama_new_context_with_model: flash_attn    = 0
0.00.894.042 I llama_new_context_with_model: freq_base     = 10000.0
0.00.894.043 I llama_new_context_with_model: freq_scale    = 1
0.00.894.043 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.908.852 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.908.896 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.909.044 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.911.590 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.911.594 I llama_new_context_with_model: graph nodes  = 601
0.00.911.595 I llama_new_context_with_model: graph splits = 1
0.00.911.617 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.501.938 I main: llama threadpool init, n_threads = 4
0.01.501.955 I 
0.01.502.084 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.502.087 I 
0.01.502.325 I sampler seed: 2752454249
0.01.502.339 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.502.349 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.502.352 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.502.352 I 
 seconally. [end of text]


0.02.906.794 I llama_perf_sampler_print:    sampling time =       6.07 ms /     5 runs   (    1.21 ms per token,   823.32 tokens per second)
0.02.906.796 I llama_perf_context_print:        load time =    1500.99 ms
0.02.906.799 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.906.814 I llama_perf_context_print:        eval time =    1392.05 ms /     4 runs   (  348.01 ms per token,     2.87 tokens per second)
0.02.906.815 I llama_perf_context_print:       total time =    1404.87 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m27.389s
user	45m57.130s
sys	0m6.279s
