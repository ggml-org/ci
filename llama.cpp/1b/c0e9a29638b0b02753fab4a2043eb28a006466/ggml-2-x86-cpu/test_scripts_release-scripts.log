+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.566 I build: 4172 (1bc0e9a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.021.351 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.361 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.368 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.373 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.373 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.377 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.377 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.378 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.378 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.379 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.380 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.384 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.384 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.385 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.386 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.386 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.298 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.179 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.068 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.075 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.076 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.076 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.077 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.078 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.079 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.082 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.083 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.084 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.084 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.085 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.088 I llama_model_loader: - type  f32:   37 tensors
0.00.132.089 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.455 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.152 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.726 I llm_load_vocab: special tokens cache size = 5
0.00.266.860 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.877 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.878 I llm_load_print_meta: arch             = gemma
0.00.266.878 I llm_load_print_meta: vocab type       = SPM
0.00.266.879 I llm_load_print_meta: n_vocab          = 256000
0.00.266.879 I llm_load_print_meta: n_merges         = 0
0.00.266.880 I llm_load_print_meta: vocab_only       = 0
0.00.266.880 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.880 I llm_load_print_meta: n_embd           = 2048
0.00.266.881 I llm_load_print_meta: n_layer          = 18
0.00.266.891 I llm_load_print_meta: n_head           = 8
0.00.266.892 I llm_load_print_meta: n_head_kv        = 1
0.00.266.893 I llm_load_print_meta: n_rot            = 256
0.00.266.893 I llm_load_print_meta: n_swa            = 0
0.00.266.893 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.894 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.894 I llm_load_print_meta: n_gqa            = 8
0.00.266.896 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.896 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.898 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.899 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.899 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.900 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.900 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.901 I llm_load_print_meta: n_ff             = 16384
0.00.266.901 I llm_load_print_meta: n_expert         = 0
0.00.266.901 I llm_load_print_meta: n_expert_used    = 0
0.00.266.902 I llm_load_print_meta: causal attn      = 1
0.00.266.902 I llm_load_print_meta: pooling type     = 0
0.00.266.902 I llm_load_print_meta: rope type        = 2
0.00.266.903 I llm_load_print_meta: rope scaling     = linear
0.00.266.905 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.905 I llm_load_print_meta: freq_scale_train = 1
0.00.266.905 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.906 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.906 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.906 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.907 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.907 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.907 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.908 I llm_load_print_meta: model type       = 2B
0.00.266.908 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.909 I llm_load_print_meta: model params     = 2.51 B
0.00.266.910 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.910 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.911 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.911 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.912 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.912 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.912 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.913 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.913 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.913 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.914 I llm_load_print_meta: max token length = 93
0.00.370.539 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.370.547 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.370.548 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.370.549 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.370.550 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.370.550 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.642 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.648 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.648 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.649 I llama_new_context_with_model: n_batch       = 2048
0.00.375.649 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.650 I llama_new_context_with_model: flash_attn    = 0
0.00.375.652 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.653 I llama_new_context_with_model: freq_scale    = 1
0.00.375.654 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.724 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.739 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.825 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.142 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.148 I llama_new_context_with_model: graph nodes  = 601
0.00.391.148 I llama_new_context_with_model: graph splits = 1
0.00.391.151 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.665 I main: llama threadpool init, n_threads = 4
0.00.478.683 I 
0.00.478.758 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.478.761 I 
0.00.478.809 I sampler seed: 3434521725
0.00.478.820 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.833 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.836 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.837 I 
 increamically with the speed of light. [end of text]


0.01.112.603 I llama_perf_sampler_print:    sampling time =       1.34 ms /    10 runs   (    0.13 ms per token,  7440.48 tokens per second)
0.01.112.606 I llama_perf_context_print:        load time =     477.87 ms
0.01.112.607 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.112.608 I llama_perf_context_print:        eval time =     627.69 ms /     9 runs   (   69.74 ms per token,    14.34 tokens per second)
0.01.112.609 I llama_perf_context_print:       total time =     633.95 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.538 I build: 4172 (1bc0e9a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.186 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.201 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.208 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.209 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.213 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.216 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.217 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.217 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.218 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.218 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.223 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.223 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.224 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.224 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.097 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.854 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.730 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.736 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.737 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.737 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.738 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.739 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.740 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.743 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.744 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.745 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.746 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.747 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.751 I llama_model_loader: - type  f32:   37 tensors
0.00.131.752 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.035 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.007 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.723 I llm_load_vocab: special tokens cache size = 5
0.00.275.965 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.986 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.986 I llm_load_print_meta: arch             = gemma
0.00.275.987 I llm_load_print_meta: vocab type       = SPM
0.00.275.988 I llm_load_print_meta: n_vocab          = 256000
0.00.275.988 I llm_load_print_meta: n_merges         = 0
0.00.275.988 I llm_load_print_meta: vocab_only       = 0
0.00.275.989 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.989 I llm_load_print_meta: n_embd           = 2048
0.00.275.989 I llm_load_print_meta: n_layer          = 18
0.00.276.002 I llm_load_print_meta: n_head           = 8
0.00.276.002 I llm_load_print_meta: n_head_kv        = 1
0.00.276.003 I llm_load_print_meta: n_rot            = 256
0.00.276.003 I llm_load_print_meta: n_swa            = 0
0.00.276.003 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.004 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.004 I llm_load_print_meta: n_gqa            = 8
0.00.276.005 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.007 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.007 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.009 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.009 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.010 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.010 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.011 I llm_load_print_meta: n_ff             = 16384
0.00.276.011 I llm_load_print_meta: n_expert         = 0
0.00.276.011 I llm_load_print_meta: n_expert_used    = 0
0.00.276.011 I llm_load_print_meta: causal attn      = 1
0.00.276.012 I llm_load_print_meta: pooling type     = 0
0.00.276.012 I llm_load_print_meta: rope type        = 2
0.00.276.012 I llm_load_print_meta: rope scaling     = linear
0.00.276.014 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.014 I llm_load_print_meta: freq_scale_train = 1
0.00.276.015 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.015 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.015 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.016 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.016 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.016 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.016 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.017 I llm_load_print_meta: model type       = 2B
0.00.276.017 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.018 I llm_load_print_meta: model params     = 2.51 B
0.00.276.019 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.019 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.019 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.020 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.020 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.021 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.021 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.021 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.022 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.022 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.022 I llm_load_print_meta: max token length = 93
0.00.371.948 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.376.999 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.004 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.004 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.005 I llama_new_context_with_model: n_batch       = 2048
0.00.377.005 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.006 I llama_new_context_with_model: flash_attn    = 0
0.00.377.008 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.009 I llama_new_context_with_model: freq_scale    = 1
0.00.377.009 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.391.905 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.391.918 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.017 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.280 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.287 I llama_new_context_with_model: graph nodes  = 601
0.00.393.287 I llama_new_context_with_model: graph splits = 1
0.00.393.289 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.379 I main: llama threadpool init, n_threads = 4
0.00.474.395 I 
0.00.474.471 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.474.474 I 
0.00.474.522 I sampler seed: 669215526
0.00.474.534 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.537 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.538 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.546 I 
 increasements, and other types of mental health challenges can affect a person's ability to learn and remember effectively.

**True or False?**

The

0.02.641.146 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6672.06 tokens per second)
0.02.641.148 I llama_perf_context_print:        load time =     473.61 ms
0.02.641.150 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.641.151 I llama_perf_context_print:        eval time =    2147.37 ms /    32 runs   (   67.11 ms per token,    14.90 tokens per second)
0.02.641.152 I llama_perf_context_print:       total time =    2166.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.182 I build: 4172 (1bc0e9a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.376 I main: llama backend init
0.00.000.382 I main: load the model and apply lora adapter, if any
0.00.021.030 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.039 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.047 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.053 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.054 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.058 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.059 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.059 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.060 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.060 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.061 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.066 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.066 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.067 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.067 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.068 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.039 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.364 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.329 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.334 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.335 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.335 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.336 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.337 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.338 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.340 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.341 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.342 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.342 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.343 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.346 I llama_model_loader: - type  f32:   37 tensors
0.00.132.347 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.263 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.244 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.723 I llm_load_vocab: special tokens cache size = 5
0.00.261.710 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.726 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.727 I llm_load_print_meta: arch             = gemma
0.00.261.727 I llm_load_print_meta: vocab type       = SPM
0.00.261.728 I llm_load_print_meta: n_vocab          = 256000
0.00.261.728 I llm_load_print_meta: n_merges         = 0
0.00.261.729 I llm_load_print_meta: vocab_only       = 0
0.00.261.729 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.729 I llm_load_print_meta: n_embd           = 2048
0.00.261.729 I llm_load_print_meta: n_layer          = 18
0.00.261.742 I llm_load_print_meta: n_head           = 8
0.00.261.742 I llm_load_print_meta: n_head_kv        = 1
0.00.261.743 I llm_load_print_meta: n_rot            = 256
0.00.261.743 I llm_load_print_meta: n_swa            = 0
0.00.261.744 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.744 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.745 I llm_load_print_meta: n_gqa            = 8
0.00.261.746 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.747 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.748 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.749 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.749 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.750 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.750 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.751 I llm_load_print_meta: n_ff             = 16384
0.00.261.751 I llm_load_print_meta: n_expert         = 0
0.00.261.751 I llm_load_print_meta: n_expert_used    = 0
0.00.261.752 I llm_load_print_meta: causal attn      = 1
0.00.261.752 I llm_load_print_meta: pooling type     = 0
0.00.261.752 I llm_load_print_meta: rope type        = 2
0.00.261.753 I llm_load_print_meta: rope scaling     = linear
0.00.261.754 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.755 I llm_load_print_meta: freq_scale_train = 1
0.00.261.755 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.755 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.756 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.756 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.756 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.756 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.757 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.757 I llm_load_print_meta: model type       = 2B
0.00.261.758 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.758 I llm_load_print_meta: model params     = 2.51 B
0.00.261.759 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.760 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.760 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.761 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.761 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.761 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.762 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.762 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.762 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.763 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.763 I llm_load_print_meta: max token length = 93
0.00.336.836 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.336.842 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.843 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.336.843 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.336.844 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.844 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.342.034 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.042 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.042 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.043 I llama_new_context_with_model: n_batch       = 2048
0.00.342.043 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.044 I llama_new_context_with_model: flash_attn    = 0
0.00.342.047 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.047 I llama_new_context_with_model: freq_scale    = 1
0.00.342.048 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.618 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.633 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.728 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.975 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.982 I llama_new_context_with_model: graph nodes  = 601
0.00.358.982 I llama_new_context_with_model: graph splits = 1
0.00.358.984 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.416 I main: llama threadpool init, n_threads = 4
0.00.445.431 I 
0.00.445.506 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.445.509 I 
0.00.445.556 I sampler seed: 4024207557
0.00.445.567 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.569 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.570 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.570 I 
 increasities. [end of text]


0.00.728.976 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7886.44 tokens per second)
0.00.728.979 I llama_perf_context_print:        load time =     445.00 ms
0.00.728.980 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.728.982 I llama_perf_context_print:        eval time =     280.09 ms /     4 runs   (   70.02 ms per token,    14.28 tokens per second)
0.00.728.982 I llama_perf_context_print:       total time =     283.57 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.170 I build: 4172 (1bc0e9a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.360 I main: llama backend init
0.00.000.366 I main: load the model and apply lora adapter, if any
0.00.021.496 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.507 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.516 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.521 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.522 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.525 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.526 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.526 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.527 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.527 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.528 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.532 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.532 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.533 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.533 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.534 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.199 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.587 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.434 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.441 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.442 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.442 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.443 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.444 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.444 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.447 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.448 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.449 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.450 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.451 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.454 I llama_model_loader: - type  f32:   37 tensors
0.00.133.455 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.184 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.260 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.791 I llm_load_vocab: special tokens cache size = 5
0.00.266.809 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.824 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.824 I llm_load_print_meta: arch             = gemma
0.00.266.825 I llm_load_print_meta: vocab type       = SPM
0.00.266.826 I llm_load_print_meta: n_vocab          = 256000
0.00.266.827 I llm_load_print_meta: n_merges         = 0
0.00.266.828 I llm_load_print_meta: vocab_only       = 0
0.00.266.844 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.845 I llm_load_print_meta: n_embd           = 2048
0.00.266.846 I llm_load_print_meta: n_layer          = 18
0.00.266.859 I llm_load_print_meta: n_head           = 8
0.00.266.860 I llm_load_print_meta: n_head_kv        = 1
0.00.266.860 I llm_load_print_meta: n_rot            = 256
0.00.266.860 I llm_load_print_meta: n_swa            = 0
0.00.266.861 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.861 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.862 I llm_load_print_meta: n_gqa            = 8
0.00.266.863 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.864 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.866 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.867 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.867 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.868 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.869 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.870 I llm_load_print_meta: n_ff             = 16384
0.00.266.870 I llm_load_print_meta: n_expert         = 0
0.00.266.870 I llm_load_print_meta: n_expert_used    = 0
0.00.266.870 I llm_load_print_meta: causal attn      = 1
0.00.266.871 I llm_load_print_meta: pooling type     = 0
0.00.266.871 I llm_load_print_meta: rope type        = 2
0.00.266.872 I llm_load_print_meta: rope scaling     = linear
0.00.266.874 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.874 I llm_load_print_meta: freq_scale_train = 1
0.00.266.875 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.875 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.875 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.875 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.876 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.876 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.877 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.877 I llm_load_print_meta: model type       = 2B
0.00.266.877 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.878 I llm_load_print_meta: model params     = 2.51 B
0.00.266.880 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.880 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.880 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.881 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.882 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.882 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.882 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.883 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.883 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.884 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.884 I llm_load_print_meta: max token length = 93
0.00.338.397 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.338.404 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.343.437 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.444 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.444 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.445 I llama_new_context_with_model: n_batch       = 2048
0.00.343.445 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.446 I llama_new_context_with_model: flash_attn    = 0
0.00.343.448 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.449 I llama_new_context_with_model: freq_scale    = 1
0.00.343.450 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.406 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.420 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.509 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.778 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.785 I llama_new_context_with_model: graph nodes  = 601
0.00.358.786 I llama_new_context_with_model: graph splits = 1
0.00.358.788 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.546 I main: llama threadpool init, n_threads = 4
0.00.447.562 I 
0.00.447.637 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.447.640 I 
0.00.447.681 I sampler seed: 2882639911
0.00.447.691 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.710 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.713 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.713 I 
 increasities.

I cannot answer this question as it is sexually suggestive in nature. [end of text]


0.01.812.402 I llama_perf_sampler_print:    sampling time =       2.94 ms /    19 runs   (    0.15 ms per token,  6460.39 tokens per second)
0.01.812.405 I llama_perf_context_print:        load time =     447.16 ms
0.01.812.406 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.812.408 I llama_perf_context_print:        eval time =    1353.26 ms /    18 runs   (   75.18 ms per token,    13.30 tokens per second)
0.01.812.408 I llama_perf_context_print:       total time =    1364.86 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.247s
user	0m20.679s
sys	0m9.354s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4172 (1bc0e9a2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40195.84 ms
main:    total time = 40195.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.527 I build: 4172 (1bc0e9a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.021.248 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.256 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.264 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.269 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.270 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.273 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.274 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.274 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.275 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.275 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.276 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.279 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.279 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.280 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.280 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.281 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.996 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.038 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.901 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.907 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.907 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.908 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.908 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.909 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.910 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.912 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.913 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.914 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.915 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.916 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.918 I llama_model_loader: - type  f32:   37 tensors
0.00.131.919 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.920 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.705 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.948 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.426 I llm_load_vocab: special tokens cache size = 5
0.00.262.323 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.341 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.342 I llm_load_print_meta: arch             = gemma
0.00.262.342 I llm_load_print_meta: vocab type       = SPM
0.00.262.343 I llm_load_print_meta: n_vocab          = 256000
0.00.262.344 I llm_load_print_meta: n_merges         = 0
0.00.262.344 I llm_load_print_meta: vocab_only       = 0
0.00.262.344 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.345 I llm_load_print_meta: n_embd           = 2048
0.00.262.345 I llm_load_print_meta: n_layer          = 18
0.00.262.356 I llm_load_print_meta: n_head           = 8
0.00.262.357 I llm_load_print_meta: n_head_kv        = 1
0.00.262.357 I llm_load_print_meta: n_rot            = 256
0.00.262.358 I llm_load_print_meta: n_swa            = 0
0.00.262.358 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.358 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.359 I llm_load_print_meta: n_gqa            = 8
0.00.262.360 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.361 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.362 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.363 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.364 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.364 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.364 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.365 I llm_load_print_meta: n_ff             = 16384
0.00.262.365 I llm_load_print_meta: n_expert         = 0
0.00.262.366 I llm_load_print_meta: n_expert_used    = 0
0.00.262.366 I llm_load_print_meta: causal attn      = 1
0.00.262.366 I llm_load_print_meta: pooling type     = 0
0.00.262.367 I llm_load_print_meta: rope type        = 2
0.00.262.367 I llm_load_print_meta: rope scaling     = linear
0.00.262.369 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.369 I llm_load_print_meta: freq_scale_train = 1
0.00.262.370 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.370 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.370 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.371 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.371 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.371 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.371 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.372 I llm_load_print_meta: model type       = 2B
0.00.262.372 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.373 I llm_load_print_meta: model params     = 2.51 B
0.00.262.374 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.374 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.375 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.375 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.375 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.376 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.376 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.376 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.377 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.377 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.377 I llm_load_print_meta: max token length = 93
0.00.323.080 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.087 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.087 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.088 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.089 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.089 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.306 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.312 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.313 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.313 I llama_new_context_with_model: n_batch       = 2048
0.00.328.313 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.314 I llama_new_context_with_model: flash_attn    = 0
0.00.328.316 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.318 I llama_new_context_with_model: freq_scale    = 1
0.00.328.319 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.812 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.827 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.924 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.240 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.246 I llama_new_context_with_model: graph nodes  = 601
0.00.344.247 I llama_new_context_with_model: graph splits = 1
0.00.344.249 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.554 I main: llama threadpool init, n_threads = 4
0.00.420.570 I 
0.00.420.647 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.420.650 I 
0.00.420.694 I sampler seed: 807250125
0.00.420.705 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.712 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.715 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.715 I 
 increably. [end of text]


0.00.618.816 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8143.32 tokens per second)
0.00.618.818 I llama_perf_context_print:        load time =     419.80 ms
0.00.618.819 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.618.821 I llama_perf_context_print:        eval time =     194.93 ms /     4 runs   (   48.73 ms per token,    20.52 tokens per second)
0.00.618.822 I llama_perf_context_print:       total time =     198.27 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4172 (1bc0e9a2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40171.56 ms
main:    total time = 40171.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.531 I build: 4172 (1bc0e9a2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.716 I main: llama backend init
0.00.000.722 I main: load the model and apply lora adapter, if any
0.00.021.284 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.300 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.306 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.310 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.313 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.314 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.314 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.315 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.315 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.316 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.320 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.320 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.321 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.321 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.322 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.891 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.584 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.387 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.393 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.394 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.394 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.395 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.396 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.396 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.399 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.399 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.402 I llama_model_loader: - type  f32:   37 tensors
0.00.131.403 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.403 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.378 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.526 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.007 I llm_load_vocab: special tokens cache size = 5
0.00.261.965 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.980 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.980 I llm_load_print_meta: arch             = gemma
0.00.261.981 I llm_load_print_meta: vocab type       = SPM
0.00.261.982 I llm_load_print_meta: n_vocab          = 256000
0.00.261.982 I llm_load_print_meta: n_merges         = 0
0.00.261.982 I llm_load_print_meta: vocab_only       = 0
0.00.261.983 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.983 I llm_load_print_meta: n_embd           = 2048
0.00.261.983 I llm_load_print_meta: n_layer          = 18
0.00.261.994 I llm_load_print_meta: n_head           = 8
0.00.261.994 I llm_load_print_meta: n_head_kv        = 1
0.00.261.995 I llm_load_print_meta: n_rot            = 256
0.00.261.995 I llm_load_print_meta: n_swa            = 0
0.00.261.995 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.996 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.997 I llm_load_print_meta: n_gqa            = 8
0.00.261.998 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.999 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.000 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.001 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.002 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.002 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.002 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.003 I llm_load_print_meta: n_ff             = 16384
0.00.262.003 I llm_load_print_meta: n_expert         = 0
0.00.262.004 I llm_load_print_meta: n_expert_used    = 0
0.00.262.004 I llm_load_print_meta: causal attn      = 1
0.00.262.004 I llm_load_print_meta: pooling type     = 0
0.00.262.005 I llm_load_print_meta: rope type        = 2
0.00.262.005 I llm_load_print_meta: rope scaling     = linear
0.00.262.007 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.007 I llm_load_print_meta: freq_scale_train = 1
0.00.262.008 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.008 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.008 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.009 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.009 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.010 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.010 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.010 I llm_load_print_meta: model type       = 2B
0.00.262.011 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.012 I llm_load_print_meta: model params     = 2.51 B
0.00.262.012 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.013 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.013 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.013 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.014 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.014 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.015 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.015 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.016 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.016 I llm_load_print_meta: max token length = 93
0.00.318.683 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.323.921 I llama_new_context_with_model: n_seq_max     = 1
0.00.323.928 I llama_new_context_with_model: n_ctx         = 4096
0.00.323.928 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.323.929 I llama_new_context_with_model: n_batch       = 2048
0.00.323.929 I llama_new_context_with_model: n_ubatch      = 512
0.00.323.930 I llama_new_context_with_model: flash_attn    = 0
0.00.323.932 I llama_new_context_with_model: freq_base     = 10000.0
0.00.323.933 I llama_new_context_with_model: freq_scale    = 1
0.00.323.934 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.240 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.338.254 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.338.343 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.339.572 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.339.578 I llama_new_context_with_model: graph nodes  = 601
0.00.339.579 I llama_new_context_with_model: graph splits = 1
0.00.339.580 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.713 I main: llama threadpool init, n_threads = 4
0.00.413.727 I 
0.00.413.798 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.413.801 I 
0.00.413.844 I sampler seed: 603743551
0.00.413.855 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.866 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.870 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.870 I 
 increamically.

The sentence should read:

The sentence should read: "The more we explore the unknown, the more we discover about ourselves and the world

0.01.966.935 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6475.67 tokens per second)
0.01.966.938 I llama_perf_context_print:        load time =     412.97 ms
0.01.966.940 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.966.942 I llama_perf_context_print:        eval time =    1533.64 ms /    32 runs   (   47.93 ms per token,    20.87 tokens per second)
0.01.966.945 I llama_perf_context_print:       total time =    1553.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.739s
user	10m18.152s
sys	0m6.978s
