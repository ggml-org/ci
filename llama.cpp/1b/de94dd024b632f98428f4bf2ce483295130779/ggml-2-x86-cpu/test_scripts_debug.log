+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 3911 (1bde94dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
0.00.024.751 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.959 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.047 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.057 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.059 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.063 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.066 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.067 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.068 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.069 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.070 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.077 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.078 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.079 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.080 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.081 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.440 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.365 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.523 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.530 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.531 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.532 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.533 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.535 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.536 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.539 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.540 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.541 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.542 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.543 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.550 I llama_model_loader: - type  f32:   37 tensors
0.00.268.554 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.836 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.314 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.306 I llm_load_vocab: special tokens cache size = 5
0.00.594.179 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.245 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.246 I llm_load_print_meta: arch             = gemma
0.00.594.246 I llm_load_print_meta: vocab type       = SPM
0.00.594.247 I llm_load_print_meta: n_vocab          = 256000
0.00.594.249 I llm_load_print_meta: n_merges         = 0
0.00.594.250 I llm_load_print_meta: vocab_only       = 0
0.00.594.250 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.251 I llm_load_print_meta: n_embd           = 2048
0.00.594.251 I llm_load_print_meta: n_layer          = 18
0.00.594.314 I llm_load_print_meta: n_head           = 8
0.00.594.322 I llm_load_print_meta: n_head_kv        = 1
0.00.594.323 I llm_load_print_meta: n_rot            = 256
0.00.594.324 I llm_load_print_meta: n_swa            = 0
0.00.594.325 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.325 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.330 I llm_load_print_meta: n_gqa            = 8
0.00.594.334 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.343 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.344 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.345 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.346 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.346 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.347 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.352 I llm_load_print_meta: n_ff             = 16384
0.00.594.353 I llm_load_print_meta: n_expert         = 0
0.00.594.353 I llm_load_print_meta: n_expert_used    = 0
0.00.594.353 I llm_load_print_meta: causal attn      = 1
0.00.594.353 I llm_load_print_meta: pooling type     = 0
0.00.594.354 I llm_load_print_meta: rope type        = 2
0.00.594.355 I llm_load_print_meta: rope scaling     = linear
0.00.594.357 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.358 I llm_load_print_meta: freq_scale_train = 1
0.00.594.359 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.359 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.360 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.360 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.360 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.361 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.361 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.365 I llm_load_print_meta: model type       = 2B
0.00.594.365 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.366 I llm_load_print_meta: model params     = 2.51 B
0.00.594.367 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.367 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.368 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.368 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.369 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.369 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.370 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.370 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.375 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.377 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.377 I llm_load_print_meta: max token length = 93
0.00.594.540 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.694.685 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.694.694 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.694.695 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.694.696 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.694.696 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.694.697 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.700.284 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.291 I llama_new_context_with_model: n_batch    = 2048
0.00.700.291 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.292 I llama_new_context_with_model: flash_attn = 0
0.00.700.294 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.295 I llama_new_context_with_model: freq_scale = 1
0.00.728.921 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.728.966 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.502 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.730.506 I llama_new_context_with_model: graph nodes  = 601
0.00.730.507 I llama_new_context_with_model: graph splits = 1
0.00.730.522 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.812 I main: llama threadpool init, n_threads = 4
0.01.343.823 I 
0.01.343.933 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.936 I 
0.01.344.103 I sampler seed: 784922400
0.01.344.113 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.121 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.344.121 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.122 I 
 increasities, and the overall lack of respect for women are all unacceptable.

These are serious issues that need to be addressed by all of us, regardless of

0.14.854.362 I llama_perf_sampler_print:    sampling time =      49.29 ms /    33 runs   (    1.49 ms per token,   669.52 tokens per second)
0.14.854.380 I llama_perf_context_print:        load time =    1340.91 ms
0.14.854.382 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.854.384 I llama_perf_context_print:        eval time =   13429.24 ms /    32 runs   (  419.66 ms per token,     2.38 tokens per second)
0.14.854.390 I llama_perf_context_print:       total time =   13510.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 3911 (1bde94dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.002.827 I main: load the model and apply lora adapter, if any
0.00.024.957 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.056 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.071 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.074 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.080 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.082 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.083 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.086 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.088 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.089 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.098 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.100 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.104 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.106 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.107 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.195 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.362 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.542 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.550 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.555 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.556 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.560 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.562 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.563 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.565 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.576 I llama_model_loader: - type  f32:   37 tensors
0.00.269.580 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.966 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.888 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.921 I llm_load_vocab: special tokens cache size = 5
0.00.591.847 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.917 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.918 I llm_load_print_meta: arch             = gemma
0.00.591.918 I llm_load_print_meta: vocab type       = SPM
0.00.591.919 I llm_load_print_meta: n_vocab          = 256000
0.00.591.921 I llm_load_print_meta: n_merges         = 0
0.00.591.922 I llm_load_print_meta: vocab_only       = 0
0.00.591.922 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.923 I llm_load_print_meta: n_embd           = 2048
0.00.591.923 I llm_load_print_meta: n_layer          = 18
0.00.591.987 I llm_load_print_meta: n_head           = 8
0.00.591.997 I llm_load_print_meta: n_head_kv        = 1
0.00.591.998 I llm_load_print_meta: n_rot            = 256
0.00.591.999 I llm_load_print_meta: n_swa            = 0
0.00.591.999 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.000 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.006 I llm_load_print_meta: n_gqa            = 8
0.00.592.012 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.028 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.030 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.035 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.036 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.037 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.037 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.049 I llm_load_print_meta: n_ff             = 16384
0.00.592.050 I llm_load_print_meta: n_expert         = 0
0.00.592.050 I llm_load_print_meta: n_expert_used    = 0
0.00.592.052 I llm_load_print_meta: causal attn      = 1
0.00.592.053 I llm_load_print_meta: pooling type     = 0
0.00.592.053 I llm_load_print_meta: rope type        = 2
0.00.592.054 I llm_load_print_meta: rope scaling     = linear
0.00.592.056 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.058 I llm_load_print_meta: freq_scale_train = 1
0.00.592.058 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.059 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.059 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.077 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.078 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.079 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.080 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.082 I llm_load_print_meta: model type       = 2B
0.00.592.092 I llm_load_print_meta: model ftype      = Q8_0
0.00.592.094 I llm_load_print_meta: model params     = 2.51 B
0.00.592.095 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.592.096 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.097 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.098 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.098 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.099 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.099 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.100 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.107 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.109 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.109 I llm_load_print_meta: max token length = 93
0.00.592.292 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.686.776 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.692.636 I llama_new_context_with_model: n_ctx      = 8192
0.00.692.644 I llama_new_context_with_model: n_batch    = 2048
0.00.692.644 I llama_new_context_with_model: n_ubatch   = 512
0.00.692.645 I llama_new_context_with_model: flash_attn = 0
0.00.692.647 I llama_new_context_with_model: freq_base  = 10000.0
0.00.692.648 I llama_new_context_with_model: freq_scale = 1
0.00.721.244 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.721.294 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.721.416 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.800 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.722.805 I llama_new_context_with_model: graph nodes  = 601
0.00.722.806 I llama_new_context_with_model: graph splits = 1
0.00.722.821 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.336.825 I main: llama threadpool init, n_threads = 4
0.01.336.837 I 
0.01.336.964 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.336.968 I 
0.01.337.143 I sampler seed: 84448956
0.01.337.154 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.337.161 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.337.162 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.337.172 I 
 increasities that threaten the fabric of society. This is where the hero emerges, wielding their powers to restore balance and prevent the impending apocalypse. [end of text]


0.13.763.824 I llama_perf_sampler_print:    sampling time =      45.03 ms /    30 runs   (    1.50 ms per token,   666.28 tokens per second)
0.13.763.827 I llama_perf_context_print:        load time =    1333.90 ms
0.13.763.828 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.763.830 I llama_perf_context_print:        eval time =   12352.50 ms /    29 runs   (  425.95 ms per token,     2.35 tokens per second)
0.13.763.831 I llama_perf_context_print:       total time =   12427.01 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 3911 (1bde94dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.002.836 I main: load the model and apply lora adapter, if any
0.00.024.998 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.221 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.314 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.326 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.327 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.332 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.336 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.337 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.340 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.342 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.344 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.353 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.358 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.360 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.361 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.363 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.828 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.663 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.824 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.833 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.834 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.835 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.836 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.838 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.839 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.842 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.843 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.845 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.845 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.847 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.854 I llama_model_loader: - type  f32:   37 tensors
0.00.268.859 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.270 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.267 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.316 I llm_load_vocab: special tokens cache size = 5
0.00.589.457 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.527 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.528 I llm_load_print_meta: arch             = gemma
0.00.589.528 I llm_load_print_meta: vocab type       = SPM
0.00.589.529 I llm_load_print_meta: n_vocab          = 256000
0.00.589.531 I llm_load_print_meta: n_merges         = 0
0.00.589.532 I llm_load_print_meta: vocab_only       = 0
0.00.589.532 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.533 I llm_load_print_meta: n_embd           = 2048
0.00.589.533 I llm_load_print_meta: n_layer          = 18
0.00.589.599 I llm_load_print_meta: n_head           = 8
0.00.589.605 I llm_load_print_meta: n_head_kv        = 1
0.00.589.606 I llm_load_print_meta: n_rot            = 256
0.00.589.607 I llm_load_print_meta: n_swa            = 0
0.00.589.608 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.608 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.613 I llm_load_print_meta: n_gqa            = 8
0.00.589.617 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.623 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.624 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.626 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.627 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.651 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.653 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.662 I llm_load_print_meta: n_ff             = 16384
0.00.589.664 I llm_load_print_meta: n_expert         = 0
0.00.589.664 I llm_load_print_meta: n_expert_used    = 0
0.00.589.665 I llm_load_print_meta: causal attn      = 1
0.00.589.665 I llm_load_print_meta: pooling type     = 0
0.00.589.666 I llm_load_print_meta: rope type        = 2
0.00.589.667 I llm_load_print_meta: rope scaling     = linear
0.00.589.669 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.670 I llm_load_print_meta: freq_scale_train = 1
0.00.589.670 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.671 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.672 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.672 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.673 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.674 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.674 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.676 I llm_load_print_meta: model type       = 2B
0.00.589.678 I llm_load_print_meta: model ftype      = Q8_0
0.00.589.679 I llm_load_print_meta: model params     = 2.51 B
0.00.589.680 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.589.681 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.682 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.683 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.684 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.684 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.685 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.686 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.692 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.695 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.695 I llm_load_print_meta: max token length = 93
0.00.589.872 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.667.496 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.667.507 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.667.508 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.667.508 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.667.509 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.667.510 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.673.362 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.369 I llama_new_context_with_model: n_batch    = 2048
0.00.673.369 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.370 I llama_new_context_with_model: flash_attn = 0
0.00.673.372 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.373 I llama_new_context_with_model: freq_scale = 1
0.00.703.445 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.703.488 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.703.614 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.705.011 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.016 I llama_new_context_with_model: graph nodes  = 601
0.00.705.017 I llama_new_context_with_model: graph splits = 1
0.00.705.031 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.318.164 I main: llama threadpool init, n_threads = 4
0.01.318.176 I 
0.01.318.296 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.300 I 
0.01.318.478 I sampler seed: 2869203644
0.01.318.489 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.497 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.318.498 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.318.498 I 
 increasively, and eventually swallowed the entire world.

What is the message?

The message is that even the most powerful things in the world can be destroyed

0.14.892.887 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.85 tokens per second)
0.14.892.891 I llama_perf_context_print:        load time =    1315.23 ms
0.14.892.903 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.892.905 I llama_perf_context_print:        eval time =   13493.51 ms /    32 runs   (  421.67 ms per token,     2.37 tokens per second)
0.14.892.907 I llama_perf_context_print:       total time =   13574.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 3911 (1bde94dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.024.847 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.060 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.156 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.168 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.170 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.174 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.177 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.178 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.180 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.183 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.185 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.194 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.196 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.198 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.200 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.202 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.325 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.492 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.500 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.501 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.502 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.503 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.505 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.506 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.509 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.510 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.511 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.512 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.513 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.521 I llama_model_loader: - type  f32:   37 tensors
0.00.269.525 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.694 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.248 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.296 I llm_load_vocab: special tokens cache size = 5
0.00.591.135 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.206 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.206 I llm_load_print_meta: arch             = gemma
0.00.591.207 I llm_load_print_meta: vocab type       = SPM
0.00.591.208 I llm_load_print_meta: n_vocab          = 256000
0.00.591.210 I llm_load_print_meta: n_merges         = 0
0.00.591.210 I llm_load_print_meta: vocab_only       = 0
0.00.591.211 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.211 I llm_load_print_meta: n_embd           = 2048
0.00.591.212 I llm_load_print_meta: n_layer          = 18
0.00.591.276 I llm_load_print_meta: n_head           = 8
0.00.591.283 I llm_load_print_meta: n_head_kv        = 1
0.00.591.284 I llm_load_print_meta: n_rot            = 256
0.00.591.284 I llm_load_print_meta: n_swa            = 0
0.00.591.285 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.286 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.290 I llm_load_print_meta: n_gqa            = 8
0.00.591.296 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.300 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.302 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.307 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.307 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.307 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.309 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.314 I llm_load_print_meta: n_ff             = 16384
0.00.591.323 I llm_load_print_meta: n_expert         = 0
0.00.591.324 I llm_load_print_meta: n_expert_used    = 0
0.00.591.324 I llm_load_print_meta: causal attn      = 1
0.00.591.339 I llm_load_print_meta: pooling type     = 0
0.00.591.343 I llm_load_print_meta: rope type        = 2
0.00.591.344 I llm_load_print_meta: rope scaling     = linear
0.00.591.345 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.346 I llm_load_print_meta: freq_scale_train = 1
0.00.591.346 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.347 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.347 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.348 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.348 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.349 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.349 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.358 I llm_load_print_meta: model type       = 2B
0.00.591.360 I llm_load_print_meta: model ftype      = Q8_0
0.00.591.368 I llm_load_print_meta: model params     = 2.51 B
0.00.591.369 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.591.370 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.370 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.371 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.371 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.372 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.373 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.373 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.379 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.387 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.388 I llm_load_print_meta: max token length = 93
0.00.591.563 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.662.858 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.662.868 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.668.666 I llama_new_context_with_model: n_ctx      = 8192
0.00.668.673 I llama_new_context_with_model: n_batch    = 2048
0.00.668.674 I llama_new_context_with_model: n_ubatch   = 512
0.00.668.674 I llama_new_context_with_model: flash_attn = 0
0.00.668.677 I llama_new_context_with_model: freq_base  = 10000.0
0.00.668.677 I llama_new_context_with_model: freq_scale = 1
0.00.697.458 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.697.503 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.697.620 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.982 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.986 I llama_new_context_with_model: graph nodes  = 601
0.00.698.987 I llama_new_context_with_model: graph splits = 1
0.00.699.002 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.310.127 I main: llama threadpool init, n_threads = 4
0.01.310.140 I 
0.01.310.258 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.310.264 I 
0.01.310.436 I sampler seed: 2717923427
0.01.310.446 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.310.453 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.310.454 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.310.454 I 
 increasities with a charming and enigmatic demeanor. [end of text]


0.05.528.779 I llama_perf_sampler_print:    sampling time =      15.49 ms /    11 runs   (    1.41 ms per token,   710.14 tokens per second)
0.05.528.781 I llama_perf_context_print:        load time =    1307.21 ms
0.05.528.783 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.528.784 I llama_perf_context_print:        eval time =    4191.81 ms /    10 runs   (  419.18 ms per token,     2.39 tokens per second)
0.05.528.785 I llama_perf_context_print:       total time =    4218.66 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.601s
user	3m7.550s
sys	0m9.370s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3911 (1bde94dd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198348.07 ms
main:    total time = 198348.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3911 (1bde94dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.800 I main: load the model and apply lora adapter, if any
0.00.024.789 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.993 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.095 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.108 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.109 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.114 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.118 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.119 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.120 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.121 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.122 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.128 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.129 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.130 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.131 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.132 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.415 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.709 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.960 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.969 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.970 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.971 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.972 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.973 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.974 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.977 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.978 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.979 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.980 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.982 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.990 I llama_model_loader: - type  f32:   37 tensors
0.00.268.993 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.994 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.003 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.411 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.413 I llm_load_vocab: special tokens cache size = 5
0.00.609.294 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.364 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.365 I llm_load_print_meta: arch             = gemma
0.00.609.366 I llm_load_print_meta: vocab type       = SPM
0.00.609.367 I llm_load_print_meta: n_vocab          = 256000
0.00.609.369 I llm_load_print_meta: n_merges         = 0
0.00.609.369 I llm_load_print_meta: vocab_only       = 0
0.00.609.370 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.370 I llm_load_print_meta: n_embd           = 2048
0.00.609.370 I llm_load_print_meta: n_layer          = 18
0.00.609.432 I llm_load_print_meta: n_head           = 8
0.00.609.439 I llm_load_print_meta: n_head_kv        = 1
0.00.609.440 I llm_load_print_meta: n_rot            = 256
0.00.609.440 I llm_load_print_meta: n_swa            = 0
0.00.609.440 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.440 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.445 I llm_load_print_meta: n_gqa            = 8
0.00.609.450 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.455 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.456 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.457 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.458 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.458 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.460 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.464 I llm_load_print_meta: n_ff             = 16384
0.00.609.465 I llm_load_print_meta: n_expert         = 0
0.00.609.465 I llm_load_print_meta: n_expert_used    = 0
0.00.609.466 I llm_load_print_meta: causal attn      = 1
0.00.609.467 I llm_load_print_meta: pooling type     = 0
0.00.609.467 I llm_load_print_meta: rope type        = 2
0.00.609.468 I llm_load_print_meta: rope scaling     = linear
0.00.609.473 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.475 I llm_load_print_meta: freq_scale_train = 1
0.00.609.476 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.476 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.477 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.477 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.477 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.478 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.478 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.478 I llm_load_print_meta: model type       = 2B
0.00.609.479 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.609.480 I llm_load_print_meta: model params     = 2.51 B
0.00.609.481 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.609.482 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.482 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.486 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.486 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.487 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.487 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.487 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.493 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.494 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.514 I llm_load_print_meta: max token length = 93
0.00.609.682 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.669.865 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.669.873 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.669.874 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.669.875 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.669.876 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.669.876 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.675.498 I llama_new_context_with_model: n_ctx      = 8192
0.00.675.505 I llama_new_context_with_model: n_batch    = 2048
0.00.675.506 I llama_new_context_with_model: n_ubatch   = 512
0.00.675.506 I llama_new_context_with_model: flash_attn = 0
0.00.675.508 I llama_new_context_with_model: freq_base  = 10000.0
0.00.675.509 I llama_new_context_with_model: freq_scale = 1
0.00.704.851 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.897 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.011 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.396 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.401 I llama_new_context_with_model: graph nodes  = 601
0.00.706.402 I llama_new_context_with_model: graph splits = 1
0.00.706.417 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.027 I main: llama threadpool init, n_threads = 4
0.01.286.038 I 
0.01.286.149 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.153 I 
0.01.286.322 I sampler seed: 3736896987
0.01.286.333 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.340 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.286.340 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.286.341 I 
 seconally with the previous one, but I was unable to find the corresponding number. Perhaps it was a typo, or perhaps it was intentionally omitted.

I

0.12.193.187 I llama_perf_sampler_print:    sampling time =      49.10 ms /    33 runs   (    1.49 ms per token,   672.13 tokens per second)
0.12.193.190 I llama_perf_context_print:        load time =    1283.13 ms
0.12.193.191 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.193.214 I llama_perf_context_print:        eval time =   10825.82 ms /    32 runs   (  338.31 ms per token,     2.96 tokens per second)
0.12.193.215 I llama_perf_context_print:       total time =   10907.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3911 (1bde94dd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198603.88 ms
main:    total time = 198603.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 3911 (1bde94dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.024.603 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.697 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.711 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.713 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.717 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.719 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.721 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.722 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.723 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.724 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.730 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.742 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.744 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.746 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.747 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.504 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.947 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.073 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.081 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.082 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.083 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.084 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.086 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.087 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.090 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.091 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.099 I llama_model_loader: - type  f32:   37 tensors
0.00.268.104 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.104 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.446 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.100 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.096 I llm_load_vocab: special tokens cache size = 5
0.00.598.116 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.193 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.197 I llm_load_print_meta: arch             = gemma
0.00.598.197 I llm_load_print_meta: vocab type       = SPM
0.00.598.198 I llm_load_print_meta: n_vocab          = 256000
0.00.598.201 I llm_load_print_meta: n_merges         = 0
0.00.598.201 I llm_load_print_meta: vocab_only       = 0
0.00.598.202 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.202 I llm_load_print_meta: n_embd           = 2048
0.00.598.202 I llm_load_print_meta: n_layer          = 18
0.00.598.266 I llm_load_print_meta: n_head           = 8
0.00.598.276 I llm_load_print_meta: n_head_kv        = 1
0.00.598.277 I llm_load_print_meta: n_rot            = 256
0.00.598.278 I llm_load_print_meta: n_swa            = 0
0.00.598.278 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.278 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.284 I llm_load_print_meta: n_gqa            = 8
0.00.598.288 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.293 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.297 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.298 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.298 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.299 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.299 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.304 I llm_load_print_meta: n_ff             = 16384
0.00.598.305 I llm_load_print_meta: n_expert         = 0
0.00.598.305 I llm_load_print_meta: n_expert_used    = 0
0.00.598.306 I llm_load_print_meta: causal attn      = 1
0.00.598.306 I llm_load_print_meta: pooling type     = 0
0.00.598.306 I llm_load_print_meta: rope type        = 2
0.00.598.307 I llm_load_print_meta: rope scaling     = linear
0.00.598.309 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.310 I llm_load_print_meta: freq_scale_train = 1
0.00.598.310 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.311 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.312 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.312 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.312 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.313 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.314 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.314 I llm_load_print_meta: model type       = 2B
0.00.598.315 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.598.316 I llm_load_print_meta: model params     = 2.51 B
0.00.598.316 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.598.317 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.318 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.318 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.319 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.320 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.320 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.321 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.326 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.328 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.328 I llm_load_print_meta: max token length = 93
0.00.598.496 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.658.104 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.663.635 I llama_new_context_with_model: n_ctx      = 8192
0.00.663.642 I llama_new_context_with_model: n_batch    = 2048
0.00.663.643 I llama_new_context_with_model: n_ubatch   = 512
0.00.663.643 I llama_new_context_with_model: flash_attn = 0
0.00.663.646 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.647 I llama_new_context_with_model: freq_scale = 1
0.00.694.519 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.694.566 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.694.685 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.696.063 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.696.068 I llama_new_context_with_model: graph nodes  = 601
0.00.696.069 I llama_new_context_with_model: graph splits = 1
0.00.696.084 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.276.059 I main: llama threadpool init, n_threads = 4
0.01.276.069 I 
0.01.276.173 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.276.177 I 
0.01.276.341 I sampler seed: 3011680465
0.01.276.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.276.360 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.276.361 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.276.361 I 
 encompasses. [end of text]


0.02.655.554 I llama_perf_sampler_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   803.34 tokens per second)
0.02.655.556 I llama_perf_context_print:        load time =    1273.19 ms
0.02.655.558 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.655.559 I llama_perf_context_print:        eval time =    1367.51 ms /     4 runs   (  341.88 ms per token,     2.93 tokens per second)
0.02.655.560 I llama_perf_context_print:       total time =    1379.50 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m54.670s
user	49m27.805s
sys	0m6.250s
