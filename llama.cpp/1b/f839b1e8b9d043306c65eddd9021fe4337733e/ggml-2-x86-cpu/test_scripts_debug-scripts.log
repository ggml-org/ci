+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4448 (1bf839b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.085.649 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.662 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.756 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.774 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.776 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.781 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.783 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.785 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.786 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.801 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.804 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.811 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.813 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.814 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.816 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.818 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.288.709 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.476 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.611 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.623 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.625 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.627 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.629 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.631 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.633 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.638 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.639 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.414.642 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.644 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.414.645 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.414.654 I llama_model_loader: - type  f32:   37 tensors
0.00.414.656 I llama_model_loader: - type q8_0:  127 tensors
0.00.686.837 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.815.578 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.816.601 I llm_load_vocab: special tokens cache size = 5
0.01.025.355 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.025.439 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.025.444 I llm_load_print_meta: arch             = gemma
0.01.025.445 I llm_load_print_meta: vocab type       = SPM
0.01.025.446 I llm_load_print_meta: n_vocab          = 256000
0.01.025.448 I llm_load_print_meta: n_merges         = 0
0.01.025.449 I llm_load_print_meta: vocab_only       = 0
0.01.025.449 I llm_load_print_meta: n_ctx_train      = 8192
0.01.025.450 I llm_load_print_meta: n_embd           = 2048
0.01.025.450 I llm_load_print_meta: n_layer          = 18
0.01.025.532 I llm_load_print_meta: n_head           = 8
0.01.025.542 I llm_load_print_meta: n_head_kv        = 1
0.01.025.543 I llm_load_print_meta: n_rot            = 256
0.01.025.544 I llm_load_print_meta: n_swa            = 0
0.01.025.544 I llm_load_print_meta: n_embd_head_k    = 256
0.01.025.545 I llm_load_print_meta: n_embd_head_v    = 256
0.01.025.550 I llm_load_print_meta: n_gqa            = 8
0.01.025.554 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.025.560 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.025.562 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.025.563 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.025.564 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.025.564 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.025.564 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.025.569 I llm_load_print_meta: n_ff             = 16384
0.01.025.570 I llm_load_print_meta: n_expert         = 0
0.01.025.571 I llm_load_print_meta: n_expert_used    = 0
0.01.025.572 I llm_load_print_meta: causal attn      = 1
0.01.025.572 I llm_load_print_meta: pooling type     = 0
0.01.025.572 I llm_load_print_meta: rope type        = 2
0.01.025.573 I llm_load_print_meta: rope scaling     = linear
0.01.025.574 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.025.575 I llm_load_print_meta: freq_scale_train = 1
0.01.025.576 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.025.577 I llm_load_print_meta: rope_finetuned   = unknown
0.01.025.589 I llm_load_print_meta: ssm_d_conv       = 0
0.01.025.590 I llm_load_print_meta: ssm_d_inner      = 0
0.01.025.590 I llm_load_print_meta: ssm_d_state      = 0
0.01.025.602 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.025.603 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.025.605 I llm_load_print_meta: model type       = 2B
0.01.025.607 I llm_load_print_meta: model ftype      = Q8_0
0.01.025.608 I llm_load_print_meta: model params     = 2.51 B
0.01.025.609 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.025.609 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.025.610 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.025.610 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.025.611 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.025.612 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.025.615 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.025.616 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.025.623 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.025.624 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.025.625 I llm_load_print_meta: max token length = 93
0.01.129.153 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.129.162 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.129.163 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.129.163 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.129.164 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.129.165 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.136.161 I llama_new_context_with_model: n_seq_max     = 1
0.01.136.167 I llama_new_context_with_model: n_ctx         = 4096
0.01.136.167 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.136.168 I llama_new_context_with_model: n_batch       = 2048
0.01.136.168 I llama_new_context_with_model: n_ubatch      = 512
0.01.136.168 I llama_new_context_with_model: flash_attn    = 0
0.01.136.171 I llama_new_context_with_model: freq_base     = 10000.0
0.01.136.171 I llama_new_context_with_model: freq_scale    = 1
0.01.136.172 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.136.250 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.151.268 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.151.315 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.151.437 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.154.667 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.154.671 I llama_new_context_with_model: graph nodes  = 601
0.01.154.672 I llama_new_context_with_model: graph splits = 1
0.01.154.698 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.154.703 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.767.956 I main: llama threadpool init, n_threads = 4
0.01.767.975 I 
0.01.768.093 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.768.097 I 
0.01.768.328 I sampler seed: 821575866
0.01.768.342 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.768.354 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.768.354 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.768.355 I 
 increasities and anxieties about aging, death, and the meaning of life.

**Answer:**

**The human experience is a tapestry woven with threads of joy

0.15.365.500 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.42 tokens per second)
0.15.365.503 I llama_perf_context_print:        load time =    1767.02 ms
0.15.365.504 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.365.506 I llama_perf_context_print:        eval time =   13512.02 ms /    32 runs   (  422.25 ms per token,     2.37 tokens per second)
0.15.365.527 I llama_perf_context_print:       total time =   13597.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.614 I build: 4448 (1bf839b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.833 I main: load the model and apply lora adapter, if any
0.00.085.132 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.085.230 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.250 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.252 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.257 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.258 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.260 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.262 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.264 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.266 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.273 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.274 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.276 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.278 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.279 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.510 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.562 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.959 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.979 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.981 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.982 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.984 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.986 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.988 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.994 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.996 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.415.998 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.000 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.416.002 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.416.011 I llama_model_loader: - type  f32:   37 tensors
0.00.416.013 I llama_model_loader: - type q8_0:  127 tensors
0.00.677.586 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.800.551 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.801.515 I llm_load_vocab: special tokens cache size = 5
0.01.032.649 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.032.750 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.032.758 I llm_load_print_meta: arch             = gemma
0.01.032.759 I llm_load_print_meta: vocab type       = SPM
0.01.032.760 I llm_load_print_meta: n_vocab          = 256000
0.01.032.763 I llm_load_print_meta: n_merges         = 0
0.01.032.764 I llm_load_print_meta: vocab_only       = 0
0.01.032.764 I llm_load_print_meta: n_ctx_train      = 8192
0.01.032.766 I llm_load_print_meta: n_embd           = 2048
0.01.032.766 I llm_load_print_meta: n_layer          = 18
0.01.032.856 I llm_load_print_meta: n_head           = 8
0.01.032.868 I llm_load_print_meta: n_head_kv        = 1
0.01.032.869 I llm_load_print_meta: n_rot            = 256
0.01.032.869 I llm_load_print_meta: n_swa            = 0
0.01.032.870 I llm_load_print_meta: n_embd_head_k    = 256
0.01.032.871 I llm_load_print_meta: n_embd_head_v    = 256
0.01.032.878 I llm_load_print_meta: n_gqa            = 8
0.01.032.886 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.032.895 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.032.899 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.032.901 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.032.902 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.032.902 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.032.903 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.032.917 I llm_load_print_meta: n_ff             = 16384
0.01.032.918 I llm_load_print_meta: n_expert         = 0
0.01.032.920 I llm_load_print_meta: n_expert_used    = 0
0.01.032.921 I llm_load_print_meta: causal attn      = 1
0.01.032.921 I llm_load_print_meta: pooling type     = 0
0.01.032.922 I llm_load_print_meta: rope type        = 2
0.01.032.923 I llm_load_print_meta: rope scaling     = linear
0.01.032.925 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.032.926 I llm_load_print_meta: freq_scale_train = 1
0.01.032.927 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.032.928 I llm_load_print_meta: rope_finetuned   = unknown
0.01.032.929 I llm_load_print_meta: ssm_d_conv       = 0
0.01.032.930 I llm_load_print_meta: ssm_d_inner      = 0
0.01.032.930 I llm_load_print_meta: ssm_d_state      = 0
0.01.032.931 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.032.931 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.032.935 I llm_load_print_meta: model type       = 2B
0.01.032.937 I llm_load_print_meta: model ftype      = Q8_0
0.01.032.939 I llm_load_print_meta: model params     = 2.51 B
0.01.032.940 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.032.941 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.032.942 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.032.943 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.032.943 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.032.944 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.032.945 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.032.946 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.032.954 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.032.956 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.032.957 I llm_load_print_meta: max token length = 93
0.01.130.300 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.137.559 I llama_new_context_with_model: n_seq_max     = 1
0.01.137.565 I llama_new_context_with_model: n_ctx         = 4096
0.01.137.566 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.137.566 I llama_new_context_with_model: n_batch       = 2048
0.01.137.567 I llama_new_context_with_model: n_ubatch      = 512
0.01.137.568 I llama_new_context_with_model: flash_attn    = 0
0.01.137.571 I llama_new_context_with_model: freq_base     = 10000.0
0.01.137.572 I llama_new_context_with_model: freq_scale    = 1
0.01.137.573 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.137.674 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.152.663 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.152.711 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.152.835 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.156.446 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.156.450 I llama_new_context_with_model: graph nodes  = 601
0.01.156.451 I llama_new_context_with_model: graph splits = 1
0.01.156.479 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.156.481 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.813.668 I main: llama threadpool init, n_threads = 4
0.01.813.685 I 
0.01.813.815 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.813.819 I 
0.01.814.055 I sampler seed: 3378503812
0.01.814.077 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.814.092 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.814.093 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.814.093 I 
 increasities, and the pursuit of revenge are explored in the lyrics. [end of text]


0.08.204.897 I llama_perf_sampler_print:    sampling time =      23.34 ms /    16 runs   (    1.46 ms per token,   685.37 tokens per second)
0.08.204.900 I llama_perf_context_print:        load time =    1812.75 ms
0.08.204.901 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.204.903 I llama_perf_context_print:        eval time =    6350.20 ms /    15 runs   (  423.35 ms per token,     2.36 tokens per second)
0.08.204.904 I llama_perf_context_print:       total time =    6391.24 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4448 (1bf839b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.085.495 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.085.509 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.085.606 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.627 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.632 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.638 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.640 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.642 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.644 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.646 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.648 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.655 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.660 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.661 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.663 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.664 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.288.874 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.903 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.089 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.103 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.105 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.120 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.122 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.124 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.126 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.131 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.134 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.415.136 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.415.138 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.415.140 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.415.149 I llama_model_loader: - type  f32:   37 tensors
0.00.415.152 I llama_model_loader: - type q8_0:  127 tensors
0.00.681.529 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.812.125 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.813.158 I llm_load_vocab: special tokens cache size = 5
0.01.027.445 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.027.525 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.027.529 I llm_load_print_meta: arch             = gemma
0.01.027.530 I llm_load_print_meta: vocab type       = SPM
0.01.027.531 I llm_load_print_meta: n_vocab          = 256000
0.01.027.534 I llm_load_print_meta: n_merges         = 0
0.01.027.534 I llm_load_print_meta: vocab_only       = 0
0.01.027.534 I llm_load_print_meta: n_ctx_train      = 8192
0.01.027.535 I llm_load_print_meta: n_embd           = 2048
0.01.027.535 I llm_load_print_meta: n_layer          = 18
0.01.027.614 I llm_load_print_meta: n_head           = 8
0.01.027.625 I llm_load_print_meta: n_head_kv        = 1
0.01.027.626 I llm_load_print_meta: n_rot            = 256
0.01.027.627 I llm_load_print_meta: n_swa            = 0
0.01.027.627 I llm_load_print_meta: n_embd_head_k    = 256
0.01.027.627 I llm_load_print_meta: n_embd_head_v    = 256
0.01.027.632 I llm_load_print_meta: n_gqa            = 8
0.01.027.636 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.027.641 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.027.642 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.027.644 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.027.645 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.027.645 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.027.646 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.027.650 I llm_load_print_meta: n_ff             = 16384
0.01.027.651 I llm_load_print_meta: n_expert         = 0
0.01.027.651 I llm_load_print_meta: n_expert_used    = 0
0.01.027.652 I llm_load_print_meta: causal attn      = 1
0.01.027.652 I llm_load_print_meta: pooling type     = 0
0.01.027.653 I llm_load_print_meta: rope type        = 2
0.01.027.654 I llm_load_print_meta: rope scaling     = linear
0.01.027.655 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.027.656 I llm_load_print_meta: freq_scale_train = 1
0.01.027.656 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.027.657 I llm_load_print_meta: rope_finetuned   = unknown
0.01.027.657 I llm_load_print_meta: ssm_d_conv       = 0
0.01.027.659 I llm_load_print_meta: ssm_d_inner      = 0
0.01.027.659 I llm_load_print_meta: ssm_d_state      = 0
0.01.027.659 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.027.660 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.027.663 I llm_load_print_meta: model type       = 2B
0.01.027.665 I llm_load_print_meta: model ftype      = Q8_0
0.01.027.665 I llm_load_print_meta: model params     = 2.51 B
0.01.027.666 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.027.667 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.027.667 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.027.668 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.027.669 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.027.669 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.027.670 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.027.670 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.027.677 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.027.678 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.027.679 I llm_load_print_meta: max token length = 93
0.01.107.899 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.107.908 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.107.909 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.107.909 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.107.910 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.107.911 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.114.703 I llama_new_context_with_model: n_seq_max     = 1
0.01.114.708 I llama_new_context_with_model: n_ctx         = 4096
0.01.114.709 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.114.709 I llama_new_context_with_model: n_batch       = 2048
0.01.114.710 I llama_new_context_with_model: n_ubatch      = 512
0.01.114.710 I llama_new_context_with_model: flash_attn    = 0
0.01.114.712 I llama_new_context_with_model: freq_base     = 10000.0
0.01.114.713 I llama_new_context_with_model: freq_scale    = 1
0.01.114.714 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.114.795 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.128.750 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.128.788 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.128.916 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.132.457 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.132.461 I llama_new_context_with_model: graph nodes  = 601
0.01.132.461 I llama_new_context_with_model: graph splits = 1
0.01.132.484 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.132.487 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.743.100 I main: llama threadpool init, n_threads = 4
0.01.743.116 I 
0.01.743.244 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.743.248 I 
0.01.743.475 I sampler seed: 3272151870
0.01.743.488 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.743.498 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.743.501 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.743.501 I 
 increamically.

I am a large language model, trained by Google. I am here to assist you with any questions or tasks you may have. I am

0.15.236.508 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.25 tokens per second)
0.15.236.512 I llama_perf_context_print:        load time =    1742.20 ms
0.15.236.526 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.236.528 I llama_perf_context_print:        eval time =   13408.42 ms /    32 runs   (  419.01 ms per token,     2.39 tokens per second)
0.15.236.529 I llama_perf_context_print:       total time =   13493.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.693 I build: 4448 (1bf839b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.000.901 I main: load the model and apply lora adapter, if any
0.00.086.472 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.086.485 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.086.582 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.605 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.610 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.616 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.618 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.620 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.622 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.624 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.626 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.634 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.639 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.640 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.642 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.643 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.290.866 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.393.255 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.620 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.637 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.639 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.641 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.643 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.645 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.669 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.674 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.677 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.417.679 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.417.686 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.689 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.417.706 I llama_model_loader: - type  f32:   37 tensors
0.00.417.711 I llama_model_loader: - type q8_0:  127 tensors
0.00.689.933 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.820.428 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.821.393 I llm_load_vocab: special tokens cache size = 5
0.01.028.658 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.028.739 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.028.747 I llm_load_print_meta: arch             = gemma
0.01.028.748 I llm_load_print_meta: vocab type       = SPM
0.01.028.749 I llm_load_print_meta: n_vocab          = 256000
0.01.028.752 I llm_load_print_meta: n_merges         = 0
0.01.028.752 I llm_load_print_meta: vocab_only       = 0
0.01.028.753 I llm_load_print_meta: n_ctx_train      = 8192
0.01.028.754 I llm_load_print_meta: n_embd           = 2048
0.01.028.765 I llm_load_print_meta: n_layer          = 18
0.01.028.846 I llm_load_print_meta: n_head           = 8
0.01.028.856 I llm_load_print_meta: n_head_kv        = 1
0.01.028.856 I llm_load_print_meta: n_rot            = 256
0.01.028.857 I llm_load_print_meta: n_swa            = 0
0.01.028.869 I llm_load_print_meta: n_embd_head_k    = 256
0.01.028.870 I llm_load_print_meta: n_embd_head_v    = 256
0.01.028.876 I llm_load_print_meta: n_gqa            = 8
0.01.028.881 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.028.887 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.028.889 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.028.890 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.028.893 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.028.893 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.028.894 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.028.899 I llm_load_print_meta: n_ff             = 16384
0.01.028.899 I llm_load_print_meta: n_expert         = 0
0.01.028.900 I llm_load_print_meta: n_expert_used    = 0
0.01.028.900 I llm_load_print_meta: causal attn      = 1
0.01.028.910 I llm_load_print_meta: pooling type     = 0
0.01.028.910 I llm_load_print_meta: rope type        = 2
0.01.028.911 I llm_load_print_meta: rope scaling     = linear
0.01.028.912 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.028.913 I llm_load_print_meta: freq_scale_train = 1
0.01.028.913 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.028.914 I llm_load_print_meta: rope_finetuned   = unknown
0.01.028.914 I llm_load_print_meta: ssm_d_conv       = 0
0.01.028.915 I llm_load_print_meta: ssm_d_inner      = 0
0.01.028.923 I llm_load_print_meta: ssm_d_state      = 0
0.01.028.924 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.028.925 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.028.928 I llm_load_print_meta: model type       = 2B
0.01.028.929 I llm_load_print_meta: model ftype      = Q8_0
0.01.028.930 I llm_load_print_meta: model params     = 2.51 B
0.01.028.931 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.028.932 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.028.932 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.028.933 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.028.933 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.028.935 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.028.935 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.028.936 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.028.942 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.028.943 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.028.944 I llm_load_print_meta: max token length = 93
0.01.101.409 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.101.420 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.108.375 I llama_new_context_with_model: n_seq_max     = 1
0.01.108.380 I llama_new_context_with_model: n_ctx         = 4096
0.01.108.381 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.108.381 I llama_new_context_with_model: n_batch       = 2048
0.01.108.381 I llama_new_context_with_model: n_ubatch      = 512
0.01.108.382 I llama_new_context_with_model: flash_attn    = 0
0.01.108.384 I llama_new_context_with_model: freq_base     = 10000.0
0.01.108.385 I llama_new_context_with_model: freq_scale    = 1
0.01.108.385 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.108.470 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.123.090 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.123.129 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.123.249 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.126.469 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.126.473 I llama_new_context_with_model: graph nodes  = 601
0.01.126.474 I llama_new_context_with_model: graph splits = 1
0.01.126.499 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.126.501 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.742.741 I main: llama threadpool init, n_threads = 4
0.01.742.756 I 
0.01.742.881 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.742.885 I 
0.01.743.122 I sampler seed: 4176662918
0.01.743.137 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.743.158 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.743.160 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.743.162 I 
 increasively in complexity as follows:

$$S_1$$

$$S_2$$

$$S_3$$

$$S_4$$



0.15.466.845 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.00 tokens per second)
0.15.466.848 I llama_perf_context_print:        load time =    1741.76 ms
0.15.466.849 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.466.850 I llama_perf_context_print:        eval time =   13639.11 ms /    32 runs   (  426.22 ms per token,     2.35 tokens per second)
0.15.466.872 I llama_perf_context_print:       total time =   13724.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.290s
user	3m24.912s
sys	0m9.308s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4448 (1bf839b1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186265.69 ms
main:    total time = 186265.69 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.615 I build: 4448 (1bf839b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.000.821 I main: load the model and apply lora adapter, if any
0.00.085.253 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.266 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.361 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.382 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.384 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.389 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.391 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.393 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.394 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.396 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.398 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.404 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.405 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.407 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.408 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.305.447 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.407.508 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.431.948 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.431.959 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.431.961 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.431.963 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.431.964 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.431.967 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.431.968 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.431.973 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.431.975 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.431.977 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.431.979 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.431.980 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.431.982 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.431.992 I llama_model_loader: - type  f32:   37 tensors
0.00.431.994 I llama_model_loader: - type q4_K:  108 tensors
0.00.431.994 I llama_model_loader: - type q6_K:   19 tensors
0.00.700.940 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.825.432 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.826.441 I llm_load_vocab: special tokens cache size = 5
0.01.057.356 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.057.439 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.057.443 I llm_load_print_meta: arch             = gemma
0.01.057.444 I llm_load_print_meta: vocab type       = SPM
0.01.057.445 I llm_load_print_meta: n_vocab          = 256000
0.01.057.447 I llm_load_print_meta: n_merges         = 0
0.01.057.448 I llm_load_print_meta: vocab_only       = 0
0.01.057.448 I llm_load_print_meta: n_ctx_train      = 8192
0.01.057.448 I llm_load_print_meta: n_embd           = 2048
0.01.057.449 I llm_load_print_meta: n_layer          = 18
0.01.057.531 I llm_load_print_meta: n_head           = 8
0.01.057.542 I llm_load_print_meta: n_head_kv        = 1
0.01.057.542 I llm_load_print_meta: n_rot            = 256
0.01.057.543 I llm_load_print_meta: n_swa            = 0
0.01.057.545 I llm_load_print_meta: n_embd_head_k    = 256
0.01.057.545 I llm_load_print_meta: n_embd_head_v    = 256
0.01.057.550 I llm_load_print_meta: n_gqa            = 8
0.01.057.554 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.057.559 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.057.560 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.057.562 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.057.563 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.057.564 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.057.564 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.057.569 I llm_load_print_meta: n_ff             = 16384
0.01.057.577 I llm_load_print_meta: n_expert         = 0
0.01.057.578 I llm_load_print_meta: n_expert_used    = 0
0.01.057.578 I llm_load_print_meta: causal attn      = 1
0.01.057.578 I llm_load_print_meta: pooling type     = 0
0.01.057.579 I llm_load_print_meta: rope type        = 2
0.01.057.580 I llm_load_print_meta: rope scaling     = linear
0.01.057.581 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.057.582 I llm_load_print_meta: freq_scale_train = 1
0.01.057.582 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.057.583 I llm_load_print_meta: rope_finetuned   = unknown
0.01.057.583 I llm_load_print_meta: ssm_d_conv       = 0
0.01.057.584 I llm_load_print_meta: ssm_d_inner      = 0
0.01.057.585 I llm_load_print_meta: ssm_d_state      = 0
0.01.057.585 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.057.586 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.057.589 I llm_load_print_meta: model type       = 2B
0.01.057.590 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.057.591 I llm_load_print_meta: model params     = 2.51 B
0.01.057.592 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.057.593 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.057.593 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.057.593 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.057.594 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.057.595 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.057.596 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.057.596 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.057.602 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.057.604 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.057.604 I llm_load_print_meta: max token length = 93
0.01.119.484 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.119.493 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.119.494 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.119.495 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.119.496 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.119.496 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.126.445 I llama_new_context_with_model: n_seq_max     = 1
0.01.126.451 I llama_new_context_with_model: n_ctx         = 4096
0.01.126.451 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.126.452 I llama_new_context_with_model: n_batch       = 2048
0.01.126.452 I llama_new_context_with_model: n_ubatch      = 512
0.01.126.452 I llama_new_context_with_model: flash_attn    = 0
0.01.126.454 I llama_new_context_with_model: freq_base     = 10000.0
0.01.126.455 I llama_new_context_with_model: freq_scale    = 1
0.01.126.456 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.126.538 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.140.815 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.140.856 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.140.973 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.144.502 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.144.506 I llama_new_context_with_model: graph nodes  = 601
0.01.144.507 I llama_new_context_with_model: graph splits = 1
0.01.144.533 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.144.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.724.356 I main: llama threadpool init, n_threads = 4
0.01.724.374 I 
0.01.724.500 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.724.504 I 
0.01.724.736 I sampler seed: 3257606475
0.01.724.751 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.724.760 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.724.763 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.724.764 I 
 seconde,

I'm trying to understand how to properly format a financial transaction log.

A financial transaction log is a document that tracks all financial transactions

0.12.802.225 I llama_perf_sampler_print:    sampling time =      49.49 ms /    33 runs   (    1.50 ms per token,   666.81 tokens per second)
0.12.802.228 I llama_perf_context_print:        load time =    1723.46 ms
0.12.802.256 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.802.259 I llama_perf_context_print:        eval time =   10993.15 ms /    32 runs   (  343.54 ms per token,     2.91 tokens per second)
0.12.802.260 I llama_perf_context_print:       total time =   11077.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4448 (1bf839b1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186320.06 ms
main:    total time = 186320.06 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4448 (1bf839b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.085.985 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.086.131 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.155 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.163 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.169 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.172 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.174 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.175 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.177 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.179 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.187 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.190 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.192 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.193 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.289.718 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.012 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.920 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.934 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.936 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.938 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.939 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.942 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.944 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.949 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.950 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.415.952 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.415.963 I llama_model_loader: - type  f32:   37 tensors
0.00.415.965 I llama_model_loader: - type q4_K:  108 tensors
0.00.415.965 I llama_model_loader: - type q6_K:   19 tensors
0.00.698.705 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.827.156 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.828.105 I llm_load_vocab: special tokens cache size = 5
0.01.045.810 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.045.890 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.045.895 I llm_load_print_meta: arch             = gemma
0.01.045.896 I llm_load_print_meta: vocab type       = SPM
0.01.045.897 I llm_load_print_meta: n_vocab          = 256000
0.01.045.899 I llm_load_print_meta: n_merges         = 0
0.01.045.900 I llm_load_print_meta: vocab_only       = 0
0.01.045.900 I llm_load_print_meta: n_ctx_train      = 8192
0.01.045.901 I llm_load_print_meta: n_embd           = 2048
0.01.045.901 I llm_load_print_meta: n_layer          = 18
0.01.045.979 I llm_load_print_meta: n_head           = 8
0.01.045.991 I llm_load_print_meta: n_head_kv        = 1
0.01.045.992 I llm_load_print_meta: n_rot            = 256
0.01.045.992 I llm_load_print_meta: n_swa            = 0
0.01.045.993 I llm_load_print_meta: n_embd_head_k    = 256
0.01.045.993 I llm_load_print_meta: n_embd_head_v    = 256
0.01.045.998 I llm_load_print_meta: n_gqa            = 8
0.01.046.002 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.046.008 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.046.010 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.046.012 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.046.013 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.046.013 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.046.013 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.046.018 I llm_load_print_meta: n_ff             = 16384
0.01.046.019 I llm_load_print_meta: n_expert         = 0
0.01.046.020 I llm_load_print_meta: n_expert_used    = 0
0.01.046.021 I llm_load_print_meta: causal attn      = 1
0.01.046.022 I llm_load_print_meta: pooling type     = 0
0.01.046.023 I llm_load_print_meta: rope type        = 2
0.01.046.023 I llm_load_print_meta: rope scaling     = linear
0.01.046.025 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.046.025 I llm_load_print_meta: freq_scale_train = 1
0.01.046.029 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.046.029 I llm_load_print_meta: rope_finetuned   = unknown
0.01.046.029 I llm_load_print_meta: ssm_d_conv       = 0
0.01.046.030 I llm_load_print_meta: ssm_d_inner      = 0
0.01.046.030 I llm_load_print_meta: ssm_d_state      = 0
0.01.046.031 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.046.031 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.046.033 I llm_load_print_meta: model type       = 2B
0.01.046.035 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.046.036 I llm_load_print_meta: model params     = 2.51 B
0.01.046.037 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.046.038 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.046.038 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.046.039 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.046.040 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.046.040 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.046.041 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.046.042 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.046.049 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.046.051 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.046.052 I llm_load_print_meta: max token length = 93
0.01.104.406 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.111.338 I llama_new_context_with_model: n_seq_max     = 1
0.01.111.343 I llama_new_context_with_model: n_ctx         = 4096
0.01.111.344 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.111.344 I llama_new_context_with_model: n_batch       = 2048
0.01.111.344 I llama_new_context_with_model: n_ubatch      = 512
0.01.111.345 I llama_new_context_with_model: flash_attn    = 0
0.01.111.347 I llama_new_context_with_model: freq_base     = 10000.0
0.01.111.348 I llama_new_context_with_model: freq_scale    = 1
0.01.111.349 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.111.431 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.126.213 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.126.254 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.126.380 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.129.923 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.129.927 I llama_new_context_with_model: graph nodes  = 601
0.01.129.928 I llama_new_context_with_model: graph splits = 1
0.01.129.952 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.129.955 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.710.416 I main: llama threadpool init, n_threads = 4
0.01.710.432 I 
0.01.710.563 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.710.567 I 
0.01.710.802 I sampler seed: 825369183
0.01.710.816 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.710.829 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.710.829 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.710.830 I 
 increasities, a man who was known for his passionate nature and impulsive behaviour, found himself in a desperate situation. The situation escalated quickly, leading to physical and

0.12.866.195 I llama_perf_sampler_print:    sampling time =      49.73 ms /    33 runs   (    1.51 ms per token,   663.60 tokens per second)
0.12.866.198 I llama_perf_context_print:        load time =    1709.43 ms
0.12.866.209 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.866.211 I llama_perf_context_print:        eval time =   11070.78 ms /    32 runs   (  345.96 ms per token,     2.89 tokens per second)
0.12.866.212 I llama_perf_context_print:       total time =   11155.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.894s
user	46m43.004s
sys	0m6.348s
