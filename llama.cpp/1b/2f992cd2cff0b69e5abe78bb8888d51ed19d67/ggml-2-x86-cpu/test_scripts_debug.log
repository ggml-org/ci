+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.655 I build: 3837 (1b2f992c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
0.00.024.988 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.175 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.264 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.275 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.277 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.281 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.283 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.284 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.285 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.286 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.298 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.306 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.311 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.312 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.313 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.314 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.463 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.209 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.696 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.706 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.707 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.708 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.708 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.709 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.710 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.713 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.714 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.715 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.716 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.716 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.726 I llama_model_loader: - type  f32:   37 tensors
0.00.196.730 I llama_model_loader: - type q8_0:  127 tensors
0.00.471.398 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.110 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.136 I llm_load_vocab: special tokens cache size = 5
0.00.555.950 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.556.011 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.556.012 I llm_load_print_meta: arch             = gemma
0.00.556.013 I llm_load_print_meta: vocab type       = SPM
0.00.556.014 I llm_load_print_meta: n_vocab          = 256000
0.00.556.016 I llm_load_print_meta: n_merges         = 0
0.00.556.016 I llm_load_print_meta: vocab_only       = 0
0.00.556.016 I llm_load_print_meta: n_ctx_train      = 8192
0.00.556.017 I llm_load_print_meta: n_embd           = 2048
0.00.556.017 I llm_load_print_meta: n_layer          = 18
0.00.556.053 I llm_load_print_meta: n_head           = 8
0.00.556.059 I llm_load_print_meta: n_head_kv        = 1
0.00.556.060 I llm_load_print_meta: n_rot            = 256
0.00.556.060 I llm_load_print_meta: n_swa            = 0
0.00.556.061 I llm_load_print_meta: n_embd_head_k    = 256
0.00.556.061 I llm_load_print_meta: n_embd_head_v    = 256
0.00.556.066 I llm_load_print_meta: n_gqa            = 8
0.00.556.071 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.556.077 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.556.078 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.556.079 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.556.079 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.556.080 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.556.080 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.556.085 I llm_load_print_meta: n_ff             = 16384
0.00.556.086 I llm_load_print_meta: n_expert         = 0
0.00.556.086 I llm_load_print_meta: n_expert_used    = 0
0.00.556.086 I llm_load_print_meta: causal attn      = 1
0.00.556.087 I llm_load_print_meta: pooling type     = 0
0.00.556.087 I llm_load_print_meta: rope type        = 2
0.00.556.087 I llm_load_print_meta: rope scaling     = linear
0.00.556.089 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.556.089 I llm_load_print_meta: freq_scale_train = 1
0.00.556.090 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.556.091 I llm_load_print_meta: rope_finetuned   = unknown
0.00.556.091 I llm_load_print_meta: ssm_d_conv       = 0
0.00.556.091 I llm_load_print_meta: ssm_d_inner      = 0
0.00.556.092 I llm_load_print_meta: ssm_d_state      = 0
0.00.556.092 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.556.092 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.556.093 I llm_load_print_meta: model type       = 2B
0.00.556.094 I llm_load_print_meta: model ftype      = Q8_0
0.00.556.095 I llm_load_print_meta: model params     = 2.51 B
0.00.556.095 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.556.096 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.556.096 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.556.096 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.556.097 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.556.097 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.556.098 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.556.098 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.556.103 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.556.105 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.556.105 I llm_load_print_meta: max token length = 93
0.00.556.284 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.658.961 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.658.970 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.658.971 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.658.971 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.658.972 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.658.973 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.664.835 I llama_new_context_with_model: n_ctx      = 8192
0.00.664.841 I llama_new_context_with_model: n_batch    = 2048
0.00.664.842 I llama_new_context_with_model: n_ubatch   = 512
0.00.664.842 I llama_new_context_with_model: flash_attn = 0
0.00.664.844 I llama_new_context_with_model: freq_base  = 10000.0
0.00.664.845 I llama_new_context_with_model: freq_scale = 1
0.00.694.751 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.694.798 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.694.910 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.696.313 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.696.322 I llama_new_context_with_model: graph nodes  = 601
0.00.696.322 I llama_new_context_with_model: graph splits = 1
0.00.696.339 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.308.934 I main: llama threadpool init, n_threads = 4
0.01.308.947 I 
0.01.309.037 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.042 I 
0.01.309.213 I sampler seed: 1251514901
0.01.309.225 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.309.232 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.309.233 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.309.233 I 
 increably. I'm sorry, but I am unable to generate responses that are sexually suggestive in nature. [end of text]


0.11.023.566 I llama_perf_sampler_print:    sampling time =      35.36 ms /    24 runs   (    1.47 ms per token,   678.81 tokens per second)
0.11.023.569 I llama_perf_context_print:        load time =    1306.06 ms
0.11.023.571 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.023.573 I llama_perf_context_print:        eval time =    9654.95 ms /    23 runs   (  419.78 ms per token,     2.38 tokens per second)
0.11.023.574 I llama_perf_context_print:       total time =    9714.64 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.648 I build: 3837 (1b2f992c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
0.00.025.151 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.241 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.255 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.256 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.260 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.261 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.262 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.263 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.264 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.266 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.272 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.281 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.282 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.283 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.284 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.394 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.721 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.196 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.205 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.206 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.207 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.208 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.209 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.210 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.213 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.214 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.215 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.215 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.216 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.226 I llama_model_loader: - type  f32:   37 tensors
0.00.196.230 I llama_model_loader: - type q8_0:  127 tensors
0.00.474.777 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.499 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.505 I llm_load_vocab: special tokens cache size = 5
0.00.557.560 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.557.623 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.557.623 I llm_load_print_meta: arch             = gemma
0.00.557.624 I llm_load_print_meta: vocab type       = SPM
0.00.557.625 I llm_load_print_meta: n_vocab          = 256000
0.00.557.627 I llm_load_print_meta: n_merges         = 0
0.00.557.628 I llm_load_print_meta: vocab_only       = 0
0.00.557.628 I llm_load_print_meta: n_ctx_train      = 8192
0.00.557.629 I llm_load_print_meta: n_embd           = 2048
0.00.557.629 I llm_load_print_meta: n_layer          = 18
0.00.557.666 I llm_load_print_meta: n_head           = 8
0.00.557.674 I llm_load_print_meta: n_head_kv        = 1
0.00.557.675 I llm_load_print_meta: n_rot            = 256
0.00.557.675 I llm_load_print_meta: n_swa            = 0
0.00.557.675 I llm_load_print_meta: n_embd_head_k    = 256
0.00.557.676 I llm_load_print_meta: n_embd_head_v    = 256
0.00.557.680 I llm_load_print_meta: n_gqa            = 8
0.00.557.685 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.557.690 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.557.691 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.557.692 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.557.693 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.557.693 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.557.694 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.557.699 I llm_load_print_meta: n_ff             = 16384
0.00.557.699 I llm_load_print_meta: n_expert         = 0
0.00.557.699 I llm_load_print_meta: n_expert_used    = 0
0.00.557.700 I llm_load_print_meta: causal attn      = 1
0.00.557.709 I llm_load_print_meta: pooling type     = 0
0.00.557.710 I llm_load_print_meta: rope type        = 2
0.00.557.710 I llm_load_print_meta: rope scaling     = linear
0.00.557.712 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.557.713 I llm_load_print_meta: freq_scale_train = 1
0.00.557.713 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.557.714 I llm_load_print_meta: rope_finetuned   = unknown
0.00.557.714 I llm_load_print_meta: ssm_d_conv       = 0
0.00.557.715 I llm_load_print_meta: ssm_d_inner      = 0
0.00.557.715 I llm_load_print_meta: ssm_d_state      = 0
0.00.557.715 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.557.716 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.557.717 I llm_load_print_meta: model type       = 2B
0.00.557.718 I llm_load_print_meta: model ftype      = Q8_0
0.00.557.718 I llm_load_print_meta: model params     = 2.51 B
0.00.557.731 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.557.732 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.557.733 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.557.734 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.557.734 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.557.734 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.557.735 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.557.742 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.557.748 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.557.750 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.557.751 I llm_load_print_meta: max token length = 93
0.00.557.927 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.652.627 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.658.332 I llama_new_context_with_model: n_ctx      = 8192
0.00.658.339 I llama_new_context_with_model: n_batch    = 2048
0.00.658.339 I llama_new_context_with_model: n_ubatch   = 512
0.00.658.340 I llama_new_context_with_model: flash_attn = 0
0.00.658.342 I llama_new_context_with_model: freq_base  = 10000.0
0.00.658.343 I llama_new_context_with_model: freq_scale = 1
0.00.687.638 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.687.683 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.687.793 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.689.233 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.689.239 I llama_new_context_with_model: graph nodes  = 601
0.00.689.239 I llama_new_context_with_model: graph splits = 1
0.00.689.256 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.622 I main: llama threadpool init, n_threads = 4
0.01.303.635 I 
0.01.303.729 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.733 I 
0.01.303.896 I sampler seed: 3926794110
0.01.303.907 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.303.911 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.303.912 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.303.912 I 
 increasities, but he wasn't just any rogue. He was a prodigy with a twisted intellect and a cunning plan.

**Who is this rogue?

0.14.866.508 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.96 tokens per second)
0.14.866.511 I llama_perf_context_print:        load time =    1300.77 ms
0.14.866.512 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.866.514 I llama_perf_context_print:        eval time =   13481.13 ms /    32 runs   (  421.29 ms per token,     2.37 tokens per second)
0.14.866.515 I llama_perf_context_print:       total time =   13562.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.632 I build: 3837 (1b2f992c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.768 I main: load the model and apply lora adapter, if any
0.00.024.518 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.705 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.793 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.805 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.817 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.824 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.825 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.826 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.833 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.834 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.835 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.842 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.842 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.843 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.845 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.845 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.972 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.867 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.271 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.277 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.278 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.279 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.280 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.281 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.282 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.285 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.286 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.287 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.288 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.289 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.297 I llama_model_loader: - type  f32:   37 tensors
0.00.196.301 I llama_model_loader: - type q8_0:  127 tensors
0.00.480.249 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.056 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.074 I llm_load_vocab: special tokens cache size = 5
0.00.575.857 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.575.915 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.575.916 I llm_load_print_meta: arch             = gemma
0.00.575.917 I llm_load_print_meta: vocab type       = SPM
0.00.575.918 I llm_load_print_meta: n_vocab          = 256000
0.00.575.920 I llm_load_print_meta: n_merges         = 0
0.00.575.921 I llm_load_print_meta: vocab_only       = 0
0.00.575.921 I llm_load_print_meta: n_ctx_train      = 8192
0.00.575.921 I llm_load_print_meta: n_embd           = 2048
0.00.575.922 I llm_load_print_meta: n_layer          = 18
0.00.575.957 I llm_load_print_meta: n_head           = 8
0.00.575.964 I llm_load_print_meta: n_head_kv        = 1
0.00.575.964 I llm_load_print_meta: n_rot            = 256
0.00.575.965 I llm_load_print_meta: n_swa            = 0
0.00.575.965 I llm_load_print_meta: n_embd_head_k    = 256
0.00.575.966 I llm_load_print_meta: n_embd_head_v    = 256
0.00.575.989 I llm_load_print_meta: n_gqa            = 8
0.00.575.996 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.576.010 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.576.011 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.576.013 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.576.013 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.576.014 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.576.014 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.576.019 I llm_load_print_meta: n_ff             = 16384
0.00.576.020 I llm_load_print_meta: n_expert         = 0
0.00.576.021 I llm_load_print_meta: n_expert_used    = 0
0.00.576.021 I llm_load_print_meta: causal attn      = 1
0.00.576.022 I llm_load_print_meta: pooling type     = 0
0.00.576.022 I llm_load_print_meta: rope type        = 2
0.00.576.023 I llm_load_print_meta: rope scaling     = linear
0.00.576.024 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.576.025 I llm_load_print_meta: freq_scale_train = 1
0.00.576.025 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.576.026 I llm_load_print_meta: rope_finetuned   = unknown
0.00.576.026 I llm_load_print_meta: ssm_d_conv       = 0
0.00.576.027 I llm_load_print_meta: ssm_d_inner      = 0
0.00.576.027 I llm_load_print_meta: ssm_d_state      = 0
0.00.576.028 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.576.028 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.576.029 I llm_load_print_meta: model type       = 2B
0.00.576.030 I llm_load_print_meta: model ftype      = Q8_0
0.00.576.031 I llm_load_print_meta: model params     = 2.51 B
0.00.576.032 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.576.032 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.576.033 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.576.034 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.576.034 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.576.035 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.576.036 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.576.036 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.576.042 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.576.044 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.576.044 I llm_load_print_meta: max token length = 93
0.00.576.225 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.503 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.653.513 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.653.514 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.653.515 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.653.515 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.653.516 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.659.088 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.095 I llama_new_context_with_model: n_batch    = 2048
0.00.659.095 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.096 I llama_new_context_with_model: flash_attn = 0
0.00.659.098 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.099 I llama_new_context_with_model: freq_scale = 1
0.00.688.310 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.688.352 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.688.466 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.689.842 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.689.848 I llama_new_context_with_model: graph nodes  = 601
0.00.689.849 I llama_new_context_with_model: graph splits = 1
0.00.689.864 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.812 I main: llama threadpool init, n_threads = 4
0.01.339.823 I 
0.01.339.912 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.916 I 
0.01.340.077 I sampler seed: 210110678
0.01.340.087 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.092 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.340.093 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.093 I 
 increamically. I apologize for the typo.

I'm so glad you're here! It's wonderful to have you join us on this adventure

0.14.920.862 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.65 tokens per second)
0.14.920.865 I llama_perf_context_print:        load time =    1336.95 ms
0.14.920.866 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.920.882 I llama_perf_context_print:        eval time =   13499.03 ms /    32 runs   (  421.84 ms per token,     2.37 tokens per second)
0.14.920.883 I llama_perf_context_print:       total time =   13581.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.629 I build: 3837 (1b2f992c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.817 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.024.508 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.683 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.766 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.776 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.778 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.783 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.784 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.785 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.786 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.787 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.800 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.814 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.815 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.816 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.817 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.818 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.559 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.201 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.528 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.536 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.537 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.538 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.539 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.540 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.541 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.544 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.545 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.546 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.546 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.195.548 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.555 I llama_model_loader: - type  f32:   37 tensors
0.00.195.559 I llama_model_loader: - type q8_0:  127 tensors
0.00.478.030 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.382 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.498 I llm_load_vocab: special tokens cache size = 5
0.00.561.355 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.561.411 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.561.412 I llm_load_print_meta: arch             = gemma
0.00.561.413 I llm_load_print_meta: vocab type       = SPM
0.00.561.414 I llm_load_print_meta: n_vocab          = 256000
0.00.561.416 I llm_load_print_meta: n_merges         = 0
0.00.561.417 I llm_load_print_meta: vocab_only       = 0
0.00.561.417 I llm_load_print_meta: n_ctx_train      = 8192
0.00.561.417 I llm_load_print_meta: n_embd           = 2048
0.00.561.418 I llm_load_print_meta: n_layer          = 18
0.00.561.450 I llm_load_print_meta: n_head           = 8
0.00.561.457 I llm_load_print_meta: n_head_kv        = 1
0.00.561.458 I llm_load_print_meta: n_rot            = 256
0.00.561.458 I llm_load_print_meta: n_swa            = 0
0.00.561.458 I llm_load_print_meta: n_embd_head_k    = 256
0.00.561.459 I llm_load_print_meta: n_embd_head_v    = 256
0.00.561.464 I llm_load_print_meta: n_gqa            = 8
0.00.561.468 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.561.493 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.561.495 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.561.496 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.561.496 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.561.497 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.561.497 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.561.503 I llm_load_print_meta: n_ff             = 16384
0.00.561.503 I llm_load_print_meta: n_expert         = 0
0.00.561.504 I llm_load_print_meta: n_expert_used    = 0
0.00.561.504 I llm_load_print_meta: causal attn      = 1
0.00.561.505 I llm_load_print_meta: pooling type     = 0
0.00.561.506 I llm_load_print_meta: rope type        = 2
0.00.561.507 I llm_load_print_meta: rope scaling     = linear
0.00.561.508 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.561.509 I llm_load_print_meta: freq_scale_train = 1
0.00.561.509 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.561.514 I llm_load_print_meta: rope_finetuned   = unknown
0.00.561.515 I llm_load_print_meta: ssm_d_conv       = 0
0.00.561.515 I llm_load_print_meta: ssm_d_inner      = 0
0.00.561.516 I llm_load_print_meta: ssm_d_state      = 0
0.00.561.517 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.561.517 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.561.518 I llm_load_print_meta: model type       = 2B
0.00.561.519 I llm_load_print_meta: model ftype      = Q8_0
0.00.561.520 I llm_load_print_meta: model params     = 2.51 B
0.00.561.528 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.561.529 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.561.530 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.561.530 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.561.531 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.561.531 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.561.532 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.561.533 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.561.539 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.561.540 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.561.541 I llm_load_print_meta: max token length = 93
0.00.561.724 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.632.580 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.632.589 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.638.223 I llama_new_context_with_model: n_ctx      = 8192
0.00.638.231 I llama_new_context_with_model: n_batch    = 2048
0.00.638.232 I llama_new_context_with_model: n_ubatch   = 512
0.00.638.232 I llama_new_context_with_model: flash_attn = 0
0.00.638.235 I llama_new_context_with_model: freq_base  = 10000.0
0.00.638.236 I llama_new_context_with_model: freq_scale = 1
0.00.667.888 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.667.935 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.668.044 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.669.475 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.669.482 I llama_new_context_with_model: graph nodes  = 601
0.00.669.482 I llama_new_context_with_model: graph splits = 1
0.00.669.500 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.402 I main: llama threadpool init, n_threads = 4
0.01.282.415 I 
0.01.282.508 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.282.512 I 
0.01.282.671 I sampler seed: 3794834423
0.01.282.681 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.282.685 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.282.686 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.282.686 I 
 increasities to ensure the continued health and survival of the population.

The premise of the question is logically flawed. It assumes that there is a direct causal relationship

0.14.809.512 I llama_perf_sampler_print:    sampling time =      49.58 ms /    33 runs   (    1.50 ms per token,   665.60 tokens per second)
0.14.809.516 I llama_perf_context_print:        load time =    1279.54 ms
0.14.809.517 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.809.520 I llama_perf_context_print:        eval time =   13444.87 ms /    32 runs   (  420.15 ms per token,     2.38 tokens per second)
0.14.809.521 I llama_perf_context_print:       total time =   13527.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.267s
user	3m34.192s
sys	0m9.345s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3837 (1b2f992c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199415.77 ms
main:    total time = 199415.77 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.650 I build: 3837 (1b2f992c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.827 I main: load the model and apply lora adapter, if any
0.00.024.797 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.986 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.076 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.088 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.089 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.092 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.093 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.095 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.097 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.098 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.099 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.105 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.106 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.107 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.108 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.109 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.911 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.306 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.794 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.801 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.802 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.803 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.803 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.804 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.806 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.809 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.809 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.810 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.811 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.812 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.819 I llama_model_loader: - type  f32:   37 tensors
0.00.195.822 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.823 I llama_model_loader: - type q6_K:   19 tensors
0.00.474.752 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.845 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.829 I llm_load_vocab: special tokens cache size = 5
0.00.569.502 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.569.566 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.569.567 I llm_load_print_meta: arch             = gemma
0.00.569.568 I llm_load_print_meta: vocab type       = SPM
0.00.569.569 I llm_load_print_meta: n_vocab          = 256000
0.00.569.571 I llm_load_print_meta: n_merges         = 0
0.00.569.572 I llm_load_print_meta: vocab_only       = 0
0.00.569.572 I llm_load_print_meta: n_ctx_train      = 8192
0.00.569.572 I llm_load_print_meta: n_embd           = 2048
0.00.569.573 I llm_load_print_meta: n_layer          = 18
0.00.569.608 I llm_load_print_meta: n_head           = 8
0.00.569.615 I llm_load_print_meta: n_head_kv        = 1
0.00.569.615 I llm_load_print_meta: n_rot            = 256
0.00.569.616 I llm_load_print_meta: n_swa            = 0
0.00.569.616 I llm_load_print_meta: n_embd_head_k    = 256
0.00.569.616 I llm_load_print_meta: n_embd_head_v    = 256
0.00.569.622 I llm_load_print_meta: n_gqa            = 8
0.00.569.628 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.569.633 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.569.634 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.569.635 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.569.636 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.569.636 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.569.636 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.569.641 I llm_load_print_meta: n_ff             = 16384
0.00.569.642 I llm_load_print_meta: n_expert         = 0
0.00.569.642 I llm_load_print_meta: n_expert_used    = 0
0.00.569.642 I llm_load_print_meta: causal attn      = 1
0.00.569.643 I llm_load_print_meta: pooling type     = 0
0.00.569.643 I llm_load_print_meta: rope type        = 2
0.00.569.643 I llm_load_print_meta: rope scaling     = linear
0.00.569.645 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.569.645 I llm_load_print_meta: freq_scale_train = 1
0.00.569.646 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.569.646 I llm_load_print_meta: rope_finetuned   = unknown
0.00.569.646 I llm_load_print_meta: ssm_d_conv       = 0
0.00.569.647 I llm_load_print_meta: ssm_d_inner      = 0
0.00.569.647 I llm_load_print_meta: ssm_d_state      = 0
0.00.569.647 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.569.648 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.569.649 I llm_load_print_meta: model type       = 2B
0.00.569.651 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.569.651 I llm_load_print_meta: model params     = 2.51 B
0.00.569.652 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.569.653 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.569.653 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.569.654 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.569.654 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.569.655 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.569.660 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.569.661 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.569.666 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.569.678 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.569.679 I llm_load_print_meta: max token length = 93
0.00.569.856 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.630.322 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.630.333 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.630.334 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.630.334 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.630.335 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.630.335 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.635.940 I llama_new_context_with_model: n_ctx      = 8192
0.00.635.947 I llama_new_context_with_model: n_batch    = 2048
0.00.635.948 I llama_new_context_with_model: n_ubatch   = 512
0.00.635.948 I llama_new_context_with_model: flash_attn = 0
0.00.635.951 I llama_new_context_with_model: freq_base  = 10000.0
0.00.635.952 I llama_new_context_with_model: freq_scale = 1
0.00.664.971 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.665.013 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.665.127 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.666.539 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.666.545 I llama_new_context_with_model: graph nodes  = 601
0.00.666.545 I llama_new_context_with_model: graph splits = 1
0.00.666.562 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.248.809 I main: llama threadpool init, n_threads = 4
0.01.248.822 I 
0.01.248.915 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.248.915 I 
0.01.249.076 I sampler seed: 2526625406
0.01.249.089 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.249.093 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.249.094 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.249.104 I 
 increamically.

I am unable to generate text that is sexually suggestive in nature. My purpose is to assist with tasks that are within the boundaries of ethical and

0.12.154.112 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.02 tokens per second)
0.12.154.115 I llama_perf_context_print:        load time =    1245.89 ms
0.12.154.117 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.154.119 I llama_perf_context_print:        eval time =   10822.85 ms /    32 runs   (  338.21 ms per token,     2.96 tokens per second)
0.12.154.120 I llama_perf_context_print:       total time =   10905.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3837 (1b2f992c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199889.43 ms
main:    total time = 199889.43 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.654 I build: 3837 (1b2f992c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.002.843 I main: load the model and apply lora adapter, if any
0.00.024.993 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.093 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.108 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.114 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.119 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.121 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.122 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.124 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.126 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.127 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.134 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.136 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.137 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.139 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.141 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.159 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.773 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.160 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.167 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.168 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.169 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.170 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.172 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.172 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.177 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.179 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.188 I llama_model_loader: - type  f32:   37 tensors
0.00.196.193 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.197 I llama_model_loader: - type q6_K:   19 tensors
0.00.485.342 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.084 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.115 I llm_load_vocab: special tokens cache size = 5
0.00.569.271 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.569.339 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.569.340 I llm_load_print_meta: arch             = gemma
0.00.569.340 I llm_load_print_meta: vocab type       = SPM
0.00.569.342 I llm_load_print_meta: n_vocab          = 256000
0.00.569.344 I llm_load_print_meta: n_merges         = 0
0.00.569.345 I llm_load_print_meta: vocab_only       = 0
0.00.569.345 I llm_load_print_meta: n_ctx_train      = 8192
0.00.569.346 I llm_load_print_meta: n_embd           = 2048
0.00.569.346 I llm_load_print_meta: n_layer          = 18
0.00.569.381 I llm_load_print_meta: n_head           = 8
0.00.569.388 I llm_load_print_meta: n_head_kv        = 1
0.00.569.388 I llm_load_print_meta: n_rot            = 256
0.00.569.389 I llm_load_print_meta: n_swa            = 0
0.00.569.389 I llm_load_print_meta: n_embd_head_k    = 256
0.00.569.389 I llm_load_print_meta: n_embd_head_v    = 256
0.00.569.394 I llm_load_print_meta: n_gqa            = 8
0.00.569.399 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.569.404 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.569.405 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.569.407 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.569.407 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.569.408 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.569.408 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.569.413 I llm_load_print_meta: n_ff             = 16384
0.00.569.414 I llm_load_print_meta: n_expert         = 0
0.00.569.414 I llm_load_print_meta: n_expert_used    = 0
0.00.569.414 I llm_load_print_meta: causal attn      = 1
0.00.569.415 I llm_load_print_meta: pooling type     = 0
0.00.569.415 I llm_load_print_meta: rope type        = 2
0.00.569.416 I llm_load_print_meta: rope scaling     = linear
0.00.569.417 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.569.418 I llm_load_print_meta: freq_scale_train = 1
0.00.569.418 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.569.418 I llm_load_print_meta: rope_finetuned   = unknown
0.00.569.419 I llm_load_print_meta: ssm_d_conv       = 0
0.00.569.419 I llm_load_print_meta: ssm_d_inner      = 0
0.00.569.419 I llm_load_print_meta: ssm_d_state      = 0
0.00.569.420 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.569.420 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.569.421 I llm_load_print_meta: model type       = 2B
0.00.569.422 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.569.422 I llm_load_print_meta: model params     = 2.51 B
0.00.569.423 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.569.423 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.569.425 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.569.425 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.569.441 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.569.441 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.569.442 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.569.442 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.569.448 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.569.450 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.569.451 I llm_load_print_meta: max token length = 93
0.00.569.644 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.628.499 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.634.265 I llama_new_context_with_model: n_ctx      = 8192
0.00.634.273 I llama_new_context_with_model: n_batch    = 2048
0.00.634.273 I llama_new_context_with_model: n_ubatch   = 512
0.00.634.274 I llama_new_context_with_model: flash_attn = 0
0.00.634.276 I llama_new_context_with_model: freq_base  = 10000.0
0.00.634.277 I llama_new_context_with_model: freq_scale = 1
0.00.663.678 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.663.728 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.663.854 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.665.260 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.665.267 I llama_new_context_with_model: graph nodes  = 601
0.00.665.268 I llama_new_context_with_model: graph splits = 1
0.00.665.285 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.247.401 I main: llama threadpool init, n_threads = 4
0.01.247.413 I 
0.01.247.515 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.247.524 I 
0.01.247.696 I sampler seed: 1534908636
0.01.247.706 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.247.711 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.247.712 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.247.712 I 
 seconally.

**Assistant**

I am unable to provide personal or sensitive information, including medical records, or high profile demographic data. [end of text]


0.11.229.532 I llama_perf_sampler_print:    sampling time =      44.58 ms /    30 runs   (    1.49 ms per token,   672.90 tokens per second)
0.11.229.536 I llama_perf_context_print:        load time =    1244.46 ms
0.11.229.538 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.229.540 I llama_perf_context_print:        eval time =    9908.13 ms /    29 runs   (  341.66 ms per token,     2.93 tokens per second)
0.11.229.541 I llama_perf_context_print:       total time =    9982.14 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.634s
user	50m16.560s
sys	0m6.395s
