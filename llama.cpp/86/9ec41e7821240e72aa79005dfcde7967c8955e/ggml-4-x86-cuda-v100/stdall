Looking in indexes: https://pypi.org/simple, https://download.pytorch.org/whl/cpu, https://download.pytorch.org/whl/cpu, https://download.pytorch.org/whl/cpu, https://download.pytorch.org/whl/cpu
Requirement already satisfied: numpy~=1.26.4 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 1)) (1.26.4)
Requirement already satisfied: sentencepiece~=0.2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 2)) (0.2.0)
Requirement already satisfied: transformers<5.0.0,>=4.45.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (4.45.1)
Requirement already satisfied: gguf>=0.1.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 4)) (0.11.0)
Requirement already satisfied: protobuf<5.0.0,>=4.21.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 5)) (4.25.3)
Requirement already satisfied: torch~=2.2.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.2.2)
Requirement already satisfied: pyyaml>=5.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (6.0.1)
Requirement already satisfied: tqdm>=4.27 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (4.66.2)
Requirement already satisfied: tokenizers<0.21,>=0.20 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (0.20.0)
Requirement already satisfied: safetensors>=0.4.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (0.4.2)
Requirement already satisfied: regex!=2019.12.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2023.12.25)
Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (0.25.1)
Requirement already satisfied: filelock in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (3.13.1)
Requirement already satisfied: packaging>=20.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (23.2)
Requirement already satisfied: requests in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2.31.0)
Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (10.3.2.106)
Requirement already satisfied: networkx in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (3.2.1)
Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.3.1)
Requirement already satisfied: nvidia-nccl-cu12==2.19.3 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.19.3)
Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (8.9.2.26)
Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (11.4.5.107)
Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.0.106)
Requirement already satisfied: triton==2.2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.2.0)
Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (11.0.2.54)
Requirement already satisfied: sympy in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (1.12)
Requirement already satisfied: fsspec in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2024.2.0)
Requirement already satisfied: typing-extensions>=4.8.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (4.9.0)
Requirement already satisfied: jinja2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (3.1.3)
Requirement already satisfied: nvidia-nvjitlink-cu12 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from nvidia-cusolver-cu12==11.4.5.107->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.3.101)
Requirement already satisfied: MarkupSafe>=2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from jinja2->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.1.5)
Requirement already satisfied: certifi>=2017.4.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2024.2.2)
Requirement already satisfied: idna<4,>=2.5 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (3.6)
Requirement already satisfied: urllib3<3,>=1.21.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2.2.1)
Requirement already satisfied: charset-normalizer<4,>=2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (3.3.2)
Requirement already satisfied: mpmath>=0.19 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from sympy->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (1.3.0)
Obtaining file:///home/ggml/work/llama.cpp/gguf-py
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: tqdm>=4.27 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.11.0) (4.66.2)
Requirement already satisfied: pyyaml>=5.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.11.0) (6.0.1)
Requirement already satisfied: sentencepiece<=0.2.0,>=0.1.98 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.11.0) (0.2.0)
Requirement already satisfied: numpy>=1.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.11.0) (1.26.4)
Building wheels for collected packages: gguf
  Building editable for gguf (pyproject.toml): started
  Building editable for gguf (pyproject.toml): finished with status 'done'
  Created wheel for gguf: filename=gguf-0.11.0-py3-none-any.whl size=3394 sha256=32f668279594bfc938e4d6064ffb5cd6fea0d037768e6f7427350709379c1046
  Stored in directory: /tmp/pip-ephem-wheel-cache-47pbexj4/wheels/a3/4c/52/c5934ad001d1a70ca5434f11ddc622cad9c0a484e9bf6feda3
Successfully built gguf
Installing collected packages: gguf
  Attempting uninstall: gguf
    Found existing installation: gguf 0.11.0
    Uninstalling gguf-0.11.0:
      Successfully uninstalled gguf-0.11.0
Successfully installed gguf-0.11.0
+ gg_run_ctest_debug
+ cd /home/ggml/work/llama.cpp
+ tee /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_debug.log
+ rm -rf build-ci-debug
+ mkdir build-ci-debug
+ cd build-ci-debug
+ set -e
+ gg_check_build_requirements
+ command -v cmake
+ command -v make
+ command -v ctest
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_debug-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Debug -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- Including CPU backend
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- Adding CPU backend variant ggml-cpu: -march=native 
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA Toolkit found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- Including CUDA backend
-- Configuring done (9.1s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-debug

real	0m9.406s
user	0m7.570s
sys	0m1.843s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_debug-make.log
++ nproc
+ make -j6
[  0%] Generating build details from Git
[  1%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml.c.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  2%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-alloc.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
-- Found Git: /usr/bin/git (found version "2.34.1") 
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-backend.cpp.o
[  3%] Built target sha256
[  3%] Built target xxhash
[  3%] Built target sha1
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-opt.cpp.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-threading.cpp.o
[  4%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-quants.c.o
[  5%] Linking CXX shared library libggml-base.so
[  5%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  5%] Built target build_info
[  5%] Built target ggml-base
[  5%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.c.o
[  5%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-aarch64.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-hbm.cpp.o
[  7%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-quants.c.o
[  7%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/acc.cu.o
[  7%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-traits.cpp.o
[  7%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/amx.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/mmq.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/llamafile/sgemm.cpp.o
[  8%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/arange.cu.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argmax.cu.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argsort.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/binbcast.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/clamp.cu.o
[ 11%] Linking CXX shared library libggml-cpu.so
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/concat.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/conv-transpose-1d.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/convert.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/count-equal.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cpy.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cross-entropy-loss.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/diagmask.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f16.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f32.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/getrows.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/im2col.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/ggml-cuda.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmv.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmvq.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/norm.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/opt-step-adamw.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/out-prod.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pad.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pool2d.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/quantize.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/rope.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/scale.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/softmax.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sumrows.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sum.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/tsembd.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/unary.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/upscale.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/wkv6.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 25%] Built target ggml-cpu
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq1_s.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xxs.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xs.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_s.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_s.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_xxs.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_nl.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_xs.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q2_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q3_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_1.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_k.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_1.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_k.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q6_k.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q8_0.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 35%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 35%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 37%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 37%] Linking CUDA shared library libggml-cuda.so
[ 37%] Built target ggml-cuda
[ 37%] Building CXX object ggml/src/CMakeFiles/ggml.dir/ggml-backend-reg.cpp.o
[ 38%] Linking CXX shared library libggml.so
[ 38%] Built target ggml
[ 38%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 40%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 42%] Linking CXX executable ../../bin/llama-gguf-hash
[ 42%] Linking CXX executable ../../bin/llama-gguf
[ 42%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 43%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 43%] Linking CXX shared library libllama.so
[ 43%] Built target llama-gguf-hash
[ 43%] Built target llama-gguf
[ 43%] Built target llama
[ 43%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 44%] Building CXX object examples/run/CMakeFiles/llama-run.dir/run.cpp.o
[ 45%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 46%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 47%] Building CXX object examples/simple-chat/CMakeFiles/llama-simple-chat.dir/simple-chat.cpp.o
[ 47%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 47%] Linking C executable ../bin/test-c
[ 47%] Linking CXX executable ../../bin/llama-simple
[ 47%] Linking CXX executable ../../bin/llama-simple-chat
[ 47%] Linking CXX executable ../../bin/llama-run
[ 47%] Built target test-c
[ 48%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 48%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 48%] Built target llava
[ 48%] Linking CXX static library libllava_static.a
[ 48%] Built target llama-simple
[ 48%] Built target llama-simple-chat
[ 48%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 49%] Linking CXX shared library libllava_shared.so
[ 49%] Built target llava_static
[ 50%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 50%] Built target llama-run
[ 50%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 50%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 51%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 51%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 51%] Built target llava_shared
[ 52%] Building CXX object common/CMakeFiles/common.dir/speculative.cpp.o
[ 52%] Linking CXX executable ../../bin/llama-quantize-stats
[ 52%] Built target llama-quantize-stats
[ 52%] Linking CXX static library libcommon.a
[ 52%] Built target common
[ 52%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 56%] Linking CXX executable ../bin/test-sampling
[ 56%] Linking CXX executable ../bin/test-grammar-parser
[ 56%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 56%] Linking CXX executable ../bin/test-llama-grammar
[ 57%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 58%] Linking CXX executable ../bin/test-grammar-integration
[ 58%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 58%] Built target test-sampling
[ 59%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 59%] Built target test-grammar-parser
[ 59%] Built target test-llama-grammar
[ 60%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 62%] Linking CXX executable ../bin/test-log
[ 62%] Built target test-log
[ 62%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 62%] Built target test-grammar-integration
[ 63%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 63%] Built target test-json-schema-to-grammar
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 64%] Linking CXX executable ../bin/test-backend-ops
[ 64%] Built target test-backend-ops
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 65%] Linking CXX executable ../bin/test-model-load-cancel
[ 65%] Built target test-model-load-cancel
[ 65%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 66%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 66%] Linking CXX executable ../bin/test-autorelease
[ 66%] Built target test-autorelease
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 68%] Linking CXX executable ../bin/test-barrier
[ 68%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 68%] Linking CXX executable ../bin/test-tokenizer-0
[ 68%] Built target test-barrier
[ 68%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 68%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 69%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 69%] Linking CXX executable ../bin/test-quantize-fns
[ 69%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 70%] Linking CXX executable ../bin/test-chat-template
[ 70%] Built target test-quantize-fns
[ 70%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 71%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 71%] Linking CXX executable ../bin/test-quantize-perf
[ 71%] Built target test-tokenizer-0
[ 71%] Built target test-tokenizer-1-spm
[ 72%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 72%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 72%] Built target test-tokenizer-1-bpe
[ 72%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 72%] Linking CXX executable ../bin/test-rope
[ 72%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 72%] Built target test-quantize-perf
[ 72%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 72%] Built target test-chat-template
[ 72%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 72%] Built target test-rope
[ 73%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 74%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 74%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 74%] Linking CXX executable ../bin/test-arg-parser
[ 74%] Built target llama-gbnf-validator
[ 74%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 74%] Built target test-arg-parser
[ 74%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 75%] Linking CXX executable ../../bin/llama-eval-callback
[ 76%] Linking CXX executable ../../bin/llama-batched-bench
[ 77%] Linking CXX executable ../../bin/llama-batched
[ 78%] Linking CXX executable ../../bin/llama-embedding
[ 79%] Linking CXX executable ../../bin/llama-gguf-split
[ 79%] Built target llama-eval-callback
[ 80%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 80%] Built target llama-gguf-split
[ 81%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 81%] Built target llama-batched-bench
[ 81%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 81%] Built target llama-batched
[ 81%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 81%] Built target llama-embedding
[ 81%] Linking CXX executable ../../bin/llama-gritlm
[ 81%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 81%] Built target llama-gritlm
[ 82%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 83%] Linking CXX executable ../../bin/llama-lookahead
[ 83%] Linking CXX executable ../../bin/llama-infill
[ 83%] Linking CXX executable ../../bin/llama-lookup
[ 83%] Built target llama-lookahead
[ 83%] Linking CXX executable ../../bin/llama-lookup-create
[ 84%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 84%] Built target llama-infill
[ 84%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 84%] Built target llama-lookup
[ 85%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 85%] Linking CXX executable ../../bin/llama-imatrix
[ 85%] Built target llama-lookup-create
[ 85%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 85%] Linking CXX executable ../../bin/llama-lookup-merge
[ 85%] Built target llama-lookup-merge
[ 86%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 86%] Built target llama-imatrix
[ 87%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 88%] Linking CXX executable ../../bin/llama-lookup-stats
[ 88%] Linking CXX executable ../../bin/llama-cli
[ 88%] Linking CXX executable ../../bin/llama-parallel
[ 88%] Built target llama-lookup-stats
[ 88%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 88%] Linking CXX executable ../../bin/llama-passkey
[ 88%] Built target llama-cli
[ 89%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 89%] Built target llama-parallel
[ 90%] Generating loading.html.hpp
[ 90%] Generating index.html.hpp
[ 90%] Built target llama-passkey
[ 90%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 90%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[ 91%] Linking CXX executable ../../bin/llama-quantize
[ 92%] Linking CXX executable ../../bin/llama-save-load-state
[ 92%] Linking CXX executable ../../bin/llama-retrieval
[ 92%] Built target llama-quantize
[ 92%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-bench
[ 92%] Linking CXX executable ../../bin/llama-perplexity
[ 92%] Built target llama-bench
[ 92%] Building CXX object examples/speculative-simple/CMakeFiles/llama-speculative-simple.dir/speculative-simple.cpp.o
[ 92%] Built target llama-save-load-state
[ 92%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 92%] Built target llama-retrieval
[ 93%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 93%] Built target llama-perplexity
[ 93%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 94%] Linking CXX executable ../../bin/llama-tokenize
[ 94%] Built target llama-tokenize
[ 94%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 95%] Linking CXX executable ../../bin/llama-speculative-simple
[ 95%] Built target llama-speculative-simple
[ 95%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-speculative
[ 96%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 96%] Built target llama-convert-llama2c-to-ggml
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 97%] Linking CXX executable ../../bin/llama-cvector-generator
[ 97%] Built target llama-speculative
[ 97%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 97%] Linking CXX executable ../../bin/llama-vdot
[ 97%] Linking CXX executable ../../bin/llama-export-lora
[ 97%] Built target llama-vdot
[ 97%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 98%] Linking CXX executable ../../bin/llama-q8dot
[ 98%] Built target llama-q8dot
[ 99%] Linking CXX executable ../../bin/llama-llava-cli
[ 99%] Built target llama-cvector-generator
[ 99%] Built target llama-export-lora
[100%] Linking CXX executable ../../bin/llama-minicpmv-cli
[100%] Built target llama-llava-cli
[100%] Built target llama-minicpmv-cli
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m39.426s
user	1m39.514s
sys	0m13.049s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_debug-ctest.log
+ ctest --output-on-failure -L main -E test-opt
Test project /home/ggml/work/llama.cpp/build-ci-debug
      Start  1: test-tokenizer-0-bert-bge
 1/27 Test  #1: test-tokenizer-0-bert-bge .........   Passed    0.72 sec
      Start  2: test-tokenizer-0-command-r
 2/27 Test  #2: test-tokenizer-0-command-r ........   Passed    4.25 sec
      Start  3: test-tokenizer-0-deepseek-coder
 3/27 Test  #3: test-tokenizer-0-deepseek-coder ...   Passed    0.97 sec
      Start  4: test-tokenizer-0-deepseek-llm
 4/27 Test  #4: test-tokenizer-0-deepseek-llm .....   Passed    1.84 sec
      Start  5: test-tokenizer-0-falcon
 5/27 Test  #5: test-tokenizer-0-falcon ...........   Passed    1.28 sec
      Start  6: test-tokenizer-0-gpt-2
 6/27 Test  #6: test-tokenizer-0-gpt-2 ............   Passed    1.11 sec
      Start  7: test-tokenizer-0-llama-bpe
 7/27 Test  #7: test-tokenizer-0-llama-bpe ........   Passed    3.21 sec
      Start  8: test-tokenizer-0-llama-spm
 8/27 Test  #8: test-tokenizer-0-llama-spm ........   Passed    0.71 sec
      Start  9: test-tokenizer-0-mpt
 9/27 Test  #9: test-tokenizer-0-mpt ..............   Passed    1.15 sec
      Start 10: test-tokenizer-0-phi-3
10/27 Test #10: test-tokenizer-0-phi-3 ............   Passed    0.70 sec
      Start 11: test-tokenizer-0-qwen2
11/27 Test #11: test-tokenizer-0-qwen2 ............   Passed    2.57 sec
      Start 12: test-tokenizer-0-refact
12/27 Test #12: test-tokenizer-0-refact ...........   Passed    1.13 sec
      Start 13: test-tokenizer-0-starcoder
13/27 Test #13: test-tokenizer-0-starcoder ........   Passed    1.12 sec
      Start 14: test-sampling
14/27 Test #14: test-sampling .....................   Passed    8.28 sec
      Start 15: test-grammar-parser
15/27 Test #15: test-grammar-parser ...............   Passed    0.04 sec
      Start 16: test-grammar-integration
16/27 Test #16: test-grammar-integration ..........   Passed    0.08 sec
      Start 17: test-llama-grammar
17/27 Test #17: test-llama-grammar ................   Passed    0.04 sec
      Start 18: test-json-schema-to-grammar
18/27 Test #18: test-json-schema-to-grammar .......   Passed    3.05 sec
      Start 19: test-tokenizer-1-llama-spm
19/27 Test #19: test-tokenizer-1-llama-spm ........   Passed    2.38 sec
      Start 20: test-log
20/27 Test #20: test-log ..........................   Passed    0.03 sec
      Start 21: test-arg-parser
21/27 Test #21: test-arg-parser ...................   Passed    0.30 sec
      Start 22: test-chat-template
22/27 Test #22: test-chat-template ................   Passed    0.04 sec
      Start 23: test-backend-ops
23/27 Test #23: test-backend-ops ..................   Passed  230.30 sec
      Start 26: test-barrier
24/27 Test #26: test-barrier ......................   Passed    2.64 sec
      Start 27: test-quantize-fns
25/27 Test #27: test-quantize-fns .................   Passed   35.99 sec
      Start 28: test-quantize-perf
26/27 Test #28: test-quantize-perf ................   Passed    0.35 sec
      Start 29: test-rope
27/27 Test #29: test-rope .........................   Passed    0.08 sec

100% tests passed, 0 tests failed out of 27

Label Time Summary:
main    = 304.38 sec*proc (27 tests)

Total Test time (real) = 304.40 sec

real	5m4.435s
user	15m0.843s
sys	0m14.325s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_release
+ cd /home/ggml/work/llama.cpp
+ rm -rf build-ci-release
+ tee /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_release.log
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ gg_check_build_requirements
+ command -v cmake
+ command -v make
+ command -v ctest
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_release-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- Including CPU backend
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- Adding CPU backend variant ggml-cpu: -march=native 
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA Toolkit found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- Including CUDA backend
-- Configuring done (9.4s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m9.630s
user	0m7.719s
sys	0m1.893s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_release-make.log
++ nproc
+ make -j6
[  0%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  0%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml.c.o
[  1%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  1%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  3%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-alloc.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-backend.cpp.o
[  3%] Built target sha1
[  3%] Built target xxhash
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-opt.cpp.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-threading.cpp.o
[  4%] Built target sha256
[  4%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-quants.c.o
[  5%] Linking CXX shared library libggml-base.so
[  5%] Built target build_info
[  5%] Built target ggml-base
[  5%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.c.o
[  5%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-aarch64.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-hbm.cpp.o
[  7%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-quants.c.o
[  7%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/acc.cu.o
[  7%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-traits.cpp.o
[  7%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/amx.cpp.o
[  7%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/arange.cu.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/mmq.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/llamafile/sgemm.cpp.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argmax.cu.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argsort.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/binbcast.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/clamp.cu.o
[ 11%] Linking CXX shared library libggml-cpu.so
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/concat.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/conv-transpose-1d.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/convert.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/count-equal.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cpy.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cross-entropy-loss.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/diagmask.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f16.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f32.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/getrows.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/ggml-cuda.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/im2col.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmv.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmvq.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/norm.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/opt-step-adamw.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/out-prod.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pad.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/quantize.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pool2d.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/rope.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/scale.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/softmax.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sum.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sumrows.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/tsembd.cu.o
[ 22%] Built target ggml-cpu
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/unary.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/upscale.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/wkv6.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq1_s.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_s.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xs.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xxs.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_s.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_xxs.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_nl.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_xs.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q2_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q3_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_0.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_1.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_k.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_1.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_k.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q6_k.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q8_0.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 35%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 35%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 37%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 37%] Linking CUDA shared library libggml-cuda.so
[ 37%] Built target ggml-cuda
[ 37%] Building CXX object ggml/src/CMakeFiles/ggml.dir/ggml-backend-reg.cpp.o
[ 38%] Linking CXX shared library libggml.so
[ 38%] Built target ggml
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 39%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 41%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 42%] Linking CXX executable ../../bin/llama-gguf-hash
[ 42%] Linking CXX executable ../../bin/llama-gguf
[ 42%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 43%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 43%] Linking CXX shared library libllama.so
[ 43%] Built target llama-gguf
[ 43%] Built target llama-gguf-hash
[ 43%] Built target llama
[ 43%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 44%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 45%] Building CXX object examples/run/CMakeFiles/llama-run.dir/run.cpp.o
[ 46%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 47%] Building CXX object examples/simple-chat/CMakeFiles/llama-simple-chat.dir/simple-chat.cpp.o
[ 47%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 47%] Linking C executable ../bin/test-c
[ 47%] Linking CXX executable ../../bin/llama-simple
[ 47%] Linking CXX executable ../../bin/llama-run
[ 47%] Linking CXX executable ../../bin/llama-simple-chat
[ 47%] Built target test-c
[ 48%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 48%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 48%] Built target llava
[ 48%] Linking CXX static library libllava_static.a
[ 48%] Built target llama-simple
[ 48%] Built target llama-simple-chat
[ 48%] Built target llama-run
[ 48%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 49%] Linking CXX shared library libllava_shared.so
[ 50%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 50%] Built target llava_static
[ 50%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 50%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 51%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 51%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 51%] Built target llava_shared
[ 52%] Building CXX object common/CMakeFiles/common.dir/speculative.cpp.o
[ 52%] Linking CXX executable ../../bin/llama-quantize-stats
[ 52%] Built target llama-quantize-stats
[ 52%] Linking CXX static library libcommon.a
[ 52%] Built target common
[ 52%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 55%] Linking CXX executable ../bin/test-grammar-parser
[ 55%] Linking CXX executable ../bin/test-llama-grammar
[ 56%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 57%] Linking CXX executable ../bin/test-sampling
[ 58%] Linking CXX executable ../bin/test-grammar-integration
[ 58%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 58%] Built target test-llama-grammar
[ 58%] Built target test-grammar-parser
[ 59%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 59%] Built target test-sampling
[ 60%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 61%] Built target test-grammar-integration
[ 61%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 61%] Built target test-json-schema-to-grammar
[ 62%] Linking CXX executable ../bin/test-log
[ 63%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 63%] Built target test-log
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 64%] Linking CXX executable ../bin/test-backend-ops
[ 64%] Built target test-backend-ops
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 65%] Linking CXX executable ../bin/test-model-load-cancel
[ 65%] Built target test-model-load-cancel
[ 65%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 66%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 66%] Linking CXX executable ../bin/test-autorelease
[ 66%] Built target test-autorelease
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 68%] Linking CXX executable ../bin/test-barrier
[ 68%] Built target test-barrier
[ 68%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 69%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 69%] Linking CXX executable ../bin/test-quantize-fns
[ 69%] Built target test-quantize-fns
[ 69%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 70%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 70%] Linking CXX executable ../bin/test-quantize-perf
[ 70%] Built target test-quantize-perf
[ 71%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 71%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 71%] Linking CXX executable ../bin/test-rope
[ 71%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 71%] Built target test-rope
[ 71%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 71%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 71%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 71%] Built target test-tokenizer-1-spm
[ 72%] Linking CXX executable ../bin/test-chat-template
[ 72%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 72%] Built target test-tokenizer-1-bpe
[ 72%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 72%] Built target test-chat-template
[ 72%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 72%] Linking CXX executable ../bin/test-tokenizer-0
[ 72%] Built target test-tokenizer-0
[ 73%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 73%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 74%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 74%] Linking CXX executable ../bin/test-arg-parser
[ 74%] Built target llama-gbnf-validator
[ 74%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 74%] Built target test-arg-parser
[ 74%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 75%] Linking CXX executable ../../bin/llama-eval-callback
[ 76%] Linking CXX executable ../../bin/llama-batched-bench
[ 77%] Linking CXX executable ../../bin/llama-batched
[ 77%] Built target llama-eval-callback
[ 78%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 78%] Built target llama-batched-bench
[ 79%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 80%] Linking CXX executable ../../bin/llama-embedding
[ 80%] Built target llama-batched
[ 80%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 80%] Built target llama-embedding
[ 80%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-gguf-split
[ 81%] Linking CXX executable ../../bin/llama-gritlm
[ 81%] Built target llama-gguf-split
[ 81%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 81%] Built target llama-gritlm
[ 82%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 83%] Linking CXX executable ../../bin/llama-lookahead
[ 83%] Built target llama-lookahead
[ 84%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 84%] Linking CXX executable ../../bin/llama-infill
[ 84%] Built target llama-infill
[ 84%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 84%] Linking CXX executable ../../bin/llama-lookup-create
[ 84%] Linking CXX executable ../../bin/llama-lookup
[ 84%] Built target llama-lookup-create
[ 85%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 85%] Built target llama-lookup
[ 85%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 85%] Linking CXX executable ../../bin/llama-lookup-merge
[ 85%] Built target llama-lookup-merge
[ 86%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 87%] Linking CXX executable ../../bin/llama-lookup-stats
[ 87%] Linking CXX executable ../../bin/llama-imatrix
[ 87%] Built target llama-lookup-stats
[ 88%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 88%] Built target llama-imatrix
[ 88%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 88%] Linking CXX executable ../../bin/llama-parallel
[ 88%] Linking CXX executable ../../bin/llama-passkey
[ 88%] Built target llama-parallel
[ 89%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 89%] Built target llama-passkey
[ 90%] Generating loading.html.hpp
[ 90%] Generating index.html.hpp
[ 90%] Linking CXX executable ../../bin/llama-cli
[ 90%] Built target llama-cli
[ 90%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 90%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[ 91%] Linking CXX executable ../../bin/llama-quantize
[ 91%] Built target llama-quantize
[ 91%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-save-load-state
[ 92%] Built target llama-save-load-state
[ 92%] Building CXX object examples/speculative-simple/CMakeFiles/llama-speculative-simple.dir/speculative-simple.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-retrieval
[ 92%] Built target llama-retrieval
[ 92%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 93%] Linking CXX executable ../../bin/llama-tokenize
[ 93%] Built target llama-tokenize
[ 94%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 95%] Linking CXX executable ../../bin/llama-speculative-simple
[ 95%] Built target llama-speculative-simple
[ 95%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-speculative
[ 96%] Linking CXX executable ../../bin/llama-perplexity
[ 96%] Built target llama-speculative
[ 96%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 96%] Built target llama-perplexity
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 96%] Built target llama-convert-llama2c-to-ggml
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 97%] Linking CXX executable ../../bin/llama-llava-cli
[ 97%] Linking CXX executable ../../bin/llama-bench
[ 97%] Built target llama-bench
[ 97%] Built target llama-llava-cli
[ 97%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 97%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 98%] Linking CXX executable ../../bin/llama-vdot
[ 98%] Linking CXX executable ../../bin/llama-q8dot
[ 98%] Built target llama-q8dot
[ 98%] Built target llama-vdot
[ 99%] Linking CXX executable ../../bin/llama-cvector-generator
[ 99%] Built target llama-cvector-generator
[ 99%] Linking CXX executable ../../bin/llama-export-lora
[ 99%] Built target llama-export-lora
[100%] Linking CXX executable ../../bin/llama-minicpmv-cli
[100%] Built target llama-minicpmv-cli
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m52.821s
user	1m59.856s
sys	0m9.423s
+ '[' -z ']'
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_release-ctest.log
+ ctest --output-on-failure -L main
Test project /home/ggml/work/llama.cpp/build-ci-release
      Start  1: test-tokenizer-0-bert-bge
 1/27 Test  #1: test-tokenizer-0-bert-bge .........   Passed    0.61 sec
      Start  2: test-tokenizer-0-command-r
 2/27 Test  #2: test-tokenizer-0-command-r ........   Passed    1.47 sec
      Start  3: test-tokenizer-0-deepseek-coder
 3/27 Test  #3: test-tokenizer-0-deepseek-coder ...   Passed    0.61 sec
      Start  4: test-tokenizer-0-deepseek-llm
 4/27 Test  #4: test-tokenizer-0-deepseek-llm .....   Passed    0.83 sec
      Start  5: test-tokenizer-0-falcon
 5/27 Test  #5: test-tokenizer-0-falcon ...........   Passed    0.71 sec
      Start  6: test-tokenizer-0-gpt-2
 6/27 Test  #6: test-tokenizer-0-gpt-2 ............   Passed    0.67 sec
      Start  7: test-tokenizer-0-llama-bpe
 7/27 Test  #7: test-tokenizer-0-llama-bpe ........   Passed    1.15 sec
      Start  8: test-tokenizer-0-llama-spm
 8/27 Test  #8: test-tokenizer-0-llama-spm ........   Passed    0.86 sec
      Start  9: test-tokenizer-0-mpt
 9/27 Test  #9: test-tokenizer-0-mpt ..............   Passed    0.67 sec
      Start 10: test-tokenizer-0-phi-3
10/27 Test #10: test-tokenizer-0-phi-3 ............   Passed    0.58 sec
      Start 11: test-tokenizer-0-qwen2
11/27 Test #11: test-tokenizer-0-qwen2 ............   Passed    1.00 sec
      Start 12: test-tokenizer-0-refact
12/27 Test #12: test-tokenizer-0-refact ...........   Passed    0.68 sec
      Start 13: test-tokenizer-0-starcoder
13/27 Test #13: test-tokenizer-0-starcoder ........   Passed    0.67 sec
      Start 14: test-sampling
14/27 Test #14: test-sampling .....................   Passed    1.48 sec
      Start 15: test-grammar-parser
15/27 Test #15: test-grammar-parser ...............   Passed    0.04 sec
      Start 16: test-grammar-integration
16/27 Test #16: test-grammar-integration ..........   Passed    0.05 sec
      Start 17: test-llama-grammar
17/27 Test #17: test-llama-grammar ................   Passed    0.04 sec
      Start 18: test-json-schema-to-grammar
18/27 Test #18: test-json-schema-to-grammar .......   Passed    2.73 sec
      Start 19: test-tokenizer-1-llama-spm
19/27 Test #19: test-tokenizer-1-llama-spm ........   Passed    0.84 sec
      Start 20: test-log
20/27 Test #20: test-log ..........................   Passed    0.02 sec
      Start 21: test-arg-parser
21/27 Test #21: test-arg-parser ...................   Passed    0.24 sec
      Start 22: test-chat-template
22/27 Test #22: test-chat-template ................   Passed    0.04 sec
      Start 23: test-backend-ops
23/27 Test #23: test-backend-ops ..................   Passed   44.92 sec
      Start 26: test-barrier
24/27 Test #26: test-barrier ......................   Passed    0.49 sec
      Start 27: test-quantize-fns
25/27 Test #27: test-quantize-fns .................   Passed   18.48 sec
      Start 28: test-quantize-perf
26/27 Test #28: test-quantize-perf ................   Passed    0.11 sec
      Start 29: test-rope
27/27 Test #29: test-rope .........................   Passed    0.05 sec

100% tests passed, 0 tests failed out of 27

Label Time Summary:
main    =  80.03 sec*proc (27 tests)

Total Test time (real) =  80.04 sec

real	1m20.079s
user	1m40.356s
sys	0m12.598s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_embd_bge_small
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ tee /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/embd_bge_small.log
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:32 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:32 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json [711396/711396] -> "tokenizer.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:32 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json [366/366] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:32 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json [125/125] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:33 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json [52/52] -> "sentence_bert_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:33 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt [231508/231508] -> "vocab.txt" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:33 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json [349/349] -> "modules.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:33 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/1_Pooling https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
+ local out=models-mnt/bge-small/1_Pooling
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/1_Pooling
+ cd models-mnt/bge-small/1_Pooling
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:34 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json [190/190] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ path_models=../models-mnt/bge-small
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/embd_bge_small-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- Including CPU backend
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- Adding CPU backend variant ggml-cpu: -march=native 
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA Toolkit found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- Including CUDA backend
-- Configuring done (9.1s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m9.383s
user	0m7.449s
sys	0m1.944s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/embd_bge_small-make.log
++ nproc
+ make -j6
[  0%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  0%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-alloc.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  3%] Built target build_info
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-backend.cpp.o
[  3%] Built target xxhash
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-opt.cpp.o
[  3%] Built target sha256
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-threading.cpp.o
[  4%] Built target sha1
[  4%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-quants.c.o
[  5%] Linking CXX shared library libggml-base.so
[  5%] Built target ggml-base
[  5%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.c.o
[  5%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-aarch64.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-hbm.cpp.o
[  7%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-quants.c.o
[  7%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/acc.cu.o
[  7%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-traits.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/amx.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/mmq.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/llamafile/sgemm.cpp.o
[  8%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/arange.cu.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argmax.cu.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argsort.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/binbcast.cu.o
[ 11%] Linking CXX shared library libggml-cpu.so
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/clamp.cu.o
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/concat.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/conv-transpose-1d.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/convert.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/count-equal.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cpy.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cross-entropy-loss.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/diagmask.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f16.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f32.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/getrows.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/ggml-cuda.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/im2col.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmv.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmvq.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/norm.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/opt-step-adamw.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pad.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/out-prod.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pool2d.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/quantize.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/rope.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/scale.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/softmax.cu.o
[ 21%] Built target ggml-cpu
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sum.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/tsembd.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sumrows.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/upscale.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/unary.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/wkv6.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq1_s.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_s.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xs.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_s.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xxs.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_xxs.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_nl.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q2_k.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_xs.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q3_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_0.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_1.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_k.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_1.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_k.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q6_k.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q8_0.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 35%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 35%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 37%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 37%] Linking CUDA shared library libggml-cuda.so
[ 37%] Built target ggml-cuda
[ 37%] Building CXX object ggml/src/CMakeFiles/ggml.dir/ggml-backend-reg.cpp.o
[ 38%] Linking CXX shared library libggml.so
[ 38%] Built target ggml
[ 38%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 40%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 41%] Linking CXX executable ../../bin/llama-gguf
[ 42%] Linking CXX executable ../../bin/llama-gguf-hash
[ 42%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 43%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 43%] Linking CXX shared library libllama.so
[ 43%] Built target llama-gguf
[ 43%] Built target llama-gguf-hash
[ 43%] Built target llama
[ 44%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 45%] Building CXX object examples/run/CMakeFiles/llama-run.dir/run.cpp.o
[ 46%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 46%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 47%] Building CXX object examples/simple-chat/CMakeFiles/llama-simple-chat.dir/simple-chat.cpp.o
[ 47%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 47%] Linking C executable ../bin/test-c
[ 47%] Linking CXX executable ../../bin/llama-simple
[ 47%] Linking CXX executable ../../bin/llama-simple-chat
[ 47%] Linking CXX executable ../../bin/llama-run
[ 47%] Linking CXX executable ../../bin/llama-quantize-stats
[ 47%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 48%] Built target test-c
[ 48%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 49%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 50%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 50%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 50%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 51%] Building CXX object common/CMakeFiles/common.dir/speculative.cpp.o
[ 51%] Built target llava
[ 51%] Built target llama-simple
[ 51%] Built target llama-simple-chat
[ 51%] Linking CXX static library libllava_static.a
[ 51%] Linking CXX static library libcommon.a
[ 52%] Linking CXX shared library libllava_shared.so
[ 52%] Built target llama-run
[ 52%] Built target llama-quantize-stats
[ 52%] Built target llava_static
[ 52%] Built target common
[ 52%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 54%] Linking CXX executable ../bin/test-tokenizer-0
[ 55%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 55%] Linking CXX executable ../bin/test-llama-grammar
[ 56%] Linking CXX executable ../bin/test-sampling
[ 56%] Linking CXX executable ../bin/test-grammar-parser
[ 57%] Linking CXX executable ../bin/test-grammar-integration
[ 57%] Built target llava_shared
[ 57%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 58%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 58%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 58%] Built target test-llama-grammar
[ 58%] Built target test-tokenizer-0
[ 58%] Built target test-grammar-parser
[ 59%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 60%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 61%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 61%] Built target test-sampling
[ 61%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 61%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 61%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 62%] Linking CXX executable ../bin/test-log
[ 62%] Built target test-grammar-integration
[ 63%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 64%] Linking CXX executable ../bin/test-arg-parser
[ 64%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 65%] Linking CXX executable ../bin/test-chat-template
[ 65%] Built target test-json-schema-to-grammar
[ 66%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 66%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 66%] Built target test-log
[ 66%] Linking CXX executable ../bin/test-backend-ops
[ 66%] Built target test-tokenizer-1-bpe
[ 66%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 66%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 66%] Built target test-tokenizer-1-spm
[ 67%] Linking CXX executable ../bin/test-model-load-cancel
[ 68%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 68%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 68%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 69%] Linking CXX executable ../bin/test-barrier
[ 70%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 70%] Linking CXX executable ../bin/test-autorelease
[ 70%] Built target test-chat-template
[ 70%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 70%] Built target test-arg-parser
[ 71%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 71%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 71%] Linking CXX executable ../bin/test-quantize-fns
[ 72%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 72%] Built target test-backend-ops
[ 72%] Built target test-model-load-cancel
[ 72%] Linking CXX executable ../bin/test-quantize-perf
[ 73%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 73%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 73%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 74%] Linking CXX executable ../../bin/llama-batched-bench
[ 74%] Built target test-barrier
[ 74%] Linking CXX executable ../bin/test-rope
[ 74%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 74%] Built target test-autorelease
[ 75%] Linking CXX executable ../../bin/llama-batched
[ 75%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 76%] Linking CXX executable ../../bin/llama-embedding
[ 76%] Built target test-quantize-fns
[ 76%] Built target test-quantize-perf
[ 76%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 77%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 78%] Linking CXX executable ../../bin/llama-eval-callback
[ 78%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 78%] Built target test-rope
[ 78%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 79%] Linking CXX executable ../../bin/llama-gguf-split
[ 79%] Built target llama-batched-bench
[ 79%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 79%] Linking CXX executable ../../bin/llama-gritlm
[ 79%] Built target llama-batched
[ 80%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 80%] Built target llama-embedding
[ 80%] Built target llama-gbnf-validator
[ 81%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 81%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-imatrix
[ 81%] Linking CXX executable ../../bin/llama-bench
[ 81%] Linking CXX executable ../../bin/llama-infill
[ 81%] Built target llama-eval-callback
[ 81%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 81%] Built target llama-gguf-split
[ 82%] Linking CXX executable ../../bin/llama-lookahead
[ 82%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 82%] Linking CXX executable ../../bin/llama-lookup
[ 82%] Built target llama-gritlm
[ 83%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 83%] Built target llama-bench
[ 83%] Linking CXX executable ../../bin/llama-lookup-create
[ 84%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 84%] Built target llama-imatrix
[ 84%] Linking CXX executable ../../bin/llama-lookup-merge
[ 84%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 85%] Linking CXX executable ../../bin/llama-lookup-stats
[ 85%] Built target llama-infill
[ 86%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 86%] Built target llama-lookup
[ 86%] Linking CXX executable ../../bin/llama-cli
[ 86%] Built target llama-lookahead
[ 86%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 86%] Linking CXX executable ../../bin/llama-parallel
[ 87%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 87%] Built target llama-lookup-merge
[ 87%] Linking CXX executable ../../bin/llama-passkey
[ 88%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 88%] Linking CXX executable ../../bin/llama-perplexity
[ 88%] Built target llama-lookup-create
[ 88%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 89%] Linking CXX executable ../../bin/llama-quantize
[ 89%] Built target llama-lookup-stats
[ 90%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 90%] Linking CXX executable ../../bin/llama-retrieval
[ 90%] Built target llama-cli
[ 91%] Generating loading.html.hpp
[ 91%] Generating index.html.hpp
[ 91%] Built target llama-passkey
[ 91%] Built target llama-parallel
[ 91%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 91%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 91%] Built target llama-quantize
[ 92%] Linking CXX executable ../../bin/llama-save-load-state
[ 92%] Built target llama-perplexity
[ 92%] Building CXX object examples/speculative-simple/CMakeFiles/llama-speculative-simple.dir/speculative-simple.cpp.o
[ 93%] Linking CXX executable ../../bin/llama-speculative
[ 93%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 94%] Linking CXX executable ../../bin/llama-speculative-simple
[ 95%] Linking CXX executable ../../bin/llama-tokenize
[ 95%] Built target llama-retrieval
[ 96%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 96%] Built target llama-save-load-state
[ 96%] Built target llama-tokenize
[ 96%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 96%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 97%] Linking CXX executable ../../bin/llama-cvector-generator
[ 97%] Linking CXX executable ../../bin/llama-export-lora
[ 97%] Built target llama-speculative
[ 97%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 97%] Built target llama-speculative-simple
[ 97%] Built target llama-convert-llama2c-to-ggml
[ 97%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 97%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 98%] Linking CXX executable ../../bin/llama-llava-cli
[ 98%] Linking CXX executable ../../bin/llama-vdot
[ 99%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 99%] Built target llama-export-lora
[ 99%] Built target llama-vdot
[ 99%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 99%] Built target llama-cvector-generator
[100%] Linking CXX executable ../../bin/llama-q8dot
[100%] Built target llama-llava-cli
[100%] Built target llama-minicpmv-cli
[100%] Built target llama-q8dot
[100%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m3.269s
user	0m8.906s
sys	0m3.090s
+ python3 ../convert_hf_to_gguf.py ../models-mnt/bge-small --outfile ../models-mnt/bge-small/ggml-model-f16.gguf
INFO:hf-to-gguf:Loading model: bge-small
INFO:gguf.gguf_writer:gguf: This GGUF file is for Little Endian only
INFO:hf-to-gguf:Exporting model...
INFO:hf-to-gguf:gguf: loading model part 'pytorch_model.bin'
INFO:hf-to-gguf:token_embd.weight,               torch.float32 --> F16, shape = {384, 30522}
INFO:hf-to-gguf:position_embd.weight,            torch.float32 --> F32, shape = {384, 512}
INFO:hf-to-gguf:token_types.weight,              torch.float32 --> F32, shape = {384, 2}
INFO:hf-to-gguf:token_embd_norm.weight,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:token_embd_norm.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.0.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.0.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.0.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.1.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.1.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.1.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.2.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.2.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.2.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.3.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.3.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.3.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.4.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.4.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.4.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.5.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.5.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.5.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.6.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.6.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.6.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.7.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.7.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.7.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.8.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.8.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.8.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.9.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.9.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.9.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_q.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_q.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_k.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_k.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_v.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_v.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output.weight,       torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_output.bias,         torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.ffn_up.weight,            torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.10.ffn_up.bias,              torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.10.ffn_down.weight,          torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.10.ffn_down.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.layer_output_norm.weight, torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.layer_output_norm.bias,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_q.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_q.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_k.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_k.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_v.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_v.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output.weight,       torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_output.bias,         torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.ffn_up.weight,            torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.11.ffn_up.bias,              torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.11.ffn_down.weight,          torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.11.ffn_down.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.layer_output_norm.weight, torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.layer_output_norm.bias,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:Set meta model
INFO:hf-to-gguf:Set model parameters
INFO:hf-to-gguf:gguf: context length = 512
INFO:hf-to-gguf:gguf: embedding length = 384
INFO:hf-to-gguf:gguf: feed forward length = 1536
INFO:hf-to-gguf:gguf: head count = 12
INFO:hf-to-gguf:gguf: layer norm epsilon = 1e-12
INFO:hf-to-gguf:gguf: file type = 1
INFO:hf-to-gguf:Set model tokenizer
INFO:gguf.vocab:Setting special token type unk to 100
INFO:gguf.vocab:Setting special token type sep to 102
INFO:gguf.vocab:Setting special token type pad to 0
INFO:gguf.vocab:Setting special token type cls to 101
INFO:gguf.vocab:Setting special token type mask to 103
INFO:hf-to-gguf:Set model quantization version
INFO:gguf.gguf_writer:Writing the following files:
INFO:gguf.gguf_writer:../models-mnt/bge-small/ggml-model-f16.gguf: n_tensors = 197, total_size = 66.9M
Writing:   0%|          | 0.00/66.9M [00:00<?, ?byte/s]Writing:  48%|████▊     | 32.2M/66.9M [00:00<00:00, 321Mbyte/s]Writing:  96%|█████████▋| 64.6M/66.9M [00:00<00:00, 319Mbyte/s]Writing: 100%|██████████| 66.9M/66.9M [00:00<00:00, 315Mbyte/s]
INFO:hf-to-gguf:Model successfully exported to ../models-mnt/bge-small/ggml-model-f16.gguf
+ model_f16=../models-mnt/bge-small/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/bge-small/ggml-model-q8_0.gguf
+ ./bin/llama-quantize ../models-mnt/bge-small/ggml-model-f16.gguf ../models-mnt/bge-small/ggml-model-q8_0.gguf q8_0
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/bge-small/ggml-model-f16.gguf' to '../models-mnt/bge-small/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 25 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = Bge Small
llama_model_loader: - kv   3:                           general.basename str              = bge
llama_model_loader: - kv   4:                         general.size_label str              = small
llama_model_loader: - kv   5:                           bert.block_count u32              = 12
llama_model_loader: - kv   6:                        bert.context_length u32              = 512
llama_model_loader: - kv   7:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   8:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   9:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv  10:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 1
llama_model_loader: - kv  12:                      bert.attention.causal bool             = false
llama_model_loader: - kv  13:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  14:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  15:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  16:                         tokenizer.ggml.pre str              = jina-v2-en
llama_model_loader: - kv  17:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  18:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  19:            tokenizer.ggml.unknown_token_id u32              = 100
llama_model_loader: - kv  20:          tokenizer.ggml.seperator_token_id u32              = 102
llama_model_loader: - kv  21:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  22:                tokenizer.ggml.cls_token_id u32              = 101
llama_model_loader: - kv  23:               tokenizer.ggml.mask_token_id u32              = 103
llama_model_loader: - kv  24:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  124 tensors
llama_model_loader: - type  f16:   73 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 197]                 position_embd.weight - [  384,   512,     1,     1], type =    f32, size =    0.750 MB
[   2/ 197]                    token_embd.weight - [  384, 30522,     1,     1], type =    f16, converting to q8_0 .. size =    22.35 MiB ->    11.88 MiB
[   3/ 197]                 token_embd_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   4/ 197]               token_embd_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   5/ 197]                   token_types.weight - [  384,     2,     1,     1], type =    f32, size =    0.003 MB
[   6/ 197]                    blk.0.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   7/ 197]                  blk.0.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[   8/ 197]               blk.0.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   9/ 197]             blk.0.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  10/ 197]          blk.0.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  11/ 197]        blk.0.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  12/ 197]                    blk.0.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  13/ 197]                  blk.0.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  14/ 197]                    blk.0.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  15/ 197]                  blk.0.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  16/ 197]                  blk.0.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  17/ 197]                blk.0.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  18/ 197]                    blk.0.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  19/ 197]                  blk.0.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  20/ 197]         blk.0.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  21/ 197]       blk.0.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  22/ 197]                    blk.1.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  23/ 197]                  blk.1.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  24/ 197]               blk.1.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  25/ 197]             blk.1.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  26/ 197]          blk.1.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  27/ 197]        blk.1.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  28/ 197]                    blk.1.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  29/ 197]                  blk.1.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  30/ 197]                    blk.1.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  31/ 197]                  blk.1.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  32/ 197]                  blk.1.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  33/ 197]                blk.1.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  34/ 197]                    blk.1.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  35/ 197]                  blk.1.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  36/ 197]         blk.1.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  37/ 197]       blk.1.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  38/ 197]                    blk.2.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  39/ 197]                  blk.2.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  40/ 197]               blk.2.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  41/ 197]             blk.2.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  42/ 197]          blk.2.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  43/ 197]        blk.2.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  44/ 197]                    blk.2.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  45/ 197]                  blk.2.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  46/ 197]                    blk.2.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  47/ 197]                  blk.2.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  48/ 197]                  blk.2.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  49/ 197]                blk.2.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  50/ 197]                    blk.2.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  51/ 197]                  blk.2.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  52/ 197]         blk.2.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  53/ 197]       blk.2.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  54/ 197]                    blk.3.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  55/ 197]                  blk.3.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  56/ 197]               blk.3.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  57/ 197]             blk.3.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  58/ 197]          blk.3.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  59/ 197]        blk.3.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  60/ 197]                    blk.3.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  61/ 197]                  blk.3.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  62/ 197]                    blk.3.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  63/ 197]                  blk.3.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  64/ 197]                  blk.3.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  65/ 197]                blk.3.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  66/ 197]                    blk.3.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  67/ 197]                  blk.3.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  68/ 197]         blk.3.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  69/ 197]       blk.3.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  70/ 197]                    blk.4.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  71/ 197]                  blk.4.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  72/ 197]               blk.4.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  73/ 197]             blk.4.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  74/ 197]          blk.4.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  75/ 197]        blk.4.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  76/ 197]                    blk.4.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  77/ 197]                  blk.4.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  78/ 197]                    blk.4.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  79/ 197]                  blk.4.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  80/ 197]                  blk.4.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  81/ 197]                blk.4.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  82/ 197]                    blk.4.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  83/ 197]                  blk.4.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  84/ 197]         blk.4.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  85/ 197]       blk.4.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  86/ 197]                    blk.5.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  87/ 197]                  blk.5.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  88/ 197]               blk.5.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  89/ 197]             blk.5.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  90/ 197]          blk.5.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  91/ 197]        blk.5.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  92/ 197]                    blk.5.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  93/ 197]                  blk.5.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  94/ 197]                    blk.5.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  95/ 197]                  blk.5.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  96/ 197]                  blk.5.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  97/ 197]                blk.5.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  98/ 197]                    blk.5.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  99/ 197]                  blk.5.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 100/ 197]         blk.5.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 101/ 197]       blk.5.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 102/ 197]                    blk.6.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 103/ 197]                  blk.6.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 104/ 197]               blk.6.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 105/ 197]             blk.6.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 106/ 197]          blk.6.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 107/ 197]        blk.6.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 108/ 197]                    blk.6.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 109/ 197]                  blk.6.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 110/ 197]                    blk.6.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 111/ 197]                  blk.6.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 112/ 197]                  blk.6.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 113/ 197]                blk.6.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 114/ 197]                    blk.6.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 115/ 197]                  blk.6.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 116/ 197]         blk.6.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 117/ 197]       blk.6.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 118/ 197]                    blk.7.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 119/ 197]                  blk.7.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 120/ 197]               blk.7.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 121/ 197]             blk.7.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 122/ 197]          blk.7.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 123/ 197]        blk.7.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 124/ 197]                    blk.7.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 125/ 197]                  blk.7.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 126/ 197]                    blk.7.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 127/ 197]                  blk.7.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 128/ 197]                  blk.7.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 129/ 197]                blk.7.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 130/ 197]                    blk.7.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 131/ 197]                  blk.7.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 132/ 197]         blk.7.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 133/ 197]       blk.7.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 134/ 197]                    blk.8.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 135/ 197]                  blk.8.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 136/ 197]               blk.8.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 137/ 197]             blk.8.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 138/ 197]          blk.8.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 139/ 197]        blk.8.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 140/ 197]                    blk.8.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 141/ 197]                  blk.8.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 142/ 197]                    blk.8.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 143/ 197]                  blk.8.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 144/ 197]                  blk.8.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 145/ 197]                blk.8.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 146/ 197]                    blk.8.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 147/ 197]                  blk.8.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 148/ 197]         blk.8.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 149/ 197]       blk.8.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 150/ 197]                    blk.9.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 151/ 197]                  blk.9.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 152/ 197]               blk.9.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 153/ 197]             blk.9.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 154/ 197]          blk.9.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 155/ 197]        blk.9.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 156/ 197]                    blk.9.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 157/ 197]                  blk.9.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 158/ 197]                    blk.9.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 159/ 197]                  blk.9.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 160/ 197]                  blk.9.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 161/ 197]                blk.9.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 162/ 197]                    blk.9.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 163/ 197]                  blk.9.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 164/ 197]         blk.9.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 165/ 197]       blk.9.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 166/ 197]                   blk.10.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 167/ 197]                 blk.10.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 168/ 197]              blk.10.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 169/ 197]            blk.10.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 170/ 197]         blk.10.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 171/ 197]       blk.10.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 172/ 197]                   blk.10.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 173/ 197]                 blk.10.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 174/ 197]                   blk.10.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 175/ 197]                 blk.10.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 176/ 197]                 blk.10.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 177/ 197]               blk.10.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 178/ 197]                   blk.10.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 179/ 197]                 blk.10.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 180/ 197]        blk.10.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 181/ 197]      blk.10.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 182/ 197]                   blk.11.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 183/ 197]                 blk.11.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 184/ 197]              blk.11.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 185/ 197]            blk.11.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 186/ 197]         blk.11.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 187/ 197]       blk.11.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 188/ 197]                   blk.11.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 189/ 197]                 blk.11.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 190/ 197]                   blk.11.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 191/ 197]                 blk.11.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 192/ 197]                 blk.11.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 193/ 197]               blk.11.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 194/ 197]                   blk.11.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 195/ 197]                 blk.11.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 196/ 197]        blk.11.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 197/ 197]      blk.11.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
llama_model_quantize_internal: model size  =    63.84 MB
llama_model_quantize_internal: quant size  =    34.38 MB

main: quantize time =   458.76 ms
main:    total time =   458.76 ms
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/embd_bge_small-tg-f16.log
+ ./bin/llama-embedding --model ../models-mnt/bge-small/ggml-model-f16.gguf -p 'I believe the meaning of life is' -ngl 99 -c 0
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.324 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.302.112 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.307.213 I llama_model_loader: loaded meta data with 25 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.307.230 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.307.239 I llama_model_loader: - kv   0:                       general.architecture str              = bert
0.00.307.240 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.307.241 I llama_model_loader: - kv   2:                               general.name str              = Bge Small
0.00.307.242 I llama_model_loader: - kv   3:                           general.basename str              = bge
0.00.307.243 I llama_model_loader: - kv   4:                         general.size_label str              = small
0.00.307.249 I llama_model_loader: - kv   5:                           bert.block_count u32              = 12
0.00.307.250 I llama_model_loader: - kv   6:                        bert.context_length u32              = 512
0.00.307.250 I llama_model_loader: - kv   7:                      bert.embedding_length u32              = 384
0.00.307.251 I llama_model_loader: - kv   8:                   bert.feed_forward_length u32              = 1536
0.00.307.252 I llama_model_loader: - kv   9:                  bert.attention.head_count u32              = 12
0.00.307.258 I llama_model_loader: - kv  10:          bert.attention.layer_norm_epsilon f32              = 0.000000
0.00.307.259 I llama_model_loader: - kv  11:                          general.file_type u32              = 1
0.00.307.260 I llama_model_loader: - kv  12:                      bert.attention.causal bool             = false
0.00.307.261 I llama_model_loader: - kv  13:                          bert.pooling_type u32              = 2
0.00.307.261 I llama_model_loader: - kv  14:            tokenizer.ggml.token_type_count u32              = 2
0.00.307.262 I llama_model_loader: - kv  15:                       tokenizer.ggml.model str              = bert
0.00.307.264 I llama_model_loader: - kv  16:                         tokenizer.ggml.pre str              = jina-v2-en
0.00.311.726 I llama_model_loader: - kv  17:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
0.00.312.791 I llama_model_loader: - kv  18:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.312.797 I llama_model_loader: - kv  19:            tokenizer.ggml.unknown_token_id u32              = 100
0.00.312.798 I llama_model_loader: - kv  20:          tokenizer.ggml.seperator_token_id u32              = 102
0.00.312.798 I llama_model_loader: - kv  21:            tokenizer.ggml.padding_token_id u32              = 0
0.00.312.799 I llama_model_loader: - kv  22:                tokenizer.ggml.cls_token_id u32              = 101
0.00.312.800 I llama_model_loader: - kv  23:               tokenizer.ggml.mask_token_id u32              = 103
0.00.312.801 I llama_model_loader: - kv  24:               general.quantization_version u32              = 2
0.00.312.803 I llama_model_loader: - type  f32:  124 tensors
0.00.312.805 I llama_model_loader: - type  f16:   73 tensors
0.00.331.655 I llm_load_vocab: special tokens cache size = 5
0.00.335.805 I llm_load_vocab: token to piece cache size = 0.2032 MB
0.00.335.826 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.335.827 I llm_load_print_meta: arch             = bert
0.00.335.831 I llm_load_print_meta: vocab type       = WPM
0.00.335.832 I llm_load_print_meta: n_vocab          = 30522
0.00.335.833 I llm_load_print_meta: n_merges         = 0
0.00.335.833 I llm_load_print_meta: vocab_only       = 0
0.00.335.834 I llm_load_print_meta: n_ctx_train      = 512
0.00.335.834 I llm_load_print_meta: n_embd           = 384
0.00.335.835 I llm_load_print_meta: n_layer          = 12
0.00.335.852 I llm_load_print_meta: n_head           = 12
0.00.335.853 I llm_load_print_meta: n_head_kv        = 12
0.00.335.853 I llm_load_print_meta: n_rot            = 32
0.00.335.854 I llm_load_print_meta: n_swa            = 0
0.00.335.854 I llm_load_print_meta: n_embd_head_k    = 32
0.00.335.855 I llm_load_print_meta: n_embd_head_v    = 32
0.00.335.856 I llm_load_print_meta: n_gqa            = 1
0.00.335.860 I llm_load_print_meta: n_embd_k_gqa     = 384
0.00.335.861 I llm_load_print_meta: n_embd_v_gqa     = 384
0.00.335.863 I llm_load_print_meta: f_norm_eps       = 1.0e-12
0.00.335.863 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.335.864 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.335.865 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.335.865 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.335.866 I llm_load_print_meta: n_ff             = 1536
0.00.335.868 I llm_load_print_meta: n_expert         = 0
0.00.335.868 I llm_load_print_meta: n_expert_used    = 0
0.00.335.869 I llm_load_print_meta: causal attn      = 0
0.00.335.870 I llm_load_print_meta: pooling type     = 2
0.00.335.873 I llm_load_print_meta: rope type        = 2
0.00.335.873 I llm_load_print_meta: rope scaling     = linear
0.00.335.875 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.335.876 I llm_load_print_meta: freq_scale_train = 1
0.00.335.877 I llm_load_print_meta: n_ctx_orig_yarn  = 512
0.00.335.877 I llm_load_print_meta: rope_finetuned   = unknown
0.00.335.877 I llm_load_print_meta: ssm_d_conv       = 0
0.00.335.879 I llm_load_print_meta: ssm_d_inner      = 0
0.00.335.880 I llm_load_print_meta: ssm_d_state      = 0
0.00.335.880 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.335.881 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.335.882 I llm_load_print_meta: model type       = 33M
0.00.335.883 I llm_load_print_meta: model ftype      = F16
0.00.335.885 I llm_load_print_meta: model params     = 33.21 M
0.00.335.886 I llm_load_print_meta: model size       = 63.84 MiB (16.12 BPW) 
0.00.335.886 I llm_load_print_meta: general.name     = Bge Small
0.00.335.887 I llm_load_print_meta: UNK token        = 100 '[UNK]'
0.00.335.888 I llm_load_print_meta: SEP token        = 102 '[SEP]'
0.00.335.888 I llm_load_print_meta: PAD token        = 0 '[PAD]'
0.00.335.889 I llm_load_print_meta: CLS token        = 101 '[CLS]'
0.00.335.889 I llm_load_print_meta: MASK token       = 103 '[MASK]'
0.00.335.890 I llm_load_print_meta: LF token         = 0 '[PAD]'
0.00.335.890 I llm_load_print_meta: max token length = 21
0.00.341.837 I llm_load_tensors: offloading 12 repeating layers to GPU
0.00.341.845 I llm_load_tensors: offloading output layer to GPU
0.00.341.846 I llm_load_tensors: offloaded 13/13 layers to GPU
0.00.341.851 I llm_load_tensors:        CUDA0 model buffer size =    40.73 MiB
0.00.341.852 I llm_load_tensors:   CPU_Mapped model buffer size =    23.11 MiB
................................................
0.00.355.706 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.711 I llama_new_context_with_model: n_ctx         = 512
0.00.355.711 I llama_new_context_with_model: n_ctx_per_seq = 512
0.00.355.712 I llama_new_context_with_model: n_batch       = 2048
0.00.355.712 I llama_new_context_with_model: n_ubatch      = 2048
0.00.355.713 I llama_new_context_with_model: flash_attn    = 0
0.00.355.718 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.719 I llama_new_context_with_model: freq_scale    = 1
0.00.356.096 I llama_kv_cache_init:      CUDA0 KV buffer size =     9.00 MiB
0.00.356.107 I llama_new_context_with_model: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
0.00.356.113 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.00 MiB
0.00.361.569 I llama_new_context_with_model:      CUDA0 compute buffer size =    16.00 MiB
0.00.361.578 I llama_new_context_with_model:  CUDA_Host compute buffer size =     2.51 MiB
0.00.361.579 I llama_new_context_with_model: graph nodes  = 429
0.00.361.580 I llama_new_context_with_model: graph splits = 4 (with bs=512), 2 (with bs=1)
0.00.361.586 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.396.667 I 
0.00.396.783 I system_info: n_threads = 6 (n_threads_batch = 6) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.398.529 I batch_decode: n_tokens = 9, n_seq = 1

embedding 0: -0.043791 -0.019930  0.007717 -0.000890  0.001525 -0.037058  0.109579  0.042494  0.092021 -0.015975  0.006739 -0.035715 -0.017795  0.014835  0.018141  0.015966 -0.011364  0.010407 -0.085244 -0.008340  0.091368 -0.017106 -0.060449 -0.024337  0.027424  0.076093  0.027938 -0.014490  0.017551 -0.033110 -0.037748 -0.019096  0.068648 -0.009900 -0.024991  0.072332 -0.046512  0.010987 -0.050209  0.047692  0.032319 -0.011984  0.021951  0.049652  0.010517  0.005671 -0.028764  0.008940 -0.018537 -0.051460 -0.046134  0.030468 -0.035532  0.054250 -0.069668  0.044215  0.029880  0.046287  0.073273 -0.042621  0.076190  0.038726 -0.181095  0.082581  0.042248 -0.064600 -0.060197 -0.017825  0.006434  0.005775  0.016948 -0.026739  0.064637  0.113003  0.035236 -0.067332  0.027016 -0.067262 -0.033564 -0.033238  0.033295  0.013677 -0.003299 -0.037554 -0.051900  0.055188 -0.001966 -0.038080  0.064398  0.028847 -0.043495 -0.029503 -0.039401  0.036140  0.008407 -0.015543 -0.036475  0.018080  0.028600  0.342776 -0.044613  0.056181  0.017577 -0.020918 -0.066821 -0.000089 -0.037911 -0.029941 -0.008519 -0.021725  0.000381 -0.003200  0.004140  0.018776 -0.008468  0.025729  0.049537 -0.000014  0.050968 -0.042583 -0.031848  0.023595  0.030550 -0.023192 -0.046272 -0.079327  0.115238  0.046842  0.027769 -0.040393  0.067762 -0.022793  0.010337 -0.033000 -0.018277  0.043895  0.024392  0.052516  0.007388  0.008954  0.011309 -0.074815 -0.065645 -0.026817 -0.041153 -0.023701  0.026549  0.007017  0.027591  0.053044 -0.036747  0.057678 -0.000199  0.031751 -0.019566 -0.022043  0.041119 -0.058935  0.019506  0.043137  0.043673  0.041546 -0.022416  0.027021 -0.021865  0.005446 -0.041427 -0.000910  0.024393  0.002115  0.044372 -0.022775  0.043626  0.064723  0.055233  0.037061 -0.000995  0.046106  0.045744 -0.008354  0.063197 -0.073229 -0.011945  0.032314  0.024090  0.014671 -0.033643  0.000941 -0.015870 -0.019042  0.048036  0.110991  0.028303  0.031415 -0.013235 -0.057531  0.006890  0.005154 -0.012310 -0.051287 -0.000946 -0.017642 -0.019557 -0.041017  0.009034 -0.057835  0.051028  0.052381 -0.009701 -0.040253 -0.014041 -0.024929 -0.017207  0.006093  0.006698 -0.026920  0.015473  0.030874  0.002549  0.023161 -0.022302 -0.098520 -0.051042 -0.278227 -0.014833 -0.061545 -0.027236  0.017608 -0.011072 -0.017122  0.034859  0.046990 -0.015356  0.014991 -0.025723  0.047952 -0.006111 -0.000661 -0.060866 -0.068867 -0.060453 -0.035871  0.043327 -0.054967  0.014977  0.000486 -0.057964 -0.010324  0.012502  0.151678  0.126992 -0.013697  0.041878 -0.025771  0.014120 -0.000979 -0.150371  0.045208  0.005243 -0.036192 -0.029689 -0.020199 -0.034929  0.010041  0.033497 -0.047980 -0.051988 -0.017442 -0.023511  0.047374  0.051944 -0.016602 -0.055518  0.025789 -0.005563  0.010749  0.038662  0.008198 -0.009703 -0.105695 -0.027354 -0.096299  0.024991 -0.011259  0.092497  0.056109  0.003670  0.027744  0.002135 -0.050908 -0.039955 -0.013443 -0.045024 -0.015412  0.002755 -0.043483 -0.077901  0.065135 -0.006766 -0.001662 -0.014782  0.071558  0.023641 -0.037098  0.009193  0.001534 -0.032231  0.015534  0.037782  0.000355 -0.053226  0.021342 -0.039873  0.000151  0.013585  0.019871 -0.057841  0.006530 -0.049311 -0.267777  0.038978 -0.068124  0.038444 -0.012433  0.041515 -0.016094  0.052446 -0.071138  0.011221  0.024880 -0.007267  0.081896  0.028446 -0.021517  0.040449 -0.004541 -0.074497 -0.014651  0.019930  0.002342  0.023146  0.197190 -0.043210 -0.025710 -0.004773 -0.019249  0.074100  0.001788 -0.032007 -0.036600 -0.044973  0.000552 -0.011536  0.018121 -0.029602 -0.008445  0.006431  0.050812 -0.014925  0.006066  0.026242 -0.030921  0.047921  0.114045 -0.040932 -0.011286  0.005520 -0.003716  0.024992 -0.059121  0.013742 -0.010384  0.038758  0.051543  0.035452  0.034884 -0.017123  0.026464 -0.014447 -0.050001  0.003142  0.054105  0.039791 -0.039385 

0.00.432.326 I llama_perf_context_print:        load time =      94.54 ms
0.00.432.330 I llama_perf_context_print: prompt eval time =      33.41 ms /     9 tokens (    3.71 ms per token,   269.41 tokens per second)
0.00.432.333 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.00.432.334 I llama_perf_context_print:       total time =      35.66 ms /    10 tokens

real	0m0.717s
user	0m0.212s
sys	0m0.506s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/embd_bge_small-tg-q8_0.log
+ ./bin/llama-embedding --model ../models-mnt/bge-small/ggml-model-q8_0.gguf -p 'I believe the meaning of life is' -ngl 99 -c 0
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.302 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.279.934 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.285.018 I llama_model_loader: loaded meta data with 25 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-q8_0.gguf (version GGUF V3 (latest))
0.00.285.033 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.285.041 I llama_model_loader: - kv   0:                       general.architecture str              = bert
0.00.285.042 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.285.044 I llama_model_loader: - kv   2:                               general.name str              = Bge Small
0.00.285.045 I llama_model_loader: - kv   3:                           general.basename str              = bge
0.00.285.046 I llama_model_loader: - kv   4:                         general.size_label str              = small
0.00.285.052 I llama_model_loader: - kv   5:                           bert.block_count u32              = 12
0.00.285.053 I llama_model_loader: - kv   6:                        bert.context_length u32              = 512
0.00.285.054 I llama_model_loader: - kv   7:                      bert.embedding_length u32              = 384
0.00.285.055 I llama_model_loader: - kv   8:                   bert.feed_forward_length u32              = 1536
0.00.285.056 I llama_model_loader: - kv   9:                  bert.attention.head_count u32              = 12
0.00.285.063 I llama_model_loader: - kv  10:          bert.attention.layer_norm_epsilon f32              = 0.000000
0.00.285.064 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.285.065 I llama_model_loader: - kv  12:                      bert.attention.causal bool             = false
0.00.285.066 I llama_model_loader: - kv  13:                          bert.pooling_type u32              = 2
0.00.285.066 I llama_model_loader: - kv  14:            tokenizer.ggml.token_type_count u32              = 2
0.00.285.067 I llama_model_loader: - kv  15:                       tokenizer.ggml.model str              = bert
0.00.285.068 I llama_model_loader: - kv  16:                         tokenizer.ggml.pre str              = jina-v2-en
0.00.289.618 I llama_model_loader: - kv  17:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
0.00.290.753 I llama_model_loader: - kv  18:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.290.758 I llama_model_loader: - kv  19:            tokenizer.ggml.unknown_token_id u32              = 100
0.00.290.759 I llama_model_loader: - kv  20:          tokenizer.ggml.seperator_token_id u32              = 102
0.00.290.760 I llama_model_loader: - kv  21:            tokenizer.ggml.padding_token_id u32              = 0
0.00.290.761 I llama_model_loader: - kv  22:                tokenizer.ggml.cls_token_id u32              = 101
0.00.290.762 I llama_model_loader: - kv  23:               tokenizer.ggml.mask_token_id u32              = 103
0.00.290.762 I llama_model_loader: - kv  24:               general.quantization_version u32              = 2
0.00.290.765 I llama_model_loader: - type  f32:  124 tensors
0.00.290.766 I llama_model_loader: - type q8_0:   73 tensors
0.00.308.594 I llm_load_vocab: special tokens cache size = 5
0.00.312.627 I llm_load_vocab: token to piece cache size = 0.2032 MB
0.00.312.641 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.312.642 I llm_load_print_meta: arch             = bert
0.00.312.643 I llm_load_print_meta: vocab type       = WPM
0.00.312.643 I llm_load_print_meta: n_vocab          = 30522
0.00.312.644 I llm_load_print_meta: n_merges         = 0
0.00.312.644 I llm_load_print_meta: vocab_only       = 0
0.00.312.645 I llm_load_print_meta: n_ctx_train      = 512
0.00.312.645 I llm_load_print_meta: n_embd           = 384
0.00.312.646 I llm_load_print_meta: n_layer          = 12
0.00.312.654 I llm_load_print_meta: n_head           = 12
0.00.312.655 I llm_load_print_meta: n_head_kv        = 12
0.00.312.656 I llm_load_print_meta: n_rot            = 32
0.00.312.656 I llm_load_print_meta: n_swa            = 0
0.00.312.657 I llm_load_print_meta: n_embd_head_k    = 32
0.00.312.657 I llm_load_print_meta: n_embd_head_v    = 32
0.00.312.659 I llm_load_print_meta: n_gqa            = 1
0.00.312.660 I llm_load_print_meta: n_embd_k_gqa     = 384
0.00.312.661 I llm_load_print_meta: n_embd_v_gqa     = 384
0.00.312.663 I llm_load_print_meta: f_norm_eps       = 1.0e-12
0.00.312.664 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.312.665 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.312.665 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.312.666 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.312.667 I llm_load_print_meta: n_ff             = 1536
0.00.312.667 I llm_load_print_meta: n_expert         = 0
0.00.312.668 I llm_load_print_meta: n_expert_used    = 0
0.00.312.668 I llm_load_print_meta: causal attn      = 0
0.00.312.669 I llm_load_print_meta: pooling type     = 2
0.00.312.669 I llm_load_print_meta: rope type        = 2
0.00.312.670 I llm_load_print_meta: rope scaling     = linear
0.00.312.672 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.312.673 I llm_load_print_meta: freq_scale_train = 1
0.00.312.674 I llm_load_print_meta: n_ctx_orig_yarn  = 512
0.00.312.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.312.675 I llm_load_print_meta: ssm_d_conv       = 0
0.00.312.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.312.676 I llm_load_print_meta: ssm_d_state      = 0
0.00.312.677 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.312.677 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.312.678 I llm_load_print_meta: model type       = 33M
0.00.312.679 I llm_load_print_meta: model ftype      = Q8_0
0.00.312.680 I llm_load_print_meta: model params     = 33.21 M
0.00.312.681 I llm_load_print_meta: model size       = 34.38 MiB (8.68 BPW) 
0.00.312.682 I llm_load_print_meta: general.name     = Bge Small
0.00.312.683 I llm_load_print_meta: UNK token        = 100 '[UNK]'
0.00.312.684 I llm_load_print_meta: SEP token        = 102 '[SEP]'
0.00.312.684 I llm_load_print_meta: PAD token        = 0 '[PAD]'
0.00.312.684 I llm_load_print_meta: CLS token        = 101 '[CLS]'
0.00.312.685 I llm_load_print_meta: MASK token       = 103 '[MASK]'
0.00.312.686 I llm_load_print_meta: LF token         = 0 '[PAD]'
0.00.312.689 I llm_load_print_meta: max token length = 21
0.00.316.510 I llm_load_tensors: offloading 12 repeating layers to GPU
0.00.316.518 I llm_load_tensors: offloading output layer to GPU
0.00.316.519 I llm_load_tensors: offloaded 13/13 layers to GPU
0.00.316.524 I llm_load_tensors:        CUDA0 model buffer size =    21.76 MiB
0.00.316.526 I llm_load_tensors:   CPU_Mapped model buffer size =    12.63 MiB
................................................
0.00.325.501 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.507 I llama_new_context_with_model: n_ctx         = 512
0.00.325.507 I llama_new_context_with_model: n_ctx_per_seq = 512
0.00.325.508 I llama_new_context_with_model: n_batch       = 2048
0.00.325.509 I llama_new_context_with_model: n_ubatch      = 2048
0.00.325.509 I llama_new_context_with_model: flash_attn    = 0
0.00.325.512 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.513 I llama_new_context_with_model: freq_scale    = 1
0.00.325.758 I llama_kv_cache_init:      CUDA0 KV buffer size =     9.00 MiB
0.00.325.768 I llama_new_context_with_model: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
0.00.325.774 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.00 MiB
0.00.330.401 I llama_new_context_with_model:      CUDA0 compute buffer size =    16.00 MiB
0.00.330.411 I llama_new_context_with_model:  CUDA_Host compute buffer size =     2.51 MiB
0.00.330.411 I llama_new_context_with_model: graph nodes  = 429
0.00.330.412 I llama_new_context_with_model: graph splits = 4 (with bs=512), 2 (with bs=1)
0.00.330.414 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.371.135 I 
0.00.371.239 I system_info: n_threads = 6 (n_threads_batch = 6) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.373.008 I batch_decode: n_tokens = 9, n_seq = 1

embedding 0: -0.044410 -0.020754  0.009170 -0.001655  0.002196 -0.036650  0.108931  0.042344  0.092309 -0.015072  0.005917 -0.036481 -0.018425  0.014472  0.017332  0.014432 -0.013508  0.010701 -0.084892 -0.007473  0.092652 -0.017753 -0.061696 -0.024788  0.028441  0.076682  0.026397 -0.014583  0.017679 -0.033615 -0.037828 -0.018343  0.068701 -0.009934 -0.024395  0.073155 -0.046605  0.010914 -0.050754  0.050080  0.033186 -0.012444  0.020459  0.049348  0.011134  0.005739 -0.028344  0.008502 -0.019006 -0.052754 -0.045980  0.030069 -0.035728  0.052555 -0.068303  0.044278  0.030528  0.047141  0.073743 -0.042495  0.074861  0.037862 -0.181810  0.082604  0.043203 -0.066060 -0.059883 -0.017352  0.005870  0.004658  0.016468 -0.027040  0.066044  0.112812  0.034565 -0.066982  0.027762 -0.067568 -0.034579 -0.033995  0.033031  0.013883 -0.003973 -0.037038 -0.052212  0.052915 -0.003172 -0.037021  0.062838  0.028698 -0.041871 -0.029677 -0.039289  0.035595  0.007587 -0.015758 -0.035207  0.018403  0.031150  0.344921 -0.043836  0.057503  0.016416 -0.021302 -0.063956 -0.000335 -0.036865 -0.029742 -0.008622 -0.019652  0.001899 -0.004259  0.004181  0.018599 -0.009188  0.025339  0.049193 -0.001480  0.050375 -0.040745 -0.031441  0.022472  0.030241 -0.023469 -0.043463 -0.080323  0.114177  0.047310  0.026666 -0.040173  0.067825 -0.023095  0.010348 -0.033761 -0.016901  0.044086  0.022973  0.051569  0.007891  0.007156  0.009548 -0.076084 -0.063888 -0.026735 -0.040055 -0.024399  0.027843  0.006767  0.026920  0.051560 -0.037914  0.058528  0.002075  0.032044 -0.018825 -0.021530  0.042409 -0.059515  0.018949  0.043093  0.043013  0.040919 -0.022027  0.028215 -0.024151  0.005923 -0.042390  0.000719  0.023584  0.001622  0.043504 -0.023005  0.042672  0.065502  0.055732  0.037359  0.001087  0.046751  0.044342 -0.008958  0.060285 -0.073106 -0.011162  0.033360  0.023168  0.015014 -0.034687  0.001036 -0.017213 -0.017897  0.046904  0.111633  0.029950  0.030634 -0.012233 -0.056736  0.005887  0.005323 -0.011585 -0.052474 -0.001368 -0.016781 -0.020660 -0.041139  0.009994 -0.058696  0.050963  0.051957 -0.010967 -0.040630 -0.014074 -0.025248 -0.015677  0.005633  0.007672 -0.027139  0.016029  0.030862  0.002174  0.022803 -0.022600 -0.097269 -0.050189 -0.277591 -0.013538 -0.061043 -0.027069  0.016976 -0.009901 -0.016431  0.034425  0.048713 -0.016629  0.016295 -0.024382  0.050051 -0.005073 -0.000616 -0.060138 -0.069789 -0.061331 -0.035584  0.044144 -0.055198  0.015151 -0.000431 -0.057344 -0.010267  0.011239  0.150962  0.126809 -0.012644  0.043929 -0.025468  0.014903 -0.000497 -0.150534  0.044320  0.006117 -0.036227 -0.029395 -0.020488 -0.034025  0.009633  0.035776 -0.048832 -0.052321 -0.017128 -0.024655  0.047610  0.050801 -0.016839 -0.057357  0.023445 -0.005886  0.012051  0.039080  0.008679 -0.007308 -0.106171 -0.027551 -0.097071  0.024256 -0.010987  0.092078  0.055347  0.005125  0.028129  0.000562 -0.051651 -0.038817 -0.013204 -0.045774 -0.015196  0.001976 -0.044282 -0.077479  0.065641 -0.006508 -0.001035 -0.016538  0.070822  0.024419 -0.036448  0.008217  0.001747 -0.033159  0.016623  0.038248  0.000537 -0.051665  0.022091 -0.038813  0.000273  0.012053  0.019895 -0.058657  0.005979 -0.049958 -0.268741  0.038455 -0.067912  0.037502 -0.012149  0.042876 -0.015161  0.051339 -0.072842  0.013249  0.023945 -0.007163  0.081980  0.028613 -0.021502  0.041956 -0.002837 -0.074286 -0.015218  0.020244  0.003307  0.022622  0.194816 -0.043627 -0.024185 -0.005286 -0.018513  0.073839  0.002023 -0.032209 -0.036646 -0.044497 -0.000062 -0.010959  0.018461 -0.027222 -0.009531  0.006318  0.049454 -0.015469  0.006199  0.026483 -0.030515  0.048648  0.111982 -0.042438 -0.011468  0.004811 -0.002940  0.025183 -0.060503  0.014708 -0.010021  0.037356  0.049106  0.035799  0.036678 -0.016969  0.026763 -0.015393 -0.050282  0.003638  0.054766  0.041528 -0.039214 

0.00.386.627 I llama_perf_context_print:        load time =      91.19 ms
0.00.386.630 I llama_perf_context_print: prompt eval time =      13.23 ms /     9 tokens (    1.47 ms per token,   680.17 tokens per second)
0.00.386.631 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.00.386.632 I llama_perf_context_print:       total time =      15.49 ms /    10 tokens

real	0m0.654s
user	0m0.160s
sys	0m0.507s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_rerank_tiny
+ tee /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/rerank_tiny.log
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:51 URL:https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json [1206/1206] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:52 URL:https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer.json [2030772/2030772] -> "tokenizer.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer_config.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:52 URL:https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer_config.json [1215/1215] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/special_tokens_map.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:52 URL:https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/special_tokens_map.json [280/280] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/resolve/main/pytorch_model.bin
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/sentence_bert_config.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/sentence_bert_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/sentence_bert_config.json
https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/sentence_bert_config.json:
2024-12-12 19:31:52 ERROR 404: Not Found.
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/vocab.txt
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/vocab.txt
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/vocab.txt
https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/vocab.txt:
2024-12-12 19:31:52 ERROR 404: Not Found.
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/modules.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/modules.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/modules.json
https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/modules.json:
2024-12-12 19:31:52 ERROR 404: Not Found.
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:31:53 URL:https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json [1206/1206] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/1_Pooling https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/1_Pooling/config.json
+ local out=models-mnt/rerank-tiny/1_Pooling
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/1_Pooling/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/1_Pooling
+ cd models-mnt/rerank-tiny/1_Pooling
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/1_Pooling/config.json
https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/1_Pooling/config.json:
2024-12-12 19:31:53 ERROR 404: Not Found.
+ cd /home/ggml/work/llama.cpp
+ path_models=../models-mnt/rerank-tiny
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/rerank_tiny-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- Including CPU backend
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- Adding CPU backend variant ggml-cpu: -march=native 
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA Toolkit found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- Including CUDA backend
-- Configuring done (9.1s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m9.362s
user	0m7.504s
sys	0m1.858s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/rerank_tiny-make.log
++ nproc
+ make -j6
[  1%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  1%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  1%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml.c.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  3%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-alloc.c.o
[  3%] Built target build_info
[  3%] Built target sha256
[  3%] Built target sha1
[  3%] Built target xxhash
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-backend.cpp.o
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-opt.cpp.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-threading.cpp.o
[  4%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-quants.c.o
[  5%] Linking CXX shared library libggml-base.so
[  5%] Built target ggml-base
[  5%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.c.o
[  5%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-aarch64.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-hbm.cpp.o
[  7%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-quants.c.o
[  7%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/acc.cu.o
[  7%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-traits.cpp.o
[  7%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/amx.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/mmq.cpp.o
[  8%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/arange.cu.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/llamafile/sgemm.cpp.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argmax.cu.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argsort.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/binbcast.cu.o
[ 11%] Linking CXX shared library libggml-cpu.so
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/clamp.cu.o
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/concat.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/conv-transpose-1d.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/convert.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/count-equal.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cpy.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cross-entropy-loss.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f16.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/diagmask.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f32.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/getrows.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/ggml-cuda.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/im2col.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmv.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmvq.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/norm.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/opt-step-adamw.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/out-prod.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pad.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pool2d.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/quantize.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/rope.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/scale.cu.o
[ 21%] Built target ggml-cpu
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/softmax.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sum.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/tsembd.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sumrows.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/unary.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/upscale.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/wkv6.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq1_s.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_s.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xs.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xxs.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_s.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_xxs.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_nl.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_xs.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q2_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q3_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_0.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_1.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_k.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_1.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_k.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q6_k.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q8_0.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 35%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 35%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 37%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 37%] Linking CUDA shared library libggml-cuda.so
[ 37%] Built target ggml-cuda
[ 37%] Building CXX object ggml/src/CMakeFiles/ggml.dir/ggml-backend-reg.cpp.o
[ 38%] Linking CXX shared library libggml.so
[ 38%] Built target ggml
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 40%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 40%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 41%] Linking CXX executable ../../bin/llama-gguf
[ 42%] Linking CXX executable ../../bin/llama-gguf-hash
[ 42%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 43%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 43%] Linking CXX shared library libllama.so
[ 43%] Built target llama-gguf
[ 43%] Built target llama-gguf-hash
[ 43%] Built target llama
[ 43%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 45%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 45%] Building CXX object examples/run/CMakeFiles/llama-run.dir/run.cpp.o
[ 46%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 47%] Building CXX object examples/simple-chat/CMakeFiles/llama-simple-chat.dir/simple-chat.cpp.o
[ 47%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 47%] Linking C executable ../bin/test-c
[ 47%] Linking CXX executable ../../bin/llama-simple
[ 47%] Linking CXX executable ../../bin/llama-run
[ 47%] Linking CXX executable ../../bin/llama-simple-chat
[ 47%] Linking CXX executable ../../bin/llama-quantize-stats
[ 47%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 48%] Built target test-c
[ 48%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 49%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 49%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 50%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 50%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 50%] Built target llava
[ 51%] Building CXX object common/CMakeFiles/common.dir/speculative.cpp.o
[ 51%] Linking CXX static library libllava_static.a
[ 51%] Built target llama-run
[ 51%] Built target llama-simple
[ 51%] Built target llama-simple-chat
[ 51%] Linking CXX static library libcommon.a
[ 52%] Linking CXX shared library libllava_shared.so
[ 52%] Built target llama-quantize-stats
[ 52%] Built target llava_static
[ 52%] Built target common
[ 52%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 55%] Linking CXX executable ../bin/test-tokenizer-0
[ 55%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 56%] Linking CXX executable ../bin/test-sampling
[ 56%] Linking CXX executable ../bin/test-llama-grammar
[ 56%] Linking CXX executable ../bin/test-grammar-parser
[ 57%] Linking CXX executable ../bin/test-grammar-integration
[ 57%] Built target llava_shared
[ 57%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 58%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 58%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 58%] Built target test-grammar-parser
[ 58%] Built target test-llama-grammar
[ 58%] Built target test-tokenizer-0
[ 59%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 59%] Built target test-sampling
[ 60%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 61%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 61%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 61%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 62%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 63%] Linking CXX executable ../bin/test-log
[ 63%] Linking CXX executable ../bin/test-arg-parser
[ 63%] Built target test-grammar-integration
[ 64%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 64%] Built target test-json-schema-to-grammar
[ 65%] Linking CXX executable ../bin/test-chat-template
[ 66%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 66%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 66%] Built target test-log
[ 66%] Built target test-tokenizer-1-bpe
[ 66%] Linking CXX executable ../bin/test-backend-ops
[ 66%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 66%] Built target test-tokenizer-1-spm
[ 66%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 66%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 67%] Linking CXX executable ../bin/test-model-load-cancel
[ 68%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 69%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 69%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 69%] Linking CXX executable ../bin/test-autorelease
[ 70%] Linking CXX executable ../bin/test-barrier
[ 70%] Built target test-arg-parser
[ 70%] Built target test-chat-template
[ 70%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 70%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 71%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 71%] Linking CXX executable ../bin/test-quantize-fns
[ 72%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 72%] Linking CXX executable ../bin/test-quantize-perf
[ 72%] Built target test-model-load-cancel
[ 72%] Built target test-backend-ops
[ 73%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 73%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 73%] Built target test-autorelease
[ 73%] Built target test-barrier
[ 73%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 73%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 73%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 73%] Linking CXX executable ../bin/test-rope
[ 74%] Linking CXX executable ../../bin/llama-batched-bench
[ 75%] Linking CXX executable ../../bin/llama-batched
[ 76%] Linking CXX executable ../../bin/llama-embedding
[ 76%] Built target test-quantize-fns
[ 76%] Built target test-quantize-perf
[ 76%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 77%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 78%] Linking CXX executable ../../bin/llama-eval-callback
[ 78%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 78%] Built target test-rope
[ 78%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 79%] Linking CXX executable ../../bin/llama-gguf-split
[ 79%] Built target llama-batched-bench
[ 79%] Built target llama-batched
[ 79%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 79%] Built target llama-gbnf-validator
[ 80%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 80%] Built target llama-embedding
[ 80%] Linking CXX executable ../../bin/llama-gritlm
[ 81%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 81%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-imatrix
[ 81%] Linking CXX executable ../../bin/llama-infill
[ 81%] Linking CXX executable ../../bin/llama-bench
[ 81%] Built target llama-eval-callback
[ 81%] Built target llama-gguf-split
[ 81%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 81%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 82%] Linking CXX executable ../../bin/llama-lookahead
[ 82%] Linking CXX executable ../../bin/llama-lookup
[ 82%] Built target llama-bench
[ 82%] Built target llama-imatrix
[ 83%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 83%] Built target llama-infill
[ 84%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 84%] Built target llama-gritlm
[ 84%] Linking CXX executable ../../bin/llama-lookup-create
[ 84%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 85%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 85%] Linking CXX executable ../../bin/llama-lookup-merge
[ 86%] Linking CXX executable ../../bin/llama-lookup-stats
[ 86%] Linking CXX executable ../../bin/llama-cli
[ 86%] Built target llama-lookahead
[ 86%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 86%] Built target llama-lookup
[ 86%] Linking CXX executable ../../bin/llama-parallel
[ 87%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 87%] Linking CXX executable ../../bin/llama-passkey
[ 87%] Built target llama-lookup-merge
[ 88%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 88%] Linking CXX executable ../../bin/llama-perplexity
[ 88%] Built target llama-lookup-create
[ 88%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 88%] Built target llama-cli
[ 88%] Built target llama-lookup-stats
[ 89%] Generating loading.html.hpp
[ 90%] Linking CXX executable ../../bin/llama-quantize
[ 91%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 91%] Generating index.html.hpp
[ 91%] Linking CXX executable ../../bin/llama-retrieval
[ 91%] Built target llama-parallel
[ 91%] Built target llama-passkey
[ 91%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 91%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-save-load-state
[ 93%] Linking CXX executable ../../bin/llama-speculative
[ 93%] Built target llama-perplexity
[ 93%] Built target llama-quantize
[ 93%] Building CXX object examples/speculative-simple/CMakeFiles/llama-speculative-simple.dir/speculative-simple.cpp.o
[ 93%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 94%] Linking CXX executable ../../bin/llama-speculative-simple
[ 95%] Linking CXX executable ../../bin/llama-tokenize
[ 95%] Built target llama-retrieval
[ 96%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 96%] Built target llama-save-load-state
[ 96%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 96%] Built target llama-speculative
[ 97%] Linking CXX executable ../../bin/llama-cvector-generator
[ 97%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 97%] Linking CXX executable ../../bin/llama-export-lora
[ 97%] Built target llama-tokenize
[ 97%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 97%] Built target llama-speculative-simple
[ 97%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 98%] Linking CXX executable ../../bin/llama-llava-cli
[ 99%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 99%] Built target llama-convert-llama2c-to-ggml
[ 99%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 99%] Linking CXX executable ../../bin/llama-vdot
[ 99%] Built target llama-cvector-generator
[ 99%] Built target llama-export-lora
[ 99%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 99%] Built target llama-vdot
[100%] Linking CXX executable ../../bin/llama-q8dot
[100%] Built target llama-llava-cli
[100%] Built target llama-minicpmv-cli
[100%] Built target llama-q8dot
[100%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m3.132s
user	0m8.600s
sys	0m3.044s
+ python3 ../convert_hf_to_gguf.py ../models-mnt/rerank-tiny --outfile ../models-mnt/rerank-tiny/ggml-model-f16.gguf
INFO:hf-to-gguf:Loading model: rerank-tiny
INFO:gguf.gguf_writer:gguf: This GGUF file is for Little Endian only
INFO:hf-to-gguf:Exporting model...
INFO:hf-to-gguf:gguf: loading model part 'pytorch_model.bin'
INFO:hf-to-gguf:token_embd.weight,              torch.bfloat16 --> F16, shape = {384, 61056}
INFO:hf-to-gguf:token_types.weight,             torch.bfloat16 --> F32, shape = {384, 2}
INFO:hf-to-gguf:token_embd_norm.weight,         torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:token_embd_norm.bias,           torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_q.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_q.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_k.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_k.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_v.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_v.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output.weight,       torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_output.bias,         torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.weight,  torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.bias,    torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.ffn_gate.weight,          torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.0.ffn_up.weight,            torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.0.ffn_down.weight,          torch.bfloat16 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.0.ffn_down.bias,            torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.weight, torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.bias,   torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_q.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_q.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_k.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_k.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_v.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_v.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output.weight,       torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_output.bias,         torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.weight,  torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.bias,    torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.ffn_gate.weight,          torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.1.ffn_up.weight,            torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.1.ffn_down.weight,          torch.bfloat16 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.1.ffn_down.bias,            torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.weight, torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.bias,   torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_q.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_q.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_k.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_k.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_v.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_v.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output.weight,       torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_output.bias,         torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.weight,  torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.bias,    torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.ffn_gate.weight,          torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.2.ffn_up.weight,            torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.2.ffn_down.weight,          torch.bfloat16 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.2.ffn_down.bias,            torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.weight, torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.bias,   torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_q.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_q.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_k.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_k.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_v.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_v.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output.weight,       torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_output.bias,         torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.weight,  torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.bias,    torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.ffn_gate.weight,          torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.3.ffn_up.weight,            torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.3.ffn_down.weight,          torch.bfloat16 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.3.ffn_down.bias,            torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.weight, torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.bias,   torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:cls.weight,                     torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:cls.bias,                       torch.bfloat16 --> F32, shape = {1}
INFO:hf-to-gguf:Set meta model
INFO:hf-to-gguf:Set model parameters
INFO:hf-to-gguf:gguf: context length = 8192
INFO:hf-to-gguf:gguf: embedding length = 384
INFO:hf-to-gguf:gguf: feed forward length = 1536
INFO:hf-to-gguf:gguf: head count = 12
INFO:hf-to-gguf:gguf: layer norm epsilon = 1e-12
INFO:hf-to-gguf:gguf: file type = 1
INFO:hf-to-gguf:Set model tokenizer
INFO:gguf.vocab:Adding 39382 merge(s).
INFO:gguf.vocab:Setting special token type bos to 0
INFO:gguf.vocab:Setting special token type eos to 2
INFO:gguf.vocab:Setting special token type unk to 3
INFO:gguf.vocab:Setting special token type sep to 2
INFO:gguf.vocab:Setting special token type pad to 1
INFO:gguf.vocab:Setting special token type cls to 0
INFO:gguf.vocab:Setting special token type mask to 4
INFO:hf-to-gguf:Set model quantization version
INFO:gguf.gguf_writer:Writing the following files:
INFO:gguf.gguf_writer:../models-mnt/rerank-tiny/ggml-model-f16.gguf: n_tensors = 70, total_size = 65.8M
Writing:   0%|          | 0.00/65.8M [00:00<?, ?byte/s]Writing:  71%|███████   | 46.9M/65.8M [00:00<00:00, 313Mbyte/s]Writing: 100%|██████████| 65.8M/65.8M [00:00<00:00, 298Mbyte/s]
INFO:hf-to-gguf:Model successfully exported to ../models-mnt/rerank-tiny/ggml-model-f16.gguf
+ model_f16=../models-mnt/rerank-tiny/ggml-model-f16.gguf
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
+ ./bin/llama-embedding --model ../models-mnt/rerank-tiny/ggml-model-f16.gguf -p 'what is panda?</s></s>hi\nwhat is panda?</s></s>it'\''s a bear\nwhat is panda?</s></s>The giant panda (Ailuropoda melanoleuca), sometimes called a panda bear or simply panda, is a bear species endemic to China.' -ngl 99 -c 0 --pooling rank --embd-normalize -1 --verbose-prompt
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.312 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.294.795 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.307.563 I llama_model_loader: loaded meta data with 29 key-value pairs and 70 tensors from ../models-mnt/rerank-tiny/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.307.579 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.307.590 I llama_model_loader: - kv   0:                       general.architecture str              = jina-bert-v2
0.00.307.591 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.307.593 I llama_model_loader: - kv   2:                               general.name str              = Jina Bert Implementation
0.00.307.593 I llama_model_loader: - kv   3:                       general.organization str              = Jinaai
0.00.307.594 I llama_model_loader: - kv   4:                         general.size_label str              = 33M
0.00.307.598 I llama_model_loader: - kv   5:                   jina-bert-v2.block_count u32              = 4
0.00.307.602 I llama_model_loader: - kv   6:                jina-bert-v2.context_length u32              = 8192
0.00.307.603 I llama_model_loader: - kv   7:              jina-bert-v2.embedding_length u32              = 384
0.00.307.604 I llama_model_loader: - kv   8:           jina-bert-v2.feed_forward_length u32              = 1536
0.00.307.604 I llama_model_loader: - kv   9:          jina-bert-v2.attention.head_count u32              = 12
0.00.307.611 I llama_model_loader: - kv  10:  jina-bert-v2.attention.layer_norm_epsilon f32              = 0.000000
0.00.307.612 I llama_model_loader: - kv  11:                          general.file_type u32              = 1
0.00.307.614 I llama_model_loader: - kv  12:              jina-bert-v2.attention.causal bool             = false
0.00.307.615 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.307.616 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = jina-v1-en
0.00.316.175 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,61056]   = ["<s>", "<pad>", "</s>", "<unk>", "<m...
0.00.318.339 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,61056]   = [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, ...
0.00.323.300 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,39382]   = ["t h", "i n", "a n", "e r", "th e", ...
0.00.323.306 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.323.307 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 2
0.00.323.308 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.323.309 I llama_model_loader: - kv  21:          tokenizer.ggml.seperator_token_id u32              = 2
0.00.323.309 I llama_model_loader: - kv  22:            tokenizer.ggml.padding_token_id u32              = 1
0.00.323.310 I llama_model_loader: - kv  23:                tokenizer.ggml.cls_token_id u32              = 0
0.00.323.311 I llama_model_loader: - kv  24:               tokenizer.ggml.mask_token_id u32              = 4
0.00.323.312 I llama_model_loader: - kv  25:            tokenizer.ggml.token_type_count u32              = 2
0.00.323.312 I llama_model_loader: - kv  26:               tokenizer.ggml.add_bos_token bool             = true
0.00.323.313 I llama_model_loader: - kv  27:               tokenizer.ggml.add_eos_token bool             = true
0.00.323.313 I llama_model_loader: - kv  28:               general.quantization_version u32              = 2
0.00.323.317 I llama_model_loader: - type  f32:   41 tensors
0.00.323.318 I llama_model_loader: - type  f16:   29 tensors
0.00.349.788 W llm_load_vocab: empty token at index 5
0.00.365.432 W llm_load_vocab: model vocab missing newline token, using special_pad_id instead
0.00.387.577 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.387.668 I llm_load_vocab: special tokens cache size = 5
0.00.900.879 I llm_load_vocab: token to piece cache size = 1.5060 MB
0.00.900.907 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.900.908 I llm_load_print_meta: arch             = jina-bert-v2
0.00.900.916 I llm_load_print_meta: vocab type       = BPE
0.00.900.917 I llm_load_print_meta: n_vocab          = 61056
0.00.900.918 I llm_load_print_meta: n_merges         = 39382
0.00.900.938 I llm_load_print_meta: vocab_only       = 0
0.00.900.940 I llm_load_print_meta: n_ctx_train      = 8192
0.00.900.940 I llm_load_print_meta: n_embd           = 384
0.00.900.941 I llm_load_print_meta: n_layer          = 4
0.00.900.956 I llm_load_print_meta: n_head           = 12
0.00.900.957 I llm_load_print_meta: n_head_kv        = 12
0.00.900.957 I llm_load_print_meta: n_rot            = 32
0.00.900.958 I llm_load_print_meta: n_swa            = 0
0.00.900.958 I llm_load_print_meta: n_embd_head_k    = 32
0.00.900.959 I llm_load_print_meta: n_embd_head_v    = 32
0.00.900.960 I llm_load_print_meta: n_gqa            = 1
0.00.900.964 I llm_load_print_meta: n_embd_k_gqa     = 384
0.00.900.965 I llm_load_print_meta: n_embd_v_gqa     = 384
0.00.900.967 I llm_load_print_meta: f_norm_eps       = 1.0e-12
0.00.900.968 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.900.968 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.900.969 I llm_load_print_meta: f_max_alibi_bias = 8.0e+00
0.00.900.971 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.900.972 I llm_load_print_meta: n_ff             = 1536
0.00.900.973 I llm_load_print_meta: n_expert         = 0
0.00.900.974 I llm_load_print_meta: n_expert_used    = 0
0.00.900.976 I llm_load_print_meta: causal attn      = 0
0.00.900.977 I llm_load_print_meta: pooling type     = -1
0.00.900.977 I llm_load_print_meta: rope type        = -1
0.00.900.978 I llm_load_print_meta: rope scaling     = linear
0.00.900.985 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.900.986 I llm_load_print_meta: freq_scale_train = 1
0.00.900.987 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.900.988 I llm_load_print_meta: rope_finetuned   = unknown
0.00.900.988 I llm_load_print_meta: ssm_d_conv       = 0
0.00.900.989 I llm_load_print_meta: ssm_d_inner      = 0
0.00.900.989 I llm_load_print_meta: ssm_d_state      = 0
0.00.900.991 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.900.991 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.900.992 I llm_load_print_meta: model type       = 33M
0.00.900.993 I llm_load_print_meta: model ftype      = F16
0.00.900.995 I llm_load_print_meta: model params     = 32.90 M
0.00.900.996 I llm_load_print_meta: model size       = 62.78 MiB (16.01 BPW) 
0.00.900.997 I llm_load_print_meta: general.name     = Jina Bert Implementation
0.00.900.998 I llm_load_print_meta: BOS token        = 0 '<s>'
0.00.900.998 I llm_load_print_meta: EOS token        = 2 '</s>'
0.00.901.000 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.901.000 I llm_load_print_meta: SEP token        = 2 '</s>'
0.00.901.001 I llm_load_print_meta: PAD token        = 1 '<pad>'
0.00.901.001 I llm_load_print_meta: CLS token        = 0 '<s>'
0.00.901.003 I llm_load_print_meta: MASK token       = 4 '<mask>'
0.00.901.004 I llm_load_print_meta: EOG token        = 2 '</s>'
0.00.901.005 I llm_load_print_meta: max token length = 45
0.00.905.659 I llm_load_tensors: offloading 4 repeating layers to GPU
0.00.905.667 I llm_load_tensors: offloading output layer to GPU
0.00.905.667 I llm_load_tensors: offloaded 5/5 layers to GPU
0.00.905.672 I llm_load_tensors:        CUDA0 model buffer size =    18.05 MiB
0.00.905.673 I llm_load_tensors:   CPU_Mapped model buffer size =    44.72 MiB
....................
0.00.913.524 I llama_new_context_with_model: n_seq_max     = 1
0.00.913.530 I llama_new_context_with_model: n_ctx         = 8192
0.00.913.531 I llama_new_context_with_model: n_ctx_per_seq = 8192
0.00.913.532 I llama_new_context_with_model: n_batch       = 2048
0.00.913.532 I llama_new_context_with_model: n_ubatch      = 2048
0.00.913.533 I llama_new_context_with_model: flash_attn    = 0
0.00.913.536 I llama_new_context_with_model: freq_base     = 10000.0
0.00.913.536 I llama_new_context_with_model: freq_scale    = 1
0.00.913.978 I llama_kv_cache_init:      CUDA0 KV buffer size =    48.00 MiB
0.00.913.989 I llama_new_context_with_model: KV self size  =   48.00 MiB, K (f16):   24.00 MiB, V (f16):   24.00 MiB
0.00.913.996 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.00 MiB
0.00.926.339 I llama_new_context_with_model:      CUDA0 compute buffer size =   223.00 MiB
0.00.926.350 I llama_new_context_with_model:  CUDA_Host compute buffer size =    19.02 MiB
0.00.926.351 I llama_new_context_with_model: graph nodes  = 154
0.00.926.352 I llama_new_context_with_model: graph splits = 4 (with bs=2048), 2 (with bs=1)
0.00.926.360 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.975.460 I 
0.00.975.563 I system_info: n_threads = 6 (n_threads_batch = 6) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.975.898 I main: prompt 0: 'what is panda?</s></s>hi'
0.00.975.904 I main: number of tokens in prompt = 9
     0 -> '<s>'
 21381 -> 'what'
 21152 -> 'is'
 49990 -> 'panda'
    61 -> '?'
     2 -> '</s>'
     2 -> '</s>'
 23233 -> 'hi'
     2 -> '</s>'


0.00.975.913 I main: prompt 1: 'what is panda?</s></s>it's a bear'
0.00.975.913 I main: number of tokens in prompt = 13
     0 -> '<s>'
 21381 -> 'what'
 21152 -> 'is'
 49990 -> 'panda'
    61 -> '?'
     2 -> '</s>'
     2 -> '</s>'
 21153 -> 'it'
    37 -> '''
    87 -> 's'
    69 -> 'a'
 25706 -> 'bear'
     2 -> '</s>'


0.00.975.923 I main: prompt 2: 'what is panda?</s></s>The giant panda (Ailuropoda melanoleuca), sometimes called a panda bear or simply panda, is a bear species endemic to China.'
0.00.975.923 I main: number of tokens in prompt = 40
     0 -> '<s>'
 21381 -> 'what'
 21152 -> 'is'
 49990 -> 'panda'
    61 -> '?'
     2 -> '</s>'
     2 -> '</s>'
 21215 -> 'he'
 28390 -> 'giant'
 49990 -> 'panda'
    38 -> '('
 21163 -> 'il'
 26237 -> 'uro'
 21223 -> 'po'
 23179 -> 'da'
 36906 -> 'melan'
 26791 -> 'ole'
    89 -> 'u'
 21402 -> 'ca'
 21686 -> '),'
 23314 -> 'sometimes'
 22517 -> 'called'
    69 -> 'a'
 49990 -> 'panda'
 25706 -> 'bear'
 21142 -> 'or'
 22810 -> 'simply'
 49990 -> 'panda'
    42 -> ','
 21152 -> 'is'
    69 -> 'a'
 25706 -> 'bear'
 25677 -> 'species'
 28930 -> 'ende'
 22024 -> 'mic'
 21148 -> 'to'
    76 -> 'h'
 22344 -> 'ina'
    44 -> '.'
     2 -> '</s>'


0.00.976.198 I batch_decode: n_tokens = 62, n_seq = 3

rerank score 0:    0.023
rerank score 1:    0.024
rerank score 2:    0.199

0.00.990.919 I llama_perf_context_print:        load time =     680.65 ms
0.00.990.922 I llama_perf_context_print: prompt eval time =      14.56 ms /    62 tokens (    0.23 ms per token,  4258.83 tokens per second)
0.00.990.924 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.00.990.926 I llama_perf_context_print:       total time =      15.46 ms /    63 tokens

real	0m1.297s
user	0m0.711s
sys	0m0.582s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ grep 'rerank score 0'
+ check_score 'rerank score 0' 'rerank score 0:    0.023' 0.00 0.05
+ qnt='rerank score 0'
++ echo 'rerank score 0:    0.023'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ score=0.023
++ echo '0.023 < 0.00'
++ bc
+ '[' 0 -eq 1 ']'
++ echo '0.023 > 0.05'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' 'rerank score 0' 0.023
+ return 0
  - rerank score 0 @ 0.023 OK
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ grep 'rerank score 1'
+ check_score 'rerank score 1' 'rerank score 1:    0.024' 0.00 0.05
+ qnt='rerank score 1'
++ echo 'rerank score 1:    0.024'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ score=0.024
++ echo '0.024 < 0.00'
++ bc
+ '[' 0 -eq 1 ']'
++ echo '0.024 > 0.05'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' 'rerank score 1' 0.024
+ return 0
  - rerank score 1 @ 0.024 OK
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ grep 'rerank score 2'
+ check_score 'rerank score 2' 'rerank score 2:    0.199' 0.10 0.30
+ qnt='rerank score 2'
++ echo 'rerank score 2:    0.199'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ score=0.199
++ echo '0.199 < 0.10'
++ bc
+ '[' 0 -eq 1 ']'
++ echo '0.199 > 0.30'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' 'rerank score 2' 0.199
+ return 0
  - rerank score 2 @ 0.199 OK
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_pythia_2_8b
+ tee /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b.log
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:32:10 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json [571/571] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:32:10 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json [2113710/2113710] -> "tokenizer.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:32:10 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json [396/396] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2024-12-12 19:32:11 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json [99/99] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/wikitext/ https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ local out=models-mnt/wikitext/
+ local url=https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/wikitext/
+ cd models-mnt/wikitext/
+ wget -nv -N https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ cd /home/ggml/work/llama.cpp
+ unzip -o models-mnt/wikitext/wikitext-2-raw-v1.zip -d models-mnt/wikitext/
Archive:  models-mnt/wikitext/wikitext-2-raw-v1.zip
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.test.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.valid.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.train.raw  
+ path_models=../models-mnt/pythia/2.8B
+ path_wiki=../models-mnt/wikitext/wikitext-2-raw
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- Including CPU backend
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- Adding CPU backend variant ggml-cpu: -march=native 
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA Toolkit found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- Including CUDA backend
-- Configuring done (9.4s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m9.643s
user	0m7.664s
sys	0m1.977s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-make.log
++ nproc
+ make -j6
[  0%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml.c.o
[  0%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  3%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-alloc.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  3%] Built target build_info
[  3%] Built target sha1
[  3%] Built target sha256
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-backend.cpp.o
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-opt.cpp.o
[  3%] Built target xxhash
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-threading.cpp.o
[  4%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-quants.c.o
[  5%] Linking CXX shared library libggml-base.so
[  5%] Built target ggml-base
[  5%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.c.o
[  5%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-aarch64.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-hbm.cpp.o
[  7%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-quants.c.o
[  7%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/acc.cu.o
[  7%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-traits.cpp.o
[  7%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/amx.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/mmq.cpp.o
[  8%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/arange.cu.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argmax.cu.o
[  9%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/llamafile/sgemm.cpp.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argsort.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/binbcast.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/clamp.cu.o
[ 11%] Linking CXX shared library libggml-cpu.so
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/concat.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/conv-transpose-1d.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/convert.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/count-equal.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cpy.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cross-entropy-loss.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/diagmask.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f16.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f32.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/getrows.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/ggml-cuda.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/im2col.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmv.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmvq.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/norm.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/opt-step-adamw.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/out-prod.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pad.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pool2d.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/quantize.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/rope.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/scale.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/softmax.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sum.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sumrows.cu.o
[ 22%] Built target ggml-cpu
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/tsembd.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/unary.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/upscale.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/wkv6.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq1_s.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_s.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xs.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xxs.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_s.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_xxs.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_nl.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_xs.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q2_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q3_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_0.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_1.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_k.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_1.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_k.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q6_k.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q8_0.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 35%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 35%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 36%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 37%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 37%] Linking CUDA shared library libggml-cuda.so
[ 37%] Built target ggml-cuda
[ 37%] Building CXX object ggml/src/CMakeFiles/ggml.dir/ggml-backend-reg.cpp.o
[ 38%] Linking CXX shared library libggml.so
[ 38%] Built target ggml
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 39%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 40%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 41%] Linking CXX executable ../../bin/llama-gguf
[ 42%] Linking CXX executable ../../bin/llama-gguf-hash
[ 42%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 43%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 43%] Linking CXX shared library libllama.so
[ 43%] Built target llama-gguf
[ 43%] Built target llama-gguf-hash
[ 43%] Built target llama
[ 44%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 44%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 45%] Building CXX object examples/run/CMakeFiles/llama-run.dir/run.cpp.o
[ 46%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 47%] Building CXX object examples/simple-chat/CMakeFiles/llama-simple-chat.dir/simple-chat.cpp.o
[ 47%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 47%] Linking C executable ../bin/test-c
[ 47%] Linking CXX executable ../../bin/llama-simple-chat
[ 47%] Linking CXX executable ../../bin/llama-simple
[ 47%] Linking CXX executable ../../bin/llama-run
[ 47%] Linking CXX executable ../../bin/llama-quantize-stats
[ 47%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 47%] Built target test-c
[ 48%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 49%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 49%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 49%] Built target llava
[ 50%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 50%] Linking CXX static library libllava_static.a
[ 50%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 50%] Built target llama-simple
[ 50%] Built target llama-simple-chat
[ 50%] Built target llama-run
[ 51%] Building CXX object common/CMakeFiles/common.dir/speculative.cpp.o
[ 51%] Built target llava_static
[ 52%] Linking CXX shared library libllava_shared.so
[ 52%] Built target llama-quantize-stats
[ 52%] Linking CXX static library libcommon.a
[ 52%] Built target common
[ 52%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 55%] Linking CXX executable ../bin/test-tokenizer-0
[ 55%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 55%] Linking CXX executable ../bin/test-grammar-parser
[ 55%] Linking CXX executable ../bin/test-llama-grammar
[ 56%] Linking CXX executable ../bin/test-sampling
[ 56%] Built target llava_shared
[ 57%] Linking CXX executable ../bin/test-grammar-integration
[ 57%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 58%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 58%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 58%] Built target test-tokenizer-0
[ 58%] Built target test-llama-grammar
[ 58%] Built target test-grammar-parser
[ 59%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 59%] Built target test-sampling
[ 60%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 61%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 61%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 61%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 61%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 62%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 62%] Linking CXX executable ../bin/test-arg-parser
[ 63%] Linking CXX executable ../bin/test-log
[ 63%] Built target test-grammar-integration
[ 64%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 64%] Built target test-json-schema-to-grammar
[ 65%] Linking CXX executable ../bin/test-chat-template
[ 66%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 66%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 66%] Linking CXX executable ../bin/test-backend-ops
[ 66%] Built target test-log
[ 66%] Built target test-tokenizer-1-bpe
[ 66%] Built target test-tokenizer-1-spm
[ 66%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 66%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 66%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 69%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 69%] Linking CXX executable ../bin/test-model-load-cancel
[ 69%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 69%] Linking CXX executable ../bin/test-autorelease
[ 70%] Linking CXX executable ../bin/test-barrier
[ 70%] Built target test-chat-template
[ 70%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 71%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 71%] Built target test-arg-parser
[ 71%] Linking CXX executable ../bin/test-quantize-fns
[ 71%] Built target test-backend-ops
[ 71%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 72%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 73%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 73%] Built target test-model-load-cancel
[ 73%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 73%] Linking CXX executable ../bin/test-quantize-perf
[ 73%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 73%] Linking CXX executable ../bin/test-rope
[ 74%] Linking CXX executable ../../bin/llama-batched-bench
[ 74%] Built target test-barrier
[ 74%] Built target test-autorelease
[ 74%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 74%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 75%] Linking CXX executable ../../bin/llama-batched
[ 76%] Linking CXX executable ../../bin/llama-embedding
[ 76%] Built target test-quantize-fns
[ 76%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-eval-callback
[ 77%] Built target test-rope
[ 77%] Built target test-quantize-perf
[ 77%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 79%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 79%] Linking CXX executable ../../bin/llama-gguf-split
[ 79%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 79%] Built target llama-batched-bench
[ 79%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 79%] Built target llama-batched
[ 79%] Linking CXX executable ../../bin/llama-gritlm
[ 80%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 80%] Built target llama-embedding
[ 81%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-imatrix
[ 81%] Built target llama-gguf-split
[ 81%] Linking CXX executable ../../bin/llama-infill
[ 81%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 81%] Built target llama-eval-callback
[ 81%] Built target llama-gbnf-validator
[ 81%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 81%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-bench
[ 82%] Linking CXX executable ../../bin/llama-lookup
[ 82%] Linking CXX executable ../../bin/llama-lookahead
[ 82%] Built target llama-gritlm
[ 83%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 83%] Built target llama-imatrix
[ 83%] Built target llama-infill
[ 83%] Built target llama-bench
[ 83%] Linking CXX executable ../../bin/llama-lookup-create
[ 84%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 84%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 85%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 86%] Linking CXX executable ../../bin/llama-lookup-merge
[ 86%] Linking CXX executable ../../bin/llama-lookup-stats
[ 86%] Linking CXX executable ../../bin/llama-cli
[ 86%] Built target llama-lookahead
[ 86%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 86%] Linking CXX executable ../../bin/llama-parallel
[ 86%] Built target llama-lookup
[ 87%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 87%] Linking CXX executable ../../bin/llama-passkey
[ 87%] Built target llama-lookup-merge
[ 88%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 88%] Linking CXX executable ../../bin/llama-perplexity
[ 88%] Built target llama-lookup-create
[ 88%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 88%] Built target llama-lookup-stats
[ 89%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 89%] Built target llama-cli
[ 90%] Linking CXX executable ../../bin/llama-quantize
[ 90%] Linking CXX executable ../../bin/llama-retrieval
[ 91%] Generating loading.html.hpp
[ 91%] Generating index.html.hpp
[ 91%] Built target llama-parallel
[ 91%] Built target llama-passkey
[ 91%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 91%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-save-load-state
[ 93%] Linking CXX executable ../../bin/llama-speculative
[ 93%] Built target llama-perplexity
[ 93%] Built target llama-quantize
[ 93%] Building CXX object examples/speculative-simple/CMakeFiles/llama-speculative-simple.dir/speculative-simple.cpp.o
[ 93%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 94%] Linking CXX executable ../../bin/llama-speculative-simple
[ 95%] Linking CXX executable ../../bin/llama-tokenize
[ 95%] Built target llama-retrieval
[ 96%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 96%] Built target llama-save-load-state
[ 96%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 96%] Built target llama-speculative
[ 96%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 97%] Linking CXX executable ../../bin/llama-cvector-generator
[ 97%] Built target llama-tokenize
[ 97%] Linking CXX executable ../../bin/llama-export-lora
[ 97%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 98%] Linking CXX executable ../../bin/llama-llava-cli
[ 98%] Built target llama-speculative-simple
[ 98%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 99%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 99%] Built target llama-convert-llama2c-to-ggml
[ 99%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 99%] Linking CXX executable ../../bin/llama-vdot
[ 99%] Built target llama-export-lora
[ 99%] Built target llama-cvector-generator
[ 99%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 99%] Built target llama-llava-cli
[100%] Linking CXX executable ../../bin/llama-q8dot
[100%] Built target llama-vdot
[100%] Built target llama-minicpmv-cli
[100%] Built target llama-q8dot
[100%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m3.146s
user	0m8.724s
sys	0m2.876s
+ python3 ../convert_hf_to_gguf.py ../models-mnt/pythia/2.8B --outfile ../models-mnt/pythia/2.8B/ggml-model-f16.gguf
INFO:hf-to-gguf:Loading model: 2.8B
INFO:gguf.gguf_writer:gguf: This GGUF file is for Little Endian only
INFO:hf-to-gguf:Exporting model...
INFO:hf-to-gguf:gguf: loading model part 'pytorch_model.bin'
INFO:hf-to-gguf:token_embd.weight,         torch.float16 --> F16, shape = {2560, 50304}
INFO:hf-to-gguf:blk.0.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.0.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.0.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.0.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.0.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.0.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.0.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.0.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.1.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.1.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.1.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.1.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.1.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.1.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.1.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.2.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.2.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.2.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.2.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.2.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.2.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.2.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.3.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.3.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.3.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.3.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.3.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.3.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.3.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.4.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.4.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.4.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.4.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.4.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.4.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.4.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.5.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.5.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.5.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.5.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.5.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.5.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.5.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.6.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.6.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.6.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.6.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.6.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.6.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.6.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.7.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.7.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.7.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.7.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.7.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.7.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.7.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.8.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.8.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.8.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.8.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.8.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.8.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.8.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.9.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.9.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.9.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.9.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.9.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.9.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.9.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.10.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.10.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.10.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.10.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.10.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.10.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.10.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.11.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.11.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.11.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.11.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.11.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.11.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.11.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.12.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.12.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.12.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.12.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.12.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.12.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.12.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.13.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.13.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.13.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.13.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.13.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.13.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.13.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.14.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.14.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.14.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.14.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.14.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.14.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.14.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.15.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.15.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.15.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.15.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.15.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.15.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.15.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.16.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.16.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.16.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.16.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.16.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.16.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.16.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.17.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.17.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.17.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.17.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.17.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.17.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.17.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.18.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.18.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.18.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.18.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.18.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.18.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.18.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.19.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.19.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.19.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.19.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.19.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.19.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.19.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.20.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.20.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.20.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.20.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.20.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.20.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.20.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.21.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.21.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.21.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.21.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.21.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.21.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.21.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.22.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.22.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.22.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.22.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.22.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.22.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.22.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.23.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.23.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.23.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.23.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.23.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.23.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.23.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.24.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.24.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.24.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.24.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.24.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.24.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.24.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.25.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.25.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.25.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.25.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.25.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.25.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.25.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.26.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.26.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.26.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.26.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.26.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.26.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.26.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.27.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.27.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.27.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.27.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.27.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.27.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.27.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.28.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.28.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.28.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.28.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.28.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.28.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.28.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.29.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.29.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.29.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.29.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.29.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.29.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.29.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.30.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.30.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.30.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.30.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.30.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.30.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.30.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.31.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.31.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.31.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.31.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.31.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.31.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.31.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output_norm.weight,        torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output_norm.bias,          torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output.weight,             torch.float16 --> F16, shape = {2560, 50304}
INFO:hf-to-gguf:Set meta model
INFO:hf-to-gguf:Set model parameters
INFO:hf-to-gguf:Set model tokenizer
/mnt/llama.cpp/venv/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1617: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be deprecated in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884
  warnings.warn(
INFO:gguf.vocab:Adding 50009 merge(s).
INFO:gguf.vocab:Setting special token type bos to 0
INFO:gguf.vocab:Setting special token type eos to 0
INFO:gguf.vocab:Setting special token type unk to 0
INFO:hf-to-gguf:Set model quantization version
INFO:gguf.gguf_writer:Writing the following files:
INFO:gguf.gguf_writer:../models-mnt/pythia/2.8B/ggml-model-f16.gguf: n_tensors = 388, total_size = 5.6G
Writing:   0%|          | 0.00/5.55G [00:00<?, ?byte/s]Writing:   5%|▍         | 258M/5.55G [00:00<00:04, 1.11Gbyte/s]Writing:   7%|▋         | 415M/5.55G [00:00<00:04, 1.08Gbyte/s]Writing:  10%|█         | 572M/5.55G [00:00<00:04, 1.07Gbyte/s]Writing:  13%|█▎        | 730M/5.55G [00:00<00:04, 1.07Gbyte/s]Writing:  16%|█▌        | 887M/5.55G [00:00<00:04, 1.07Gbyte/s]Writing:  19%|█▉        | 1.04G/5.55G [00:00<00:04, 1.05Gbyte/s]Writing:  22%|██▏       | 1.20G/5.55G [00:01<00:04, 1.06Gbyte/s]Writing:  24%|██▍       | 1.36G/5.55G [00:01<00:03, 1.06Gbyte/s]Writing:  27%|██▋       | 1.52G/5.55G [00:01<00:03, 1.05Gbyte/s]Writing:  29%|██▉       | 1.62G/5.55G [00:01<00:03, 1.04Gbyte/s]Writing:  31%|███       | 1.73G/5.55G [00:01<00:03, 1.04Gbyte/s]Writing:  34%|███▎      | 1.87G/5.55G [00:01<00:03, 1.06Gbyte/s]Writing:  36%|███▌      | 1.99G/5.55G [00:01<00:03, 1.04Gbyte/s]Writing:  38%|███▊      | 2.09G/5.55G [00:01<00:03, 1.03Gbyte/s]Writing:  40%|███▉      | 2.20G/5.55G [00:02<00:03, 1.01Gbyte/s]Writing:  42%|████▏     | 2.34G/5.55G [00:02<00:03, 1.01Gbyte/s]Writing:  44%|████▍     | 2.46G/5.55G [00:02<00:02, 1.04Gbyte/s]Writing:  46%|████▌     | 2.57G/5.55G [00:02<00:02, 1.04Gbyte/s]Writing:  48%|████▊     | 2.67G/5.55G [00:02<00:02, 1.04Gbyte/s]Writing:  51%|█████     | 2.82G/5.55G [00:02<00:02, 1.06Gbyte/s]Writing:  53%|█████▎    | 2.93G/5.55G [00:02<00:02, 1.08Gbyte/s]Writing:  56%|█████▌    | 3.09G/5.55G [00:02<00:02, 1.06Gbyte/s]Writing:  59%|█████▊    | 3.25G/5.55G [00:03<00:02, 1.06Gbyte/s]Writing:  61%|██████▏   | 3.41G/5.55G [00:03<00:02, 1.06Gbyte/s]Writing:  64%|██████▍   | 3.56G/5.55G [00:03<00:01, 1.05Gbyte/s]Writing:  67%|██████▋   | 3.72G/5.55G [00:03<00:01, 1.05Gbyte/s]Writing:  70%|██████▉   | 3.88G/5.55G [00:03<00:01, 1.05Gbyte/s]Writing:  72%|███████▏  | 3.98G/5.55G [00:03<00:01, 1.04Gbyte/s]Writing:  74%|███████▎  | 4.09G/5.55G [00:03<00:01, 1.01Gbyte/s]Writing:  76%|███████▌  | 4.23G/5.55G [00:04<00:01, 1.01Gbyte/s]Writing:  78%|███████▊  | 4.35G/5.55G [00:04<00:01, 1.01Gbyte/s]Writing:  80%|████████  | 4.46G/5.55G [00:04<00:01, 1.01Gbyte/s]Writing:  82%|████████▏ | 4.56G/5.55G [00:04<00:00, 1.00Gbyte/s]Writing:  85%|████████▍ | 4.70G/5.55G [00:04<00:00, 1.02Gbyte/s]Writing:  87%|████████▋ | 4.82G/5.55G [00:04<00:00, 1.04Gbyte/s]Writing:  89%|████████▊ | 4.93G/5.55G [00:04<00:00, 1.03Gbyte/s]Writing:  91%|█████████ | 5.03G/5.55G [00:04<00:00, 1.03Gbyte/s]Writing:  93%|█████████▎| 5.14G/5.55G [00:04<00:00, 1.03Gbyte/s]Writing:  94%|█████████▍| 5.24G/5.55G [00:05<00:00, 1.03Gbyte/s]Writing: 100%|██████████| 5.55G/5.55G [00:05<00:00, 1.08Gbyte/s]Writing: 100%|██████████| 5.55G/5.55G [00:05<00:00, 1.02Gbyte/s]
INFO:hf-to-gguf:Model successfully exported to ../models-mnt/pythia/2.8B/ggml-model-f16.gguf
+ model_f16=../models-mnt/pythia/2.8B/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf
+ model_q4_0=../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
+ model_q4_1=../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf
+ model_q5_0=../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf
+ model_q5_1=../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf
+ model_q2_k=../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf
+ model_q3_k=../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf
+ model_q4_k=../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf
+ model_q5_k=../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf
+ model_q6_k=../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf
+ wiki_test=../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf q8_0
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q8_0 .. size =   245.62 MiB ->   130.49 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q8_0 .. size =   245.62 MiB ->   130.49 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  2815.06 MB

main: quantize time = 35157.40 ms
main:    total time = 35157.40 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf q4_0
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf' as Q4_0
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_0 .. size =   245.62 MiB ->    69.08 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1523.91 MB

main: quantize time = 25655.57 ms
main:    total time = 25655.57 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf q4_1
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf' as Q4_1
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_1 .. size =   245.62 MiB ->    76.76 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1681.58 MB

main: quantize time = 27115.02 ms
main:    total time = 27115.02 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf q5_0
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf' as Q5_0
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_0 .. size =   245.62 MiB ->    84.43 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1839.26 MB

main: quantize time = 28495.39 ms
main:    total time = 28495.39 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf q5_1
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf' as Q5_1
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_1 .. size =   245.62 MiB ->    92.11 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1996.94 MB

main: quantize time = 29674.53 ms
main:    total time = 29674.53 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf q2_k
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf' as Q2_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q2_K .. size =   245.62 MiB ->    40.30 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1034.19 MB

main: quantize time = 45743.55 ms
main:    total time = 45743.55 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf q3_k
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf' as Q3_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q3_K .. size =   245.62 MiB ->    52.77 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1407.60 MB

main: quantize time = 53123.94 ms
main:    total time = 53123.94 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf q4_k
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf' as Q4_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_K .. size =   245.62 MiB ->    69.08 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1702.03 MB

main: quantize time = 63432.86 ms
main:    total time = 63432.86 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf q5_k
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf' as Q5_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_K .. size =   245.62 MiB ->    84.43 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1972.07 MB

main: quantize time = 52723.51 ms
main:    total time = 52723.51 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf q6_k
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf' as Q6_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  2174.32 MB

main: quantize time = 44930.02 ms
main:    total time = 44930.02 ms
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.695 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.020 I main: llama backend init
0.00.001.030 I main: load the model and apply lora adapter, if any
0.00.319.110 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.334.395 I llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.334.416 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.334.432 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.334.433 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.334.434 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.334.434 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.334.435 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.334.441 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.334.442 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.334.443 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.334.444 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.334.445 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.334.445 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.334.446 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.334.453 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.334.453 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.334.455 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.343.867 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.345.627 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.136 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.353.146 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.353.147 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.353.147 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.353.148 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.353.151 I llama_model_loader: - type  f32:  258 tensors
0.00.353.152 I llama_model_loader: - type  f16:  130 tensors
0.00.419.871 I llm_load_vocab: special tokens cache size = 25
0.00.441.809 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.441.828 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.441.829 I llm_load_print_meta: arch             = gptneox
0.00.441.833 I llm_load_print_meta: vocab type       = BPE
0.00.441.834 I llm_load_print_meta: n_vocab          = 50304
0.00.441.835 I llm_load_print_meta: n_merges         = 50009
0.00.441.835 I llm_load_print_meta: vocab_only       = 0
0.00.441.836 I llm_load_print_meta: n_ctx_train      = 2048
0.00.441.836 I llm_load_print_meta: n_embd           = 2560
0.00.441.837 I llm_load_print_meta: n_layer          = 32
0.00.441.852 I llm_load_print_meta: n_head           = 32
0.00.441.853 I llm_load_print_meta: n_head_kv        = 32
0.00.441.855 I llm_load_print_meta: n_rot            = 20
0.00.441.856 I llm_load_print_meta: n_swa            = 0
0.00.441.857 I llm_load_print_meta: n_embd_head_k    = 80
0.00.441.857 I llm_load_print_meta: n_embd_head_v    = 80
0.00.441.858 I llm_load_print_meta: n_gqa            = 1
0.00.441.860 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.441.861 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.441.863 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.441.864 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.441.864 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.441.865 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.441.865 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.441.867 I llm_load_print_meta: n_ff             = 10240
0.00.441.867 I llm_load_print_meta: n_expert         = 0
0.00.441.867 I llm_load_print_meta: n_expert_used    = 0
0.00.441.868 I llm_load_print_meta: causal attn      = 1
0.00.441.868 I llm_load_print_meta: pooling type     = 0
0.00.441.868 I llm_load_print_meta: rope type        = 2
0.00.441.870 I llm_load_print_meta: rope scaling     = linear
0.00.441.872 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.441.873 I llm_load_print_meta: freq_scale_train = 1
0.00.441.874 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.441.874 I llm_load_print_meta: rope_finetuned   = unknown
0.00.441.875 I llm_load_print_meta: ssm_d_conv       = 0
0.00.441.875 I llm_load_print_meta: ssm_d_inner      = 0
0.00.441.876 I llm_load_print_meta: ssm_d_state      = 0
0.00.441.876 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.441.877 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.441.877 I llm_load_print_meta: model type       = 2.8B
0.00.441.879 I llm_load_print_meta: model ftype      = all F32 (guessed)
0.00.441.884 I llm_load_print_meta: model params     = 2.78 B
0.00.441.885 I llm_load_print_meta: model size       = 5.17 GiB (16.01 BPW) 
0.00.441.887 I llm_load_print_meta: general.name     = 2.8B
0.00.441.888 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.441.889 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.441.889 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.441.890 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.441.891 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.441.892 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.441.893 I llm_load_print_meta: max token length = 1024
0.00.793.587 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.793.601 I llm_load_tensors: offloading output layer to GPU
0.00.793.601 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.793.610 I llm_load_tensors:        CUDA0 model buffer size =  5049.71 MiB
0.00.793.612 I llm_load_tensors:   CPU_Mapped model buffer size =   245.62 MiB
.............................................................................................
0.01.665.666 I llama_new_context_with_model: n_seq_max     = 1
0.01.665.672 I llama_new_context_with_model: n_ctx         = 2048
0.01.665.672 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.01.665.673 I llama_new_context_with_model: n_batch       = 2048
0.01.665.673 I llama_new_context_with_model: n_ubatch      = 512
0.01.665.674 I llama_new_context_with_model: flash_attn    = 0
0.01.665.680 I llama_new_context_with_model: freq_base     = 10000.0
0.01.665.682 I llama_new_context_with_model: freq_scale    = 1
0.01.666.967 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.666.976 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.668.199 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.678.490 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.678.498 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.678.499 I llama_new_context_with_model: graph nodes  = 1287
0.01.678.499 I llama_new_context_with_model: graph splits = 2
0.01.678.503 I common_init_from_params: added EOS logit bias = -inf
0.01.678.504 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.753.394 I main: llama threadpool init, n_threads = 1
0.01.753.414 I 
0.01.753.516 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.753.521 I 
0.01.753.674 I sampler seed: 1234
0.01.753.689 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.753.694 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.753.695 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.01.753.695 I 
I believe the meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live

0.04.403.673 I llama_perf_sampler_print:    sampling time =      10.82 ms /   263 runs   (    0.04 ms per token, 24309.09 tokens per second)
0.04.403.676 I llama_perf_context_print:        load time =    1434.27 ms
0.04.403.678 I llama_perf_context_print: prompt eval time =      14.17 ms /     7 tokens (    2.02 ms per token,   494.04 tokens per second)
0.04.403.680 I llama_perf_context_print:        eval time =    2599.47 ms /   255 runs   (   10.19 ms per token,    98.10 tokens per second)
0.04.403.681 I llama_perf_context_print:       total time =    2650.29 ms /   262 tokens

real	0m4.705s
user	0m3.554s
sys	0m1.132s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.177 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.500 I main: llama backend init
0.00.000.512 I main: load the model and apply lora adapter, if any
0.00.310.718 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.326.072 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf (version GGUF V3 (latest))
0.00.326.095 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.326.105 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.326.106 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.326.107 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.326.108 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.326.108 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.326.115 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.326.115 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.326.117 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.326.119 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.326.119 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.326.120 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.326.121 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.326.128 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.326.130 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.326.131 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.333.690 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.335.451 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.342.410 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.342.419 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.342.420 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.342.421 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.342.422 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.342.422 I llama_model_loader: - kv  22:                          general.file_type u32              = 7
0.00.342.425 I llama_model_loader: - type  f32:  258 tensors
0.00.342.426 I llama_model_loader: - type q8_0:  130 tensors
0.00.406.516 I llm_load_vocab: special tokens cache size = 25
0.00.430.446 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.430.471 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.430.472 I llm_load_print_meta: arch             = gptneox
0.00.430.473 I llm_load_print_meta: vocab type       = BPE
0.00.430.473 I llm_load_print_meta: n_vocab          = 50304
0.00.430.474 I llm_load_print_meta: n_merges         = 50009
0.00.430.474 I llm_load_print_meta: vocab_only       = 0
0.00.430.475 I llm_load_print_meta: n_ctx_train      = 2048
0.00.430.475 I llm_load_print_meta: n_embd           = 2560
0.00.430.476 I llm_load_print_meta: n_layer          = 32
0.00.430.492 I llm_load_print_meta: n_head           = 32
0.00.430.494 I llm_load_print_meta: n_head_kv        = 32
0.00.430.495 I llm_load_print_meta: n_rot            = 20
0.00.430.496 I llm_load_print_meta: n_swa            = 0
0.00.430.496 I llm_load_print_meta: n_embd_head_k    = 80
0.00.430.497 I llm_load_print_meta: n_embd_head_v    = 80
0.00.430.499 I llm_load_print_meta: n_gqa            = 1
0.00.430.501 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.430.506 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.430.508 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.430.508 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.430.509 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.430.510 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.430.510 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.430.512 I llm_load_print_meta: n_ff             = 10240
0.00.430.512 I llm_load_print_meta: n_expert         = 0
0.00.430.512 I llm_load_print_meta: n_expert_used    = 0
0.00.430.513 I llm_load_print_meta: causal attn      = 1
0.00.430.513 I llm_load_print_meta: pooling type     = 0
0.00.430.514 I llm_load_print_meta: rope type        = 2
0.00.430.515 I llm_load_print_meta: rope scaling     = linear
0.00.430.517 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.430.517 I llm_load_print_meta: freq_scale_train = 1
0.00.430.518 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.430.518 I llm_load_print_meta: rope_finetuned   = unknown
0.00.430.519 I llm_load_print_meta: ssm_d_conv       = 0
0.00.430.519 I llm_load_print_meta: ssm_d_inner      = 0
0.00.430.520 I llm_load_print_meta: ssm_d_state      = 0
0.00.430.521 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.430.521 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.430.522 I llm_load_print_meta: model type       = 2.8B
0.00.430.523 I llm_load_print_meta: model ftype      = Q8_0
0.00.430.524 I llm_load_print_meta: model params     = 2.78 B
0.00.430.525 I llm_load_print_meta: model size       = 2.75 GiB (8.51 BPW) 
0.00.430.526 I llm_load_print_meta: general.name     = 2.8B
0.00.430.526 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.430.527 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.430.527 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.430.531 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.430.532 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.430.533 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.430.533 I llm_load_print_meta: max token length = 1024
0.00.613.896 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.613.907 I llm_load_tensors: offloading output layer to GPU
0.00.613.908 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.613.917 I llm_load_tensors:        CUDA0 model buffer size =  2684.57 MiB
0.00.613.919 I llm_load_tensors:   CPU_Mapped model buffer size =   130.49 MiB
.............................................................................................
0.01.147.291 I llama_new_context_with_model: n_seq_max     = 1
0.01.147.297 I llama_new_context_with_model: n_ctx         = 2048
0.01.147.297 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.01.147.298 I llama_new_context_with_model: n_batch       = 2048
0.01.147.298 I llama_new_context_with_model: n_ubatch      = 512
0.01.147.299 I llama_new_context_with_model: flash_attn    = 0
0.01.147.304 I llama_new_context_with_model: freq_base     = 10000.0
0.01.147.306 I llama_new_context_with_model: freq_scale    = 1
0.01.148.579 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.148.592 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.149.796 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.160.024 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.160.034 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.160.034 I llama_new_context_with_model: graph nodes  = 1287
0.01.160.035 I llama_new_context_with_model: graph splits = 2
0.01.160.040 I common_init_from_params: added EOS logit bias = -inf
0.01.160.041 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.237.095 I main: llama threadpool init, n_threads = 1
0.01.237.117 I 
0.01.237.207 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.237.212 I 
0.01.237.367 I sampler seed: 1234
0.01.237.382 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.237.387 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.237.388 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.01.237.389 I 
I believe the meaning of life is to help people.”

For the past eight years, the organization has been at the forefront of the fight against the disease. “If you’re going to save a life, save a life,” said Dr. Jolie, “because every second counts.”

“When I was in the hospital, I was so scared because I didn’t know how much time I had left,” said Lydia. “I remember watching my little sister cry, and I was in that room for two weeks. I was scared and I was scared to get out.”

“They say that the reason they’re doing what they’re doing is because of the generosity of the people of Utah,” said Dr. Jolie. “They say that if we continue to have this kind of generosity, that it will help other people like my little sisters.”

“I know that my little sisters are in a place where they’re happy and they’re doing what they want to do,” said Lydia. “And that’s all I want for my little sisters. So I can’t really ask for anything more.”

The organization has donated more than $2.5 million dollars to date to help patients. “I’m

0.03.371.977 I llama_perf_sampler_print:    sampling time =      11.26 ms /   263 runs   (    0.04 ms per token, 23352.87 tokens per second)
0.03.371.980 I llama_perf_context_print:        load time =     926.36 ms
0.03.371.982 I llama_perf_context_print: prompt eval time =      11.04 ms /     7 tokens (    1.58 ms per token,   633.94 tokens per second)
0.03.371.984 I llama_perf_context_print:        eval time =    2086.61 ms /   255 runs   (    8.18 ms per token,   122.21 tokens per second)
0.03.371.985 I llama_perf_context_print:       total time =    2134.89 ms /   262 tokens

real	0m3.680s
user	0m2.752s
sys	0m0.928s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.706 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.053 I main: llama backend init
0.00.001.065 I main: load the model and apply lora adapter, if any
0.00.292.222 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.307.817 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
0.00.307.849 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.307.859 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.307.862 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.307.863 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.307.864 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.307.864 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.307.871 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.307.871 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.307.872 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.307.873 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.307.874 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.307.874 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.307.875 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.307.884 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.307.885 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.307.886 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.315.479 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.317.231 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.323.770 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.323.777 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.323.777 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.323.778 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.323.779 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.323.780 I llama_model_loader: - kv  22:                          general.file_type u32              = 2
0.00.323.782 I llama_model_loader: - type  f32:  258 tensors
0.00.323.783 I llama_model_loader: - type q4_0:  129 tensors
0.00.323.783 I llama_model_loader: - type q6_K:    1 tensors
0.00.396.205 I llm_load_vocab: special tokens cache size = 25
0.00.418.394 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.418.414 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.418.416 I llm_load_print_meta: arch             = gptneox
0.00.418.418 I llm_load_print_meta: vocab type       = BPE
0.00.418.418 I llm_load_print_meta: n_vocab          = 50304
0.00.418.419 I llm_load_print_meta: n_merges         = 50009
0.00.418.419 I llm_load_print_meta: vocab_only       = 0
0.00.418.420 I llm_load_print_meta: n_ctx_train      = 2048
0.00.418.420 I llm_load_print_meta: n_embd           = 2560
0.00.418.420 I llm_load_print_meta: n_layer          = 32
0.00.418.436 I llm_load_print_meta: n_head           = 32
0.00.418.437 I llm_load_print_meta: n_head_kv        = 32
0.00.418.437 I llm_load_print_meta: n_rot            = 20
0.00.418.438 I llm_load_print_meta: n_swa            = 0
0.00.418.438 I llm_load_print_meta: n_embd_head_k    = 80
0.00.418.438 I llm_load_print_meta: n_embd_head_v    = 80
0.00.418.440 I llm_load_print_meta: n_gqa            = 1
0.00.418.441 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.418.443 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.418.444 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.418.445 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.418.446 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.418.446 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.418.447 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.418.449 I llm_load_print_meta: n_ff             = 10240
0.00.418.449 I llm_load_print_meta: n_expert         = 0
0.00.418.449 I llm_load_print_meta: n_expert_used    = 0
0.00.418.450 I llm_load_print_meta: causal attn      = 1
0.00.418.450 I llm_load_print_meta: pooling type     = 0
0.00.418.450 I llm_load_print_meta: rope type        = 2
0.00.418.452 I llm_load_print_meta: rope scaling     = linear
0.00.418.454 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.418.455 I llm_load_print_meta: freq_scale_train = 1
0.00.418.456 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.418.456 I llm_load_print_meta: rope_finetuned   = unknown
0.00.418.457 I llm_load_print_meta: ssm_d_conv       = 0
0.00.418.457 I llm_load_print_meta: ssm_d_inner      = 0
0.00.418.457 I llm_load_print_meta: ssm_d_state      = 0
0.00.418.458 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.418.459 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.418.460 I llm_load_print_meta: model type       = 2.8B
0.00.418.460 I llm_load_print_meta: model ftype      = Q4_0
0.00.418.462 I llm_load_print_meta: model params     = 2.78 B
0.00.418.463 I llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
0.00.418.463 I llm_load_print_meta: general.name     = 2.8B
0.00.418.464 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.418.464 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.418.465 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.418.465 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.418.466 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.418.466 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.418.470 I llm_load_print_meta: max token length = 1024
0.00.519.520 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.519.533 I llm_load_tensors: offloading output layer to GPU
0.00.519.534 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.519.542 I llm_load_tensors:        CUDA0 model buffer size =  1454.83 MiB
0.00.519.544 I llm_load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
...........................................................................................
0.00.814.004 I llama_new_context_with_model: n_seq_max     = 1
0.00.814.011 I llama_new_context_with_model: n_ctx         = 2048
0.00.814.012 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.814.012 I llama_new_context_with_model: n_batch       = 2048
0.00.814.013 I llama_new_context_with_model: n_ubatch      = 512
0.00.814.014 I llama_new_context_with_model: flash_attn    = 0
0.00.814.019 I llama_new_context_with_model: freq_base     = 10000.0
0.00.814.020 I llama_new_context_with_model: freq_scale    = 1
0.00.816.430 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.816.444 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.817.674 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.827.367 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.827.374 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.827.375 I llama_new_context_with_model: graph nodes  = 1287
0.00.827.376 I llama_new_context_with_model: graph splits = 2
0.00.827.381 I common_init_from_params: added EOS logit bias = -inf
0.00.827.382 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.892.448 I main: llama threadpool init, n_threads = 1
0.00.892.469 I 
0.00.892.566 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.892.571 I 
0.00.892.729 I sampler seed: 1234
0.00.892.744 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.892.748 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.892.749 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.892.750 I 
I believe the meaning of life is to laugh until you’re in stitches, and to dance until you can’t anymore. I believe that every single life is a precious gift. I believe that if we all gave our life, there would be less to give. And I believe that there is no more important thing in the world than to live your life to the fullest, to give your all to what you do, and to enjoy yourself to the utmost. I believe that laughter is the best medicine, and that laughter is the best medicine to keep your mind clear of the doubts and the worries. I believe in being true to your self and being true to your family. I believe in being true to your community. I believe in being true to your faith. I believe in being true to your country. I believe in being true to your country, your community, and your family.

I believe in being true to your friends. I believe in being true to your work ethic. I believe in being true to your friends, your family, your country, your community, and your faith.

I believe in being true to your dreams. I believe that your dreams are just as important as your goals. I believe that your goals are just as important as your dreams.

I

0.02.566.405 I llama_perf_sampler_print:    sampling time =      11.05 ms /   263 runs   (    0.04 ms per token, 23803.06 tokens per second)
0.02.566.407 I llama_perf_context_print:        load time =     600.21 ms
0.02.566.409 I llama_perf_context_print: prompt eval time =       9.52 ms /     7 tokens (    1.36 ms per token,   735.22 tokens per second)
0.02.566.411 I llama_perf_context_print:        eval time =    1628.57 ms /   255 runs   (    6.39 ms per token,   156.58 tokens per second)
0.02.566.413 I llama_perf_context_print:       total time =    1673.96 ms /   262 tokens

real	0m2.866s
user	0m2.120s
sys	0m0.750s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.176 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.501 I main: llama backend init
0.00.000.512 I main: load the model and apply lora adapter, if any
0.00.274.362 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.290.326 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf (version GGUF V3 (latest))
0.00.290.349 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.290.358 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.290.359 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.290.359 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.290.360 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.290.361 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.290.367 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.290.367 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.290.368 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.290.370 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.290.372 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.290.372 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.290.373 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.290.380 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.290.381 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.290.382 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.298.075 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.299.849 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.306.630 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.306.639 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.306.640 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.306.641 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.306.641 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.306.642 I llama_model_loader: - kv  22:                          general.file_type u32              = 3
0.00.306.645 I llama_model_loader: - type  f32:  258 tensors
0.00.306.646 I llama_model_loader: - type q4_1:  129 tensors
0.00.306.646 I llama_model_loader: - type q6_K:    1 tensors
0.00.371.771 I llm_load_vocab: special tokens cache size = 25
0.00.393.672 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.393.692 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.393.693 I llm_load_print_meta: arch             = gptneox
0.00.393.694 I llm_load_print_meta: vocab type       = BPE
0.00.393.694 I llm_load_print_meta: n_vocab          = 50304
0.00.393.695 I llm_load_print_meta: n_merges         = 50009
0.00.393.697 I llm_load_print_meta: vocab_only       = 0
0.00.393.698 I llm_load_print_meta: n_ctx_train      = 2048
0.00.393.698 I llm_load_print_meta: n_embd           = 2560
0.00.393.698 I llm_load_print_meta: n_layer          = 32
0.00.393.715 I llm_load_print_meta: n_head           = 32
0.00.393.716 I llm_load_print_meta: n_head_kv        = 32
0.00.393.717 I llm_load_print_meta: n_rot            = 20
0.00.393.717 I llm_load_print_meta: n_swa            = 0
0.00.393.718 I llm_load_print_meta: n_embd_head_k    = 80
0.00.393.718 I llm_load_print_meta: n_embd_head_v    = 80
0.00.393.719 I llm_load_print_meta: n_gqa            = 1
0.00.393.721 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.393.722 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.393.724 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.393.724 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.393.725 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.393.725 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.393.726 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.393.728 I llm_load_print_meta: n_ff             = 10240
0.00.393.728 I llm_load_print_meta: n_expert         = 0
0.00.393.729 I llm_load_print_meta: n_expert_used    = 0
0.00.393.729 I llm_load_print_meta: causal attn      = 1
0.00.393.729 I llm_load_print_meta: pooling type     = 0
0.00.393.730 I llm_load_print_meta: rope type        = 2
0.00.393.730 I llm_load_print_meta: rope scaling     = linear
0.00.393.732 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.393.733 I llm_load_print_meta: freq_scale_train = 1
0.00.393.733 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.393.733 I llm_load_print_meta: rope_finetuned   = unknown
0.00.393.734 I llm_load_print_meta: ssm_d_conv       = 0
0.00.393.734 I llm_load_print_meta: ssm_d_inner      = 0
0.00.393.735 I llm_load_print_meta: ssm_d_state      = 0
0.00.393.735 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.393.736 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.393.737 I llm_load_print_meta: model type       = 2.8B
0.00.393.738 I llm_load_print_meta: model ftype      = Q4_1
0.00.393.739 I llm_load_print_meta: model params     = 2.78 B
0.00.393.739 I llm_load_print_meta: model size       = 1.64 GiB (5.08 BPW) 
0.00.393.740 I llm_load_print_meta: general.name     = 2.8B
0.00.393.741 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.393.742 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.393.743 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.393.743 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.393.744 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.393.745 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.393.746 I llm_load_print_meta: max token length = 1024
0.00.502.776 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.502.789 I llm_load_tensors: offloading output layer to GPU
0.00.502.790 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.502.798 I llm_load_tensors:        CUDA0 model buffer size =  1604.83 MiB
0.00.502.799 I llm_load_tensors:   CPU_Mapped model buffer size =    76.76 MiB
............................................................................................
0.00.821.765 I llama_new_context_with_model: n_seq_max     = 1
0.00.821.772 I llama_new_context_with_model: n_ctx         = 2048
0.00.821.773 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.821.773 I llama_new_context_with_model: n_batch       = 2048
0.00.821.773 I llama_new_context_with_model: n_ubatch      = 512
0.00.821.775 I llama_new_context_with_model: flash_attn    = 0
0.00.821.780 I llama_new_context_with_model: freq_base     = 10000.0
0.00.821.781 I llama_new_context_with_model: freq_scale    = 1
0.00.823.042 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.823.051 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.824.258 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.834.309 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.834.319 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.834.319 I llama_new_context_with_model: graph nodes  = 1287
0.00.834.320 I llama_new_context_with_model: graph splits = 2
0.00.834.324 I common_init_from_params: added EOS logit bias = -inf
0.00.834.325 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.899.980 I main: llama threadpool init, n_threads = 1
0.00.900.004 I 
0.00.900.097 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.900.103 I 
0.00.900.285 I sampler seed: 1234
0.00.900.302 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.900.305 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.900.308 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.900.309 I 
I believe the meaning of life is to know God, but I don’t know how to do that.”

“I’m not sure that we could have a meaningful conversation with God if we understood God. We’re going to have to live our life without an understanding of God.

“If you ask me, ‘What is the meaning of life?’, I’ll tell you. I’m a scientist. I’m an agnostic. But if I had to choose between atheism and Christianity, I’d choose Christianity.

“If you ask me, ‘Why am I here?’, I’d say that it’s to know God. But I don’t know how to get to know God. That’s the problem.

“I don’t know how to get there. I don’t know how to get to know God. I have no idea where to go.

“I’m not sure that we could have a meaningful conversation with God if we understood God. We’re going to have to live our life without an understanding of God.”

“I’m not sure that we could have a meaningful conversation with God if we understood God. We’re going to have to live our

0.02.580.492 I llama_perf_sampler_print:    sampling time =      11.03 ms /   263 runs   (    0.04 ms per token, 23835.42 tokens per second)
0.02.580.495 I llama_perf_context_print:        load time =     625.60 ms
0.02.580.497 I llama_perf_context_print: prompt eval time =       9.15 ms /     7 tokens (    1.31 ms per token,   765.28 tokens per second)
0.02.580.499 I llama_perf_context_print:        eval time =    1634.38 ms /   255 runs   (    6.41 ms per token,   156.02 tokens per second)
0.02.580.500 I llama_perf_context_print:       total time =    1680.52 ms /   262 tokens

real	0m2.874s
user	0m2.142s
sys	0m0.738s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.179 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.560 I main: llama backend init
0.00.000.571 I main: load the model and apply lora adapter, if any
0.00.286.440 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.301.941 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf (version GGUF V3 (latest))
0.00.301.981 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.301.991 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.301.995 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.301.996 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.301.996 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.301.997 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.302.004 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.302.004 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.302.005 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.302.006 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.302.007 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.302.008 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.302.008 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.302.016 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.302.017 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.302.017 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.309.543 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.311.375 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.317.941 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.317.948 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.317.949 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.317.949 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.317.950 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.317.951 I llama_model_loader: - kv  22:                          general.file_type u32              = 8
0.00.317.954 I llama_model_loader: - type  f32:  258 tensors
0.00.317.955 I llama_model_loader: - type q5_0:  129 tensors
0.00.317.955 I llama_model_loader: - type q6_K:    1 tensors
0.00.382.938 I llm_load_vocab: special tokens cache size = 25
0.00.405.085 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.405.101 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.405.102 I llm_load_print_meta: arch             = gptneox
0.00.405.103 I llm_load_print_meta: vocab type       = BPE
0.00.405.103 I llm_load_print_meta: n_vocab          = 50304
0.00.405.104 I llm_load_print_meta: n_merges         = 50009
0.00.405.104 I llm_load_print_meta: vocab_only       = 0
0.00.405.105 I llm_load_print_meta: n_ctx_train      = 2048
0.00.405.105 I llm_load_print_meta: n_embd           = 2560
0.00.405.106 I llm_load_print_meta: n_layer          = 32
0.00.405.121 I llm_load_print_meta: n_head           = 32
0.00.405.122 I llm_load_print_meta: n_head_kv        = 32
0.00.405.123 I llm_load_print_meta: n_rot            = 20
0.00.405.123 I llm_load_print_meta: n_swa            = 0
0.00.405.124 I llm_load_print_meta: n_embd_head_k    = 80
0.00.405.124 I llm_load_print_meta: n_embd_head_v    = 80
0.00.405.126 I llm_load_print_meta: n_gqa            = 1
0.00.405.127 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.405.129 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.405.130 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.405.131 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.405.132 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.405.132 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.405.133 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.405.134 I llm_load_print_meta: n_ff             = 10240
0.00.405.135 I llm_load_print_meta: n_expert         = 0
0.00.405.136 I llm_load_print_meta: n_expert_used    = 0
0.00.405.136 I llm_load_print_meta: causal attn      = 1
0.00.405.136 I llm_load_print_meta: pooling type     = 0
0.00.405.138 I llm_load_print_meta: rope type        = 2
0.00.405.138 I llm_load_print_meta: rope scaling     = linear
0.00.405.140 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.405.141 I llm_load_print_meta: freq_scale_train = 1
0.00.405.141 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.405.141 I llm_load_print_meta: rope_finetuned   = unknown
0.00.405.142 I llm_load_print_meta: ssm_d_conv       = 0
0.00.405.142 I llm_load_print_meta: ssm_d_inner      = 0
0.00.405.143 I llm_load_print_meta: ssm_d_state      = 0
0.00.405.144 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.405.144 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.405.145 I llm_load_print_meta: model type       = 2.8B
0.00.405.146 I llm_load_print_meta: model ftype      = Q5_0
0.00.405.147 I llm_load_print_meta: model params     = 2.78 B
0.00.405.148 I llm_load_print_meta: model size       = 1.80 GiB (5.56 BPW) 
0.00.405.148 I llm_load_print_meta: general.name     = 2.8B
0.00.405.148 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.405.149 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.405.149 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.405.150 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.405.151 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.405.152 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.405.152 I llm_load_print_meta: max token length = 1024
0.00.535.766 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.535.777 I llm_load_tensors: offloading output layer to GPU
0.00.535.778 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.535.788 I llm_load_tensors:        CUDA0 model buffer size =  1754.83 MiB
0.00.535.789 I llm_load_tensors:   CPU_Mapped model buffer size =    84.43 MiB
............................................................................................
0.00.893.096 I llama_new_context_with_model: n_seq_max     = 1
0.00.893.103 I llama_new_context_with_model: n_ctx         = 2048
0.00.893.104 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.893.104 I llama_new_context_with_model: n_batch       = 2048
0.00.893.105 I llama_new_context_with_model: n_ubatch      = 512
0.00.893.106 I llama_new_context_with_model: flash_attn    = 0
0.00.893.111 I llama_new_context_with_model: freq_base     = 10000.0
0.00.893.112 I llama_new_context_with_model: freq_scale    = 1
0.00.894.527 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.894.539 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.895.932 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.907.572 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.907.581 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.907.582 I llama_new_context_with_model: graph nodes  = 1287
0.00.907.582 I llama_new_context_with_model: graph splits = 2
0.00.907.587 I common_init_from_params: added EOS logit bias = -inf
0.00.907.588 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.976.347 I main: llama threadpool init, n_threads = 1
0.00.976.370 I 
0.00.976.473 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.976.479 I 
0.00.976.632 I sampler seed: 1234
0.00.976.648 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.976.651 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.976.651 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.976.652 I 
I believe the meaning of life is to enjoy the process and not the results.

I believe that people are not defined by their jobs, their clothes or their social status.

I believe that a person is more important than a job.

I believe that no one is wrong and everyone has something to learn.

I believe that there is a purpose to every person's life.

I believe that all of us are creative, but we have to understand the difference between the creative and the un Creative

I believe that when we stop worrying about things, they start to happen.

I believe that the world is a better place when people have fun, laugh, and play.

I believe in being a positive influence to the people around me.

I believe in having a positive attitude about life.

I believe in living in the moment.

I believe in loving one another.

I believe in the power of love.

I believe that a person who is full of positive energy is a more productive person.

I believe that we should never make the mistake of thinking that what we are doing is not important.

I believe that we should never be so caught up in our own little worlds that we forget about other

0.02.758.443 I llama_perf_sampler_print:    sampling time =      11.09 ms /   263 runs   (    0.04 ms per token, 23706.51 tokens per second)
0.02.758.447 I llama_perf_context_print:        load time =     689.89 ms
0.02.758.448 I llama_perf_context_print: prompt eval time =       9.83 ms /     7 tokens (    1.40 ms per token,   711.82 tokens per second)
0.02.758.450 I llama_perf_context_print:        eval time =    1735.90 ms /   255 runs   (    6.81 ms per token,   146.90 tokens per second)
0.02.758.451 I llama_perf_context_print:       total time =    1782.10 ms /   262 tokens

real	0m3.052s
user	0m2.287s
sys	0m0.769s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.177 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.505 I main: llama backend init
0.00.000.515 I main: load the model and apply lora adapter, if any
0.00.284.728 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.300.031 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf (version GGUF V3 (latest))
0.00.300.054 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.300.069 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.300.074 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.300.075 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.300.076 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.300.077 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.300.083 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.300.085 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.300.086 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.300.087 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.300.088 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.300.089 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.300.090 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.300.096 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.300.097 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.300.098 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.307.615 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.309.381 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.315.965 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.315.973 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.315.974 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.315.975 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.315.975 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.315.976 I llama_model_loader: - kv  22:                          general.file_type u32              = 9
0.00.315.979 I llama_model_loader: - type  f32:  258 tensors
0.00.315.980 I llama_model_loader: - type q5_1:  129 tensors
0.00.315.980 I llama_model_loader: - type q6_K:    1 tensors
0.00.380.876 I llm_load_vocab: special tokens cache size = 25
0.00.402.666 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.402.682 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.402.682 I llm_load_print_meta: arch             = gptneox
0.00.402.683 I llm_load_print_meta: vocab type       = BPE
0.00.402.684 I llm_load_print_meta: n_vocab          = 50304
0.00.402.684 I llm_load_print_meta: n_merges         = 50009
0.00.402.685 I llm_load_print_meta: vocab_only       = 0
0.00.402.688 I llm_load_print_meta: n_ctx_train      = 2048
0.00.402.689 I llm_load_print_meta: n_embd           = 2560
0.00.402.689 I llm_load_print_meta: n_layer          = 32
0.00.402.702 I llm_load_print_meta: n_head           = 32
0.00.402.703 I llm_load_print_meta: n_head_kv        = 32
0.00.402.704 I llm_load_print_meta: n_rot            = 20
0.00.402.704 I llm_load_print_meta: n_swa            = 0
0.00.402.705 I llm_load_print_meta: n_embd_head_k    = 80
0.00.402.706 I llm_load_print_meta: n_embd_head_v    = 80
0.00.402.708 I llm_load_print_meta: n_gqa            = 1
0.00.402.710 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.402.711 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.402.712 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.402.713 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.402.714 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.402.714 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.402.715 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.402.717 I llm_load_print_meta: n_ff             = 10240
0.00.402.717 I llm_load_print_meta: n_expert         = 0
0.00.402.718 I llm_load_print_meta: n_expert_used    = 0
0.00.402.718 I llm_load_print_meta: causal attn      = 1
0.00.402.719 I llm_load_print_meta: pooling type     = 0
0.00.402.719 I llm_load_print_meta: rope type        = 2
0.00.402.720 I llm_load_print_meta: rope scaling     = linear
0.00.402.722 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.402.723 I llm_load_print_meta: freq_scale_train = 1
0.00.402.723 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.402.724 I llm_load_print_meta: rope_finetuned   = unknown
0.00.402.724 I llm_load_print_meta: ssm_d_conv       = 0
0.00.402.724 I llm_load_print_meta: ssm_d_inner      = 0
0.00.402.725 I llm_load_print_meta: ssm_d_state      = 0
0.00.402.725 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.402.727 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.402.728 I llm_load_print_meta: model type       = 2.8B
0.00.402.729 I llm_load_print_meta: model ftype      = Q5_1
0.00.402.730 I llm_load_print_meta: model params     = 2.78 B
0.00.402.731 I llm_load_print_meta: model size       = 1.95 GiB (6.04 BPW) 
0.00.402.731 I llm_load_print_meta: general.name     = 2.8B
0.00.402.732 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.402.734 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.402.734 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.402.734 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.402.735 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.402.736 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.402.736 I llm_load_print_meta: max token length = 1024
0.00.534.961 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.534.973 I llm_load_tensors: offloading output layer to GPU
0.00.534.974 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.534.983 I llm_load_tensors:        CUDA0 model buffer size =  1904.83 MiB
0.00.534.985 I llm_load_tensors:   CPU_Mapped model buffer size =    92.11 MiB
............................................................................................
0.00.909.279 I llama_new_context_with_model: n_seq_max     = 1
0.00.909.286 I llama_new_context_with_model: n_ctx         = 2048
0.00.909.286 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.909.287 I llama_new_context_with_model: n_batch       = 2048
0.00.909.287 I llama_new_context_with_model: n_ubatch      = 512
0.00.909.288 I llama_new_context_with_model: flash_attn    = 0
0.00.909.294 I llama_new_context_with_model: freq_base     = 10000.0
0.00.909.295 I llama_new_context_with_model: freq_scale    = 1
0.00.910.543 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.910.556 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.911.797 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.921.819 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.921.829 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.921.830 I llama_new_context_with_model: graph nodes  = 1287
0.00.921.830 I llama_new_context_with_model: graph splits = 2
0.00.921.835 I common_init_from_params: added EOS logit bias = -inf
0.00.921.836 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.988.748 I main: llama threadpool init, n_threads = 1
0.00.988.771 I 
0.00.988.865 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.988.871 I 
0.00.989.026 I sampler seed: 1234
0.00.989.042 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.989.048 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.989.049 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.989.050 I 
I believe the meaning of life is to love, laugh and be happy." "I believe in the afterlife." "I believe in the power of the sun to heal and the power of love to heal." "And I believe in the power of love to save us all from ourselves." "What was that?" "What's going on?" "You're not supposed to be here." "I need your help." "I think you should leave." "No." "You don't understand." "I'm in pain." "No." "Not like this." "I've seen what they can do." "I'm not like you." "I'm not here to save you, to heal you or to make you happy." "I'm here to kill you." "I can't do this." "It's not me." "It's them." "It's them!" "Them?" "Who?" "Them." "Them." "What are you talking about?" "I'm talking about the ones who have been killing people and using them for their own purposes." "The ones who have been trying to take over the world." "I don't understand." "I'm not them." "I'm me." "They're coming." "I can feel it." "

0.02.771.922 I llama_perf_sampler_print:    sampling time =      13.00 ms /   263 runs   (    0.05 ms per token, 20229.21 tokens per second)
0.02.771.924 I llama_perf_context_print:        load time =     704.00 ms
0.02.771.926 I llama_perf_context_print: prompt eval time =       9.56 ms /     7 tokens (    1.37 ms per token,   731.99 tokens per second)
0.02.771.928 I llama_perf_context_print:        eval time =    1734.61 ms /   255 runs   (    6.80 ms per token,   147.01 tokens per second)
0.02.771.929 I llama_perf_context_print:       total time =    1783.18 ms /   262 tokens

real	0m3.059s
user	0m2.288s
sys	0m0.773s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q2_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.703 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.036 I main: llama backend init
0.00.001.047 I main: load the model and apply lora adapter, if any
0.00.299.364 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.314.655 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf (version GGUF V3 (latest))
0.00.314.678 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.314.686 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.314.687 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.314.688 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.314.689 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.314.690 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.314.696 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.314.697 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.314.697 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.314.699 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.314.700 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.314.701 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.314.702 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.314.707 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.314.708 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.314.709 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.322.340 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.324.105 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.330.689 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.330.696 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.330.697 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.330.697 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.330.698 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.330.699 I llama_model_loader: - kv  22:                          general.file_type u32              = 10
0.00.330.701 I llama_model_loader: - type  f32:  258 tensors
0.00.330.702 I llama_model_loader: - type q2_K:   65 tensors
0.00.330.703 I llama_model_loader: - type q3_K:   64 tensors
0.00.330.703 I llama_model_loader: - type q6_K:    1 tensors
0.00.395.925 I llm_load_vocab: special tokens cache size = 25
0.00.417.809 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.417.828 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.417.828 I llm_load_print_meta: arch             = gptneox
0.00.417.831 I llm_load_print_meta: vocab type       = BPE
0.00.417.832 I llm_load_print_meta: n_vocab          = 50304
0.00.417.832 I llm_load_print_meta: n_merges         = 50009
0.00.417.833 I llm_load_print_meta: vocab_only       = 0
0.00.417.833 I llm_load_print_meta: n_ctx_train      = 2048
0.00.417.834 I llm_load_print_meta: n_embd           = 2560
0.00.417.834 I llm_load_print_meta: n_layer          = 32
0.00.417.850 I llm_load_print_meta: n_head           = 32
0.00.417.851 I llm_load_print_meta: n_head_kv        = 32
0.00.417.851 I llm_load_print_meta: n_rot            = 20
0.00.417.852 I llm_load_print_meta: n_swa            = 0
0.00.417.852 I llm_load_print_meta: n_embd_head_k    = 80
0.00.417.853 I llm_load_print_meta: n_embd_head_v    = 80
0.00.417.854 I llm_load_print_meta: n_gqa            = 1
0.00.417.856 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.417.857 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.417.860 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.417.860 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.417.861 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.417.862 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.417.863 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.417.864 I llm_load_print_meta: n_ff             = 10240
0.00.417.865 I llm_load_print_meta: n_expert         = 0
0.00.417.866 I llm_load_print_meta: n_expert_used    = 0
0.00.417.866 I llm_load_print_meta: causal attn      = 1
0.00.417.867 I llm_load_print_meta: pooling type     = 0
0.00.417.867 I llm_load_print_meta: rope type        = 2
0.00.417.868 I llm_load_print_meta: rope scaling     = linear
0.00.417.869 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.417.870 I llm_load_print_meta: freq_scale_train = 1
0.00.417.870 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.417.871 I llm_load_print_meta: rope_finetuned   = unknown
0.00.417.872 I llm_load_print_meta: ssm_d_conv       = 0
0.00.417.873 I llm_load_print_meta: ssm_d_inner      = 0
0.00.417.873 I llm_load_print_meta: ssm_d_state      = 0
0.00.417.874 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.417.874 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.417.875 I llm_load_print_meta: model type       = 2.8B
0.00.417.876 I llm_load_print_meta: model ftype      = Q2_K - Medium
0.00.417.877 I llm_load_print_meta: model params     = 2.78 B
0.00.417.878 I llm_load_print_meta: model size       = 1.01 GiB (3.13 BPW) 
0.00.417.878 I llm_load_print_meta: general.name     = 2.8B
0.00.417.879 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.417.879 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.417.880 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.417.881 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.417.882 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.417.882 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.417.883 I llm_load_print_meta: max token length = 1024
0.00.487.603 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.487.617 I llm_load_tensors: offloading output layer to GPU
0.00.487.618 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.487.626 I llm_load_tensors:        CUDA0 model buffer size =   993.89 MiB
0.00.487.627 I llm_load_tensors:   CPU_Mapped model buffer size =    40.30 MiB
.......................................................................................
0.00.693.442 I llama_new_context_with_model: n_seq_max     = 1
0.00.693.448 I llama_new_context_with_model: n_ctx         = 2048
0.00.693.448 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.693.448 I llama_new_context_with_model: n_batch       = 2048
0.00.693.449 I llama_new_context_with_model: n_ubatch      = 512
0.00.693.450 I llama_new_context_with_model: flash_attn    = 0
0.00.693.456 I llama_new_context_with_model: freq_base     = 10000.0
0.00.693.457 I llama_new_context_with_model: freq_scale    = 1
0.00.694.726 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.694.740 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.695.966 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.706.197 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.706.208 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.706.209 I llama_new_context_with_model: graph nodes  = 1287
0.00.706.209 I llama_new_context_with_model: graph splits = 2
0.00.706.215 I common_init_from_params: added EOS logit bias = -inf
0.00.706.216 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.778.461 I main: llama threadpool init, n_threads = 1
0.00.778.483 I 
0.00.778.578 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.778.584 I 
0.00.778.732 I sampler seed: 1234
0.00.778.747 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.778.761 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.778.764 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.778.764 I 
I believe the meaning of life is in the first place the best way to be.

—


.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.



0.02.616.546 I llama_perf_sampler_print:    sampling time =      10.20 ms /   263 runs   (    0.04 ms per token, 25776.73 tokens per second)
0.02.616.549 I llama_perf_context_print:        load time =     479.08 ms
0.02.616.551 I llama_perf_context_print: prompt eval time =      14.03 ms /     7 tokens (    2.00 ms per token,   499.11 tokens per second)
0.02.616.553 I llama_perf_context_print:        eval time =    1788.92 ms /   255 runs   (    7.02 ms per token,   142.54 tokens per second)
0.02.616.554 I llama_perf_context_print:       total time =    1838.09 ms /   262 tokens

real	0m2.902s
user	0m2.210s
sys	0m0.689s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.208 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.521 I main: llama backend init
0.00.000.531 I main: load the model and apply lora adapter, if any
0.00.282.111 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.298.385 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf (version GGUF V3 (latest))
0.00.298.412 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.298.421 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.298.426 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.298.427 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.298.427 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.298.428 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.298.435 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.298.436 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.298.437 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.298.438 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.298.439 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.298.440 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.298.441 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.298.448 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.298.449 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.298.450 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.306.049 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.307.794 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.314.503 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.314.512 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.314.513 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.314.514 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.314.515 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.314.515 I llama_model_loader: - kv  22:                          general.file_type u32              = 12
0.00.314.518 I llama_model_loader: - type  f32:  258 tensors
0.00.314.519 I llama_model_loader: - type q3_K:   33 tensors
0.00.314.519 I llama_model_loader: - type q4_K:   94 tensors
0.00.314.520 I llama_model_loader: - type q5_K:    2 tensors
0.00.314.520 I llama_model_loader: - type q6_K:    1 tensors
0.00.380.076 I llm_load_vocab: special tokens cache size = 25
0.00.401.975 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.401.991 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.401.992 I llm_load_print_meta: arch             = gptneox
0.00.401.992 I llm_load_print_meta: vocab type       = BPE
0.00.401.993 I llm_load_print_meta: n_vocab          = 50304
0.00.401.996 I llm_load_print_meta: n_merges         = 50009
0.00.401.997 I llm_load_print_meta: vocab_only       = 0
0.00.401.997 I llm_load_print_meta: n_ctx_train      = 2048
0.00.401.998 I llm_load_print_meta: n_embd           = 2560
0.00.401.998 I llm_load_print_meta: n_layer          = 32
0.00.402.011 I llm_load_print_meta: n_head           = 32
0.00.402.014 I llm_load_print_meta: n_head_kv        = 32
0.00.402.014 I llm_load_print_meta: n_rot            = 20
0.00.402.015 I llm_load_print_meta: n_swa            = 0
0.00.402.015 I llm_load_print_meta: n_embd_head_k    = 80
0.00.402.016 I llm_load_print_meta: n_embd_head_v    = 80
0.00.402.018 I llm_load_print_meta: n_gqa            = 1
0.00.402.020 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.402.021 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.402.023 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.402.024 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.402.024 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.402.025 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.402.025 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.402.026 I llm_load_print_meta: n_ff             = 10240
0.00.402.027 I llm_load_print_meta: n_expert         = 0
0.00.402.027 I llm_load_print_meta: n_expert_used    = 0
0.00.402.028 I llm_load_print_meta: causal attn      = 1
0.00.402.028 I llm_load_print_meta: pooling type     = 0
0.00.402.028 I llm_load_print_meta: rope type        = 2
0.00.402.029 I llm_load_print_meta: rope scaling     = linear
0.00.402.031 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.402.032 I llm_load_print_meta: freq_scale_train = 1
0.00.402.033 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.402.033 I llm_load_print_meta: rope_finetuned   = unknown
0.00.402.034 I llm_load_print_meta: ssm_d_conv       = 0
0.00.402.034 I llm_load_print_meta: ssm_d_inner      = 0
0.00.402.034 I llm_load_print_meta: ssm_d_state      = 0
0.00.402.035 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.402.035 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.402.036 I llm_load_print_meta: model type       = 2.8B
0.00.402.037 I llm_load_print_meta: model ftype      = Q3_K - Medium
0.00.402.038 I llm_load_print_meta: model params     = 2.78 B
0.00.402.039 I llm_load_print_meta: model size       = 1.37 GiB (4.25 BPW) 
0.00.402.040 I llm_load_print_meta: general.name     = 2.8B
0.00.402.040 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.402.041 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.402.041 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.402.042 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.402.043 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.402.044 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.402.045 I llm_load_print_meta: max token length = 1024
0.00.495.103 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.495.113 I llm_load_tensors: offloading output layer to GPU
0.00.495.114 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.495.123 I llm_load_tensors:        CUDA0 model buffer size =  1354.83 MiB
0.00.495.124 I llm_load_tensors:   CPU_Mapped model buffer size =    52.77 MiB
...........................................................................................
0.00.770.890 I llama_new_context_with_model: n_seq_max     = 1
0.00.770.897 I llama_new_context_with_model: n_ctx         = 2048
0.00.770.898 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.770.898 I llama_new_context_with_model: n_batch       = 2048
0.00.770.899 I llama_new_context_with_model: n_ubatch      = 512
0.00.770.900 I llama_new_context_with_model: flash_attn    = 0
0.00.770.906 I llama_new_context_with_model: freq_base     = 10000.0
0.00.770.907 I llama_new_context_with_model: freq_scale    = 1
0.00.772.166 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.772.176 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.773.386 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.784.230 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.784.238 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.784.239 I llama_new_context_with_model: graph nodes  = 1287
0.00.784.239 I llama_new_context_with_model: graph splits = 2
0.00.784.244 I common_init_from_params: added EOS logit bias = -inf
0.00.784.245 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.852.744 I main: llama threadpool init, n_threads = 1
0.00.852.761 I 
0.00.852.860 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.852.865 I 
0.00.853.009 I sampler seed: 1234
0.00.853.024 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.853.029 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.853.030 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.853.031 I 
I believe the meaning of life is to get out of this house and go out and have a good time. I don’t believe in the meaning of life. I am not religious. I do not believe in religion. I believe in life, love, the moon and a night in the woods.

I don’t believe in the meaning of life. I don’t believe in religion. I do believe in life, love, the moon and a night in the woods.

I don’t believe in the meaning of life. I don’t believe in religion. I do believe in love, in life and in the moon.

I do not believe in the meaning of life. I do not believe in religion. I do believe in love, in life and in the moon.

I do not believe in the meaning of life. I do not believe in religion. I believe in love, in life and in the moon.

I believe in life, love, the moon and a night in the woods.

I don’t believe in the meaning of life. I don’t believe in religion. I do believe in love, in life and in the moon.

I believe in life, love, the moon and a night in

0.02.711.611 I llama_perf_sampler_print:    sampling time =      11.01 ms /   263 runs   (    0.04 ms per token, 23896.06 tokens per second)
0.02.711.615 I llama_perf_context_print:        load time =     570.62 ms
0.02.711.616 I llama_perf_context_print: prompt eval time =      12.46 ms /     7 tokens (    1.78 ms per token,   561.57 tokens per second)
0.02.711.618 I llama_perf_context_print:        eval time =    1809.84 ms /   255 runs   (    7.10 ms per token,   140.90 tokens per second)
0.02.711.620 I llama_perf_context_print:       total time =    1858.87 ms /   262 tokens

real	0m2.997s
user	0m2.274s
sys	0m0.726s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.173 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.493 I main: llama backend init
0.00.000.503 I main: load the model and apply lora adapter, if any
0.00.281.370 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.296.699 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf (version GGUF V3 (latest))
0.00.296.723 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.296.738 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.296.744 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.296.745 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.296.746 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.296.747 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.296.752 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.296.753 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.296.754 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.296.755 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.296.756 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.296.757 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.296.758 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.296.765 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.296.766 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.296.767 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.304.360 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.306.123 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.313.461 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.313.469 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.313.469 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.313.470 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.313.471 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.313.472 I llama_model_loader: - kv  22:                          general.file_type u32              = 15
0.00.313.474 I llama_model_loader: - type  f32:  258 tensors
0.00.313.475 I llama_model_loader: - type q4_K:   81 tensors
0.00.313.476 I llama_model_loader: - type q5_K:   32 tensors
0.00.313.476 I llama_model_loader: - type q6_K:   17 tensors
0.00.378.380 I llm_load_vocab: special tokens cache size = 25
0.00.400.548 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.400.566 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.400.567 I llm_load_print_meta: arch             = gptneox
0.00.400.568 I llm_load_print_meta: vocab type       = BPE
0.00.400.569 I llm_load_print_meta: n_vocab          = 50304
0.00.400.569 I llm_load_print_meta: n_merges         = 50009
0.00.400.570 I llm_load_print_meta: vocab_only       = 0
0.00.400.571 I llm_load_print_meta: n_ctx_train      = 2048
0.00.400.572 I llm_load_print_meta: n_embd           = 2560
0.00.400.572 I llm_load_print_meta: n_layer          = 32
0.00.400.587 I llm_load_print_meta: n_head           = 32
0.00.400.588 I llm_load_print_meta: n_head_kv        = 32
0.00.400.589 I llm_load_print_meta: n_rot            = 20
0.00.400.589 I llm_load_print_meta: n_swa            = 0
0.00.400.590 I llm_load_print_meta: n_embd_head_k    = 80
0.00.400.591 I llm_load_print_meta: n_embd_head_v    = 80
0.00.400.593 I llm_load_print_meta: n_gqa            = 1
0.00.400.594 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.400.595 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.400.597 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.400.598 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.400.599 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.400.600 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.400.600 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.400.601 I llm_load_print_meta: n_ff             = 10240
0.00.400.602 I llm_load_print_meta: n_expert         = 0
0.00.400.602 I llm_load_print_meta: n_expert_used    = 0
0.00.400.602 I llm_load_print_meta: causal attn      = 1
0.00.400.603 I llm_load_print_meta: pooling type     = 0
0.00.400.603 I llm_load_print_meta: rope type        = 2
0.00.400.604 I llm_load_print_meta: rope scaling     = linear
0.00.400.606 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.400.606 I llm_load_print_meta: freq_scale_train = 1
0.00.400.607 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.400.607 I llm_load_print_meta: rope_finetuned   = unknown
0.00.400.608 I llm_load_print_meta: ssm_d_conv       = 0
0.00.400.608 I llm_load_print_meta: ssm_d_inner      = 0
0.00.400.610 I llm_load_print_meta: ssm_d_state      = 0
0.00.400.611 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.400.611 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.400.612 I llm_load_print_meta: model type       = 2.8B
0.00.400.613 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.400.614 I llm_load_print_meta: model params     = 2.78 B
0.00.400.615 I llm_load_print_meta: model size       = 1.66 GiB (5.14 BPW) 
0.00.400.615 I llm_load_print_meta: general.name     = 2.8B
0.00.400.616 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.400.616 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.400.617 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.400.618 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.400.619 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.400.619 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.400.620 I llm_load_print_meta: max token length = 1024
0.00.516.989 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.516.997 I llm_load_tensors: offloading output layer to GPU
0.00.516.998 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.517.007 I llm_load_tensors:        CUDA0 model buffer size =  1632.95 MiB
0.00.517.021 I llm_load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
..................................................................................
0.00.847.743 I llama_new_context_with_model: n_seq_max     = 1
0.00.847.749 I llama_new_context_with_model: n_ctx         = 2048
0.00.847.749 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.847.750 I llama_new_context_with_model: n_batch       = 2048
0.00.847.750 I llama_new_context_with_model: n_ubatch      = 512
0.00.847.751 I llama_new_context_with_model: flash_attn    = 0
0.00.847.755 I llama_new_context_with_model: freq_base     = 10000.0
0.00.847.756 I llama_new_context_with_model: freq_scale    = 1
0.00.849.007 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.849.017 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.850.375 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.860.498 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.860.508 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.860.508 I llama_new_context_with_model: graph nodes  = 1287
0.00.860.509 I llama_new_context_with_model: graph splits = 2
0.00.860.513 I common_init_from_params: added EOS logit bias = -inf
0.00.860.515 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.927.496 I main: llama threadpool init, n_threads = 1
0.00.927.515 I 
0.00.927.606 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.927.611 I 
0.00.927.749 I sampler seed: 1234
0.00.927.764 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.927.768 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.927.770 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.927.770 I 
I believe the meaning of life is to take chances and try to do something that you think is impossible and then you do it anyway.

You never know.

You can do it.

You have a chance to do it.

And if you can’t, well that’s okay too.

You’ve got to do it anyway.

The first time I started smoking I was like, ‘This is not going to work. I have no way to make this work.’

Then I went back to the same spot and I tried it again.

This time, I wasn’t as nervous. I had a lot of success with this.

I felt good.

I didn’t have to think about it.

I just wanted to do it.

I didn’t want to stop.

I thought, ‘It’s not going to work. I’m not going to quit.’

That’s when I started to think about it.

I started to think about it as a choice.

I thought about it as a chance.

And then I started to think about it as a choice that I had control over.

And that’s when

0.02.690.359 I llama_perf_sampler_print:    sampling time =      11.04 ms /   263 runs   (    0.04 ms per token, 23833.26 tokens per second)
0.02.690.362 I llama_perf_context_print:        load time =     646.11 ms
0.02.690.364 I llama_perf_context_print: prompt eval time =      12.27 ms /     7 tokens (    1.75 ms per token,   570.54 tokens per second)
0.02.690.366 I llama_perf_context_print:        eval time =    1714.38 ms /   255 runs   (    6.72 ms per token,   148.74 tokens per second)
0.02.690.367 I llama_perf_context_print:       total time =    1762.87 ms /   262 tokens

real	0m2.986s
user	0m2.247s
sys	0m0.741s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.186 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.534 I main: llama backend init
0.00.000.544 I main: load the model and apply lora adapter, if any
0.00.285.407 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.300.734 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf (version GGUF V3 (latest))
0.00.300.755 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.300.764 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.300.766 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.300.766 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.300.770 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.300.771 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.300.778 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.300.779 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.300.781 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.300.783 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.300.784 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.300.785 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.300.786 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.300.792 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.300.793 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.300.794 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.308.368 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.310.130 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.316.713 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.316.721 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.316.722 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.316.723 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.316.724 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.316.725 I llama_model_loader: - kv  22:                          general.file_type u32              = 17
0.00.316.728 I llama_model_loader: - type  f32:  258 tensors
0.00.316.729 I llama_model_loader: - type q5_K:   81 tensors
0.00.316.729 I llama_model_loader: - type q6_K:   49 tensors
0.00.381.485 I llm_load_vocab: special tokens cache size = 25
0.00.403.491 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.403.507 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.403.508 I llm_load_print_meta: arch             = gptneox
0.00.403.509 I llm_load_print_meta: vocab type       = BPE
0.00.403.510 I llm_load_print_meta: n_vocab          = 50304
0.00.403.511 I llm_load_print_meta: n_merges         = 50009
0.00.403.511 I llm_load_print_meta: vocab_only       = 0
0.00.403.511 I llm_load_print_meta: n_ctx_train      = 2048
0.00.403.512 I llm_load_print_meta: n_embd           = 2560
0.00.403.512 I llm_load_print_meta: n_layer          = 32
0.00.403.527 I llm_load_print_meta: n_head           = 32
0.00.403.528 I llm_load_print_meta: n_head_kv        = 32
0.00.403.528 I llm_load_print_meta: n_rot            = 20
0.00.403.529 I llm_load_print_meta: n_swa            = 0
0.00.403.529 I llm_load_print_meta: n_embd_head_k    = 80
0.00.403.530 I llm_load_print_meta: n_embd_head_v    = 80
0.00.403.531 I llm_load_print_meta: n_gqa            = 1
0.00.403.532 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.403.534 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.403.535 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.403.536 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.403.536 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.403.537 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.403.538 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.403.540 I llm_load_print_meta: n_ff             = 10240
0.00.403.540 I llm_load_print_meta: n_expert         = 0
0.00.403.540 I llm_load_print_meta: n_expert_used    = 0
0.00.403.541 I llm_load_print_meta: causal attn      = 1
0.00.403.541 I llm_load_print_meta: pooling type     = 0
0.00.403.542 I llm_load_print_meta: rope type        = 2
0.00.403.543 I llm_load_print_meta: rope scaling     = linear
0.00.403.544 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.403.545 I llm_load_print_meta: freq_scale_train = 1
0.00.403.546 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.403.546 I llm_load_print_meta: rope_finetuned   = unknown
0.00.403.546 I llm_load_print_meta: ssm_d_conv       = 0
0.00.403.547 I llm_load_print_meta: ssm_d_inner      = 0
0.00.403.547 I llm_load_print_meta: ssm_d_state      = 0
0.00.403.548 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.403.549 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.403.549 I llm_load_print_meta: model type       = 2.8B
0.00.403.550 I llm_load_print_meta: model ftype      = Q5_K - Medium
0.00.403.551 I llm_load_print_meta: model params     = 2.78 B
0.00.403.552 I llm_load_print_meta: model size       = 1.93 GiB (5.96 BPW) 
0.00.403.552 I llm_load_print_meta: general.name     = 2.8B
0.00.403.553 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.403.553 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.403.554 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.403.555 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.403.556 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.403.556 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.403.557 I llm_load_print_meta: max token length = 1024
0.00.532.202 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.532.213 I llm_load_tensors: offloading output layer to GPU
0.00.532.214 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.532.223 I llm_load_tensors:        CUDA0 model buffer size =  1887.64 MiB
0.00.532.225 I llm_load_tensors:   CPU_Mapped model buffer size =    84.43 MiB
...........................................................................................
0.00.915.500 I llama_new_context_with_model: n_seq_max     = 1
0.00.915.507 I llama_new_context_with_model: n_ctx         = 2048
0.00.915.508 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.915.508 I llama_new_context_with_model: n_batch       = 2048
0.00.915.509 I llama_new_context_with_model: n_ubatch      = 512
0.00.915.509 I llama_new_context_with_model: flash_attn    = 0
0.00.915.516 I llama_new_context_with_model: freq_base     = 10000.0
0.00.915.517 I llama_new_context_with_model: freq_scale    = 1
0.00.916.784 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.916.795 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.918.020 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.928.245 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.928.254 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.928.255 I llama_new_context_with_model: graph nodes  = 1287
0.00.928.256 I llama_new_context_with_model: graph splits = 2
0.00.928.260 I common_init_from_params: added EOS logit bias = -inf
0.00.928.261 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.994.149 I main: llama threadpool init, n_threads = 1
0.00.994.169 I 
0.00.994.265 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.994.270 I 
0.00.994.426 I sampler seed: 1234
0.00.994.441 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.994.445 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.994.447 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.994.447 I 
I believe the meaning of life is to create art." "I believe it's to be creative." "To be creative." "To be creative." "I think about it all the time." "It's all I think about." "I'm just trying to get away from it, but..." "You have to have some sort of idea of what you want to do." "I don't think that's a problem." "I don't think you're alone in that." "I think, I hope, it's not a problem." "I've got a list of things I want to do." "I don't know if I'll have time, but it's all on the list." "It's all on the list, but it's not just the list." "I'm not just putting it on the list." "I'm not just putting it on the list." "You're not just putting it on the list." "You're not just putting it on the list." "You're not just putting it on the list." "You're not just putting it on the list." "I'm not just putting it on the list." "You're not just putting it on the list." "You're not just putting it on the list." "You're not just putting

0.02.913.746 I llama_perf_sampler_print:    sampling time =      11.66 ms /   263 runs   (    0.04 ms per token, 22561.55 tokens per second)
0.02.913.749 I llama_perf_context_print:        load time =     708.73 ms
0.02.913.751 I llama_perf_context_print: prompt eval time =      12.54 ms /     7 tokens (    1.79 ms per token,   558.35 tokens per second)
0.02.913.752 I llama_perf_context_print:        eval time =    1867.32 ms /   255 runs   (    7.32 ms per token,   136.56 tokens per second)
0.02.913.753 I llama_perf_context_print:       total time =    1919.60 ms /   262 tokens

real	0m3.210s
user	0m2.447s
sys	0m0.766s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.174 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.493 I main: llama backend init
0.00.000.504 I main: load the model and apply lora adapter, if any
0.00.291.278 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.308.179 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf (version GGUF V3 (latest))
0.00.308.201 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.308.211 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.308.212 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.308.213 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.308.213 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.308.214 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.308.220 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.308.221 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.308.222 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.308.222 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.308.223 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.308.224 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.308.225 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.308.231 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.308.232 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.308.233 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.316.414 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.318.177 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.325.480 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.325.490 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.325.490 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.325.491 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.325.492 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.325.493 I llama_model_loader: - kv  22:                          general.file_type u32              = 18
0.00.325.496 I llama_model_loader: - type  f32:  258 tensors
0.00.325.497 I llama_model_loader: - type q6_K:  130 tensors
0.00.394.454 I llm_load_vocab: special tokens cache size = 25
0.00.418.702 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.418.722 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.418.722 I llm_load_print_meta: arch             = gptneox
0.00.418.723 I llm_load_print_meta: vocab type       = BPE
0.00.418.724 I llm_load_print_meta: n_vocab          = 50304
0.00.418.725 I llm_load_print_meta: n_merges         = 50009
0.00.418.725 I llm_load_print_meta: vocab_only       = 0
0.00.418.726 I llm_load_print_meta: n_ctx_train      = 2048
0.00.418.726 I llm_load_print_meta: n_embd           = 2560
0.00.418.727 I llm_load_print_meta: n_layer          = 32
0.00.418.743 I llm_load_print_meta: n_head           = 32
0.00.418.745 I llm_load_print_meta: n_head_kv        = 32
0.00.418.746 I llm_load_print_meta: n_rot            = 20
0.00.418.749 I llm_load_print_meta: n_swa            = 0
0.00.418.749 I llm_load_print_meta: n_embd_head_k    = 80
0.00.418.750 I llm_load_print_meta: n_embd_head_v    = 80
0.00.418.751 I llm_load_print_meta: n_gqa            = 1
0.00.418.753 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.418.758 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.418.759 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.418.760 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.418.761 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.418.761 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.418.761 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.418.763 I llm_load_print_meta: n_ff             = 10240
0.00.418.763 I llm_load_print_meta: n_expert         = 0
0.00.418.764 I llm_load_print_meta: n_expert_used    = 0
0.00.418.764 I llm_load_print_meta: causal attn      = 1
0.00.418.764 I llm_load_print_meta: pooling type     = 0
0.00.418.765 I llm_load_print_meta: rope type        = 2
0.00.418.766 I llm_load_print_meta: rope scaling     = linear
0.00.418.767 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.418.768 I llm_load_print_meta: freq_scale_train = 1
0.00.418.769 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.418.769 I llm_load_print_meta: rope_finetuned   = unknown
0.00.418.770 I llm_load_print_meta: ssm_d_conv       = 0
0.00.418.771 I llm_load_print_meta: ssm_d_inner      = 0
0.00.418.771 I llm_load_print_meta: ssm_d_state      = 0
0.00.418.772 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.418.772 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.418.773 I llm_load_print_meta: model type       = 2.8B
0.00.418.774 I llm_load_print_meta: model ftype      = Q6_K
0.00.418.775 I llm_load_print_meta: model params     = 2.78 B
0.00.418.776 I llm_load_print_meta: model size       = 2.12 GiB (6.57 BPW) 
0.00.418.777 I llm_load_print_meta: general.name     = 2.8B
0.00.418.777 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.418.778 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.418.778 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.418.779 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.418.779 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.418.780 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.418.781 I llm_load_print_meta: max token length = 1024
0.00.560.720 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.560.730 I llm_load_tensors: offloading output layer to GPU
0.00.560.731 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.560.739 I llm_load_tensors:        CUDA0 model buffer size =  2073.58 MiB
0.00.560.741 I llm_load_tensors:   CPU_Mapped model buffer size =   100.74 MiB
.............................................................................................
0.00.994.934 I llama_new_context_with_model: n_seq_max     = 1
0.00.994.942 I llama_new_context_with_model: n_ctx         = 2048
0.00.994.942 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.994.943 I llama_new_context_with_model: n_batch       = 2048
0.00.994.943 I llama_new_context_with_model: n_ubatch      = 512
0.00.994.944 I llama_new_context_with_model: flash_attn    = 0
0.00.994.950 I llama_new_context_with_model: freq_base     = 10000.0
0.00.994.951 I llama_new_context_with_model: freq_scale    = 1
0.00.996.304 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.996.317 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.997.539 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.008.505 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.008.515 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.008.516 I llama_new_context_with_model: graph nodes  = 1287
0.01.008.517 I llama_new_context_with_model: graph splits = 2
0.01.008.522 I common_init_from_params: added EOS logit bias = -inf
0.01.008.523 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.084.618 I main: llama threadpool init, n_threads = 1
0.01.084.653 I 
0.01.084.759 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.084.765 I 
0.01.084.907 I sampler seed: 1234
0.01.084.923 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.084.940 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.084.946 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.01.084.946 I 
I believe the meaning of life is to create beauty in this world.

If you are a parent, it is your job to make sure your child's eyes are open to the world.

I want to see the world through the eyes of a child. I want to know about life, about the world, about everything.

I want to be a kid again.

The more I see the world through my eyes, the more I want to see. The more I want to understand, the more I want to understand.

I want to make sure that when I grow up, I can understand the world.

I don't want to go through my life without understanding it.

I want to live a life of understanding.

I want to live a life that is full of understanding.

I want to live a life that has no regrets.

I want to live a life that has no regrets.

The more I live, the more I want to live.

The more I live, the more I want to live.

The more I live, the more I want to live.

The more I live, the more I want to live.

I want to live a life that

0.03.068.645 I llama_perf_sampler_print:    sampling time =      11.86 ms /   263 runs   (    0.05 ms per token, 22167.90 tokens per second)
0.03.068.651 I llama_perf_context_print:        load time =     793.32 ms
0.03.068.653 I llama_perf_context_print: prompt eval time =      11.60 ms /     7 tokens (    1.66 ms per token,   603.55 tokens per second)
0.03.068.655 I llama_perf_context_print:        eval time =    1932.24 ms /   255 runs   (    7.58 ms per token,   131.97 tokens per second)
0.03.068.656 I llama_perf_context_print:       total time =    1984.04 ms /   262 tokens

real	0m3.377s
user	0m2.584s
sys	0m0.792s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.580 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.291.865 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.307.106 I llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.307.128 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.307.136 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.307.138 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.307.142 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.307.143 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.307.144 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.307.153 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.307.154 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.307.154 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.307.155 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.307.156 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.307.157 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.307.158 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.307.166 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.307.167 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.307.168 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.314.742 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.316.512 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.323.130 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.323.139 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.323.140 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.323.141 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.323.142 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.323.144 I llama_model_loader: - type  f32:  258 tensors
0.00.323.145 I llama_model_loader: - type  f16:  130 tensors
0.00.389.863 I llm_load_vocab: special tokens cache size = 25
0.00.413.591 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.413.610 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.413.611 I llm_load_print_meta: arch             = gptneox
0.00.413.611 I llm_load_print_meta: vocab type       = BPE
0.00.413.612 I llm_load_print_meta: n_vocab          = 50304
0.00.413.613 I llm_load_print_meta: n_merges         = 50009
0.00.413.613 I llm_load_print_meta: vocab_only       = 0
0.00.413.614 I llm_load_print_meta: n_ctx_train      = 2048
0.00.413.614 I llm_load_print_meta: n_embd           = 2560
0.00.413.615 I llm_load_print_meta: n_layer          = 32
0.00.413.630 I llm_load_print_meta: n_head           = 32
0.00.413.631 I llm_load_print_meta: n_head_kv        = 32
0.00.413.632 I llm_load_print_meta: n_rot            = 20
0.00.413.632 I llm_load_print_meta: n_swa            = 0
0.00.413.632 I llm_load_print_meta: n_embd_head_k    = 80
0.00.413.633 I llm_load_print_meta: n_embd_head_v    = 80
0.00.413.635 I llm_load_print_meta: n_gqa            = 1
0.00.413.636 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.413.637 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.413.639 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.413.640 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.413.642 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.413.642 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.413.643 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.413.645 I llm_load_print_meta: n_ff             = 10240
0.00.413.646 I llm_load_print_meta: n_expert         = 0
0.00.413.646 I llm_load_print_meta: n_expert_used    = 0
0.00.413.646 I llm_load_print_meta: causal attn      = 1
0.00.413.647 I llm_load_print_meta: pooling type     = 0
0.00.413.647 I llm_load_print_meta: rope type        = 2
0.00.413.648 I llm_load_print_meta: rope scaling     = linear
0.00.413.650 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.413.651 I llm_load_print_meta: freq_scale_train = 1
0.00.413.651 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.413.651 I llm_load_print_meta: rope_finetuned   = unknown
0.00.413.652 I llm_load_print_meta: ssm_d_conv       = 0
0.00.413.652 I llm_load_print_meta: ssm_d_inner      = 0
0.00.413.653 I llm_load_print_meta: ssm_d_state      = 0
0.00.413.654 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.413.654 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.413.655 I llm_load_print_meta: model type       = 2.8B
0.00.413.656 I llm_load_print_meta: model ftype      = all F32 (guessed)
0.00.413.657 I llm_load_print_meta: model params     = 2.78 B
0.00.413.658 I llm_load_print_meta: model size       = 5.17 GiB (16.01 BPW) 
0.00.413.659 I llm_load_print_meta: general.name     = 2.8B
0.00.413.659 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.413.660 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.413.660 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.413.661 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.413.662 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.413.663 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.413.663 I llm_load_print_meta: max token length = 1024
0.00.760.100 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.760.112 I llm_load_tensors: offloading output layer to GPU
0.00.760.113 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.760.121 I llm_load_tensors:        CUDA0 model buffer size =  5049.71 MiB
0.00.760.123 I llm_load_tensors:   CPU_Mapped model buffer size =   245.62 MiB
.............................................................................................
0.01.625.871 I llama_new_context_with_model: n_seq_max     = 1
0.01.625.876 I llama_new_context_with_model: n_ctx         = 2048
0.01.625.876 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.01.625.877 I llama_new_context_with_model: n_batch       = 512
0.01.625.877 I llama_new_context_with_model: n_ubatch      = 512
0.01.625.878 I llama_new_context_with_model: flash_attn    = 0
0.01.625.885 I llama_new_context_with_model: freq_base     = 10000.0
0.01.625.887 I llama_new_context_with_model: freq_scale    = 1
0.01.627.183 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.627.196 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.628.421 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.637.979 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.637.988 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.637.989 I llama_new_context_with_model: graph nodes  = 1287
0.01.637.990 I llama_new_context_with_model: graph splits = 2
0.01.637.992 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.713.992 I 
0.01.714.106 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.714.118 I perplexity: tokenizing the input ..
0.02.982.655 I perplexity: tokenization took 1268.52 ms
0.02.982.997 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.03.547.562 I perplexity: 0.56 seconds per pass - ETA 0.03 minutes
[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,
0.05.081.447 I Final estimate: PPL = 10.3475 +/- 0.42292

0.05.083.318 I llama_perf_context_print:        load time =    1422.11 ms
0.05.083.321 I llama_perf_context_print: prompt eval time =    1739.33 ms /  8192 tokens (    0.21 ms per token,  4709.86 tokens per second)
0.05.083.322 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.05.083.323 I llama_perf_context_print:       total time =    3369.33 ms /  8193 tokens

real	0m5.401s
user	0m5.064s
sys	0m1.332s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.009.050 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.293.444 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.308.715 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf (version GGUF V3 (latest))
0.00.308.734 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.308.743 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.308.744 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.308.745 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.308.745 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.308.746 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.308.752 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.308.753 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.308.754 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.308.755 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.308.756 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.308.757 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.308.759 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.308.765 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.308.766 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.308.767 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.316.299 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.318.092 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.324.969 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.324.978 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.324.979 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.324.979 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.324.980 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.324.981 I llama_model_loader: - kv  22:                          general.file_type u32              = 7
0.00.324.984 I llama_model_loader: - type  f32:  258 tensors
0.00.324.985 I llama_model_loader: - type q8_0:  130 tensors
0.00.389.958 I llm_load_vocab: special tokens cache size = 25
0.00.411.804 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.411.819 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.411.820 I llm_load_print_meta: arch             = gptneox
0.00.411.821 I llm_load_print_meta: vocab type       = BPE
0.00.411.822 I llm_load_print_meta: n_vocab          = 50304
0.00.411.823 I llm_load_print_meta: n_merges         = 50009
0.00.411.826 I llm_load_print_meta: vocab_only       = 0
0.00.411.827 I llm_load_print_meta: n_ctx_train      = 2048
0.00.411.827 I llm_load_print_meta: n_embd           = 2560
0.00.411.829 I llm_load_print_meta: n_layer          = 32
0.00.411.843 I llm_load_print_meta: n_head           = 32
0.00.411.844 I llm_load_print_meta: n_head_kv        = 32
0.00.411.845 I llm_load_print_meta: n_rot            = 20
0.00.411.845 I llm_load_print_meta: n_swa            = 0
0.00.411.846 I llm_load_print_meta: n_embd_head_k    = 80
0.00.411.847 I llm_load_print_meta: n_embd_head_v    = 80
0.00.411.849 I llm_load_print_meta: n_gqa            = 1
0.00.411.851 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.411.852 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.411.854 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.411.854 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.411.855 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.411.855 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.411.857 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.411.858 I llm_load_print_meta: n_ff             = 10240
0.00.411.858 I llm_load_print_meta: n_expert         = 0
0.00.411.859 I llm_load_print_meta: n_expert_used    = 0
0.00.411.859 I llm_load_print_meta: causal attn      = 1
0.00.411.859 I llm_load_print_meta: pooling type     = 0
0.00.411.860 I llm_load_print_meta: rope type        = 2
0.00.411.861 I llm_load_print_meta: rope scaling     = linear
0.00.411.863 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.411.863 I llm_load_print_meta: freq_scale_train = 1
0.00.411.864 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.411.865 I llm_load_print_meta: rope_finetuned   = unknown
0.00.411.865 I llm_load_print_meta: ssm_d_conv       = 0
0.00.411.865 I llm_load_print_meta: ssm_d_inner      = 0
0.00.411.866 I llm_load_print_meta: ssm_d_state      = 0
0.00.411.869 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.411.870 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.411.870 I llm_load_print_meta: model type       = 2.8B
0.00.411.871 I llm_load_print_meta: model ftype      = Q8_0
0.00.411.872 I llm_load_print_meta: model params     = 2.78 B
0.00.411.873 I llm_load_print_meta: model size       = 2.75 GiB (8.51 BPW) 
0.00.411.874 I llm_load_print_meta: general.name     = 2.8B
0.00.411.875 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.411.875 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.411.875 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.411.876 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.411.876 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.411.878 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.411.879 I llm_load_print_meta: max token length = 1024
0.00.597.898 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.597.911 I llm_load_tensors: offloading output layer to GPU
0.00.597.912 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.597.921 I llm_load_tensors:        CUDA0 model buffer size =  2684.57 MiB
0.00.597.922 I llm_load_tensors:   CPU_Mapped model buffer size =   130.49 MiB
.............................................................................................
0.01.073.752 I llama_new_context_with_model: n_seq_max     = 1
0.01.073.759 I llama_new_context_with_model: n_ctx         = 2048
0.01.073.760 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.01.073.760 I llama_new_context_with_model: n_batch       = 512
0.01.073.761 I llama_new_context_with_model: n_ubatch      = 512
0.01.073.761 I llama_new_context_with_model: flash_attn    = 0
0.01.073.767 I llama_new_context_with_model: freq_base     = 10000.0
0.01.073.768 I llama_new_context_with_model: freq_scale    = 1
0.01.075.042 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.075.054 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.076.284 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.086.512 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.086.524 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.086.524 I llama_new_context_with_model: graph nodes  = 1287
0.01.086.525 I llama_new_context_with_model: graph splits = 2
0.01.086.528 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.152.850 I 
0.01.152.958 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.152.971 I perplexity: tokenizing the input ..
0.02.408.509 I perplexity: tokenization took 1255.53 ms
0.02.408.838 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.03.002.880 I perplexity: 0.59 seconds per pass - ETA 0.03 minutes
[1]9.7126,[2]11.4535,[3]11.6553,[4]10.3702,
0.04.908.645 I Final estimate: PPL = 10.3702 +/- 0.42431

0.04.910.302 I llama_perf_context_print:        load time =     859.39 ms
0.04.910.304 I llama_perf_context_print: prompt eval time =    2140.55 ms /  8192 tokens (    0.26 ms per token,  3827.06 tokens per second)
0.04.910.306 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.910.307 I llama_perf_context_print:       total time =    3757.45 ms /  8193 tokens

real	0m5.223s
user	0m5.009s
sys	0m1.199s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.380 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.288.761 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.304.259 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
0.00.304.281 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.304.307 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.304.317 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.304.318 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.304.319 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.304.319 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.304.325 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.304.326 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.304.327 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.304.328 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.304.329 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.304.330 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.304.331 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.304.337 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.304.338 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.304.350 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.312.146 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.313.896 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.320.536 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.320.544 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.320.544 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.320.545 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.320.546 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.320.546 I llama_model_loader: - kv  22:                          general.file_type u32              = 2
0.00.320.549 I llama_model_loader: - type  f32:  258 tensors
0.00.320.550 I llama_model_loader: - type q4_0:  129 tensors
0.00.320.551 I llama_model_loader: - type q6_K:    1 tensors
0.00.385.428 I llm_load_vocab: special tokens cache size = 25
0.00.408.187 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.408.204 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.408.205 I llm_load_print_meta: arch             = gptneox
0.00.408.206 I llm_load_print_meta: vocab type       = BPE
0.00.408.207 I llm_load_print_meta: n_vocab          = 50304
0.00.408.207 I llm_load_print_meta: n_merges         = 50009
0.00.408.208 I llm_load_print_meta: vocab_only       = 0
0.00.408.208 I llm_load_print_meta: n_ctx_train      = 2048
0.00.408.209 I llm_load_print_meta: n_embd           = 2560
0.00.408.209 I llm_load_print_meta: n_layer          = 32
0.00.408.223 I llm_load_print_meta: n_head           = 32
0.00.408.224 I llm_load_print_meta: n_head_kv        = 32
0.00.408.225 I llm_load_print_meta: n_rot            = 20
0.00.408.225 I llm_load_print_meta: n_swa            = 0
0.00.408.226 I llm_load_print_meta: n_embd_head_k    = 80
0.00.408.227 I llm_load_print_meta: n_embd_head_v    = 80
0.00.408.228 I llm_load_print_meta: n_gqa            = 1
0.00.408.229 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.408.231 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.408.233 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.408.233 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.408.234 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.408.234 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.408.235 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.408.236 I llm_load_print_meta: n_ff             = 10240
0.00.408.236 I llm_load_print_meta: n_expert         = 0
0.00.408.237 I llm_load_print_meta: n_expert_used    = 0
0.00.408.237 I llm_load_print_meta: causal attn      = 1
0.00.408.238 I llm_load_print_meta: pooling type     = 0
0.00.408.238 I llm_load_print_meta: rope type        = 2
0.00.408.238 I llm_load_print_meta: rope scaling     = linear
0.00.408.240 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.408.241 I llm_load_print_meta: freq_scale_train = 1
0.00.408.241 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.408.242 I llm_load_print_meta: rope_finetuned   = unknown
0.00.408.242 I llm_load_print_meta: ssm_d_conv       = 0
0.00.408.243 I llm_load_print_meta: ssm_d_inner      = 0
0.00.408.243 I llm_load_print_meta: ssm_d_state      = 0
0.00.408.243 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.408.245 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.408.245 I llm_load_print_meta: model type       = 2.8B
0.00.408.246 I llm_load_print_meta: model ftype      = Q4_0
0.00.408.247 I llm_load_print_meta: model params     = 2.78 B
0.00.408.249 I llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
0.00.408.250 I llm_load_print_meta: general.name     = 2.8B
0.00.408.250 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.408.250 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.408.251 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.408.252 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.408.253 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.408.253 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.408.254 I llm_load_print_meta: max token length = 1024
0.00.510.555 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.510.566 I llm_load_tensors: offloading output layer to GPU
0.00.510.567 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.510.575 I llm_load_tensors:        CUDA0 model buffer size =  1454.83 MiB
0.00.510.577 I llm_load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
...........................................................................................
0.00.775.466 I llama_new_context_with_model: n_seq_max     = 1
0.00.775.474 I llama_new_context_with_model: n_ctx         = 2048
0.00.775.474 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.775.475 I llama_new_context_with_model: n_batch       = 512
0.00.775.475 I llama_new_context_with_model: n_ubatch      = 512
0.00.775.476 I llama_new_context_with_model: flash_attn    = 0
0.00.775.482 I llama_new_context_with_model: freq_base     = 10000.0
0.00.775.483 I llama_new_context_with_model: freq_scale    = 1
0.00.776.791 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.776.804 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.778.080 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.787.679 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.787.690 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.787.690 I llama_new_context_with_model: graph nodes  = 1287
0.00.787.691 I llama_new_context_with_model: graph splits = 2
0.00.787.694 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.862.882 I 
0.00.863.000 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.863.012 I perplexity: tokenizing the input ..
0.02.096.858 I perplexity: tokenization took 1233.84 ms
0.02.097.185 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.743.414 I perplexity: 0.65 seconds per pass - ETA 0.03 minutes
[1]10.2476,[2]12.0349,[3]12.3143,[4]10.9657,
0.04.508.639 I Final estimate: PPL = 10.9657 +/- 0.44766

0.04.510.182 I llama_perf_context_print:        load time =     574.10 ms
0.04.510.184 I llama_perf_context_print: prompt eval time =    2055.13 ms /  8192 tokens (    0.25 ms per token,  3986.12 tokens per second)
0.04.510.186 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.510.187 I llama_perf_context_print:       total time =    3647.30 ms /  8193 tokens

real	0m4.819s
user	0m4.778s
sys	0m1.026s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.454 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.279.057 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.295.515 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf (version GGUF V3 (latest))
0.00.295.537 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.295.546 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.295.547 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.295.548 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.295.549 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.295.549 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.295.555 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.295.556 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.295.557 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.295.558 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.295.558 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.295.559 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.295.560 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.295.567 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.295.568 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.295.569 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.303.197 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.304.983 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.311.599 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.311.606 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.311.607 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.311.608 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.311.608 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.311.609 I llama_model_loader: - kv  22:                          general.file_type u32              = 3
0.00.311.612 I llama_model_loader: - type  f32:  258 tensors
0.00.311.613 I llama_model_loader: - type q4_1:  129 tensors
0.00.311.614 I llama_model_loader: - type q6_K:    1 tensors
0.00.376.060 I llm_load_vocab: special tokens cache size = 25
0.00.398.034 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.398.053 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.398.053 I llm_load_print_meta: arch             = gptneox
0.00.398.054 I llm_load_print_meta: vocab type       = BPE
0.00.398.055 I llm_load_print_meta: n_vocab          = 50304
0.00.398.056 I llm_load_print_meta: n_merges         = 50009
0.00.398.056 I llm_load_print_meta: vocab_only       = 0
0.00.398.057 I llm_load_print_meta: n_ctx_train      = 2048
0.00.398.057 I llm_load_print_meta: n_embd           = 2560
0.00.398.057 I llm_load_print_meta: n_layer          = 32
0.00.398.077 I llm_load_print_meta: n_head           = 32
0.00.398.079 I llm_load_print_meta: n_head_kv        = 32
0.00.398.079 I llm_load_print_meta: n_rot            = 20
0.00.398.080 I llm_load_print_meta: n_swa            = 0
0.00.398.080 I llm_load_print_meta: n_embd_head_k    = 80
0.00.398.081 I llm_load_print_meta: n_embd_head_v    = 80
0.00.398.082 I llm_load_print_meta: n_gqa            = 1
0.00.398.084 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.398.085 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.398.087 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.398.088 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.398.089 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.398.089 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.398.090 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.398.091 I llm_load_print_meta: n_ff             = 10240
0.00.398.091 I llm_load_print_meta: n_expert         = 0
0.00.398.092 I llm_load_print_meta: n_expert_used    = 0
0.00.398.092 I llm_load_print_meta: causal attn      = 1
0.00.398.094 I llm_load_print_meta: pooling type     = 0
0.00.398.094 I llm_load_print_meta: rope type        = 2
0.00.398.095 I llm_load_print_meta: rope scaling     = linear
0.00.398.098 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.398.099 I llm_load_print_meta: freq_scale_train = 1
0.00.398.103 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.398.103 I llm_load_print_meta: rope_finetuned   = unknown
0.00.398.104 I llm_load_print_meta: ssm_d_conv       = 0
0.00.398.104 I llm_load_print_meta: ssm_d_inner      = 0
0.00.398.104 I llm_load_print_meta: ssm_d_state      = 0
0.00.398.106 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.398.106 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.398.107 I llm_load_print_meta: model type       = 2.8B
0.00.398.107 I llm_load_print_meta: model ftype      = Q4_1
0.00.398.108 I llm_load_print_meta: model params     = 2.78 B
0.00.398.109 I llm_load_print_meta: model size       = 1.64 GiB (5.08 BPW) 
0.00.398.110 I llm_load_print_meta: general.name     = 2.8B
0.00.398.111 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.398.111 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.398.112 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.398.113 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.398.114 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.398.114 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.398.115 I llm_load_print_meta: max token length = 1024
0.00.507.232 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.507.244 I llm_load_tensors: offloading output layer to GPU
0.00.507.245 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.507.253 I llm_load_tensors:        CUDA0 model buffer size =  1604.83 MiB
0.00.507.255 I llm_load_tensors:   CPU_Mapped model buffer size =    76.76 MiB
............................................................................................
0.00.793.401 I llama_new_context_with_model: n_seq_max     = 1
0.00.793.409 I llama_new_context_with_model: n_ctx         = 2048
0.00.793.409 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.793.410 I llama_new_context_with_model: n_batch       = 512
0.00.793.410 I llama_new_context_with_model: n_ubatch      = 512
0.00.793.411 I llama_new_context_with_model: flash_attn    = 0
0.00.793.417 I llama_new_context_with_model: freq_base     = 10000.0
0.00.793.417 I llama_new_context_with_model: freq_scale    = 1
0.00.794.678 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.794.687 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.795.896 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.805.550 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.805.559 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.805.560 I llama_new_context_with_model: graph nodes  = 1287
0.00.805.561 I llama_new_context_with_model: graph splits = 2
0.00.805.563 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.872.381 I 
0.00.872.490 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.872.503 I perplexity: tokenizing the input ..
0.02.113.686 I perplexity: tokenization took 1241.17 ms
0.02.114.012 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.761.614 I perplexity: 0.65 seconds per pass - ETA 0.03 minutes
[1]9.9582,[2]11.8210,[3]12.1417,[4]10.8426,
0.04.541.360 I Final estimate: PPL = 10.8426 +/- 0.43891

0.04.543.026 I llama_perf_context_print:        load time =     593.31 ms
0.04.543.029 I llama_perf_context_print: prompt eval time =    2068.16 ms /  8192 tokens (    0.25 ms per token,  3961.00 tokens per second)
0.04.543.031 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.543.032 I llama_perf_context_print:       total time =    3670.65 ms /  8193 tokens

real	0m4.849s
user	0m4.817s
sys	0m1.005s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.424 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.290.827 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.306.242 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf (version GGUF V3 (latest))
0.00.306.264 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.306.281 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.306.283 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.306.285 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.306.286 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.306.287 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.306.293 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.306.294 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.306.295 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.306.295 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.306.297 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.306.298 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.306.300 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.306.306 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.306.307 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.306.307 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.313.937 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.315.697 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.322.522 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.322.530 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.322.531 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.322.532 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.322.533 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.322.533 I llama_model_loader: - kv  22:                          general.file_type u32              = 8
0.00.322.536 I llama_model_loader: - type  f32:  258 tensors
0.00.322.537 I llama_model_loader: - type q5_0:  129 tensors
0.00.322.537 I llama_model_loader: - type q6_K:    1 tensors
0.00.387.239 I llm_load_vocab: special tokens cache size = 25
0.00.409.188 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.409.205 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.409.206 I llm_load_print_meta: arch             = gptneox
0.00.409.207 I llm_load_print_meta: vocab type       = BPE
0.00.409.207 I llm_load_print_meta: n_vocab          = 50304
0.00.409.208 I llm_load_print_meta: n_merges         = 50009
0.00.409.208 I llm_load_print_meta: vocab_only       = 0
0.00.409.209 I llm_load_print_meta: n_ctx_train      = 2048
0.00.409.209 I llm_load_print_meta: n_embd           = 2560
0.00.409.210 I llm_load_print_meta: n_layer          = 32
0.00.409.225 I llm_load_print_meta: n_head           = 32
0.00.409.226 I llm_load_print_meta: n_head_kv        = 32
0.00.409.227 I llm_load_print_meta: n_rot            = 20
0.00.409.227 I llm_load_print_meta: n_swa            = 0
0.00.409.228 I llm_load_print_meta: n_embd_head_k    = 80
0.00.409.228 I llm_load_print_meta: n_embd_head_v    = 80
0.00.409.230 I llm_load_print_meta: n_gqa            = 1
0.00.409.231 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.409.233 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.409.234 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.409.236 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.409.237 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.409.237 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.409.238 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.409.239 I llm_load_print_meta: n_ff             = 10240
0.00.409.240 I llm_load_print_meta: n_expert         = 0
0.00.409.240 I llm_load_print_meta: n_expert_used    = 0
0.00.409.241 I llm_load_print_meta: causal attn      = 1
0.00.409.241 I llm_load_print_meta: pooling type     = 0
0.00.409.243 I llm_load_print_meta: rope type        = 2
0.00.409.244 I llm_load_print_meta: rope scaling     = linear
0.00.409.246 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.409.246 I llm_load_print_meta: freq_scale_train = 1
0.00.409.247 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.409.248 I llm_load_print_meta: rope_finetuned   = unknown
0.00.409.248 I llm_load_print_meta: ssm_d_conv       = 0
0.00.409.248 I llm_load_print_meta: ssm_d_inner      = 0
0.00.409.249 I llm_load_print_meta: ssm_d_state      = 0
0.00.409.249 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.409.249 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.409.250 I llm_load_print_meta: model type       = 2.8B
0.00.409.251 I llm_load_print_meta: model ftype      = Q5_0
0.00.409.252 I llm_load_print_meta: model params     = 2.78 B
0.00.409.253 I llm_load_print_meta: model size       = 1.80 GiB (5.56 BPW) 
0.00.409.253 I llm_load_print_meta: general.name     = 2.8B
0.00.409.254 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.409.254 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.409.255 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.409.256 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.409.256 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.409.257 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.409.257 I llm_load_print_meta: max token length = 1024
0.00.530.992 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.531.005 I llm_load_tensors: offloading output layer to GPU
0.00.531.006 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.531.015 I llm_load_tensors:        CUDA0 model buffer size =  1754.83 MiB
0.00.531.016 I llm_load_tensors:   CPU_Mapped model buffer size =    84.43 MiB
............................................................................................
0.00.861.772 I llama_new_context_with_model: n_seq_max     = 1
0.00.861.780 I llama_new_context_with_model: n_ctx         = 2048
0.00.861.781 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.861.782 I llama_new_context_with_model: n_batch       = 512
0.00.861.782 I llama_new_context_with_model: n_ubatch      = 512
0.00.861.783 I llama_new_context_with_model: flash_attn    = 0
0.00.861.788 I llama_new_context_with_model: freq_base     = 10000.0
0.00.861.789 I llama_new_context_with_model: freq_scale    = 1
0.00.863.266 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.863.278 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.864.665 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.876.156 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.876.166 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.876.167 I llama_new_context_with_model: graph nodes  = 1287
0.00.876.167 I llama_new_context_with_model: graph splits = 2
0.00.876.170 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.948.931 I 
0.00.949.042 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.949.055 I perplexity: tokenizing the input ..
0.02.298.693 I perplexity: tokenization took 1349.63 ms
0.02.299.027 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.915.523 I perplexity: 0.62 seconds per pass - ETA 0.03 minutes
[1]9.8159,[2]11.5385,[3]11.8249,[4]10.5064,
0.04.575.422 I Final estimate: PPL = 10.5064 +/- 0.42936

0.04.577.016 I llama_perf_context_print:        load time =     658.09 ms
0.04.577.019 I llama_perf_context_print: prompt eval time =    1909.38 ms /  8192 tokens (    0.23 ms per token,  4290.40 tokens per second)
0.04.577.020 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.577.022 I llama_perf_context_print:       total time =    3628.09 ms /  8193 tokens

real	0m4.889s
user	0m4.865s
sys	0m1.026s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.006.464 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.290.352 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.306.183 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf (version GGUF V3 (latest))
0.00.306.206 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.306.215 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.306.217 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.306.218 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.306.218 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.306.219 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.306.225 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.306.226 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.306.227 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.306.228 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.306.228 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.306.229 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.306.230 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.306.238 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.306.239 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.306.239 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.313.839 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.315.696 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.322.336 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.322.345 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.322.346 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.322.346 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.322.347 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.322.348 I llama_model_loader: - kv  22:                          general.file_type u32              = 9
0.00.322.350 I llama_model_loader: - type  f32:  258 tensors
0.00.322.351 I llama_model_loader: - type q5_1:  129 tensors
0.00.322.352 I llama_model_loader: - type q6_K:    1 tensors
0.00.389.386 I llm_load_vocab: special tokens cache size = 25
0.00.411.282 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.411.301 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.411.302 I llm_load_print_meta: arch             = gptneox
0.00.411.302 I llm_load_print_meta: vocab type       = BPE
0.00.411.303 I llm_load_print_meta: n_vocab          = 50304
0.00.411.304 I llm_load_print_meta: n_merges         = 50009
0.00.411.305 I llm_load_print_meta: vocab_only       = 0
0.00.411.305 I llm_load_print_meta: n_ctx_train      = 2048
0.00.411.322 I llm_load_print_meta: n_embd           = 2560
0.00.411.323 I llm_load_print_meta: n_layer          = 32
0.00.411.340 I llm_load_print_meta: n_head           = 32
0.00.411.342 I llm_load_print_meta: n_head_kv        = 32
0.00.411.343 I llm_load_print_meta: n_rot            = 20
0.00.411.343 I llm_load_print_meta: n_swa            = 0
0.00.411.358 I llm_load_print_meta: n_embd_head_k    = 80
0.00.411.365 I llm_load_print_meta: n_embd_head_v    = 80
0.00.411.369 I llm_load_print_meta: n_gqa            = 1
0.00.411.371 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.411.372 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.411.374 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.411.375 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.411.376 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.411.376 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.411.377 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.411.378 I llm_load_print_meta: n_ff             = 10240
0.00.411.378 I llm_load_print_meta: n_expert         = 0
0.00.411.379 I llm_load_print_meta: n_expert_used    = 0
0.00.411.379 I llm_load_print_meta: causal attn      = 1
0.00.411.380 I llm_load_print_meta: pooling type     = 0
0.00.411.380 I llm_load_print_meta: rope type        = 2
0.00.411.381 I llm_load_print_meta: rope scaling     = linear
0.00.411.383 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.411.383 I llm_load_print_meta: freq_scale_train = 1
0.00.411.384 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.411.385 I llm_load_print_meta: rope_finetuned   = unknown
0.00.411.385 I llm_load_print_meta: ssm_d_conv       = 0
0.00.411.404 I llm_load_print_meta: ssm_d_inner      = 0
0.00.411.406 I llm_load_print_meta: ssm_d_state      = 0
0.00.411.406 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.411.407 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.411.407 I llm_load_print_meta: model type       = 2.8B
0.00.411.408 I llm_load_print_meta: model ftype      = Q5_1
0.00.411.410 I llm_load_print_meta: model params     = 2.78 B
0.00.411.410 I llm_load_print_meta: model size       = 1.95 GiB (6.04 BPW) 
0.00.411.411 I llm_load_print_meta: general.name     = 2.8B
0.00.411.413 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.411.414 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.411.414 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.411.415 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.411.415 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.411.417 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.411.418 I llm_load_print_meta: max token length = 1024
0.00.544.563 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.544.575 I llm_load_tensors: offloading output layer to GPU
0.00.544.575 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.544.585 I llm_load_tensors:        CUDA0 model buffer size =  1904.83 MiB
0.00.544.586 I llm_load_tensors:   CPU_Mapped model buffer size =    92.11 MiB
............................................................................................
0.00.900.465 I llama_new_context_with_model: n_seq_max     = 1
0.00.900.475 I llama_new_context_with_model: n_ctx         = 2048
0.00.900.476 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.900.476 I llama_new_context_with_model: n_batch       = 512
0.00.900.477 I llama_new_context_with_model: n_ubatch      = 512
0.00.900.478 I llama_new_context_with_model: flash_attn    = 0
0.00.900.483 I llama_new_context_with_model: freq_base     = 10000.0
0.00.900.484 I llama_new_context_with_model: freq_scale    = 1
0.00.901.793 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.901.804 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.903.279 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.912.758 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.912.769 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.912.770 I llama_new_context_with_model: graph nodes  = 1287
0.00.912.770 I llama_new_context_with_model: graph splits = 2
0.00.912.773 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.986.707 I 
0.00.986.819 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.986.831 I perplexity: tokenizing the input ..
0.02.205.217 I perplexity: tokenization took 1218.38 ms
0.02.205.544 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.814.741 I perplexity: 0.61 seconds per pass - ETA 0.03 minutes
[1]9.7281,[2]11.5058,[3]11.7213,[4]10.4307,
0.04.466.161 I Final estimate: PPL = 10.4307 +/- 0.42590

0.04.467.837 I llama_perf_context_print:        load time =     696.34 ms
0.04.467.840 I llama_perf_context_print: prompt eval time =    1902.18 ms /  8192 tokens (    0.23 ms per token,  4306.64 tokens per second)
0.04.467.841 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.467.843 I llama_perf_context_print:       total time =    3481.13 ms /  8193 tokens

real	0m4.781s
user	0m4.715s
sys	0m1.024s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q2_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.481 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.284.959 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.301.421 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf (version GGUF V3 (latest))
0.00.301.444 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.301.453 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.301.455 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.301.455 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.301.456 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.301.457 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.301.463 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.301.464 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.301.466 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.301.467 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.301.468 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.301.470 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.301.471 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.301.478 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.301.478 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.301.480 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.309.037 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.310.850 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.317.525 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.317.533 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.317.534 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.317.535 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.317.535 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.317.536 I llama_model_loader: - kv  22:                          general.file_type u32              = 10
0.00.317.539 I llama_model_loader: - type  f32:  258 tensors
0.00.317.540 I llama_model_loader: - type q2_K:   65 tensors
0.00.317.540 I llama_model_loader: - type q3_K:   64 tensors
0.00.317.541 I llama_model_loader: - type q6_K:    1 tensors
0.00.385.991 I llm_load_vocab: special tokens cache size = 25
0.00.409.412 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.409.441 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.409.442 I llm_load_print_meta: arch             = gptneox
0.00.409.443 I llm_load_print_meta: vocab type       = BPE
0.00.409.445 I llm_load_print_meta: n_vocab          = 50304
0.00.409.445 I llm_load_print_meta: n_merges         = 50009
0.00.409.446 I llm_load_print_meta: vocab_only       = 0
0.00.409.446 I llm_load_print_meta: n_ctx_train      = 2048
0.00.409.447 I llm_load_print_meta: n_embd           = 2560
0.00.409.447 I llm_load_print_meta: n_layer          = 32
0.00.409.465 I llm_load_print_meta: n_head           = 32
0.00.409.466 I llm_load_print_meta: n_head_kv        = 32
0.00.409.467 I llm_load_print_meta: n_rot            = 20
0.00.409.468 I llm_load_print_meta: n_swa            = 0
0.00.409.468 I llm_load_print_meta: n_embd_head_k    = 80
0.00.409.468 I llm_load_print_meta: n_embd_head_v    = 80
0.00.409.470 I llm_load_print_meta: n_gqa            = 1
0.00.409.471 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.409.473 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.409.476 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.409.476 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.409.477 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.409.478 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.409.479 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.409.480 I llm_load_print_meta: n_ff             = 10240
0.00.409.481 I llm_load_print_meta: n_expert         = 0
0.00.409.482 I llm_load_print_meta: n_expert_used    = 0
0.00.409.482 I llm_load_print_meta: causal attn      = 1
0.00.409.483 I llm_load_print_meta: pooling type     = 0
0.00.409.483 I llm_load_print_meta: rope type        = 2
0.00.409.484 I llm_load_print_meta: rope scaling     = linear
0.00.410.015 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.410.022 I llm_load_print_meta: freq_scale_train = 1
0.00.410.023 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.410.023 I llm_load_print_meta: rope_finetuned   = unknown
0.00.410.024 I llm_load_print_meta: ssm_d_conv       = 0
0.00.410.024 I llm_load_print_meta: ssm_d_inner      = 0
0.00.410.025 I llm_load_print_meta: ssm_d_state      = 0
0.00.410.025 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.410.026 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.410.026 I llm_load_print_meta: model type       = 2.8B
0.00.410.027 I llm_load_print_meta: model ftype      = Q2_K - Medium
0.00.410.028 I llm_load_print_meta: model params     = 2.78 B
0.00.410.029 I llm_load_print_meta: model size       = 1.01 GiB (3.13 BPW) 
0.00.410.030 I llm_load_print_meta: general.name     = 2.8B
0.00.410.031 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.410.031 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.410.031 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.410.032 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.410.033 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.410.034 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.410.034 I llm_load_print_meta: max token length = 1024
0.00.481.504 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.481.518 I llm_load_tensors: offloading output layer to GPU
0.00.481.519 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.481.528 I llm_load_tensors:        CUDA0 model buffer size =   993.89 MiB
0.00.481.529 I llm_load_tensors:   CPU_Mapped model buffer size =    40.30 MiB
.......................................................................................
0.00.666.841 I llama_new_context_with_model: n_seq_max     = 1
0.00.666.846 I llama_new_context_with_model: n_ctx         = 2048
0.00.666.847 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.666.848 I llama_new_context_with_model: n_batch       = 512
0.00.666.848 I llama_new_context_with_model: n_ubatch      = 512
0.00.666.849 I llama_new_context_with_model: flash_attn    = 0
0.00.666.854 I llama_new_context_with_model: freq_base     = 10000.0
0.00.666.855 I llama_new_context_with_model: freq_scale    = 1
0.00.668.107 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.668.121 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.669.330 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.679.479 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.679.486 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.679.487 I llama_new_context_with_model: graph nodes  = 1287
0.00.679.487 I llama_new_context_with_model: graph splits = 2
0.00.679.490 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.746.155 I 
0.00.746.264 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.746.275 I perplexity: tokenizing the input ..
0.01.986.389 I perplexity: tokenization took 1240.11 ms
0.01.986.706 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.618.232 I perplexity: 0.63 seconds per pass - ETA 0.03 minutes
[1]65.3391,[2]77.8564,[3]87.6350,[4]86.2160,
0.04.362.710 I Final estimate: PPL = 86.2160 +/- 4.58012

0.04.364.395 I llama_perf_context_print:        load time =     461.18 ms
0.04.364.398 I llama_perf_context_print: prompt eval time =    2008.98 ms /  8192 tokens (    0.25 ms per token,  4077.70 tokens per second)
0.04.364.400 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.364.401 I llama_perf_context_print:       total time =    3618.24 ms /  8193 tokens

real	0m4.670s
user	0m4.681s
sys	0m0.937s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.580 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.286.989 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.302.211 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf (version GGUF V3 (latest))
0.00.302.235 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.302.244 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.302.245 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.302.246 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.302.247 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.302.247 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.302.253 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.302.254 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.302.255 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.302.256 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.302.256 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.302.257 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.302.258 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.302.265 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.302.266 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.302.266 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.309.971 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.311.736 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.318.412 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.318.420 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.318.421 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.318.422 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.318.423 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.318.424 I llama_model_loader: - kv  22:                          general.file_type u32              = 12
0.00.318.426 I llama_model_loader: - type  f32:  258 tensors
0.00.318.427 I llama_model_loader: - type q3_K:   33 tensors
0.00.318.428 I llama_model_loader: - type q4_K:   94 tensors
0.00.318.428 I llama_model_loader: - type q5_K:    2 tensors
0.00.318.429 I llama_model_loader: - type q6_K:    1 tensors
0.00.383.522 I llm_load_vocab: special tokens cache size = 25
0.00.406.273 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.406.289 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.406.290 I llm_load_print_meta: arch             = gptneox
0.00.406.291 I llm_load_print_meta: vocab type       = BPE
0.00.406.292 I llm_load_print_meta: n_vocab          = 50304
0.00.406.292 I llm_load_print_meta: n_merges         = 50009
0.00.406.293 I llm_load_print_meta: vocab_only       = 0
0.00.406.293 I llm_load_print_meta: n_ctx_train      = 2048
0.00.406.305 I llm_load_print_meta: n_embd           = 2560
0.00.406.306 I llm_load_print_meta: n_layer          = 32
0.00.406.320 I llm_load_print_meta: n_head           = 32
0.00.406.322 I llm_load_print_meta: n_head_kv        = 32
0.00.406.323 I llm_load_print_meta: n_rot            = 20
0.00.406.323 I llm_load_print_meta: n_swa            = 0
0.00.406.324 I llm_load_print_meta: n_embd_head_k    = 80
0.00.406.325 I llm_load_print_meta: n_embd_head_v    = 80
0.00.406.327 I llm_load_print_meta: n_gqa            = 1
0.00.406.329 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.406.330 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.406.336 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.406.337 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.406.338 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.406.338 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.406.339 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.406.340 I llm_load_print_meta: n_ff             = 10240
0.00.406.341 I llm_load_print_meta: n_expert         = 0
0.00.406.341 I llm_load_print_meta: n_expert_used    = 0
0.00.406.342 I llm_load_print_meta: causal attn      = 1
0.00.406.342 I llm_load_print_meta: pooling type     = 0
0.00.406.343 I llm_load_print_meta: rope type        = 2
0.00.406.344 I llm_load_print_meta: rope scaling     = linear
0.00.406.346 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.406.347 I llm_load_print_meta: freq_scale_train = 1
0.00.406.347 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.406.348 I llm_load_print_meta: rope_finetuned   = unknown
0.00.406.349 I llm_load_print_meta: ssm_d_conv       = 0
0.00.406.350 I llm_load_print_meta: ssm_d_inner      = 0
0.00.406.350 I llm_load_print_meta: ssm_d_state      = 0
0.00.406.350 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.406.351 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.406.351 I llm_load_print_meta: model type       = 2.8B
0.00.406.353 I llm_load_print_meta: model ftype      = Q3_K - Medium
0.00.406.355 I llm_load_print_meta: model params     = 2.78 B
0.00.406.356 I llm_load_print_meta: model size       = 1.37 GiB (4.25 BPW) 
0.00.406.357 I llm_load_print_meta: general.name     = 2.8B
0.00.406.358 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.406.358 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.406.360 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.406.361 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.406.361 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.406.362 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.406.362 I llm_load_print_meta: max token length = 1024
0.00.500.222 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.500.234 I llm_load_tensors: offloading output layer to GPU
0.00.500.234 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.500.244 I llm_load_tensors:        CUDA0 model buffer size =  1354.83 MiB
0.00.500.245 I llm_load_tensors:   CPU_Mapped model buffer size =    52.77 MiB
...........................................................................................
0.00.746.591 I llama_new_context_with_model: n_seq_max     = 1
0.00.746.598 I llama_new_context_with_model: n_ctx         = 2048
0.00.746.598 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.746.599 I llama_new_context_with_model: n_batch       = 512
0.00.746.599 I llama_new_context_with_model: n_ubatch      = 512
0.00.746.600 I llama_new_context_with_model: flash_attn    = 0
0.00.746.636 I llama_new_context_with_model: freq_base     = 10000.0
0.00.746.638 I llama_new_context_with_model: freq_scale    = 1
0.00.747.905 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.747.914 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.749.118 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.758.906 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.758.918 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.758.919 I llama_new_context_with_model: graph nodes  = 1287
0.00.758.919 I llama_new_context_with_model: graph splits = 2
0.00.758.922 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.828.918 I 
0.00.829.030 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.829.042 I perplexity: tokenizing the input ..
0.02.070.555 I perplexity: tokenization took 1241.5 ms
0.02.070.902 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.714.290 I perplexity: 0.64 seconds per pass - ETA 0.03 minutes
[1]10.3244,[2]12.1315,[3]12.5462,[4]11.2719,
0.04.477.653 I Final estimate: PPL = 11.2719 +/- 0.46044

0.04.479.792 I llama_perf_context_print:        load time =     541.91 ms
0.04.479.795 I llama_perf_context_print: prompt eval time =    2052.59 ms /  8192 tokens (    0.25 ms per token,  3991.05 tokens per second)
0.04.479.797 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.479.798 I llama_perf_context_print:       total time =    3650.87 ms /  8193 tokens

real	0m4.789s
user	0m4.787s
sys	0m0.992s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.480 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.287.866 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.303.142 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf (version GGUF V3 (latest))
0.00.303.167 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.303.182 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.303.185 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.303.186 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.303.187 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.303.188 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.303.195 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.303.196 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.303.197 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.303.198 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.303.198 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.303.199 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.303.200 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.303.206 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.303.207 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.303.208 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.310.797 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.312.565 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.319.164 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.319.173 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.319.174 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.319.174 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.319.175 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.319.176 I llama_model_loader: - kv  22:                          general.file_type u32              = 15
0.00.319.179 I llama_model_loader: - type  f32:  258 tensors
0.00.319.180 I llama_model_loader: - type q4_K:   81 tensors
0.00.319.181 I llama_model_loader: - type q5_K:   32 tensors
0.00.319.181 I llama_model_loader: - type q6_K:   17 tensors
0.00.384.382 I llm_load_vocab: special tokens cache size = 25
0.00.406.500 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.406.520 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.406.521 I llm_load_print_meta: arch             = gptneox
0.00.406.522 I llm_load_print_meta: vocab type       = BPE
0.00.406.523 I llm_load_print_meta: n_vocab          = 50304
0.00.406.523 I llm_load_print_meta: n_merges         = 50009
0.00.406.524 I llm_load_print_meta: vocab_only       = 0
0.00.406.524 I llm_load_print_meta: n_ctx_train      = 2048
0.00.406.524 I llm_load_print_meta: n_embd           = 2560
0.00.406.525 I llm_load_print_meta: n_layer          = 32
0.00.406.540 I llm_load_print_meta: n_head           = 32
0.00.406.541 I llm_load_print_meta: n_head_kv        = 32
0.00.406.542 I llm_load_print_meta: n_rot            = 20
0.00.406.542 I llm_load_print_meta: n_swa            = 0
0.00.406.543 I llm_load_print_meta: n_embd_head_k    = 80
0.00.406.543 I llm_load_print_meta: n_embd_head_v    = 80
0.00.406.544 I llm_load_print_meta: n_gqa            = 1
0.00.406.546 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.406.547 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.406.549 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.406.550 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.406.550 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.406.552 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.406.552 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.406.554 I llm_load_print_meta: n_ff             = 10240
0.00.406.554 I llm_load_print_meta: n_expert         = 0
0.00.406.555 I llm_load_print_meta: n_expert_used    = 0
0.00.406.556 I llm_load_print_meta: causal attn      = 1
0.00.406.557 I llm_load_print_meta: pooling type     = 0
0.00.406.557 I llm_load_print_meta: rope type        = 2
0.00.406.558 I llm_load_print_meta: rope scaling     = linear
0.00.406.559 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.406.560 I llm_load_print_meta: freq_scale_train = 1
0.00.406.560 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.406.561 I llm_load_print_meta: rope_finetuned   = unknown
0.00.406.561 I llm_load_print_meta: ssm_d_conv       = 0
0.00.406.562 I llm_load_print_meta: ssm_d_inner      = 0
0.00.406.562 I llm_load_print_meta: ssm_d_state      = 0
0.00.406.562 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.406.563 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.406.563 I llm_load_print_meta: model type       = 2.8B
0.00.406.564 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.406.566 I llm_load_print_meta: model params     = 2.78 B
0.00.406.567 I llm_load_print_meta: model size       = 1.66 GiB (5.14 BPW) 
0.00.406.567 I llm_load_print_meta: general.name     = 2.8B
0.00.406.568 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.406.569 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.406.569 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.406.570 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.406.571 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.406.571 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.406.573 I llm_load_print_meta: max token length = 1024
0.00.518.687 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.518.696 I llm_load_tensors: offloading output layer to GPU
0.00.518.696 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.518.705 I llm_load_tensors:        CUDA0 model buffer size =  1632.95 MiB
0.00.518.706 I llm_load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
..................................................................................
0.00.811.733 I llama_new_context_with_model: n_seq_max     = 1
0.00.811.738 I llama_new_context_with_model: n_ctx         = 2048
0.00.811.738 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.811.739 I llama_new_context_with_model: n_batch       = 512
0.00.811.739 I llama_new_context_with_model: n_ubatch      = 512
0.00.811.740 I llama_new_context_with_model: flash_attn    = 0
0.00.811.746 I llama_new_context_with_model: freq_base     = 10000.0
0.00.811.747 I llama_new_context_with_model: freq_scale    = 1
0.00.812.995 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.813.007 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.814.229 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.824.497 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.824.505 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.824.505 I llama_new_context_with_model: graph nodes  = 1287
0.00.824.506 I llama_new_context_with_model: graph splits = 2
0.00.824.508 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.892.299 I 
0.00.892.404 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.892.416 I perplexity: tokenizing the input ..
0.02.128.216 I perplexity: tokenization took 1235.79 ms
0.02.128.573 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.759.790 I perplexity: 0.63 seconds per pass - ETA 0.03 minutes
[1]9.7790,[2]11.6049,[3]11.8535,[4]10.6047,
0.04.506.712 I Final estimate: PPL = 10.6047 +/- 0.43503

0.04.508.302 I llama_perf_context_print:        load time =     604.42 ms
0.04.508.305 I llama_perf_context_print: prompt eval time =    2026.88 ms /  8192 tokens (    0.25 ms per token,  4041.69 tokens per second)
0.04.508.306 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.508.307 I llama_perf_context_print:       total time =    3616.00 ms /  8193 tokens

real	0m4.815s
user	0m4.757s
sys	0m1.026s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.863 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.285.542 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.312.079 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf (version GGUF V3 (latest))
0.00.312.104 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.312.120 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.312.122 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.312.122 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.312.123 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.312.124 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.312.131 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.312.131 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.312.132 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.312.133 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.312.134 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.312.135 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.312.136 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.312.143 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.312.143 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.312.144 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.332.260 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.334.022 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.340.721 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.340.730 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.340.731 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.340.732 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.340.733 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.340.734 I llama_model_loader: - kv  22:                          general.file_type u32              = 17
0.00.340.736 I llama_model_loader: - type  f32:  258 tensors
0.00.340.737 I llama_model_loader: - type q5_K:   81 tensors
0.00.340.738 I llama_model_loader: - type q6_K:   49 tensors
0.00.406.682 I llm_load_vocab: special tokens cache size = 25
0.00.429.445 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.429.473 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.429.473 I llm_load_print_meta: arch             = gptneox
0.00.429.474 I llm_load_print_meta: vocab type       = BPE
0.00.429.475 I llm_load_print_meta: n_vocab          = 50304
0.00.429.475 I llm_load_print_meta: n_merges         = 50009
0.00.429.476 I llm_load_print_meta: vocab_only       = 0
0.00.429.476 I llm_load_print_meta: n_ctx_train      = 2048
0.00.429.477 I llm_load_print_meta: n_embd           = 2560
0.00.429.477 I llm_load_print_meta: n_layer          = 32
0.00.429.494 I llm_load_print_meta: n_head           = 32
0.00.429.496 I llm_load_print_meta: n_head_kv        = 32
0.00.429.497 I llm_load_print_meta: n_rot            = 20
0.00.429.497 I llm_load_print_meta: n_swa            = 0
0.00.429.498 I llm_load_print_meta: n_embd_head_k    = 80
0.00.429.498 I llm_load_print_meta: n_embd_head_v    = 80
0.00.429.500 I llm_load_print_meta: n_gqa            = 1
0.00.429.501 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.429.504 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.429.506 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.429.507 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.429.507 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.429.508 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.429.509 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.429.511 I llm_load_print_meta: n_ff             = 10240
0.00.429.511 I llm_load_print_meta: n_expert         = 0
0.00.429.512 I llm_load_print_meta: n_expert_used    = 0
0.00.429.513 I llm_load_print_meta: causal attn      = 1
0.00.429.513 I llm_load_print_meta: pooling type     = 0
0.00.429.514 I llm_load_print_meta: rope type        = 2
0.00.429.515 I llm_load_print_meta: rope scaling     = linear
0.00.429.518 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.429.519 I llm_load_print_meta: freq_scale_train = 1
0.00.429.519 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.429.519 I llm_load_print_meta: rope_finetuned   = unknown
0.00.429.521 I llm_load_print_meta: ssm_d_conv       = 0
0.00.429.521 I llm_load_print_meta: ssm_d_inner      = 0
0.00.429.521 I llm_load_print_meta: ssm_d_state      = 0
0.00.429.522 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.429.522 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.429.523 I llm_load_print_meta: model type       = 2.8B
0.00.429.524 I llm_load_print_meta: model ftype      = Q5_K - Medium
0.00.429.525 I llm_load_print_meta: model params     = 2.78 B
0.00.429.526 I llm_load_print_meta: model size       = 1.93 GiB (5.96 BPW) 
0.00.429.547 I llm_load_print_meta: general.name     = 2.8B
0.00.429.555 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.429.555 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.429.556 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.429.556 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.429.557 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.429.558 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.429.559 I llm_load_print_meta: max token length = 1024
0.00.562.169 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.562.182 I llm_load_tensors: offloading output layer to GPU
0.00.562.183 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.562.192 I llm_load_tensors:        CUDA0 model buffer size =  1887.64 MiB
0.00.562.194 I llm_load_tensors:   CPU_Mapped model buffer size =    84.43 MiB
...........................................................................................
0.00.905.001 I llama_new_context_with_model: n_seq_max     = 1
0.00.905.008 I llama_new_context_with_model: n_ctx         = 2048
0.00.905.009 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.905.009 I llama_new_context_with_model: n_batch       = 512
0.00.905.009 I llama_new_context_with_model: n_ubatch      = 512
0.00.905.010 I llama_new_context_with_model: flash_attn    = 0
0.00.905.016 I llama_new_context_with_model: freq_base     = 10000.0
0.00.905.017 I llama_new_context_with_model: freq_scale    = 1
0.00.906.284 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.906.296 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.907.593 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.917.629 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.917.638 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.917.639 I llama_new_context_with_model: graph nodes  = 1287
0.00.917.640 I llama_new_context_with_model: graph splits = 2
0.00.917.642 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.984.870 I 
0.00.984.984 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.984.995 I perplexity: tokenizing the input ..
0.02.377.754 I perplexity: tokenization took 1392.75 ms
0.02.378.086 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.03.012.205 I perplexity: 0.63 seconds per pass - ETA 0.03 minutes
[1]9.7144,[2]11.4413,[3]11.6827,[4]10.4169,
0.04.752.693 I Final estimate: PPL = 10.4169 +/- 0.42612

0.04.754.378 I llama_perf_context_print:        load time =     699.31 ms
0.04.754.380 I llama_perf_context_print: prompt eval time =    1990.60 ms /  8192 tokens (    0.24 ms per token,  4115.33 tokens per second)
0.04.754.382 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.754.384 I llama_perf_context_print:       total time =    3769.51 ms /  8193 tokens

real	0m5.084s
user	0m5.040s
sys	0m1.065s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.006.614 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.309.119 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.324.778 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf (version GGUF V3 (latest))
0.00.324.802 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.324.817 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.324.819 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.324.820 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.324.821 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.324.822 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.324.830 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.324.831 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.324.832 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.324.834 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.324.834 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.324.835 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.324.836 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.324.846 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.324.847 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.324.847 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.332.472 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.334.223 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.340.816 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.340.825 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.340.826 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.340.827 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.340.828 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.340.829 I llama_model_loader: - kv  22:                          general.file_type u32              = 18
0.00.340.831 I llama_model_loader: - type  f32:  258 tensors
0.00.340.833 I llama_model_loader: - type q6_K:  130 tensors
0.00.407.428 I llm_load_vocab: special tokens cache size = 25
0.00.430.096 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.430.115 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.430.115 I llm_load_print_meta: arch             = gptneox
0.00.430.116 I llm_load_print_meta: vocab type       = BPE
0.00.430.117 I llm_load_print_meta: n_vocab          = 50304
0.00.430.118 I llm_load_print_meta: n_merges         = 50009
0.00.430.118 I llm_load_print_meta: vocab_only       = 0
0.00.430.119 I llm_load_print_meta: n_ctx_train      = 2048
0.00.430.119 I llm_load_print_meta: n_embd           = 2560
0.00.430.119 I llm_load_print_meta: n_layer          = 32
0.00.430.135 I llm_load_print_meta: n_head           = 32
0.00.430.136 I llm_load_print_meta: n_head_kv        = 32
0.00.430.137 I llm_load_print_meta: n_rot            = 20
0.00.430.138 I llm_load_print_meta: n_swa            = 0
0.00.430.139 I llm_load_print_meta: n_embd_head_k    = 80
0.00.430.139 I llm_load_print_meta: n_embd_head_v    = 80
0.00.430.140 I llm_load_print_meta: n_gqa            = 1
0.00.430.143 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.430.144 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.430.146 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.430.147 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.430.147 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.430.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.430.149 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.430.150 I llm_load_print_meta: n_ff             = 10240
0.00.430.150 I llm_load_print_meta: n_expert         = 0
0.00.430.151 I llm_load_print_meta: n_expert_used    = 0
0.00.430.151 I llm_load_print_meta: causal attn      = 1
0.00.430.152 I llm_load_print_meta: pooling type     = 0
0.00.430.152 I llm_load_print_meta: rope type        = 2
0.00.430.153 I llm_load_print_meta: rope scaling     = linear
0.00.430.154 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.430.155 I llm_load_print_meta: freq_scale_train = 1
0.00.430.156 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.430.156 I llm_load_print_meta: rope_finetuned   = unknown
0.00.430.157 I llm_load_print_meta: ssm_d_conv       = 0
0.00.430.157 I llm_load_print_meta: ssm_d_inner      = 0
0.00.430.158 I llm_load_print_meta: ssm_d_state      = 0
0.00.430.158 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.430.158 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.430.159 I llm_load_print_meta: model type       = 2.8B
0.00.430.160 I llm_load_print_meta: model ftype      = Q6_K
0.00.430.161 I llm_load_print_meta: model params     = 2.78 B
0.00.430.161 I llm_load_print_meta: model size       = 2.12 GiB (6.57 BPW) 
0.00.430.162 I llm_load_print_meta: general.name     = 2.8B
0.00.430.163 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.430.164 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.430.164 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.430.164 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.430.165 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.430.166 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.430.166 I llm_load_print_meta: max token length = 1024
0.00.566.529 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.566.538 I llm_load_tensors: offloading output layer to GPU
0.00.566.538 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.566.547 I llm_load_tensors:        CUDA0 model buffer size =  2073.58 MiB
0.00.566.549 I llm_load_tensors:   CPU_Mapped model buffer size =   100.74 MiB
.............................................................................................
0.00.922.271 I llama_new_context_with_model: n_seq_max     = 1
0.00.922.276 I llama_new_context_with_model: n_ctx         = 2048
0.00.922.276 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.00.922.277 I llama_new_context_with_model: n_batch       = 512
0.00.922.277 I llama_new_context_with_model: n_ubatch      = 512
0.00.922.278 I llama_new_context_with_model: flash_attn    = 0
0.00.922.283 I llama_new_context_with_model: freq_base     = 10000.0
0.00.922.284 I llama_new_context_with_model: freq_scale    = 1
0.00.923.536 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.923.548 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.924.757 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.934.987 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.934.998 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.934.999 I llama_new_context_with_model: graph nodes  = 1287
0.00.934.999 I llama_new_context_with_model: graph splits = 2
0.00.935.001 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.002.092 I 
0.01.002.207 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.002.221 I perplexity: tokenizing the input ..
0.02.242.705 I perplexity: tokenization took 1240.47 ms
0.02.243.029 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.868.288 I perplexity: 0.63 seconds per pass - ETA 0.03 minutes
[1]9.6910,[2]11.4667,[3]11.6498,[4]10.3844,
0.04.591.508 I Final estimate: PPL = 10.3844 +/- 0.42499

0.04.593.218 I llama_perf_context_print:        load time =     692.96 ms
0.04.593.221 I llama_perf_context_print: prompt eval time =    1986.17 ms /  8192 tokens (    0.24 ms per token,  4124.53 tokens per second)
0.04.593.223 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.593.224 I llama_perf_context_print:       total time =    3591.13 ms /  8193 tokens

real	0m4.937s
user	0m4.875s
sys	0m1.062s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-imatrix.log
+ ./bin/llama-imatrix --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.431 I build: 4317 (869ec41e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.308.925 I llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.324.303 I llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.324.326 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.324.335 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.324.336 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.324.339 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.324.340 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.324.340 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.324.347 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.324.348 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.324.349 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.324.350 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.324.351 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.324.352 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.324.353 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.324.359 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.324.360 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.324.362 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.332.055 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.333.915 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.340.538 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.340.546 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.340.547 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.340.548 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.340.549 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.340.551 I llama_model_loader: - type  f32:  258 tensors
0.00.340.552 I llama_model_loader: - type  f16:  130 tensors
0.00.413.730 I llm_load_vocab: special tokens cache size = 25
0.00.435.726 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.435.744 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.435.745 I llm_load_print_meta: arch             = gptneox
0.00.435.746 I llm_load_print_meta: vocab type       = BPE
0.00.435.746 I llm_load_print_meta: n_vocab          = 50304
0.00.435.747 I llm_load_print_meta: n_merges         = 50009
0.00.435.747 I llm_load_print_meta: vocab_only       = 0
0.00.435.748 I llm_load_print_meta: n_ctx_train      = 2048
0.00.435.748 I llm_load_print_meta: n_embd           = 2560
0.00.435.749 I llm_load_print_meta: n_layer          = 32
0.00.435.764 I llm_load_print_meta: n_head           = 32
0.00.435.766 I llm_load_print_meta: n_head_kv        = 32
0.00.435.766 I llm_load_print_meta: n_rot            = 20
0.00.435.767 I llm_load_print_meta: n_swa            = 0
0.00.435.767 I llm_load_print_meta: n_embd_head_k    = 80
0.00.435.768 I llm_load_print_meta: n_embd_head_v    = 80
0.00.435.769 I llm_load_print_meta: n_gqa            = 1
0.00.435.771 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.435.772 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.435.774 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.435.775 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.435.775 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.435.776 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.435.776 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.435.777 I llm_load_print_meta: n_ff             = 10240
0.00.435.778 I llm_load_print_meta: n_expert         = 0
0.00.435.778 I llm_load_print_meta: n_expert_used    = 0
0.00.435.779 I llm_load_print_meta: causal attn      = 1
0.00.435.779 I llm_load_print_meta: pooling type     = 0
0.00.435.780 I llm_load_print_meta: rope type        = 2
0.00.435.780 I llm_load_print_meta: rope scaling     = linear
0.00.435.782 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.435.782 I llm_load_print_meta: freq_scale_train = 1
0.00.435.783 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.435.783 I llm_load_print_meta: rope_finetuned   = unknown
0.00.435.784 I llm_load_print_meta: ssm_d_conv       = 0
0.00.435.784 I llm_load_print_meta: ssm_d_inner      = 0
0.00.435.785 I llm_load_print_meta: ssm_d_state      = 0
0.00.435.785 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.435.787 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.435.787 I llm_load_print_meta: model type       = 2.8B
0.00.435.789 I llm_load_print_meta: model ftype      = all F32 (guessed)
0.00.435.791 I llm_load_print_meta: model params     = 2.78 B
0.00.435.792 I llm_load_print_meta: model size       = 5.17 GiB (16.01 BPW) 
0.00.435.793 I llm_load_print_meta: general.name     = 2.8B
0.00.435.794 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.435.795 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.435.795 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.435.796 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.435.797 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.435.801 I llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
0.00.435.801 I llm_load_print_meta: max token length = 1024
0.00.784.416 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.784.428 I llm_load_tensors: offloading output layer to GPU
0.00.784.428 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.784.437 I llm_load_tensors:        CUDA0 model buffer size =  5049.71 MiB
0.00.784.439 I llm_load_tensors:   CPU_Mapped model buffer size =   245.62 MiB
.............................................................................................
0.01.660.761 I llama_new_context_with_model: n_seq_max     = 1
0.01.660.769 I llama_new_context_with_model: n_ctx         = 2048
0.01.660.769 I llama_new_context_with_model: n_ctx_per_seq = 2048
0.01.660.770 I llama_new_context_with_model: n_batch       = 512
0.01.660.770 I llama_new_context_with_model: n_ubatch      = 512
0.01.660.771 I llama_new_context_with_model: flash_attn    = 0
0.01.660.776 I llama_new_context_with_model: freq_base     = 10000.0
0.01.660.777 I llama_new_context_with_model: freq_scale    = 1
0.01.662.050 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.662.062 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.663.267 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.672.792 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.672.801 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.672.802 I llama_new_context_with_model: graph nodes  = 1287
0.01.672.802 I llama_new_context_with_model: graph splits = 2
0.01.672.806 I 
0.01.672.904 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.672.912 I compute_imatrix: tokenizing the input ..
0.02.920.233 I compute_imatrix: tokenization took 1247.31 ms
0.02.921.461 I compute_imatrix: computing over 4 chunks with batch_size 512
0.06.167.900 I compute_imatrix: 3.25 seconds per pass - ETA 0.20 minutes
[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,
Final estimate: PPL = 10.3475 +/- 0.42292

0.15.756.555 I llama_perf_context_print:        load time =    3405.93 ms
0.15.756.558 I llama_perf_context_print: prompt eval time =   11449.97 ms /  8192 tokens (    1.40 ms per token,   715.46 tokens per second)
0.15.756.560 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.15.756.561 I llama_perf_context_print:       total time =   15447.61 ms /  8193 tokens

real	0m16.099s
user	0m15.147s
sys	0m2.010s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -ngl 10 -c 0
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: control token:      1 '<|padding|>' is not marked as EOG
llm_load_vocab: special tokens cache size = 25
llm_load_vocab: token to piece cache size = 0.2984 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: vocab_only       = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_swa            = 0
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: ssm_dt_b_c_rms   = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
llm_load_tensors: tensor 'token_embd.weight' (q4_0) (and 179 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
llm_load_tensors: offloading 10 repeating layers to GPU
llm_load_tensors: offloaded 10/33 layers to GPU
llm_load_tensors:        CUDA0 model buffer size =   423.14 MiB
llm_load_tensors:  CPU_AARCH64 model buffer size =   928.12 MiB
llm_load_tensors:   CPU_Mapped model buffer size =  1086.70 MiB
...........................repack: repack tensor blk.0.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.0.attn_output.weight with q4_0_8x8
repack: repack tensor blk.0.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.1.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.1.attn_output.weight with q4_0_8x8
repack: repack tensor blk.1.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.2.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.2.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.2.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.3.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.3.attn_output.weight with q4_0_8x8
repack: repack tensor blk.3.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.4.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.4.attn_output.weight with q4_0_8x8
repack: repack tensor blk.4.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.5.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.5.attn_output.weight with q4_0_8x8
repack: repack tensor blk.5.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.5.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.6.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.6.attn_output.weight with q4_0_8x8
repack: repack tensor blk.6.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.6.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.7.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.7.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.7.ffn_down.weight with q4_0_8x8
repack: repack tensor blk.7.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.8.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.8.attn_output.weight with q4_0_8x8
repack: repack tensor blk.8.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.9.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.9.attn_output.weight with q4_0_8x8
repack: repack tensor blk.9.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.10.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.10.attn_output.weight with q4_0_8x8
repack: repack tensor blk.10.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.11.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.11.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_0_8x8
repack: repack tensor blk.12.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.12.attn_output.weight with q4_0_8x8
repack: repack tensor blk.12.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.13.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.13.attn_output.weight with q4_0_8x8
repack: repack tensor blk.13.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.13.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.14.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.14.attn_output.weight with q4_0_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.15.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.15.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.15.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.16.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.16.attn_output.weight with q4_0_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.17.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.17.attn_output.weight with q4_0_8x8
repack: repack tensor blk.17.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.18.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.18.attn_output.weight with q4_0_8x8
repack: repack tensor blk.18.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.19.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.19.attn_output.weight with q4_0_8x8
repack: repack tensor blk.19.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.20.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.20.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_0_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.21.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.21.attn_output.weight with q4_0_8x8
repack: repack tensor blk.21.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.21.ffn_up.weight with q4_0_8x8
....
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 0
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_kv_cache_init:        CPU KV buffer size =   440.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:        CPU  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 313 (with bs=512), 3 (with bs=1)
0.01.434.643 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 0
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_kv_cache_init:        CPU KV buffer size =   440.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:        CPU  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 313 (with bs=512), 3 (with bs=1)
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 0
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_kv_cache_init:        CPU KV buffer size =   440.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:        CPU  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 313 (with bs=512), 3 (with bs=1)
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox, after warning him and the dog at the same time, and never
sh


second run: The quick brown fox, after warning him and the dog at the same time, and never
sh


single seq run: The quick brown fox, after warning him and the dog at the same time, and never
sh

real	0m6.093s
user	0m16.180s
sys	0m1.672s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -ngl 10 -c 0 -fa
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: control token:      1 '<|padding|>' is not marked as EOG
llm_load_vocab: special tokens cache size = 25
llm_load_vocab: token to piece cache size = 0.2984 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: vocab_only       = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_swa            = 0
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: ssm_dt_b_c_rms   = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
llm_load_tensors: tensor 'token_embd.weight' (q4_0) (and 179 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
llm_load_tensors: offloading 10 repeating layers to GPU
llm_load_tensors: offloaded 10/33 layers to GPU
llm_load_tensors:        CUDA0 model buffer size =   423.14 MiB
llm_load_tensors:  CPU_AARCH64 model buffer size =   928.12 MiB
llm_load_tensors:   CPU_Mapped model buffer size =  1086.70 MiB
...........................repack: repack tensor blk.0.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.0.attn_output.weight with q4_0_8x8
repack: repack tensor blk.0.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.1.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.1.attn_output.weight with q4_0_8x8
repack: repack tensor blk.1.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.2.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.2.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.2.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.3.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.3.attn_output.weight with q4_0_8x8
repack: repack tensor blk.3.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.4.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.4.attn_output.weight with q4_0_8x8
repack: repack tensor blk.4.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.5.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.5.attn_output.weight with q4_0_8x8
repack: repack tensor blk.5.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.5.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.6.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.6.attn_output.weight with q4_0_8x8
repack: repack tensor blk.6.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.6.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.7.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.7.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.7.ffn_down.weight with q4_0_8x8
repack: repack tensor blk.7.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.8.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.8.attn_output.weight with q4_0_8x8
repack: repack tensor blk.8.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.9.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.9.attn_output.weight with q4_0_8x8
repack: repack tensor blk.9.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.10.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.10.attn_output.weight with q4_0_8x8
repack: repack tensor blk.10.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.11.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.11.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_0_8x8
repack: repack tensor blk.12.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.12.attn_output.weight with q4_0_8x8
repack: repack tensor blk.12.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.13.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.13.attn_output.weight with q4_0_8x8
repack: repack tensor blk.13.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.13.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.14.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.14.attn_output.weight with q4_0_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.15.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.15.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.15.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.16.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.16.attn_output.weight with q4_0_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.17.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.17.attn_output.weight with q4_0_8x8
repack: repack tensor blk.17.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.18.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.18.attn_output.weight with q4_0_8x8
repack: repack tensor blk.18.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.19.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.19.attn_output.weight with q4_0_8x8
repack: repack tensor blk.19.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.20.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.20.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_0_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.21.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.21.attn_output.weight with q4_0_8x8
repack: repack tensor blk.21.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.21.ffn_up.weight with q4_0_8x8
....
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 1
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_kv_cache_init:        CPU KV buffer size =   440.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:        CPU  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 313 (with bs=512), 3 (with bs=1)
0.01.284.411 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 1
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_kv_cache_init:        CPU KV buffer size =   440.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:        CPU  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 313 (with bs=512), 3 (with bs=1)
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 1
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_kv_cache_init:        CPU KV buffer size =   440.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:        CPU  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 313 (with bs=512), 3 (with bs=1)
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox jumps over the fence -- but the fourth fence is a dead-in-the


second run: The quick brown fox jumps over the fence -- but the fourth fence is a dead-in-the


single seq run: The quick brown fox jumps over the fence -- but the fourth fence is a dead-in-the

real	0m4.361s
user	0m11.870s
sys	0m1.381s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -ngl 99 -c 0
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: control token:      1 '<|padding|>' is not marked as EOG
llm_load_vocab: special tokens cache size = 25
llm_load_vocab: token to piece cache size = 0.2984 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: vocab_only       = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_swa            = 0
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: ssm_dt_b_c_rms   = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
llm_load_tensors: tensor 'token_embd.weight' (q4_0) (and 0 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading output layer to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CUDA0 model buffer size =  1454.83 MiB
llm_load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
...........................................................................................
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 0
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2
0.00.776.578 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 0
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 0
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox
     Lives, in the fox-hole, on the kitchen-st


second run: The quick brown fox
     Lives, in the fox-hole, on the kitchen-st


single seq run: The quick brown fox
     Lives, in the fox-hole, on the kitchen-st

real	0m4.602s
user	0m3.856s
sys	0m0.742s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -ngl 99 -c 0 -fa
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
main: build = 4317 (869ec41e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_load_model_from_file: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: control token:      1 '<|padding|>' is not marked as EOG
llm_load_vocab: special tokens cache size = 25
llm_load_vocab: token to piece cache size = 0.2984 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: vocab_only       = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_swa            = 0
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: ssm_dt_b_c_rms   = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOG token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
llm_load_tensors: tensor 'token_embd.weight' (q4_0) (and 0 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading output layer to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CUDA0 model buffer size =  1454.83 MiB
llm_load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
...........................................................................................
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 1
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   103.25 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 2
0.00.794.195 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 1
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   103.25 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_seq_max     = 1
llama_new_context_with_model: n_ctx         = 2048
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 1
llama_new_context_with_model: freq_base     = 10000.0
llama_new_context_with_model: freq_scale    = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   103.25 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox jumped over the fence", "The children are playing in the garden. I see


second run: The quick brown fox jumped over the fence", "The children are playing in the garden. I see


single seq run: The quick brown fox jumped over the fence", "The children are playing in the garden. I see

real	0m1.673s
user	0m0.941s
sys	0m0.728s
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
++ grep '^\[1\]'
+ check_ppl f16 '[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,'
+ qnt=f16
++ echo '[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.3475
++ echo '10.3475 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' f16 10.3475
+ return 0
  - f16 @ 10.3475 OK
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
++ grep '^\[1\]'
+ check_ppl q8_0 '[1]9.7126,[2]11.4535,[3]11.6553,[4]10.3702,'
+ qnt=q8_0
++ echo '[1]9.7126,[2]11.4535,[3]11.6553,[4]10.3702,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.3702
++ echo '10.3702 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q8_0 10.3702
+ return 0
  - q8_0 @ 10.3702 OK
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
++ grep '^\[1\]'
+ check_ppl q4_0 '[1]10.2476,[2]12.0349,[3]12.3143,[4]10.9657,'
+ qnt=q4_0
++ echo '[1]10.2476,[2]12.0349,[3]12.3143,[4]10.9657,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.9657
++ echo '10.9657 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_0 10.9657
+ return 0
  - q4_0 @ 10.9657 OK
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
++ grep '^\[1\]'
+ check_ppl q4_1 '[1]9.9582,[2]11.8210,[3]12.1417,[4]10.8426,'
+ qnt=q4_1
++ echo '[1]9.9582,[2]11.8210,[3]12.1417,[4]10.8426,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.8426
++ echo '10.8426 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_1 10.8426
+ return 0
  - q4_1 @ 10.8426 OK
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
++ grep '^\[1\]'
+ check_ppl q5_0 '[1]9.8159,[2]11.5385,[3]11.8249,[4]10.5064,'
+ qnt=q5_0
++ echo '[1]9.8159,[2]11.5385,[3]11.8249,[4]10.5064,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.5064
++ echo '10.5064 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_0 10.5064
+ return 0
  - q5_0 @ 10.5064 OK
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
++ grep '^\[1\]'
+ check_ppl q5_1 '[1]9.7281,[2]11.5058,[3]11.7213,[4]10.4307,'
+ qnt=q5_1
++ echo '[1]9.7281,[2]11.5058,[3]11.7213,[4]10.4307,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.4307
++ echo '10.4307 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_1 10.4307
+ return 0
  - q5_1 @ 10.4307 OK
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
++ grep '^\[1\]'
+ check_ppl q3_k '[1]10.3244,[2]12.1315,[3]12.5462,[4]11.2719,'
+ qnt=q3_k
++ echo '[1]10.3244,[2]12.1315,[3]12.5462,[4]11.2719,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=11.2719
++ echo '11.2719 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q3_k 11.2719
+ return 0
  - q3_k @ 11.2719 OK
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
++ grep '^\[1\]'
+ check_ppl q4_k '[1]9.7790,[2]11.6049,[3]11.8535,[4]10.6047,'
+ qnt=q4_k
++ echo '[1]9.7790,[2]11.6049,[3]11.8535,[4]10.6047,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.6047
++ echo '10.6047 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_k 10.6047
+ return 0
  - q4_k @ 10.6047 OK
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
++ grep '^\[1\]'
+ check_ppl q5_k '[1]9.7144,[2]11.4413,[3]11.6827,[4]10.4169,'
+ qnt=q5_k
++ echo '[1]9.7144,[2]11.4413,[3]11.6827,[4]10.4169,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.4169
++ echo '10.4169 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_k 10.4169
+ return 0
  - q5_k @ 10.4169 OK
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
++ grep '^\[1\]'
+ check_ppl q6_k '[1]9.6910,[2]11.4667,[3]11.6498,[4]10.3844,'
+ qnt=q6_k
++ echo '[1]9.6910,[2]11.4667,[3]11.6498,[4]10.3844,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.3844
++ echo '10.3844 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q6_k 10.3844
+ return 0
  - q6_k @ 10.3844 OK
+ cat /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/pythia_2_8b-imatrix.log
+ grep Final
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_debug
+ cd /home/ggml/work/llama.cpp
+ local model
+ tee /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_with_model_debug.log
++ gg_get_model
++ local gguf_0=/mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf
++ local gguf_1=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
++ local gguf_2=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf ]]
++ [[ -s /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ cd build-ci-debug
+ set -e
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_with_model_debug-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-debug
    Start 24: test-model-load-cancel
1/2 Test #24: test-model-load-cancel ...........   Passed    4.79 sec
    Start 25: test-autorelease
2/2 Test #25: test-autorelease .................   Passed    1.55 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   6.34 sec*proc (2 tests)

Total Test time (real) =   6.34 sec
1.08user 5.26system 0:06.37elapsed 99%CPU (0avgtext+0avgdata 5873972maxresident)k
0inputs+48outputs (0major+1473070minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_release
+ cd /home/ggml/work/llama.cpp
+ local model
+ tee /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_with_model_release.log
++ gg_get_model
++ local gguf_0=/mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf
++ local gguf_1=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
++ local gguf_2=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf ]]
++ [[ -s /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/86/9ec41e7821240e72aa79005dfcde7967c8955e/ggml-4-x86-cuda-v100/ctest_with_model_release-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-release
    Start 24: test-model-load-cancel
1/2 Test #24: test-model-load-cancel ...........   Passed    4.52 sec
    Start 25: test-autorelease
2/2 Test #25: test-autorelease .................   Passed    1.55 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   6.07 sec*proc (2 tests)

Total Test time (real) =   6.08 sec
0.42user 5.67system 0:06.11elapsed 99%CPU (0avgtext+0avgdata 5867000maxresident)k
0inputs+48outputs (0major+1472531minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
