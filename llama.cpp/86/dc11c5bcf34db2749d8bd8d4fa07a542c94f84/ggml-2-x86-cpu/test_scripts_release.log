+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.556 I build: 4233 (86dc11c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.559 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.568 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.576 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.585 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.586 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.590 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.591 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.591 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.592 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.592 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.593 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.597 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.598 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.599 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.600 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.600 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.266 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.812 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.605 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.611 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.612 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.613 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.613 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.614 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.615 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.618 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.618 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.619 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.619 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.620 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.624 I llama_model_loader: - type  f32:   37 tensors
0.00.130.625 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.740 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.304 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.868 I llm_load_vocab: special tokens cache size = 5
0.00.261.749 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.765 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.766 I llm_load_print_meta: arch             = gemma
0.00.261.767 I llm_load_print_meta: vocab type       = SPM
0.00.261.768 I llm_load_print_meta: n_vocab          = 256000
0.00.261.768 I llm_load_print_meta: n_merges         = 0
0.00.261.769 I llm_load_print_meta: vocab_only       = 0
0.00.261.769 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.769 I llm_load_print_meta: n_embd           = 2048
0.00.261.770 I llm_load_print_meta: n_layer          = 18
0.00.261.781 I llm_load_print_meta: n_head           = 8
0.00.261.782 I llm_load_print_meta: n_head_kv        = 1
0.00.261.782 I llm_load_print_meta: n_rot            = 256
0.00.261.783 I llm_load_print_meta: n_swa            = 0
0.00.261.783 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.783 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.784 I llm_load_print_meta: n_gqa            = 8
0.00.261.785 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.786 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.787 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.789 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.789 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.789 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.790 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.791 I llm_load_print_meta: n_ff             = 16384
0.00.261.791 I llm_load_print_meta: n_expert         = 0
0.00.261.791 I llm_load_print_meta: n_expert_used    = 0
0.00.261.792 I llm_load_print_meta: causal attn      = 1
0.00.261.792 I llm_load_print_meta: pooling type     = 0
0.00.261.792 I llm_load_print_meta: rope type        = 2
0.00.261.792 I llm_load_print_meta: rope scaling     = linear
0.00.261.794 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.795 I llm_load_print_meta: freq_scale_train = 1
0.00.261.795 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.795 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.795 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.796 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.796 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.796 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.797 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.797 I llm_load_print_meta: model type       = 2B
0.00.261.798 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.798 I llm_load_print_meta: model params     = 2.51 B
0.00.261.799 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.799 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.800 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.800 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.800 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.801 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.801 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.801 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.802 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.802 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.802 I llm_load_print_meta: max token length = 93
0.00.363.104 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.112 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.113 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.113 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.114 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.115 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.368.365 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.372 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.372 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.372 I llama_new_context_with_model: n_batch       = 2048
0.00.368.373 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.374 I llama_new_context_with_model: flash_attn    = 0
0.00.368.376 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.377 I llama_new_context_with_model: freq_scale    = 1
0.00.368.378 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.524 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.536 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.624 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.885 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.892 I llama_new_context_with_model: graph nodes  = 601
0.00.383.893 I llama_new_context_with_model: graph splits = 1
0.00.383.895 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.044 I main: llama threadpool init, n_threads = 4
0.00.469.063 I 
0.00.469.138 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.469.141 I 
0.00.469.201 I sampler seed: 283213860
0.00.469.212 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.216 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.217 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.217 I 
 increably.

I am unable to generate a response because the context provided does not contain the necessary information to generate the requested output. [end of text]


0.02.428.386 I llama_perf_sampler_print:    sampling time =       4.05 ms /    29 runs   (    0.14 ms per token,  7165.80 tokens per second)
0.02.428.388 I llama_perf_context_print:        load time =     468.26 ms
0.02.428.390 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.428.391 I llama_perf_context_print:        eval time =    1943.50 ms /    28 runs   (   69.41 ms per token,    14.41 tokens per second)
0.02.428.392 I llama_perf_context_print:       total time =    1959.35 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.549 I build: 4233 (86dc11c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.125 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.140 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.147 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.148 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.152 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.152 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.153 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.154 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.155 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.155 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.161 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.161 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.162 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.163 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.164 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.078 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.542 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.384 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.390 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.391 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.392 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.393 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.394 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.395 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.399 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.399 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.400 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.401 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.402 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.406 I llama_model_loader: - type  f32:   37 tensors
0.00.131.407 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.557 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.735 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.337 I llm_load_vocab: special tokens cache size = 5
0.00.264.551 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.564 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.565 I llm_load_print_meta: arch             = gemma
0.00.264.565 I llm_load_print_meta: vocab type       = SPM
0.00.264.566 I llm_load_print_meta: n_vocab          = 256000
0.00.264.566 I llm_load_print_meta: n_merges         = 0
0.00.264.567 I llm_load_print_meta: vocab_only       = 0
0.00.264.567 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.567 I llm_load_print_meta: n_embd           = 2048
0.00.264.568 I llm_load_print_meta: n_layer          = 18
0.00.264.579 I llm_load_print_meta: n_head           = 8
0.00.264.580 I llm_load_print_meta: n_head_kv        = 1
0.00.264.580 I llm_load_print_meta: n_rot            = 256
0.00.264.581 I llm_load_print_meta: n_swa            = 0
0.00.264.581 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.581 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.583 I llm_load_print_meta: n_gqa            = 8
0.00.264.584 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.584 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.585 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.586 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.587 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.587 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.587 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.588 I llm_load_print_meta: n_ff             = 16384
0.00.264.589 I llm_load_print_meta: n_expert         = 0
0.00.264.589 I llm_load_print_meta: n_expert_used    = 0
0.00.264.590 I llm_load_print_meta: causal attn      = 1
0.00.264.590 I llm_load_print_meta: pooling type     = 0
0.00.264.591 I llm_load_print_meta: rope type        = 2
0.00.264.591 I llm_load_print_meta: rope scaling     = linear
0.00.264.592 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.593 I llm_load_print_meta: freq_scale_train = 1
0.00.264.593 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.593 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.594 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.594 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.594 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.594 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.594 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.595 I llm_load_print_meta: model type       = 2B
0.00.264.596 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.597 I llm_load_print_meta: model params     = 2.51 B
0.00.264.598 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.598 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.599 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.599 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.599 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.600 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.600 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.600 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.600 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.601 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.601 I llm_load_print_meta: max token length = 93
0.00.360.576 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.697 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.703 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.704 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.704 I llama_new_context_with_model: n_batch       = 2048
0.00.365.704 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.705 I llama_new_context_with_model: flash_attn    = 0
0.00.365.707 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.707 I llama_new_context_with_model: freq_scale    = 1
0.00.365.708 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.128 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.142 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.232 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.476 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.483 I llama_new_context_with_model: graph nodes  = 601
0.00.381.483 I llama_new_context_with_model: graph splits = 1
0.00.381.485 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.495 I main: llama threadpool init, n_threads = 4
0.00.462.511 I 
0.00.462.585 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.462.588 I 
0.00.462.635 I sampler seed: 2581975609
0.00.462.647 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.659 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.663 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.663 I 
 seconary role in the development of a mobile app.

**Responsibilities:**

* Conduct market research to identify user needs and pain points.
* Analyze existing

0.02.635.312 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6856.43 tokens per second)
0.02.635.315 I llama_perf_context_print:        load time =     461.71 ms
0.02.635.316 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.635.317 I llama_perf_context_print:        eval time =    2153.87 ms /    32 runs   (   67.31 ms per token,    14.86 tokens per second)
0.02.635.318 I llama_perf_context_print:       total time =    2172.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.524 I build: 4233 (86dc11c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.600 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.610 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.618 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.624 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.625 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.628 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.630 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.631 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.632 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.633 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.634 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.642 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.643 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.643 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.644 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.645 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.307 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.844 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.659 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.665 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.666 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.666 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.667 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.668 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.668 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.670 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.671 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.672 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.673 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.674 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.677 I llama_model_loader: - type  f32:   37 tensors
0.00.130.678 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.032 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.007 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.576 I llm_load_vocab: special tokens cache size = 5
0.00.265.630 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.647 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.647 I llm_load_print_meta: arch             = gemma
0.00.265.648 I llm_load_print_meta: vocab type       = SPM
0.00.265.649 I llm_load_print_meta: n_vocab          = 256000
0.00.265.649 I llm_load_print_meta: n_merges         = 0
0.00.265.649 I llm_load_print_meta: vocab_only       = 0
0.00.265.649 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.650 I llm_load_print_meta: n_embd           = 2048
0.00.265.650 I llm_load_print_meta: n_layer          = 18
0.00.265.662 I llm_load_print_meta: n_head           = 8
0.00.265.663 I llm_load_print_meta: n_head_kv        = 1
0.00.265.663 I llm_load_print_meta: n_rot            = 256
0.00.265.663 I llm_load_print_meta: n_swa            = 0
0.00.265.664 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.664 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.665 I llm_load_print_meta: n_gqa            = 8
0.00.265.666 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.667 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.667 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.668 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.669 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.669 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.670 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.670 I llm_load_print_meta: n_ff             = 16384
0.00.265.671 I llm_load_print_meta: n_expert         = 0
0.00.265.671 I llm_load_print_meta: n_expert_used    = 0
0.00.265.672 I llm_load_print_meta: causal attn      = 1
0.00.265.672 I llm_load_print_meta: pooling type     = 0
0.00.265.673 I llm_load_print_meta: rope type        = 2
0.00.265.673 I llm_load_print_meta: rope scaling     = linear
0.00.265.675 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.675 I llm_load_print_meta: freq_scale_train = 1
0.00.265.675 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.676 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.676 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.676 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.676 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.677 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.677 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.678 I llm_load_print_meta: model type       = 2B
0.00.265.678 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.679 I llm_load_print_meta: model params     = 2.51 B
0.00.265.680 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.680 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.681 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.681 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.681 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.682 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.682 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.682 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.683 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.683 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.683 I llm_load_print_meta: max token length = 93
0.00.341.093 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.341.100 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.101 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.341.101 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.341.102 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.103 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.346.579 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.584 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.584 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.585 I llama_new_context_with_model: n_batch       = 2048
0.00.346.585 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.586 I llama_new_context_with_model: flash_attn    = 0
0.00.346.588 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.589 I llama_new_context_with_model: freq_scale    = 1
0.00.346.590 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.980 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.994 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.411 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.418 I llama_new_context_with_model: graph nodes  = 601
0.00.362.418 I llama_new_context_with_model: graph splits = 1
0.00.362.421 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.923 I main: llama threadpool init, n_threads = 4
0.00.450.940 I 
0.00.451.028 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.451.032 I 
0.00.451.082 I sampler seed: 425158287
0.00.451.094 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.098 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.099 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.102 I 
 increasively from 2015 to 2022.

What was the average growth rate of Zara's revenue from 201

0.02.731.985 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6993.01 tokens per second)
0.02.731.987 I llama_perf_context_print:        load time =     450.16 ms
0.02.731.988 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.731.990 I llama_perf_context_print:        eval time =    2262.77 ms /    32 runs   (   70.71 ms per token,    14.14 tokens per second)
0.02.731.990 I llama_perf_context_print:       total time =    2281.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.538 I build: 4233 (86dc11c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.020.977 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.986 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.993 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.003 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.007 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.011 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.012 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.013 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.014 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.015 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.016 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.020 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.021 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.022 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.023 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.024 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.526 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.180 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.957 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.963 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.964 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.964 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.965 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.966 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.967 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.970 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.971 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.972 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.973 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.974 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.978 I llama_model_loader: - type  f32:   37 tensors
0.00.129.979 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.532 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.859 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.450 I llm_load_vocab: special tokens cache size = 5
0.00.260.402 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.419 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.420 I llm_load_print_meta: arch             = gemma
0.00.260.420 I llm_load_print_meta: vocab type       = SPM
0.00.260.421 I llm_load_print_meta: n_vocab          = 256000
0.00.260.422 I llm_load_print_meta: n_merges         = 0
0.00.260.422 I llm_load_print_meta: vocab_only       = 0
0.00.260.422 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.423 I llm_load_print_meta: n_embd           = 2048
0.00.260.424 I llm_load_print_meta: n_layer          = 18
0.00.260.439 I llm_load_print_meta: n_head           = 8
0.00.260.440 I llm_load_print_meta: n_head_kv        = 1
0.00.260.441 I llm_load_print_meta: n_rot            = 256
0.00.260.441 I llm_load_print_meta: n_swa            = 0
0.00.260.442 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.443 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.444 I llm_load_print_meta: n_gqa            = 8
0.00.260.446 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.447 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.448 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.450 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.451 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.452 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.453 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.455 I llm_load_print_meta: n_ff             = 16384
0.00.260.455 I llm_load_print_meta: n_expert         = 0
0.00.260.456 I llm_load_print_meta: n_expert_used    = 0
0.00.260.456 I llm_load_print_meta: causal attn      = 1
0.00.260.457 I llm_load_print_meta: pooling type     = 0
0.00.260.457 I llm_load_print_meta: rope type        = 2
0.00.260.458 I llm_load_print_meta: rope scaling     = linear
0.00.260.460 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.461 I llm_load_print_meta: freq_scale_train = 1
0.00.260.461 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.462 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.465 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.465 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.466 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.466 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.467 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.468 I llm_load_print_meta: model type       = 2B
0.00.260.468 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.470 I llm_load_print_meta: model params     = 2.51 B
0.00.260.472 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.473 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.473 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.474 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.475 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.475 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.476 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.477 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.478 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.479 I llm_load_print_meta: max token length = 93
0.00.331.738 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.331.745 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.337.144 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.151 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.151 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.152 I llama_new_context_with_model: n_batch       = 2048
0.00.337.152 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.153 I llama_new_context_with_model: flash_attn    = 0
0.00.337.155 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.155 I llama_new_context_with_model: freq_scale    = 1
0.00.337.156 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.817 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.829 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.929 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.148 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.155 I llama_new_context_with_model: graph nodes  = 601
0.00.353.155 I llama_new_context_with_model: graph splits = 1
0.00.353.158 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.804 I main: llama threadpool init, n_threads = 4
0.00.439.818 I 
0.00.439.900 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.439.907 I 
0.00.439.959 I sampler seed: 4132488870
0.00.439.973 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.985 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.987 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.987 I 
 seconary to primary education, ensuring that all children have access to quality early childhood education regardless of their background or circumstances. [end of text]


0.02.324.492 I llama_perf_sampler_print:    sampling time =       3.65 ms /    26 runs   (    0.14 ms per token,  7133.06 tokens per second)
0.02.324.494 I llama_perf_context_print:        load time =     439.01 ms
0.02.324.495 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.324.496 I llama_perf_context_print:        eval time =    1870.12 ms /    25 runs   (   74.80 ms per token,    13.37 tokens per second)
0.02.324.497 I llama_perf_context_print:       total time =    1884.70 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.681s
user	0m35.992s
sys	0m9.345s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4233 (86dc11c5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40195.86 ms
main:    total time = 40195.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.562 I build: 4233 (86dc11c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.021.254 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.262 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.270 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.275 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.276 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.279 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.280 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.280 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.281 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.282 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.282 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.285 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.286 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.286 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.287 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.287 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.995 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.441 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.217 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.223 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.224 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.224 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.225 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.226 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.226 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.229 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.229 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.230 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.231 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.232 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.234 I llama_model_loader: - type  f32:   37 tensors
0.00.130.235 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.235 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.803 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.826 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.253 I llm_load_vocab: special tokens cache size = 5
0.00.279.272 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.287 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.287 I llm_load_print_meta: arch             = gemma
0.00.279.288 I llm_load_print_meta: vocab type       = SPM
0.00.279.289 I llm_load_print_meta: n_vocab          = 256000
0.00.279.289 I llm_load_print_meta: n_merges         = 0
0.00.279.290 I llm_load_print_meta: vocab_only       = 0
0.00.279.290 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.290 I llm_load_print_meta: n_embd           = 2048
0.00.279.291 I llm_load_print_meta: n_layer          = 18
0.00.279.301 I llm_load_print_meta: n_head           = 8
0.00.279.303 I llm_load_print_meta: n_head_kv        = 1
0.00.279.303 I llm_load_print_meta: n_rot            = 256
0.00.279.303 I llm_load_print_meta: n_swa            = 0
0.00.279.303 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.304 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.305 I llm_load_print_meta: n_gqa            = 8
0.00.279.305 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.306 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.307 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.309 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.309 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.310 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.310 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.311 I llm_load_print_meta: n_ff             = 16384
0.00.279.311 I llm_load_print_meta: n_expert         = 0
0.00.279.312 I llm_load_print_meta: n_expert_used    = 0
0.00.279.312 I llm_load_print_meta: causal attn      = 1
0.00.279.312 I llm_load_print_meta: pooling type     = 0
0.00.279.313 I llm_load_print_meta: rope type        = 2
0.00.279.313 I llm_load_print_meta: rope scaling     = linear
0.00.279.314 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.315 I llm_load_print_meta: freq_scale_train = 1
0.00.279.315 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.315 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.315 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.316 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.316 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.316 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.317 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.317 I llm_load_print_meta: model type       = 2B
0.00.279.318 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.319 I llm_load_print_meta: model params     = 2.51 B
0.00.279.319 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.320 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.320 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.321 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.321 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.321 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.321 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.322 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.322 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.322 I llm_load_print_meta: max token length = 93
0.00.340.123 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.340.131 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.340.131 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.340.132 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.340.133 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.340.133 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.345.223 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.229 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.229 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.230 I llama_new_context_with_model: n_batch       = 2048
0.00.345.230 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.230 I llama_new_context_with_model: flash_attn    = 0
0.00.345.232 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.233 I llama_new_context_with_model: freq_scale    = 1
0.00.345.234 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.664 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.678 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.775 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.047 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.054 I llama_new_context_with_model: graph nodes  = 601
0.00.361.054 I llama_new_context_with_model: graph splits = 1
0.00.361.056 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.451 I main: llama threadpool init, n_threads = 4
0.00.435.468 I 
0.00.435.545 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.435.548 I 
0.00.435.589 I sampler seed: 1983245043
0.00.435.599 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.435.605 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.435.605 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.435.606 I 
 effeing, a mesmerizing spectacle of illusion and storytelling. [end of text]


0.01.026.384 I llama_perf_sampler_print:    sampling time =       1.83 ms /    13 runs   (    0.14 ms per token,  7115.49 tokens per second)
0.01.026.387 I llama_perf_context_print:        load time =     434.68 ms
0.01.026.388 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.026.390 I llama_perf_context_print:        eval time =     583.14 ms /    12 runs   (   48.60 ms per token,    20.58 tokens per second)
0.01.026.391 I llama_perf_context_print:       total time =     590.94 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4233 (86dc11c5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40171.77 ms
main:    total time = 40171.77 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.524 I build: 4233 (86dc11c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.000.727 I main: load the model and apply lora adapter, if any
0.00.021.123 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.138 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.148 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.152 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.156 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.157 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.157 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.158 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.158 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.159 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.162 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.163 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.163 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.164 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.164 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.552 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.437 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.244 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.250 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.251 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.252 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.252 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.253 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.254 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.256 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.257 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.261 I llama_model_loader: - type  f32:   37 tensors
0.00.130.262 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.262 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.418 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.674 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.386 I llm_load_vocab: special tokens cache size = 5
0.00.281.536 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.553 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.554 I llm_load_print_meta: arch             = gemma
0.00.281.555 I llm_load_print_meta: vocab type       = SPM
0.00.281.555 I llm_load_print_meta: n_vocab          = 256000
0.00.281.556 I llm_load_print_meta: n_merges         = 0
0.00.281.556 I llm_load_print_meta: vocab_only       = 0
0.00.281.556 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.556 I llm_load_print_meta: n_embd           = 2048
0.00.281.557 I llm_load_print_meta: n_layer          = 18
0.00.281.569 I llm_load_print_meta: n_head           = 8
0.00.281.570 I llm_load_print_meta: n_head_kv        = 1
0.00.281.571 I llm_load_print_meta: n_rot            = 256
0.00.281.571 I llm_load_print_meta: n_swa            = 0
0.00.281.571 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.572 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.573 I llm_load_print_meta: n_gqa            = 8
0.00.281.574 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.575 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.576 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.577 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.577 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.577 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.578 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.579 I llm_load_print_meta: n_ff             = 16384
0.00.281.579 I llm_load_print_meta: n_expert         = 0
0.00.281.579 I llm_load_print_meta: n_expert_used    = 0
0.00.281.580 I llm_load_print_meta: causal attn      = 1
0.00.281.580 I llm_load_print_meta: pooling type     = 0
0.00.281.580 I llm_load_print_meta: rope type        = 2
0.00.281.581 I llm_load_print_meta: rope scaling     = linear
0.00.281.582 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.583 I llm_load_print_meta: freq_scale_train = 1
0.00.281.583 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.583 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.584 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.584 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.584 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.584 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.585 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.585 I llm_load_print_meta: model type       = 2B
0.00.281.586 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.586 I llm_load_print_meta: model params     = 2.51 B
0.00.281.587 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.587 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.588 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.588 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.589 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.589 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.589 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.590 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.590 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.590 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.591 I llm_load_print_meta: max token length = 93
0.00.336.958 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.341.976 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.982 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.983 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.983 I llama_new_context_with_model: n_batch       = 2048
0.00.341.983 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.984 I llama_new_context_with_model: flash_attn    = 0
0.00.341.987 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.987 I llama_new_context_with_model: freq_scale    = 1
0.00.341.988 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.846 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.861 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.950 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.166 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.171 I llama_new_context_with_model: graph nodes  = 601
0.00.358.171 I llama_new_context_with_model: graph splits = 1
0.00.358.173 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.243 I main: llama threadpool init, n_threads = 4
0.00.433.259 I 
0.00.433.335 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.433.338 I 
0.00.433.381 I sampler seed: 1744984439
0.00.433.392 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.395 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.396 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.396 I 
 seconally.

**Assistant**

I am unable to generate responses that are sexually suggestive in nature. Would you like me to try generating something different? [end of text]


0.02.005.981 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6598.68 tokens per second)
0.02.005.983 I llama_perf_context_print:        load time =     432.50 ms
0.02.005.984 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.005.986 I llama_perf_context_print:        eval time =    1553.56 ms /    32 runs   (   48.55 ms per token,    20.60 tokens per second)
0.02.005.986 I llama_perf_context_print:       total time =    1572.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.202s
user	10m20.153s
sys	0m6.841s
