+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.852 I main: load the model and apply lora adapter, if any
0.00.023.484 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.494 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.589 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.603 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.605 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.612 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.617 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.618 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.619 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.621 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.622 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.628 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.630 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.632 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.633 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.634 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.458 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.943 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.610 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.618 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.620 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.621 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.623 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.624 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.626 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.629 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.631 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.633 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.634 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.354.636 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.643 I llama_model_loader: - type  f32:   37 tensors
0.00.354.646 I llama_model_loader: - type q8_0:  127 tensors
0.00.570.780 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.636.842 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.637.790 I llm_load_vocab: special tokens cache size = 5
0.00.835.627 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.835.698 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.835.699 I llm_load_print_meta: arch             = gemma
0.00.835.699 I llm_load_print_meta: vocab type       = SPM
0.00.835.701 I llm_load_print_meta: n_vocab          = 256000
0.00.835.704 I llm_load_print_meta: n_merges         = 0
0.00.835.704 I llm_load_print_meta: vocab_only       = 0
0.00.835.705 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.705 I llm_load_print_meta: n_embd           = 2048
0.00.835.706 I llm_load_print_meta: n_layer          = 18
0.00.835.770 I llm_load_print_meta: n_head           = 8
0.00.835.777 I llm_load_print_meta: n_head_kv        = 1
0.00.835.779 I llm_load_print_meta: n_rot            = 256
0.00.835.780 I llm_load_print_meta: n_swa            = 0
0.00.835.780 I llm_load_print_meta: n_embd_head_k    = 256
0.00.835.781 I llm_load_print_meta: n_embd_head_v    = 256
0.00.835.786 I llm_load_print_meta: n_gqa            = 8
0.00.835.792 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.835.797 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.835.799 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.835.800 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.835.801 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.835.801 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.835.802 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.835.807 I llm_load_print_meta: n_ff             = 16384
0.00.835.808 I llm_load_print_meta: n_expert         = 0
0.00.835.828 I llm_load_print_meta: n_expert_used    = 0
0.00.835.832 I llm_load_print_meta: causal attn      = 1
0.00.835.832 I llm_load_print_meta: pooling type     = 0
0.00.835.832 I llm_load_print_meta: rope type        = 2
0.00.835.833 I llm_load_print_meta: rope scaling     = linear
0.00.835.834 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.835.835 I llm_load_print_meta: freq_scale_train = 1
0.00.835.835 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.835.836 I llm_load_print_meta: rope_finetuned   = unknown
0.00.835.836 I llm_load_print_meta: ssm_d_conv       = 0
0.00.835.837 I llm_load_print_meta: ssm_d_inner      = 0
0.00.835.837 I llm_load_print_meta: ssm_d_state      = 0
0.00.835.837 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.835.837 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.835.838 I llm_load_print_meta: model type       = 2B
0.00.835.839 I llm_load_print_meta: model ftype      = Q8_0
0.00.835.840 I llm_load_print_meta: model params     = 2.51 B
0.00.835.841 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.835.852 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.835.853 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.835.853 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.835.861 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.835.862 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.835.862 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.835.863 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.835.869 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.835.870 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.835.871 I llm_load_print_meta: max token length = 93
0.00.939.440 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.939.449 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.939.450 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.939.451 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.939.452 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.939.453 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.945.334 I llama_new_context_with_model: n_seq_max     = 1
0.00.945.341 I llama_new_context_with_model: n_ctx         = 4096
0.00.945.342 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.945.342 I llama_new_context_with_model: n_batch       = 2048
0.00.945.342 I llama_new_context_with_model: n_ubatch      = 512
0.00.945.343 I llama_new_context_with_model: flash_attn    = 0
0.00.945.345 I llama_new_context_with_model: freq_base     = 10000.0
0.00.945.346 I llama_new_context_with_model: freq_scale    = 1
0.00.945.346 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.945.434 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.960.436 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.960.479 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.960.606 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.963.317 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.963.321 I llama_new_context_with_model: graph nodes  = 601
0.00.963.321 I llama_new_context_with_model: graph splits = 1
0.00.963.345 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.963.348 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.575.019 I main: llama threadpool init, n_threads = 4
0.01.575.036 I 
0.01.575.155 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.575.159 I 
0.01.575.398 I sampler seed: 3628426915
0.01.575.427 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.575.437 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.575.438 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.575.438 I 
 increasities with the 2023 NBA Free Agency.

**The Big Board is buzzing with rumors and speculation about which teams and players might be involved

0.15.146.104 I llama_perf_sampler_print:    sampling time =      49.76 ms /    33 runs   (    1.51 ms per token,   663.25 tokens per second)
0.15.146.107 I llama_perf_context_print:        load time =    1574.08 ms
0.15.146.109 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.146.111 I llama_perf_context_print:        eval time =   13481.30 ms /    32 runs   (  421.29 ms per token,     2.37 tokens per second)
0.15.146.123 I llama_perf_context_print:       total time =   13571.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.000.821 I main: load the model and apply lora adapter, if any
0.00.023.151 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.246 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.259 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.261 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.266 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.270 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.272 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.273 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.274 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.275 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.282 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.283 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.285 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.287 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.288 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.005 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.336.383 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.967 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.975 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.977 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.978 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.980 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.981 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.983 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.986 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.987 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.989 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.360.990 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.360.992 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.001 I llama_model_loader: - type  f32:   37 tensors
0.00.361.003 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.838 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.634.760 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.635.680 I llm_load_vocab: special tokens cache size = 5
0.00.824.715 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.824.792 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.824.793 I llm_load_print_meta: arch             = gemma
0.00.824.794 I llm_load_print_meta: vocab type       = SPM
0.00.824.795 I llm_load_print_meta: n_vocab          = 256000
0.00.824.797 I llm_load_print_meta: n_merges         = 0
0.00.824.798 I llm_load_print_meta: vocab_only       = 0
0.00.824.798 I llm_load_print_meta: n_ctx_train      = 8192
0.00.824.799 I llm_load_print_meta: n_embd           = 2048
0.00.824.799 I llm_load_print_meta: n_layer          = 18
0.00.824.865 I llm_load_print_meta: n_head           = 8
0.00.824.873 I llm_load_print_meta: n_head_kv        = 1
0.00.824.873 I llm_load_print_meta: n_rot            = 256
0.00.824.874 I llm_load_print_meta: n_swa            = 0
0.00.824.874 I llm_load_print_meta: n_embd_head_k    = 256
0.00.824.874 I llm_load_print_meta: n_embd_head_v    = 256
0.00.824.879 I llm_load_print_meta: n_gqa            = 8
0.00.824.884 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.824.889 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.824.890 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.824.893 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.824.893 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.824.894 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.824.898 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.824.903 I llm_load_print_meta: n_ff             = 16384
0.00.824.904 I llm_load_print_meta: n_expert         = 0
0.00.824.905 I llm_load_print_meta: n_expert_used    = 0
0.00.824.906 I llm_load_print_meta: causal attn      = 1
0.00.824.906 I llm_load_print_meta: pooling type     = 0
0.00.824.907 I llm_load_print_meta: rope type        = 2
0.00.824.908 I llm_load_print_meta: rope scaling     = linear
0.00.824.910 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.824.911 I llm_load_print_meta: freq_scale_train = 1
0.00.824.911 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.824.912 I llm_load_print_meta: rope_finetuned   = unknown
0.00.824.913 I llm_load_print_meta: ssm_d_conv       = 0
0.00.824.913 I llm_load_print_meta: ssm_d_inner      = 0
0.00.824.914 I llm_load_print_meta: ssm_d_state      = 0
0.00.824.914 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.824.914 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.824.915 I llm_load_print_meta: model type       = 2B
0.00.824.916 I llm_load_print_meta: model ftype      = Q8_0
0.00.824.917 I llm_load_print_meta: model params     = 2.51 B
0.00.824.919 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.824.919 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.824.920 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.824.921 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.824.921 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.824.922 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.824.922 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.824.923 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.824.929 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.824.930 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.824.931 I llm_load_print_meta: max token length = 93
0.00.919.471 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.925.532 I llama_new_context_with_model: n_seq_max     = 1
0.00.925.541 I llama_new_context_with_model: n_ctx         = 4096
0.00.925.541 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.925.542 I llama_new_context_with_model: n_batch       = 2048
0.00.925.542 I llama_new_context_with_model: n_ubatch      = 512
0.00.925.543 I llama_new_context_with_model: flash_attn    = 0
0.00.925.547 I llama_new_context_with_model: freq_base     = 10000.0
0.00.925.547 I llama_new_context_with_model: freq_scale    = 1
0.00.925.548 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.925.646 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.940.366 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.940.410 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.940.529 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.943.199 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.943.202 I llama_new_context_with_model: graph nodes  = 601
0.00.943.203 I llama_new_context_with_model: graph splits = 1
0.00.943.226 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.943.230 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.553.732 I main: llama threadpool init, n_threads = 4
0.01.553.749 I 
0.01.553.869 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.553.873 I 
0.01.554.132 I sampler seed: 3259152824
0.01.554.145 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.554.154 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.554.158 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.554.158 I 
 increasities, which are an extension of the classic possessive morphology paradigm.

**Question:** What are the implications of using possessive morphology paradigms for interpreting complex sentences?

0.15.276.888 I llama_perf_sampler_print:    sampling time =      49.95 ms /    33 runs   (    1.51 ms per token,   660.69 tokens per second)
0.15.276.891 I llama_perf_context_print:        load time =    1552.82 ms
0.15.276.893 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.276.894 I llama_perf_context_print:        eval time =   13633.14 ms /    32 runs   (  426.04 ms per token,     2.35 tokens per second)
0.15.276.895 I llama_perf_context_print:       total time =   13723.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.665 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.000.879 I main: load the model and apply lora adapter, if any
0.00.023.344 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.355 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.455 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.468 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.470 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.476 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.480 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.482 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.484 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.487 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.489 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.496 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.502 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.505 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.507 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.509 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.261.550 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.364.296 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.388.886 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.388.895 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.388.897 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.388.898 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.388.899 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.388.901 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.388.902 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.388.906 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.388.926 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.388.931 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.388.933 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.388.936 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.388.947 I llama_model_loader: - type  f32:   37 tensors
0.00.388.950 I llama_model_loader: - type q8_0:  127 tensors
0.00.614.925 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.685.991 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.686.954 I llm_load_vocab: special tokens cache size = 5
0.00.897.557 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.897.642 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.897.647 I llm_load_print_meta: arch             = gemma
0.00.897.648 I llm_load_print_meta: vocab type       = SPM
0.00.897.649 I llm_load_print_meta: n_vocab          = 256000
0.00.897.651 I llm_load_print_meta: n_merges         = 0
0.00.897.652 I llm_load_print_meta: vocab_only       = 0
0.00.897.653 I llm_load_print_meta: n_ctx_train      = 8192
0.00.897.653 I llm_load_print_meta: n_embd           = 2048
0.00.897.654 I llm_load_print_meta: n_layer          = 18
0.00.897.730 I llm_load_print_meta: n_head           = 8
0.00.897.740 I llm_load_print_meta: n_head_kv        = 1
0.00.897.742 I llm_load_print_meta: n_rot            = 256
0.00.897.742 I llm_load_print_meta: n_swa            = 0
0.00.897.743 I llm_load_print_meta: n_embd_head_k    = 256
0.00.897.743 I llm_load_print_meta: n_embd_head_v    = 256
0.00.897.751 I llm_load_print_meta: n_gqa            = 8
0.00.897.757 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.897.771 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.897.774 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.897.776 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.897.776 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.897.776 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.897.777 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.897.783 I llm_load_print_meta: n_ff             = 16384
0.00.897.784 I llm_load_print_meta: n_expert         = 0
0.00.897.788 I llm_load_print_meta: n_expert_used    = 0
0.00.897.788 I llm_load_print_meta: causal attn      = 1
0.00.897.789 I llm_load_print_meta: pooling type     = 0
0.00.897.789 I llm_load_print_meta: rope type        = 2
0.00.897.790 I llm_load_print_meta: rope scaling     = linear
0.00.897.792 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.897.793 I llm_load_print_meta: freq_scale_train = 1
0.00.897.794 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.897.796 I llm_load_print_meta: rope_finetuned   = unknown
0.00.897.797 I llm_load_print_meta: ssm_d_conv       = 0
0.00.897.806 I llm_load_print_meta: ssm_d_inner      = 0
0.00.897.807 I llm_load_print_meta: ssm_d_state      = 0
0.00.897.808 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.897.809 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.897.810 I llm_load_print_meta: model type       = 2B
0.00.897.812 I llm_load_print_meta: model ftype      = Q8_0
0.00.897.813 I llm_load_print_meta: model params     = 2.51 B
0.00.897.815 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.897.816 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.897.817 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.897.818 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.897.818 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.897.819 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.897.820 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.897.821 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.897.829 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.897.831 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.897.832 I llm_load_print_meta: max token length = 93
0.00.977.002 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.977.013 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.977.014 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.977.015 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.977.015 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.977.016 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.983.198 I llama_new_context_with_model: n_seq_max     = 1
0.00.983.205 I llama_new_context_with_model: n_ctx         = 4096
0.00.983.205 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.983.205 I llama_new_context_with_model: n_batch       = 2048
0.00.983.206 I llama_new_context_with_model: n_ubatch      = 512
0.00.983.206 I llama_new_context_with_model: flash_attn    = 0
0.00.983.209 I llama_new_context_with_model: freq_base     = 10000.0
0.00.983.209 I llama_new_context_with_model: freq_scale    = 1
0.00.983.210 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.983.304 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.997.502 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.997.543 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.997.662 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.000.279 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.000.283 I llama_new_context_with_model: graph nodes  = 601
0.01.000.283 I llama_new_context_with_model: graph splits = 1
0.01.000.309 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.000.313 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.612.855 I main: llama threadpool init, n_threads = 4
0.01.612.872 I 
0.01.613.016 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.613.020 I 
0.01.613.286 I sampler seed: 1952420414
0.01.613.301 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.613.315 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.613.320 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.613.320 I 
 increasities with her ex-husband, but finds that her actions are ultimately futile. [end of text]


0.09.264.864 I llama_perf_sampler_print:    sampling time =      28.10 ms /    19 runs   (    1.48 ms per token,   676.18 tokens per second)
0.09.264.868 I llama_perf_context_print:        load time =    1611.88 ms
0.09.264.869 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.264.871 I llama_perf_context_print:        eval time =    7600.21 ms /    18 runs   (  422.23 ms per token,     2.37 tokens per second)
0.09.264.871 I llama_perf_context_print:       total time =    7652.02 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.000.826 I main: load the model and apply lora adapter, if any
0.00.023.364 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.375 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.459 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.470 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.472 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.477 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.479 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.480 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.482 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.483 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.485 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.491 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.492 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.495 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.496 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.502 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.045 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.928 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.569 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.581 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.583 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.584 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.586 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.587 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.589 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.593 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.594 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.596 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.597 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.354.599 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.608 I llama_model_loader: - type  f32:   37 tensors
0.00.354.611 I llama_model_loader: - type q8_0:  127 tensors
0.00.561.870 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.019 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.624.023 I llm_load_vocab: special tokens cache size = 5
0.00.814.099 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.814.171 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.814.172 I llm_load_print_meta: arch             = gemma
0.00.814.173 I llm_load_print_meta: vocab type       = SPM
0.00.814.174 I llm_load_print_meta: n_vocab          = 256000
0.00.814.177 I llm_load_print_meta: n_merges         = 0
0.00.814.177 I llm_load_print_meta: vocab_only       = 0
0.00.814.178 I llm_load_print_meta: n_ctx_train      = 8192
0.00.814.178 I llm_load_print_meta: n_embd           = 2048
0.00.814.179 I llm_load_print_meta: n_layer          = 18
0.00.814.243 I llm_load_print_meta: n_head           = 8
0.00.814.249 I llm_load_print_meta: n_head_kv        = 1
0.00.814.250 I llm_load_print_meta: n_rot            = 256
0.00.814.250 I llm_load_print_meta: n_swa            = 0
0.00.814.252 I llm_load_print_meta: n_embd_head_k    = 256
0.00.814.253 I llm_load_print_meta: n_embd_head_v    = 256
0.00.814.258 I llm_load_print_meta: n_gqa            = 8
0.00.814.264 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.814.269 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.814.270 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.814.271 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.814.272 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.814.272 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.814.273 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.814.277 I llm_load_print_meta: n_ff             = 16384
0.00.814.278 I llm_load_print_meta: n_expert         = 0
0.00.814.279 I llm_load_print_meta: n_expert_used    = 0
0.00.814.279 I llm_load_print_meta: causal attn      = 1
0.00.814.280 I llm_load_print_meta: pooling type     = 0
0.00.814.280 I llm_load_print_meta: rope type        = 2
0.00.814.280 I llm_load_print_meta: rope scaling     = linear
0.00.814.282 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.814.283 I llm_load_print_meta: freq_scale_train = 1
0.00.814.292 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.814.293 I llm_load_print_meta: rope_finetuned   = unknown
0.00.814.294 I llm_load_print_meta: ssm_d_conv       = 0
0.00.814.295 I llm_load_print_meta: ssm_d_inner      = 0
0.00.814.295 I llm_load_print_meta: ssm_d_state      = 0
0.00.814.295 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.814.296 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.814.301 I llm_load_print_meta: model type       = 2B
0.00.814.302 I llm_load_print_meta: model ftype      = Q8_0
0.00.814.302 I llm_load_print_meta: model params     = 2.51 B
0.00.814.303 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.814.315 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.814.316 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.814.317 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.814.320 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.814.321 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.814.328 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.814.330 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.814.336 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.814.338 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.814.338 I llm_load_print_meta: max token length = 93
0.00.886.836 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.886.846 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.892.677 I llama_new_context_with_model: n_seq_max     = 1
0.00.892.684 I llama_new_context_with_model: n_ctx         = 4096
0.00.892.685 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.892.685 I llama_new_context_with_model: n_batch       = 2048
0.00.892.686 I llama_new_context_with_model: n_ubatch      = 512
0.00.892.686 I llama_new_context_with_model: flash_attn    = 0
0.00.892.689 I llama_new_context_with_model: freq_base     = 10000.0
0.00.892.690 I llama_new_context_with_model: freq_scale    = 1
0.00.892.691 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.892.777 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.907.445 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.907.483 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.907.600 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.910.251 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.910.255 I llama_new_context_with_model: graph nodes  = 601
0.00.910.255 I llama_new_context_with_model: graph splits = 1
0.00.910.280 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.910.283 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.523.182 I main: llama threadpool init, n_threads = 4
0.01.523.197 I 
0.01.523.315 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.523.320 I 
0.01.523.553 I sampler seed: 3899447287
0.01.523.566 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.523.578 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.523.581 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.523.581 I 
 increably, a grin splitting his face. "I'm ready for our adventure!"

The young adventurer, barely out of his teens, grinned back,

0.15.152.562 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.52 tokens per second)
0.15.152.565 I llama_perf_context_print:        load time =    1522.27 ms
0.15.152.566 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.152.568 I llama_perf_context_print:        eval time =   13539.61 ms /    32 runs   (  423.11 ms per token,     2.36 tokens per second)
0.15.152.569 I llama_perf_context_print:       total time =   13629.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.499s
user	3m27.953s
sys	0m9.403s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4382 (86bf31cf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185844.94 ms
main:    total time = 185844.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.023.440 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.449 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.540 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.552 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.554 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.560 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.566 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.568 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.569 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.570 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.572 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.577 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.579 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.580 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.581 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.583 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.137 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.336.335 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.929 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.941 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.943 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.944 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.945 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.947 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.948 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.952 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.953 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.955 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.360.956 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.360.958 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.360.967 I llama_model_loader: - type  f32:   37 tensors
0.00.360.969 I llama_model_loader: - type q4_K:  108 tensors
0.00.360.970 I llama_model_loader: - type q6_K:   19 tensors
0.00.588.316 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.647.122 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.040 I llm_load_vocab: special tokens cache size = 5
0.00.849.621 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.849.695 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.849.696 I llm_load_print_meta: arch             = gemma
0.00.849.697 I llm_load_print_meta: vocab type       = SPM
0.00.849.697 I llm_load_print_meta: n_vocab          = 256000
0.00.849.700 I llm_load_print_meta: n_merges         = 0
0.00.849.700 I llm_load_print_meta: vocab_only       = 0
0.00.849.701 I llm_load_print_meta: n_ctx_train      = 8192
0.00.849.701 I llm_load_print_meta: n_embd           = 2048
0.00.849.701 I llm_load_print_meta: n_layer          = 18
0.00.849.766 I llm_load_print_meta: n_head           = 8
0.00.849.773 I llm_load_print_meta: n_head_kv        = 1
0.00.849.774 I llm_load_print_meta: n_rot            = 256
0.00.849.774 I llm_load_print_meta: n_swa            = 0
0.00.849.774 I llm_load_print_meta: n_embd_head_k    = 256
0.00.849.776 I llm_load_print_meta: n_embd_head_v    = 256
0.00.849.781 I llm_load_print_meta: n_gqa            = 8
0.00.849.787 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.849.793 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.849.795 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.849.797 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.849.797 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.849.809 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.849.813 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.849.819 I llm_load_print_meta: n_ff             = 16384
0.00.849.820 I llm_load_print_meta: n_expert         = 0
0.00.849.820 I llm_load_print_meta: n_expert_used    = 0
0.00.849.821 I llm_load_print_meta: causal attn      = 1
0.00.849.834 I llm_load_print_meta: pooling type     = 0
0.00.849.835 I llm_load_print_meta: rope type        = 2
0.00.849.836 I llm_load_print_meta: rope scaling     = linear
0.00.849.837 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.849.838 I llm_load_print_meta: freq_scale_train = 1
0.00.849.838 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.849.847 I llm_load_print_meta: rope_finetuned   = unknown
0.00.849.848 I llm_load_print_meta: ssm_d_conv       = 0
0.00.849.848 I llm_load_print_meta: ssm_d_inner      = 0
0.00.849.849 I llm_load_print_meta: ssm_d_state      = 0
0.00.849.849 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.849.850 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.849.851 I llm_load_print_meta: model type       = 2B
0.00.849.852 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.849.854 I llm_load_print_meta: model params     = 2.51 B
0.00.849.855 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.849.856 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.849.857 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.849.857 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.849.858 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.849.859 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.849.859 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.849.859 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.849.865 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.849.869 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.849.869 I llm_load_print_meta: max token length = 93
0.00.912.816 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.912.824 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.912.825 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.912.826 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.912.827 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.912.827 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.918.536 I llama_new_context_with_model: n_seq_max     = 1
0.00.918.543 I llama_new_context_with_model: n_ctx         = 4096
0.00.918.543 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.918.544 I llama_new_context_with_model: n_batch       = 2048
0.00.918.544 I llama_new_context_with_model: n_ubatch      = 512
0.00.918.544 I llama_new_context_with_model: flash_attn    = 0
0.00.918.546 I llama_new_context_with_model: freq_base     = 10000.0
0.00.918.547 I llama_new_context_with_model: freq_scale    = 1
0.00.918.548 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.918.633 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.932.999 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.933.039 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.933.157 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.935.738 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.935.742 I llama_new_context_with_model: graph nodes  = 601
0.00.935.742 I llama_new_context_with_model: graph splits = 1
0.00.935.765 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.935.768 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.516.759 I main: llama threadpool init, n_threads = 4
0.01.516.776 I 
0.01.516.897 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.516.901 I 
0.01.517.139 I sampler seed: 1967226244
0.01.517.153 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.517.162 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.517.165 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.517.165 I 
 squaRE, an AI-powered data analytics platform, is designed to help businesses unlock the hidden insights within their vast datasets. Here's how SQUARES can

0.12.651.590 I llama_perf_sampler_print:    sampling time =      49.88 ms /    33 runs   (    1.51 ms per token,   661.59 tokens per second)
0.12.651.593 I llama_perf_context_print:        load time =    1515.80 ms
0.12.651.594 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.651.596 I llama_perf_context_print:        eval time =   11045.21 ms /    32 runs   (  345.16 ms per token,     2.90 tokens per second)
0.12.651.611 I llama_perf_context_print:       total time =   11134.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4382 (86bf31cf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185691.18 ms
main:    total time = 185691.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.026.103 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.213 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.228 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.233 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.240 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.246 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.248 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.250 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.253 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.255 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.263 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.269 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.271 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.282 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.287 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.874 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.634 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.344 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.357 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.359 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.360 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.362 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.363 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.365 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.369 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.370 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.380 I llama_model_loader: - type  f32:   37 tensors
0.00.356.382 I llama_model_loader: - type q4_K:  108 tensors
0.00.356.383 I llama_model_loader: - type q6_K:   19 tensors
0.00.581.272 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.387 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.355 I llm_load_vocab: special tokens cache size = 5
0.00.843.030 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.843.107 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.843.108 I llm_load_print_meta: arch             = gemma
0.00.843.109 I llm_load_print_meta: vocab type       = SPM
0.00.843.110 I llm_load_print_meta: n_vocab          = 256000
0.00.843.113 I llm_load_print_meta: n_merges         = 0
0.00.843.113 I llm_load_print_meta: vocab_only       = 0
0.00.843.114 I llm_load_print_meta: n_ctx_train      = 8192
0.00.843.114 I llm_load_print_meta: n_embd           = 2048
0.00.843.114 I llm_load_print_meta: n_layer          = 18
0.00.843.178 I llm_load_print_meta: n_head           = 8
0.00.843.185 I llm_load_print_meta: n_head_kv        = 1
0.00.843.186 I llm_load_print_meta: n_rot            = 256
0.00.843.186 I llm_load_print_meta: n_swa            = 0
0.00.843.187 I llm_load_print_meta: n_embd_head_k    = 256
0.00.843.188 I llm_load_print_meta: n_embd_head_v    = 256
0.00.843.193 I llm_load_print_meta: n_gqa            = 8
0.00.843.198 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.843.202 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.843.207 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.843.209 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.843.210 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.843.210 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.843.211 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.843.216 I llm_load_print_meta: n_ff             = 16384
0.00.843.217 I llm_load_print_meta: n_expert         = 0
0.00.843.217 I llm_load_print_meta: n_expert_used    = 0
0.00.843.220 I llm_load_print_meta: causal attn      = 1
0.00.843.221 I llm_load_print_meta: pooling type     = 0
0.00.843.221 I llm_load_print_meta: rope type        = 2
0.00.843.221 I llm_load_print_meta: rope scaling     = linear
0.00.843.223 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.843.223 I llm_load_print_meta: freq_scale_train = 1
0.00.843.224 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.843.224 I llm_load_print_meta: rope_finetuned   = unknown
0.00.843.225 I llm_load_print_meta: ssm_d_conv       = 0
0.00.843.226 I llm_load_print_meta: ssm_d_inner      = 0
0.00.843.226 I llm_load_print_meta: ssm_d_state      = 0
0.00.843.227 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.843.227 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.843.230 I llm_load_print_meta: model type       = 2B
0.00.843.231 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.843.231 I llm_load_print_meta: model params     = 2.51 B
0.00.843.232 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.843.232 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.843.233 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.843.234 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.843.234 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.843.235 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.843.236 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.843.236 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.843.242 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.843.243 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.843.244 I llm_load_print_meta: max token length = 93
0.00.902.125 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.908.192 I llama_new_context_with_model: n_seq_max     = 1
0.00.908.200 I llama_new_context_with_model: n_ctx         = 4096
0.00.908.200 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.908.201 I llama_new_context_with_model: n_batch       = 2048
0.00.908.201 I llama_new_context_with_model: n_ubatch      = 512
0.00.908.202 I llama_new_context_with_model: flash_attn    = 0
0.00.908.204 I llama_new_context_with_model: freq_base     = 10000.0
0.00.908.205 I llama_new_context_with_model: freq_scale    = 1
0.00.908.206 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.908.302 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.923.460 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.923.501 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.923.619 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.926.286 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.926.290 I llama_new_context_with_model: graph nodes  = 601
0.00.926.291 I llama_new_context_with_model: graph splits = 1
0.00.926.313 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.926.317 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.512.279 I main: llama threadpool init, n_threads = 4
0.01.512.296 I 
0.01.512.440 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.512.445 I 
0.01.512.693 I sampler seed: 3541189131
0.01.512.706 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.512.716 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.512.720 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.512.721 I 
 effejljat da su skupine matice koje se koriste u fizici.

**Skupine matice koje se koriste u fizici

0.12.675.201 I llama_perf_sampler_print:    sampling time =      49.73 ms /    33 runs   (    1.51 ms per token,   663.53 tokens per second)
0.12.675.204 I llama_perf_context_print:        load time =    1511.30 ms
0.12.675.206 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.675.208 I llama_perf_context_print:        eval time =   11073.45 ms /    32 runs   (  346.05 ms per token,     2.89 tokens per second)
0.12.675.218 I llama_perf_context_print:       total time =   11162.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.731s
user	46m42.739s
sys	0m6.329s
