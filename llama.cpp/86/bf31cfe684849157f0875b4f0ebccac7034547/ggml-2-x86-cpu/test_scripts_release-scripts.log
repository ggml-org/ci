+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.549 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.754 I main: load the model and apply lora adapter, if any
0.00.021.451 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.462 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.473 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.478 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.479 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.485 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.488 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.489 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.489 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.490 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.491 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.496 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.497 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.497 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.498 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.499 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.978 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.953 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.783 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.790 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.790 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.791 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.792 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.792 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.793 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.795 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.797 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.798 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.798 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.799 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.803 I llama_model_loader: - type  f32:   37 tensors
0.00.132.804 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.420 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.613 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.191 I llm_load_vocab: special tokens cache size = 5
0.00.277.000 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.017 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.018 I llm_load_print_meta: arch             = gemma
0.00.277.018 I llm_load_print_meta: vocab type       = SPM
0.00.277.019 I llm_load_print_meta: n_vocab          = 256000
0.00.277.019 I llm_load_print_meta: n_merges         = 0
0.00.277.020 I llm_load_print_meta: vocab_only       = 0
0.00.277.020 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.020 I llm_load_print_meta: n_embd           = 2048
0.00.277.021 I llm_load_print_meta: n_layer          = 18
0.00.277.033 I llm_load_print_meta: n_head           = 8
0.00.277.034 I llm_load_print_meta: n_head_kv        = 1
0.00.277.034 I llm_load_print_meta: n_rot            = 256
0.00.277.034 I llm_load_print_meta: n_swa            = 0
0.00.277.035 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.035 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.036 I llm_load_print_meta: n_gqa            = 8
0.00.277.037 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.038 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.039 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.040 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.040 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.041 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.041 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.042 I llm_load_print_meta: n_ff             = 16384
0.00.277.042 I llm_load_print_meta: n_expert         = 0
0.00.277.042 I llm_load_print_meta: n_expert_used    = 0
0.00.277.043 I llm_load_print_meta: causal attn      = 1
0.00.277.043 I llm_load_print_meta: pooling type     = 0
0.00.277.043 I llm_load_print_meta: rope type        = 2
0.00.277.044 I llm_load_print_meta: rope scaling     = linear
0.00.277.045 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.045 I llm_load_print_meta: freq_scale_train = 1
0.00.277.046 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.046 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.046 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.047 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.047 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.047 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.047 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.048 I llm_load_print_meta: model type       = 2B
0.00.277.048 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.049 I llm_load_print_meta: model params     = 2.51 B
0.00.277.050 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.051 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.051 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.051 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.052 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.052 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.053 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.053 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.053 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.054 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.054 I llm_load_print_meta: max token length = 93
0.00.376.437 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.376.444 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.376.445 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.376.445 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.376.446 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.376.447 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.381.811 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.818 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.818 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.819 I llama_new_context_with_model: n_batch       = 2048
0.00.381.819 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.820 I llama_new_context_with_model: flash_attn    = 0
0.00.381.822 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.823 I llama_new_context_with_model: freq_scale    = 1
0.00.381.824 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.843 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.396.443 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.457 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.548 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.835 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.842 I llama_new_context_with_model: graph nodes  = 601
0.00.397.843 I llama_new_context_with_model: graph splits = 1
0.00.397.845 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.397.845 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.223 I main: llama threadpool init, n_threads = 4
0.00.483.239 I 
0.00.483.312 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.483.315 I 
0.00.483.357 I sampler seed: 4006402614
0.00.483.368 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.370 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.371 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.371 I 
 increasities to a new level of absurdity.

I can't help but chuckle at the juxtaposition of the serious and the absurd.

**Answer:**



0.02.745.713 I llama_perf_sampler_print:    sampling time =       5.77 ms /    33 runs   (    0.17 ms per token,  5723.20 tokens per second)
0.02.745.715 I llama_perf_context_print:        load time =     482.45 ms
0.02.745.716 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.745.718 I llama_perf_context_print:        eval time =    2242.86 ms /    32 runs   (   70.09 ms per token,    14.27 tokens per second)
0.02.745.718 I llama_perf_context_print:       total time =    2262.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.536 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.227 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.241 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.252 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.255 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.259 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.261 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.262 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.263 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.263 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.264 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.268 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.268 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.269 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.269 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.270 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.993 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.873 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.917 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.924 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.925 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.926 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.926 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.927 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.928 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.930 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.931 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.932 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.932 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.933 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.937 I llama_model_loader: - type  f32:   37 tensors
0.00.131.938 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.883 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.163 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.714 I llm_load_vocab: special tokens cache size = 5
0.00.276.511 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.527 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.527 I llm_load_print_meta: arch             = gemma
0.00.276.528 I llm_load_print_meta: vocab type       = SPM
0.00.276.529 I llm_load_print_meta: n_vocab          = 256000
0.00.276.530 I llm_load_print_meta: n_merges         = 0
0.00.276.530 I llm_load_print_meta: vocab_only       = 0
0.00.276.530 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.531 I llm_load_print_meta: n_embd           = 2048
0.00.276.531 I llm_load_print_meta: n_layer          = 18
0.00.276.543 I llm_load_print_meta: n_head           = 8
0.00.276.544 I llm_load_print_meta: n_head_kv        = 1
0.00.276.544 I llm_load_print_meta: n_rot            = 256
0.00.276.545 I llm_load_print_meta: n_swa            = 0
0.00.276.545 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.545 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.546 I llm_load_print_meta: n_gqa            = 8
0.00.276.547 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.548 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.550 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.552 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.552 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.552 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.553 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.554 I llm_load_print_meta: n_ff             = 16384
0.00.276.554 I llm_load_print_meta: n_expert         = 0
0.00.276.554 I llm_load_print_meta: n_expert_used    = 0
0.00.276.554 I llm_load_print_meta: causal attn      = 1
0.00.276.555 I llm_load_print_meta: pooling type     = 0
0.00.276.555 I llm_load_print_meta: rope type        = 2
0.00.276.555 I llm_load_print_meta: rope scaling     = linear
0.00.276.557 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.558 I llm_load_print_meta: freq_scale_train = 1
0.00.276.558 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.559 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.559 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.559 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.559 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.559 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.560 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.560 I llm_load_print_meta: model type       = 2B
0.00.276.561 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.561 I llm_load_print_meta: model params     = 2.51 B
0.00.276.562 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.562 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.563 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.563 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.564 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.564 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.564 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.565 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.565 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.566 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.566 I llm_load_print_meta: max token length = 93
0.00.371.697 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.376.928 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.935 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.935 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.936 I llama_new_context_with_model: n_batch       = 2048
0.00.376.936 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.937 I llama_new_context_with_model: flash_attn    = 0
0.00.376.939 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.939 I llama_new_context_with_model: freq_scale    = 1
0.00.376.940 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.959 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.391.833 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.391.847 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.391.938 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.164 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.170 I llama_new_context_with_model: graph nodes  = 601
0.00.393.170 I llama_new_context_with_model: graph splits = 1
0.00.393.173 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.393.173 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.451 I main: llama threadpool init, n_threads = 4
0.00.474.467 I 
0.00.474.542 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.474.545 I 
0.00.474.588 I sampler seed: 3259739090
0.00.474.599 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.604 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.605 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.605 I 
 increasels with the ability to shoot projectiles from their fingertips.

The gladiators of this world engage in thrilling duels, where the fate of the arena hangs in

0.02.673.128 I llama_perf_sampler_print:    sampling time =       5.54 ms /    33 runs   (    0.17 ms per token,  5952.38 tokens per second)
0.02.673.131 I llama_perf_context_print:        load time =     473.69 ms
0.02.673.132 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.673.133 I llama_perf_context_print:        eval time =    2178.27 ms /    32 runs   (   68.07 ms per token,    14.69 tokens per second)
0.02.673.134 I llama_perf_context_print:       total time =    2198.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.542 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.258 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.268 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.276 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.286 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.291 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.299 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.300 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.301 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.302 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.303 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.303 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.308 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.309 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.310 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.311 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.312 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.257 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.220 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.022 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.029 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.029 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.030 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.030 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.031 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.032 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.034 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.035 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.035 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.036 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.037 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.040 I llama_model_loader: - type  f32:   37 tensors
0.00.130.041 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.844 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.765 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.248 I llm_load_vocab: special tokens cache size = 5
0.00.267.344 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.359 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.359 I llm_load_print_meta: arch             = gemma
0.00.267.360 I llm_load_print_meta: vocab type       = SPM
0.00.267.361 I llm_load_print_meta: n_vocab          = 256000
0.00.267.362 I llm_load_print_meta: n_merges         = 0
0.00.267.362 I llm_load_print_meta: vocab_only       = 0
0.00.267.362 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.363 I llm_load_print_meta: n_embd           = 2048
0.00.267.363 I llm_load_print_meta: n_layer          = 18
0.00.267.376 I llm_load_print_meta: n_head           = 8
0.00.267.378 I llm_load_print_meta: n_head_kv        = 1
0.00.267.379 I llm_load_print_meta: n_rot            = 256
0.00.267.379 I llm_load_print_meta: n_swa            = 0
0.00.267.380 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.380 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.382 I llm_load_print_meta: n_gqa            = 8
0.00.267.383 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.385 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.386 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.388 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.388 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.389 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.390 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.391 I llm_load_print_meta: n_ff             = 16384
0.00.267.392 I llm_load_print_meta: n_expert         = 0
0.00.267.393 I llm_load_print_meta: n_expert_used    = 0
0.00.267.393 I llm_load_print_meta: causal attn      = 1
0.00.267.394 I llm_load_print_meta: pooling type     = 0
0.00.267.394 I llm_load_print_meta: rope type        = 2
0.00.267.395 I llm_load_print_meta: rope scaling     = linear
0.00.267.397 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.398 I llm_load_print_meta: freq_scale_train = 1
0.00.267.398 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.399 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.400 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.400 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.401 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.401 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.402 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.403 I llm_load_print_meta: model type       = 2B
0.00.267.405 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.406 I llm_load_print_meta: model params     = 2.51 B
0.00.267.407 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.408 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.408 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.409 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.409 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.410 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.411 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.411 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.412 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.413 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.414 I llm_load_print_meta: max token length = 93
0.00.344.454 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.344.461 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.462 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.344.463 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.344.463 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.464 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.349.958 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.966 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.966 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.967 I llama_new_context_with_model: n_batch       = 2048
0.00.349.967 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.968 I llama_new_context_with_model: flash_attn    = 0
0.00.349.971 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.972 I llama_new_context_with_model: freq_scale    = 1
0.00.349.973 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.995 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.365.864 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.876 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.983 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.336 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.341 I llama_new_context_with_model: graph nodes  = 601
0.00.367.342 I llama_new_context_with_model: graph splits = 1
0.00.367.345 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.367.345 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.343 I main: llama threadpool init, n_threads = 4
0.00.465.361 I 
0.00.465.445 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.465.450 I 
0.00.465.503 I sampler seed: 940400068
0.00.465.516 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.519 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.520 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.520 I 
 increasities and provide the following information:

**1. The year the event occurred**
**2. The location of the event**
**3.

0.02.738.027 I llama_perf_sampler_print:    sampling time =       5.37 ms /    33 runs   (    0.16 ms per token,  6147.54 tokens per second)
0.02.738.029 I llama_perf_context_print:        load time =     464.55 ms
0.02.738.030 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.738.032 I llama_perf_context_print:        eval time =    2253.81 ms /    32 runs   (   70.43 ms per token,    14.20 tokens per second)
0.02.738.032 I llama_perf_context_print:       total time =    2272.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.516 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.704 I main: llama backend init
0.00.000.710 I main: load the model and apply lora adapter, if any
0.00.020.592 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.603 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.611 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.619 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.621 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.624 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.625 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.626 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.627 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.627 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.628 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.631 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.632 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.632 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.633 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.633 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.067 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.074 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.885 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.892 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.893 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.894 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.895 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.896 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.896 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.898 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.899 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.900 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.901 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.901 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.904 I llama_model_loader: - type  f32:   37 tensors
0.00.129.905 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.408 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.145 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.710 I llm_load_vocab: special tokens cache size = 5
0.00.281.606 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.623 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.623 I llm_load_print_meta: arch             = gemma
0.00.281.624 I llm_load_print_meta: vocab type       = SPM
0.00.281.624 I llm_load_print_meta: n_vocab          = 256000
0.00.281.624 I llm_load_print_meta: n_merges         = 0
0.00.281.625 I llm_load_print_meta: vocab_only       = 0
0.00.281.625 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.625 I llm_load_print_meta: n_embd           = 2048
0.00.281.626 I llm_load_print_meta: n_layer          = 18
0.00.281.637 I llm_load_print_meta: n_head           = 8
0.00.281.639 I llm_load_print_meta: n_head_kv        = 1
0.00.281.639 I llm_load_print_meta: n_rot            = 256
0.00.281.639 I llm_load_print_meta: n_swa            = 0
0.00.281.639 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.640 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.641 I llm_load_print_meta: n_gqa            = 8
0.00.281.642 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.642 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.643 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.644 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.645 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.645 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.645 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.646 I llm_load_print_meta: n_ff             = 16384
0.00.281.646 I llm_load_print_meta: n_expert         = 0
0.00.281.647 I llm_load_print_meta: n_expert_used    = 0
0.00.281.647 I llm_load_print_meta: causal attn      = 1
0.00.281.647 I llm_load_print_meta: pooling type     = 0
0.00.281.648 I llm_load_print_meta: rope type        = 2
0.00.281.648 I llm_load_print_meta: rope scaling     = linear
0.00.281.649 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.650 I llm_load_print_meta: freq_scale_train = 1
0.00.281.650 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.651 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.651 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.651 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.651 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.652 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.652 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.652 I llm_load_print_meta: model type       = 2B
0.00.281.653 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.654 I llm_load_print_meta: model params     = 2.51 B
0.00.281.655 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.655 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.655 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.656 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.656 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.656 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.657 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.657 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.657 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.658 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.658 I llm_load_print_meta: max token length = 93
0.00.353.574 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.353.580 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.358.556 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.562 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.563 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.563 I llama_new_context_with_model: n_batch       = 2048
0.00.358.564 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.564 I llama_new_context_with_model: flash_attn    = 0
0.00.358.567 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.568 I llama_new_context_with_model: freq_scale    = 1
0.00.358.569 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.588 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.372.895 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.911 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.001 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.283 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.290 I llama_new_context_with_model: graph nodes  = 601
0.00.374.290 I llama_new_context_with_model: graph splits = 1
0.00.374.292 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.374.293 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.723 I main: llama threadpool init, n_threads = 4
0.00.462.739 I 
0.00.462.811 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.814 I 
0.00.462.860 I sampler seed: 175298510
0.00.462.870 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.875 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.875 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.875 I 
 increasities:

I. The paradox of Zeno and Plato:
   a. Zeno's paradox and Plato's response.
   b. The

0.02.863.344 I llama_perf_sampler_print:    sampling time =       5.84 ms /    33 runs   (    0.18 ms per token,  5649.72 tokens per second)
0.02.863.347 I llama_perf_context_print:        load time =     462.00 ms
0.02.863.348 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.863.350 I llama_perf_context_print:        eval time =    2380.31 ms /    32 runs   (   74.38 ms per token,    13.44 tokens per second)
0.02.863.351 I llama_perf_context_print:       total time =    2400.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.538s
user	0m39.503s
sys	0m9.368s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4382 (86bf31cf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40249.11 ms
main:    total time = 40249.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.532 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.752 I main: load the model and apply lora adapter, if any
0.00.020.752 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.762 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.774 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.785 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.790 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.794 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.795 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.797 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.797 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.798 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.799 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.803 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.804 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.805 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.806 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.806 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.015 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.946 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.758 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.764 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.764 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.765 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.766 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.766 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.767 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.769 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.770 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.770 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.771 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.772 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.774 I llama_model_loader: - type  f32:   37 tensors
0.00.129.775 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.776 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.117 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.990 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.519 I llm_load_vocab: special tokens cache size = 5
0.00.267.418 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.435 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.435 I llm_load_print_meta: arch             = gemma
0.00.267.436 I llm_load_print_meta: vocab type       = SPM
0.00.267.437 I llm_load_print_meta: n_vocab          = 256000
0.00.267.437 I llm_load_print_meta: n_merges         = 0
0.00.267.438 I llm_load_print_meta: vocab_only       = 0
0.00.267.439 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.439 I llm_load_print_meta: n_embd           = 2048
0.00.267.441 I llm_load_print_meta: n_layer          = 18
0.00.267.452 I llm_load_print_meta: n_head           = 8
0.00.267.453 I llm_load_print_meta: n_head_kv        = 1
0.00.267.453 I llm_load_print_meta: n_rot            = 256
0.00.267.454 I llm_load_print_meta: n_swa            = 0
0.00.267.454 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.454 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.455 I llm_load_print_meta: n_gqa            = 8
0.00.267.456 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.457 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.458 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.460 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.461 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.461 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.462 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.463 I llm_load_print_meta: n_ff             = 16384
0.00.267.463 I llm_load_print_meta: n_expert         = 0
0.00.267.464 I llm_load_print_meta: n_expert_used    = 0
0.00.267.464 I llm_load_print_meta: causal attn      = 1
0.00.267.464 I llm_load_print_meta: pooling type     = 0
0.00.267.465 I llm_load_print_meta: rope type        = 2
0.00.267.465 I llm_load_print_meta: rope scaling     = linear
0.00.267.467 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.468 I llm_load_print_meta: freq_scale_train = 1
0.00.267.468 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.469 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.469 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.469 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.470 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.471 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.471 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.472 I llm_load_print_meta: model type       = 2B
0.00.267.472 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.473 I llm_load_print_meta: model params     = 2.51 B
0.00.267.475 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.475 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.476 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.476 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.476 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.477 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.477 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.478 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.479 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.479 I llm_load_print_meta: max token length = 93
0.00.327.697 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.327.703 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.327.704 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.327.704 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.327.705 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.327.705 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.795 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.801 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.802 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.802 I llama_new_context_with_model: n_batch       = 2048
0.00.332.803 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.803 I llama_new_context_with_model: flash_attn    = 0
0.00.332.805 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.806 I llama_new_context_with_model: freq_scale    = 1
0.00.332.807 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.332.825 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.346.797 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.809 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.895 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.143 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.148 I llama_new_context_with_model: graph nodes  = 601
0.00.348.149 I llama_new_context_with_model: graph splits = 1
0.00.348.151 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.151 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.097 I main: llama threadpool init, n_threads = 4
0.00.423.113 I 
0.00.423.187 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.190 I 
0.00.423.235 I sampler seed: 3765984534
0.00.423.246 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.258 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.261 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.262 I 
 seconalism is a form of religious extremism, and should not be tolerated.

I respectfully disagree. While it is important to address extremism and promote tolerance,

0.02.015.220 I llama_perf_sampler_print:    sampling time =       5.55 ms /    33 runs   (    0.17 ms per token,  5944.87 tokens per second)
0.02.015.224 I llama_perf_context_print:        load time =     422.32 ms
0.02.015.225 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.015.227 I llama_perf_context_print:        eval time =    1573.15 ms /    32 runs   (   49.16 ms per token,    20.34 tokens per second)
0.02.015.228 I llama_perf_context_print:       total time =    1592.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4382 (86bf31cf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40224.01 ms
main:    total time = 40224.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.520 I build: 4382 (86bf31cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.731 I main: load the model and apply lora adapter, if any
0.00.020.874 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.887 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.895 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.897 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.902 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.905 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.906 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.906 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.907 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.907 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.910 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.911 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.912 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.912 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.913 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.747 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.496 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.330 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.336 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.336 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.337 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.337 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.338 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.339 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.341 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.342 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.344 I llama_model_loader: - type  f32:   37 tensors
0.00.130.345 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.345 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.711 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.209 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.662 I llm_load_vocab: special tokens cache size = 5
0.00.263.628 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.643 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.643 I llm_load_print_meta: arch             = gemma
0.00.263.644 I llm_load_print_meta: vocab type       = SPM
0.00.263.645 I llm_load_print_meta: n_vocab          = 256000
0.00.263.645 I llm_load_print_meta: n_merges         = 0
0.00.263.645 I llm_load_print_meta: vocab_only       = 0
0.00.263.646 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.646 I llm_load_print_meta: n_embd           = 2048
0.00.263.646 I llm_load_print_meta: n_layer          = 18
0.00.263.658 I llm_load_print_meta: n_head           = 8
0.00.263.658 I llm_load_print_meta: n_head_kv        = 1
0.00.263.659 I llm_load_print_meta: n_rot            = 256
0.00.263.659 I llm_load_print_meta: n_swa            = 0
0.00.263.659 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.660 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.661 I llm_load_print_meta: n_gqa            = 8
0.00.263.662 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.662 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.663 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.665 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.665 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.665 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.666 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.667 I llm_load_print_meta: n_ff             = 16384
0.00.263.667 I llm_load_print_meta: n_expert         = 0
0.00.263.667 I llm_load_print_meta: n_expert_used    = 0
0.00.263.667 I llm_load_print_meta: causal attn      = 1
0.00.263.668 I llm_load_print_meta: pooling type     = 0
0.00.263.668 I llm_load_print_meta: rope type        = 2
0.00.263.668 I llm_load_print_meta: rope scaling     = linear
0.00.263.670 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.670 I llm_load_print_meta: freq_scale_train = 1
0.00.263.671 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.671 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.671 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.672 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.672 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.672 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.673 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.673 I llm_load_print_meta: model type       = 2B
0.00.263.674 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.674 I llm_load_print_meta: model params     = 2.51 B
0.00.263.675 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.676 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.676 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.676 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.677 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.677 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.677 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.678 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.678 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.678 I llm_load_print_meta: max token length = 93
0.00.321.617 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.326.643 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.649 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.650 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.650 I llama_new_context_with_model: n_batch       = 2048
0.00.326.651 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.651 I llama_new_context_with_model: flash_attn    = 0
0.00.326.653 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.654 I llama_new_context_with_model: freq_scale    = 1
0.00.326.655 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.326.673 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.340.990 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.004 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.093 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.312 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.319 I llama_new_context_with_model: graph nodes  = 601
0.00.342.319 I llama_new_context_with_model: graph splits = 1
0.00.342.322 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.342.322 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.981 I main: llama threadpool init, n_threads = 4
0.00.415.997 I 
0.00.416.071 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.416.074 I 
0.00.416.119 I sampler seed: 2597885199
0.00.416.130 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.143 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.416.147 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.416.147 I 
 seconally.

I am sorry, I am unable to generate text that is sexually suggestive or inappropriate in nature. [end of text]


0.01.581.819 I llama_perf_sampler_print:    sampling time =       4.13 ms /    25 runs   (    0.17 ms per token,  6047.41 tokens per second)
0.01.581.821 I llama_perf_context_print:        load time =     415.23 ms
0.01.581.823 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.581.824 I llama_perf_context_print:        eval time =    1151.30 ms /    24 runs   (   47.97 ms per token,    20.85 tokens per second)
0.01.581.825 I llama_perf_context_print:       total time =    1165.85 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.884s
user	10m22.369s
sys	0m6.952s
