+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.585 I build: 4279 (86a19349) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.155 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.166 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.173 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.178 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.179 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.183 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.184 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.185 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.186 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.186 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.187 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.192 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.192 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.193 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.194 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.194 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.552 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.279 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.145 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.151 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.152 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.152 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.153 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.154 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.154 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.157 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.157 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.158 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.158 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.160 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.164 I llama_model_loader: - type  f32:   37 tensors
0.00.131.164 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.037 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.107 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.727 I llm_load_vocab: special tokens cache size = 5
0.00.266.907 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.924 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.925 I llm_load_print_meta: arch             = gemma
0.00.266.926 I llm_load_print_meta: vocab type       = SPM
0.00.266.937 I llm_load_print_meta: n_vocab          = 256000
0.00.266.938 I llm_load_print_meta: n_merges         = 0
0.00.266.939 I llm_load_print_meta: vocab_only       = 0
0.00.266.939 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.939 I llm_load_print_meta: n_embd           = 2048
0.00.266.940 I llm_load_print_meta: n_layer          = 18
0.00.266.950 I llm_load_print_meta: n_head           = 8
0.00.266.951 I llm_load_print_meta: n_head_kv        = 1
0.00.266.951 I llm_load_print_meta: n_rot            = 256
0.00.266.952 I llm_load_print_meta: n_swa            = 0
0.00.266.952 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.952 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.953 I llm_load_print_meta: n_gqa            = 8
0.00.266.954 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.955 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.956 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.958 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.958 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.959 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.959 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.960 I llm_load_print_meta: n_ff             = 16384
0.00.266.961 I llm_load_print_meta: n_expert         = 0
0.00.266.961 I llm_load_print_meta: n_expert_used    = 0
0.00.266.961 I llm_load_print_meta: causal attn      = 1
0.00.266.962 I llm_load_print_meta: pooling type     = 0
0.00.266.962 I llm_load_print_meta: rope type        = 2
0.00.266.963 I llm_load_print_meta: rope scaling     = linear
0.00.266.965 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.965 I llm_load_print_meta: freq_scale_train = 1
0.00.266.965 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.966 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.967 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.967 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.967 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.968 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.968 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.969 I llm_load_print_meta: model type       = 2B
0.00.266.970 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.971 I llm_load_print_meta: model params     = 2.51 B
0.00.266.971 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.972 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.973 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.973 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.973 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.974 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.974 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.975 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.975 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.976 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.976 I llm_load_print_meta: max token length = 93
0.00.367.343 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.367.349 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.367.350 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.367.351 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.367.351 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.367.352 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.372.557 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.564 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.564 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.565 I llama_new_context_with_model: n_batch       = 2048
0.00.372.565 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.565 I llama_new_context_with_model: flash_attn    = 0
0.00.372.568 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.569 I llama_new_context_with_model: freq_scale    = 1
0.00.372.570 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.833 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.846 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.940 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.206 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.212 I llama_new_context_with_model: graph nodes  = 601
0.00.388.212 I llama_new_context_with_model: graph splits = 1
0.00.388.215 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.885 I main: llama threadpool init, n_threads = 4
0.00.472.901 I 
0.00.472.976 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.472.979 I 
0.00.473.022 I sampler seed: 832153004
0.00.473.032 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.040 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.043 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.043 I 
 increasities in the workplace.

**Answer the following questions about the provided text:**

**1. What is the primary concern in the text?**


0.02.715.201 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6384.21 tokens per second)
0.02.715.204 I llama_perf_context_print:        load time =     472.10 ms
0.02.715.205 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.715.206 I llama_perf_context_print:        eval time =    2223.52 ms /    32 runs   (   69.49 ms per token,    14.39 tokens per second)
0.02.715.207 I llama_perf_context_print:       total time =    2242.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.484 I build: 4279 (86a19349) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.678 I main: llama backend init
0.00.000.684 I main: load the model and apply lora adapter, if any
0.00.021.072 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.086 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.096 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.100 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.103 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.104 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.104 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.105 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.106 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.106 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.110 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.110 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.111 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.111 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.112 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.541 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.532 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.419 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.426 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.427 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.428 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.428 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.429 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.430 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.432 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.432 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.434 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.435 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.436 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.439 I llama_model_loader: - type  f32:   37 tensors
0.00.130.440 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.203 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.335 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.939 I llm_load_vocab: special tokens cache size = 5
0.00.267.401 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.415 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.416 I llm_load_print_meta: arch             = gemma
0.00.267.416 I llm_load_print_meta: vocab type       = SPM
0.00.267.417 I llm_load_print_meta: n_vocab          = 256000
0.00.267.417 I llm_load_print_meta: n_merges         = 0
0.00.267.418 I llm_load_print_meta: vocab_only       = 0
0.00.267.418 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.418 I llm_load_print_meta: n_embd           = 2048
0.00.267.419 I llm_load_print_meta: n_layer          = 18
0.00.267.430 I llm_load_print_meta: n_head           = 8
0.00.267.431 I llm_load_print_meta: n_head_kv        = 1
0.00.267.431 I llm_load_print_meta: n_rot            = 256
0.00.267.431 I llm_load_print_meta: n_swa            = 0
0.00.267.432 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.432 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.433 I llm_load_print_meta: n_gqa            = 8
0.00.267.434 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.435 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.436 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.437 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.438 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.438 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.438 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.439 I llm_load_print_meta: n_ff             = 16384
0.00.267.439 I llm_load_print_meta: n_expert         = 0
0.00.267.440 I llm_load_print_meta: n_expert_used    = 0
0.00.267.440 I llm_load_print_meta: causal attn      = 1
0.00.267.440 I llm_load_print_meta: pooling type     = 0
0.00.267.440 I llm_load_print_meta: rope type        = 2
0.00.267.441 I llm_load_print_meta: rope scaling     = linear
0.00.267.442 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.443 I llm_load_print_meta: freq_scale_train = 1
0.00.267.443 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.444 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.444 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.445 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.445 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.445 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.445 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.446 I llm_load_print_meta: model type       = 2B
0.00.267.446 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.447 I llm_load_print_meta: model params     = 2.51 B
0.00.267.448 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.448 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.449 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.449 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.449 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.450 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.450 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.450 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.451 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.451 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.451 I llm_load_print_meta: max token length = 93
0.00.361.751 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.923 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.930 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.930 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.931 I llama_new_context_with_model: n_batch       = 2048
0.00.366.931 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.932 I llama_new_context_with_model: flash_attn    = 0
0.00.366.934 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.935 I llama_new_context_with_model: freq_scale    = 1
0.00.366.936 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.487 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.502 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.587 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.827 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.832 I llama_new_context_with_model: graph nodes  = 601
0.00.382.833 I llama_new_context_with_model: graph splits = 1
0.00.382.836 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.566 I main: llama threadpool init, n_threads = 4
0.00.463.580 I 
0.00.463.650 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.653 I 
0.00.463.695 I sampler seed: 56319725
0.00.463.706 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.720 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.724 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.724 I 
 seconally to the question:

**Discuss the challenges and opportunities associated with implementing a blockchain-based identity management system.**

**Challenges:**

* **Technical

0.02.632.996 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6945.91 tokens per second)
0.02.632.999 I llama_perf_context_print:        load time =     462.87 ms
0.02.633.000 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.633.002 I llama_perf_context_print:        eval time =    2151.02 ms /    32 runs   (   67.22 ms per token,    14.88 tokens per second)
0.02.633.003 I llama_perf_context_print:       total time =    2169.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.538 I build: 4279 (86a19349) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.467 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.478 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.486 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.492 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.496 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.501 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.502 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.503 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.504 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.505 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.506 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.512 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.513 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.515 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.516 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.517 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.084 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.206 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.088 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.094 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.094 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.095 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.096 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.097 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.097 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.099 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.100 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.100 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.101 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.103 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.107 I llama_model_loader: - type  f32:   37 tensors
0.00.131.108 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.234 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.768 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.512 I llm_load_vocab: special tokens cache size = 5
0.00.276.940 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.959 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.960 I llm_load_print_meta: arch             = gemma
0.00.276.960 I llm_load_print_meta: vocab type       = SPM
0.00.276.961 I llm_load_print_meta: n_vocab          = 256000
0.00.276.962 I llm_load_print_meta: n_merges         = 0
0.00.276.962 I llm_load_print_meta: vocab_only       = 0
0.00.276.962 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.963 I llm_load_print_meta: n_embd           = 2048
0.00.276.963 I llm_load_print_meta: n_layer          = 18
0.00.276.975 I llm_load_print_meta: n_head           = 8
0.00.276.976 I llm_load_print_meta: n_head_kv        = 1
0.00.276.977 I llm_load_print_meta: n_rot            = 256
0.00.276.977 I llm_load_print_meta: n_swa            = 0
0.00.276.977 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.977 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.978 I llm_load_print_meta: n_gqa            = 8
0.00.276.979 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.981 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.981 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.983 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.984 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.985 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.985 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.987 I llm_load_print_meta: n_ff             = 16384
0.00.276.988 I llm_load_print_meta: n_expert         = 0
0.00.276.988 I llm_load_print_meta: n_expert_used    = 0
0.00.276.989 I llm_load_print_meta: causal attn      = 1
0.00.276.989 I llm_load_print_meta: pooling type     = 0
0.00.276.990 I llm_load_print_meta: rope type        = 2
0.00.276.990 I llm_load_print_meta: rope scaling     = linear
0.00.276.992 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.993 I llm_load_print_meta: freq_scale_train = 1
0.00.276.993 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.994 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.994 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.995 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.995 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.996 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.996 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.997 I llm_load_print_meta: model type       = 2B
0.00.276.998 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.999 I llm_load_print_meta: model params     = 2.51 B
0.00.277.000 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.001 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.002 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.002 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.003 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.003 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.004 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.008 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.009 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.009 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.010 I llm_load_print_meta: max token length = 93
0.00.353.126 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.353.133 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.133 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.353.134 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.353.135 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.135 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.358.589 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.596 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.596 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.597 I llama_new_context_with_model: n_batch       = 2048
0.00.358.597 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.598 I llama_new_context_with_model: flash_attn    = 0
0.00.358.600 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.601 I llama_new_context_with_model: freq_scale    = 1
0.00.358.602 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.097 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.111 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.218 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.532 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.538 I llama_new_context_with_model: graph nodes  = 601
0.00.374.538 I llama_new_context_with_model: graph splits = 1
0.00.374.540 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.803 I main: llama threadpool init, n_threads = 4
0.00.461.817 I 
0.00.461.904 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.908 I 
0.00.461.958 I sampler seed: 1551001069
0.00.461.969 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.979 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.983 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.983 I 
 increasities and their potential consequences.

**Answer:**

**Introduction:**

The intersection of narcissistic personality disorder (NPD) and delusional belief systems can lead to

0.02.724.175 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7076.99 tokens per second)
0.02.724.178 I llama_perf_context_print:        load time =     461.03 ms
0.02.724.179 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.724.181 I llama_perf_context_print:        eval time =    2243.92 ms /    32 runs   (   70.12 ms per token,    14.26 tokens per second)
0.02.724.181 I llama_perf_context_print:       total time =    2262.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.551 I build: 4279 (86a19349) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.000.752 I main: load the model and apply lora adapter, if any
0.00.021.483 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.495 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.502 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.508 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.510 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.514 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.515 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.515 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.516 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.516 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.517 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.521 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.522 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.522 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.523 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.524 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.938 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.845 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.691 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.697 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.698 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.698 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.699 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.700 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.700 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.703 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.703 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.704 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.705 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.706 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.709 I llama_model_loader: - type  f32:   37 tensors
0.00.131.710 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.673 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.886 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.426 I llm_load_vocab: special tokens cache size = 5
0.00.266.430 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.445 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.446 I llm_load_print_meta: arch             = gemma
0.00.266.446 I llm_load_print_meta: vocab type       = SPM
0.00.266.447 I llm_load_print_meta: n_vocab          = 256000
0.00.266.447 I llm_load_print_meta: n_merges         = 0
0.00.266.448 I llm_load_print_meta: vocab_only       = 0
0.00.266.448 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.448 I llm_load_print_meta: n_embd           = 2048
0.00.266.449 I llm_load_print_meta: n_layer          = 18
0.00.266.461 I llm_load_print_meta: n_head           = 8
0.00.266.462 I llm_load_print_meta: n_head_kv        = 1
0.00.266.462 I llm_load_print_meta: n_rot            = 256
0.00.266.463 I llm_load_print_meta: n_swa            = 0
0.00.266.463 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.463 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.464 I llm_load_print_meta: n_gqa            = 8
0.00.266.465 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.466 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.467 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.468 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.469 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.469 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.469 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.470 I llm_load_print_meta: n_ff             = 16384
0.00.266.470 I llm_load_print_meta: n_expert         = 0
0.00.266.471 I llm_load_print_meta: n_expert_used    = 0
0.00.266.471 I llm_load_print_meta: causal attn      = 1
0.00.266.471 I llm_load_print_meta: pooling type     = 0
0.00.266.471 I llm_load_print_meta: rope type        = 2
0.00.266.472 I llm_load_print_meta: rope scaling     = linear
0.00.266.473 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.474 I llm_load_print_meta: freq_scale_train = 1
0.00.266.474 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.475 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.475 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.475 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.476 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.476 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.476 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.477 I llm_load_print_meta: model type       = 2B
0.00.266.477 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.478 I llm_load_print_meta: model params     = 2.51 B
0.00.266.479 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.479 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.480 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.480 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.480 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.481 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.481 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.481 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.482 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.482 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.482 I llm_load_print_meta: max token length = 93
0.00.337.668 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.676 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.768 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.774 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.775 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.775 I llama_new_context_with_model: n_batch       = 2048
0.00.342.776 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.776 I llama_new_context_with_model: flash_attn    = 0
0.00.342.778 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.779 I llama_new_context_with_model: freq_scale    = 1
0.00.342.781 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.915 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.929 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.021 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.283 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.290 I llama_new_context_with_model: graph nodes  = 601
0.00.358.290 I llama_new_context_with_model: graph splits = 1
0.00.358.292 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.911 I main: llama threadpool init, n_threads = 4
0.00.446.926 I 
0.00.447.001 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.447.004 I 
0.00.447.051 I sampler seed: 3704527486
0.00.447.062 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.074 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.078 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.078 I 
 increasements, and other types of figurative language can effectively convey meaning and evoke emotion in writing.

**True or False?**

The use of figurative language

0.02.852.091 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6697.79 tokens per second)
0.02.852.094 I llama_perf_context_print:        load time =     446.14 ms
0.02.852.095 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.852.096 I llama_perf_context_print:        eval time =    2385.54 ms /    32 runs   (   74.55 ms per token,    13.41 tokens per second)
0.02.852.096 I llama_perf_context_print:       total time =    2405.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.415s
user	0m39.199s
sys	0m9.359s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4279 (86a19349)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40187.38 ms
main:    total time = 40187.38 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.557 I build: 4279 (86a19349) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.000.794 I main: load the model and apply lora adapter, if any
0.00.021.323 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.334 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.343 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.348 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.349 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.353 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.354 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.355 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.356 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.357 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.357 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.362 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.363 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.365 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.367 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.368 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.525 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.864 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.725 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.731 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.731 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.732 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.733 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.733 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.734 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.736 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.736 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.737 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.737 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.738 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.741 I llama_model_loader: - type  f32:   37 tensors
0.00.130.743 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.743 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.419 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.134 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.671 I llm_load_vocab: special tokens cache size = 5
0.00.261.648 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.665 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.665 I llm_load_print_meta: arch             = gemma
0.00.261.666 I llm_load_print_meta: vocab type       = SPM
0.00.261.666 I llm_load_print_meta: n_vocab          = 256000
0.00.261.667 I llm_load_print_meta: n_merges         = 0
0.00.261.667 I llm_load_print_meta: vocab_only       = 0
0.00.261.667 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.668 I llm_load_print_meta: n_embd           = 2048
0.00.261.668 I llm_load_print_meta: n_layer          = 18
0.00.261.679 I llm_load_print_meta: n_head           = 8
0.00.261.680 I llm_load_print_meta: n_head_kv        = 1
0.00.261.680 I llm_load_print_meta: n_rot            = 256
0.00.261.680 I llm_load_print_meta: n_swa            = 0
0.00.261.681 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.682 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.683 I llm_load_print_meta: n_gqa            = 8
0.00.261.684 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.685 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.686 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.687 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.689 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.689 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.690 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.691 I llm_load_print_meta: n_ff             = 16384
0.00.261.691 I llm_load_print_meta: n_expert         = 0
0.00.261.691 I llm_load_print_meta: n_expert_used    = 0
0.00.261.692 I llm_load_print_meta: causal attn      = 1
0.00.261.692 I llm_load_print_meta: pooling type     = 0
0.00.261.692 I llm_load_print_meta: rope type        = 2
0.00.261.693 I llm_load_print_meta: rope scaling     = linear
0.00.261.694 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.695 I llm_load_print_meta: freq_scale_train = 1
0.00.261.695 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.696 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.697 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.697 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.697 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.697 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.697 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.698 I llm_load_print_meta: model type       = 2B
0.00.261.699 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.700 I llm_load_print_meta: model params     = 2.51 B
0.00.261.700 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.701 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.701 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.702 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.703 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.703 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.703 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.703 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.704 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.705 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.705 I llm_load_print_meta: max token length = 93
0.00.321.991 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.997 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.998 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.999 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.999 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.322.000 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.327.268 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.275 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.275 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.276 I llama_new_context_with_model: n_batch       = 2048
0.00.327.276 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.277 I llama_new_context_with_model: flash_attn    = 0
0.00.327.279 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.279 I llama_new_context_with_model: freq_scale    = 1
0.00.327.281 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.703 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.716 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.811 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.068 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.075 I llama_new_context_with_model: graph nodes  = 601
0.00.343.075 I llama_new_context_with_model: graph splits = 1
0.00.343.078 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.720 I main: llama threadpool init, n_threads = 4
0.00.417.735 I 
0.00.417.821 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.417.826 I 
0.00.417.881 I sampler seed: 706278146
0.00.417.892 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.906 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.910 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.911 I 
 increamically in the presence of a hungry predator. [end of text]


0.00.965.756 I llama_perf_sampler_print:    sampling time =       1.69 ms /    12 runs   (    0.14 ms per token,  7088.01 tokens per second)
0.00.965.760 I llama_perf_context_print:        load time =     416.91 ms
0.00.965.761 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.965.763 I llama_perf_context_print:        eval time =     541.05 ms /    11 runs   (   49.19 ms per token,    20.33 tokens per second)
0.00.965.764 I llama_perf_context_print:       total time =     548.05 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4279 (86a19349)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40164.28 ms
main:    total time = 40164.28 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.533 I build: 4279 (86a19349) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.179 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.194 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.202 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.206 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.211 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.211 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.212 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.213 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.213 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.214 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.217 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.217 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.218 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.219 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.219 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.921 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.316 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.335 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.341 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.341 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.342 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.343 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.343 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.344 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.346 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.346 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.350 I llama_model_loader: - type  f32:   37 tensors
0.00.131.351 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.351 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.065 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.605 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.118 I llm_load_vocab: special tokens cache size = 5
0.00.261.146 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.163 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.163 I llm_load_print_meta: arch             = gemma
0.00.261.164 I llm_load_print_meta: vocab type       = SPM
0.00.261.164 I llm_load_print_meta: n_vocab          = 256000
0.00.261.164 I llm_load_print_meta: n_merges         = 0
0.00.261.165 I llm_load_print_meta: vocab_only       = 0
0.00.261.165 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.165 I llm_load_print_meta: n_embd           = 2048
0.00.261.166 I llm_load_print_meta: n_layer          = 18
0.00.261.176 I llm_load_print_meta: n_head           = 8
0.00.261.177 I llm_load_print_meta: n_head_kv        = 1
0.00.261.177 I llm_load_print_meta: n_rot            = 256
0.00.261.177 I llm_load_print_meta: n_swa            = 0
0.00.261.178 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.178 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.179 I llm_load_print_meta: n_gqa            = 8
0.00.261.180 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.181 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.182 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.183 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.183 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.184 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.184 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.185 I llm_load_print_meta: n_ff             = 16384
0.00.261.185 I llm_load_print_meta: n_expert         = 0
0.00.261.185 I llm_load_print_meta: n_expert_used    = 0
0.00.261.186 I llm_load_print_meta: causal attn      = 1
0.00.261.186 I llm_load_print_meta: pooling type     = 0
0.00.261.186 I llm_load_print_meta: rope type        = 2
0.00.261.187 I llm_load_print_meta: rope scaling     = linear
0.00.261.188 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.188 I llm_load_print_meta: freq_scale_train = 1
0.00.261.189 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.189 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.189 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.190 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.190 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.190 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.190 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.191 I llm_load_print_meta: model type       = 2B
0.00.261.191 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.192 I llm_load_print_meta: model params     = 2.51 B
0.00.261.193 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.193 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.194 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.194 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.194 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.195 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.195 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.195 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.196 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.196 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.197 I llm_load_print_meta: max token length = 93
0.00.319.465 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.324.502 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.507 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.508 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.508 I llama_new_context_with_model: n_batch       = 2048
0.00.324.509 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.509 I llama_new_context_with_model: flash_attn    = 0
0.00.324.511 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.512 I llama_new_context_with_model: freq_scale    = 1
0.00.324.513 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.885 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.338.898 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.338.992 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.185 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.191 I llama_new_context_with_model: graph nodes  = 601
0.00.340.192 I llama_new_context_with_model: graph splits = 1
0.00.340.194 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.603 I main: llama threadpool init, n_threads = 4
0.00.413.620 I 
0.00.413.692 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.413.695 I 
0.00.413.735 I sampler seed: 2337194956
0.00.413.747 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.759 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.763 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.763 I 
 encompating the capabilities of the following technologies:

**1. Blockchain:** Securely stores and verifies data in a distributed ledger, eliminating the need for intermediaries.

0.01.980.271 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6537.24 tokens per second)
0.01.980.273 I llama_perf_context_print:        load time =     412.85 ms
0.01.980.275 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.980.277 I llama_perf_context_print:        eval time =    1548.22 ms /    32 runs   (   48.38 ms per token,    20.67 tokens per second)
0.01.980.278 I llama_perf_context_print:       total time =    1566.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.050s
user	10m19.705s
sys	0m6.835s
