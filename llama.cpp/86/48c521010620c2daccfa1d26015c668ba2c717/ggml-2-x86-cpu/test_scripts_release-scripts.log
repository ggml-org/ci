+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.602 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.806 I main: llama backend init
0.00.000.813 I main: load the model and apply lora adapter, if any
0.00.021.141 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.153 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.161 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.166 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.167 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.171 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.172 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.173 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.173 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.174 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.174 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.179 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.179 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.180 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.181 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.182 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.395 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.762 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.624 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.631 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.631 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.632 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.633 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.634 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.634 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.637 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.637 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.638 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.639 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.640 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.644 I llama_model_loader: - type  f32:   37 tensors
0.00.132.645 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.462 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.369 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.958 I llm_load_vocab: special tokens cache size = 5
0.00.281.820 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.837 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.838 I llm_load_print_meta: arch             = gemma
0.00.281.839 I llm_load_print_meta: vocab type       = SPM
0.00.281.840 I llm_load_print_meta: n_vocab          = 256000
0.00.281.840 I llm_load_print_meta: n_merges         = 0
0.00.281.840 I llm_load_print_meta: vocab_only       = 0
0.00.281.841 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.841 I llm_load_print_meta: n_embd           = 2048
0.00.281.841 I llm_load_print_meta: n_layer          = 18
0.00.281.853 I llm_load_print_meta: n_head           = 8
0.00.281.853 I llm_load_print_meta: n_head_kv        = 1
0.00.281.854 I llm_load_print_meta: n_rot            = 256
0.00.281.854 I llm_load_print_meta: n_swa            = 0
0.00.281.854 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.855 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.855 I llm_load_print_meta: n_gqa            = 8
0.00.281.856 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.857 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.858 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.860 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.860 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.860 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.861 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.862 I llm_load_print_meta: n_ff             = 16384
0.00.281.862 I llm_load_print_meta: n_expert         = 0
0.00.281.862 I llm_load_print_meta: n_expert_used    = 0
0.00.281.862 I llm_load_print_meta: causal attn      = 1
0.00.281.862 I llm_load_print_meta: pooling type     = 0
0.00.281.863 I llm_load_print_meta: rope type        = 2
0.00.281.863 I llm_load_print_meta: rope scaling     = linear
0.00.281.865 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.865 I llm_load_print_meta: freq_scale_train = 1
0.00.281.866 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.866 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.866 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.867 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.868 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.868 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.868 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.869 I llm_load_print_meta: model type       = 2B
0.00.281.869 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.870 I llm_load_print_meta: model params     = 2.51 B
0.00.281.871 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.871 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.872 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.872 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.872 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.873 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.873 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.874 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.874 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.875 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.875 I llm_load_print_meta: max token length = 93
0.00.382.382 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.382.391 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.382.391 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.382.392 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.382.393 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.382.393 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.387.595 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.602 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.602 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.603 I llama_new_context_with_model: n_batch       = 2048
0.00.387.603 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.604 I llama_new_context_with_model: flash_attn    = 0
0.00.387.607 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.608 I llama_new_context_with_model: freq_scale    = 1
0.00.387.609 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.708 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.723 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.814 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.092 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.095 I llama_new_context_with_model: graph nodes  = 601
0.00.404.096 I llama_new_context_with_model: graph splits = 1
0.00.404.098 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.490.406 I main: llama threadpool init, n_threads = 4
0.00.490.422 I 
0.00.490.495 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.490.498 I 
0.00.490.547 I sampler seed: 2512837084
0.00.490.559 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.490.574 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.490.577 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.490.577 I 
 increamically.

**Explanation:**

The provided text contains a misspelling of the word "increasively". The correct spelling is "increasingly". [end of text]


0.02.787.330 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6849.32 tokens per second)
0.02.787.332 I llama_perf_context_print:        load time =     489.57 ms
0.02.787.333 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.787.334 I llama_perf_context_print:        eval time =    2277.93 ms /    32 runs   (   71.19 ms per token,    14.05 tokens per second)
0.02.787.335 I llama_perf_context_print:       total time =    2296.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.189 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.388 I main: llama backend init
0.00.000.395 I main: load the model and apply lora adapter, if any
0.00.020.609 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.621 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.632 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.633 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.638 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.639 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.640 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.640 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.640 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.641 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.646 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.647 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.648 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.649 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.649 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.626 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.694 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.594 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.601 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.602 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.603 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.603 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.604 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.605 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.608 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.608 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.610 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.610 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.611 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.615 I llama_model_loader: - type  f32:   37 tensors
0.00.131.616 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.028 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.305 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.914 I llm_load_vocab: special tokens cache size = 5
0.00.279.950 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.968 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.968 I llm_load_print_meta: arch             = gemma
0.00.279.969 I llm_load_print_meta: vocab type       = SPM
0.00.279.970 I llm_load_print_meta: n_vocab          = 256000
0.00.279.971 I llm_load_print_meta: n_merges         = 0
0.00.279.971 I llm_load_print_meta: vocab_only       = 0
0.00.279.971 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.972 I llm_load_print_meta: n_embd           = 2048
0.00.279.972 I llm_load_print_meta: n_layer          = 18
0.00.279.983 I llm_load_print_meta: n_head           = 8
0.00.279.984 I llm_load_print_meta: n_head_kv        = 1
0.00.279.985 I llm_load_print_meta: n_rot            = 256
0.00.279.985 I llm_load_print_meta: n_swa            = 0
0.00.279.985 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.985 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.986 I llm_load_print_meta: n_gqa            = 8
0.00.279.987 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.988 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.989 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.991 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.991 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.991 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.992 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.993 I llm_load_print_meta: n_ff             = 16384
0.00.279.993 I llm_load_print_meta: n_expert         = 0
0.00.279.993 I llm_load_print_meta: n_expert_used    = 0
0.00.279.993 I llm_load_print_meta: causal attn      = 1
0.00.279.994 I llm_load_print_meta: pooling type     = 0
0.00.279.994 I llm_load_print_meta: rope type        = 2
0.00.279.994 I llm_load_print_meta: rope scaling     = linear
0.00.279.996 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.996 I llm_load_print_meta: freq_scale_train = 1
0.00.279.996 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.997 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.997 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.998 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.998 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.998 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.998 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.999 I llm_load_print_meta: model type       = 2B
0.00.279.999 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.000 I llm_load_print_meta: model params     = 2.51 B
0.00.280.001 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.001 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.002 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.002 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.002 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.002 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.003 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.003 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.004 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.004 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.005 I llm_load_print_meta: max token length = 93
0.00.375.478 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.380.616 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.622 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.622 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.623 I llama_new_context_with_model: n_batch       = 2048
0.00.380.623 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.624 I llama_new_context_with_model: flash_attn    = 0
0.00.380.627 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.628 I llama_new_context_with_model: freq_scale    = 1
0.00.380.629 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.395.827 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.841 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.942 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.253 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.259 I llama_new_context_with_model: graph nodes  = 601
0.00.397.259 I llama_new_context_with_model: graph splits = 1
0.00.397.261 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.385 I main: llama threadpool init, n_threads = 4
0.00.481.399 I 
0.00.481.474 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.481.477 I 
0.00.481.521 I sampler seed: 3567239941
0.00.481.532 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.544 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.547 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.548 I 
 maneuvring.

The provided text contains a misspelling. The correct spelling is "unraveling".

**Unraveling the Mysteries of Time**

0.02.715.166 I llama_perf_sampler_print:    sampling time =       4.74 ms /    33 runs   (    0.14 ms per token,  6957.62 tokens per second)
0.02.715.169 I llama_perf_context_print:        load time =     480.97 ms
0.02.715.170 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.715.171 I llama_perf_context_print:        eval time =    2214.76 ms /    32 runs   (   69.21 ms per token,    14.45 tokens per second)
0.02.715.172 I llama_perf_context_print:       total time =    2233.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.536 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.021.258 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.268 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.275 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.284 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.287 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.291 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.292 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.292 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.293 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.293 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.294 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.298 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.299 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.300 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.301 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.301 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.071 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.709 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.621 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.628 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.630 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.630 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.631 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.632 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.633 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.636 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.637 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.637 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.638 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.639 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.643 I llama_model_loader: - type  f32:   37 tensors
0.00.132.644 I llama_model_loader: - type q8_0:  127 tensors
0.00.223.152 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.277.071 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.277.735 I llm_load_vocab: special tokens cache size = 5
0.00.298.922 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.298.943 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.298.944 I llm_load_print_meta: arch             = gemma
0.00.298.945 I llm_load_print_meta: vocab type       = SPM
0.00.298.946 I llm_load_print_meta: n_vocab          = 256000
0.00.298.946 I llm_load_print_meta: n_merges         = 0
0.00.298.947 I llm_load_print_meta: vocab_only       = 0
0.00.298.947 I llm_load_print_meta: n_ctx_train      = 8192
0.00.298.948 I llm_load_print_meta: n_embd           = 2048
0.00.298.949 I llm_load_print_meta: n_layer          = 18
0.00.298.962 I llm_load_print_meta: n_head           = 8
0.00.298.963 I llm_load_print_meta: n_head_kv        = 1
0.00.298.964 I llm_load_print_meta: n_rot            = 256
0.00.298.964 I llm_load_print_meta: n_swa            = 0
0.00.298.965 I llm_load_print_meta: n_embd_head_k    = 256
0.00.298.965 I llm_load_print_meta: n_embd_head_v    = 256
0.00.298.967 I llm_load_print_meta: n_gqa            = 8
0.00.298.968 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.298.970 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.298.971 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.298.973 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.298.974 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.298.974 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.298.975 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.298.977 I llm_load_print_meta: n_ff             = 16384
0.00.298.977 I llm_load_print_meta: n_expert         = 0
0.00.298.978 I llm_load_print_meta: n_expert_used    = 0
0.00.298.979 I llm_load_print_meta: causal attn      = 1
0.00.298.979 I llm_load_print_meta: pooling type     = 0
0.00.298.980 I llm_load_print_meta: rope type        = 2
0.00.298.985 I llm_load_print_meta: rope scaling     = linear
0.00.298.986 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.298.987 I llm_load_print_meta: freq_scale_train = 1
0.00.298.988 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.298.989 I llm_load_print_meta: rope_finetuned   = unknown
0.00.298.989 I llm_load_print_meta: ssm_d_conv       = 0
0.00.298.990 I llm_load_print_meta: ssm_d_inner      = 0
0.00.298.991 I llm_load_print_meta: ssm_d_state      = 0
0.00.298.991 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.298.991 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.298.992 I llm_load_print_meta: model type       = 2B
0.00.298.993 I llm_load_print_meta: model ftype      = Q8_0
0.00.298.994 I llm_load_print_meta: model params     = 2.51 B
0.00.298.996 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.298.996 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.298.997 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.298.997 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.298.998 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.298.998 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.298.999 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.299.000 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.299.000 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.299.001 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.299.002 I llm_load_print_meta: max token length = 93
0.00.374.678 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.374.684 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.374.685 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.374.686 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.374.687 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.374.688 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.379.972 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.978 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.978 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.978 I llama_new_context_with_model: n_batch       = 2048
0.00.379.979 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.979 I llama_new_context_with_model: flash_attn    = 0
0.00.379.982 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.982 I llama_new_context_with_model: freq_scale    = 1
0.00.379.983 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.359 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.373 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.462 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.788 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.795 I llama_new_context_with_model: graph nodes  = 601
0.00.395.796 I llama_new_context_with_model: graph splits = 1
0.00.395.797 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.132 I main: llama threadpool init, n_threads = 4
0.00.486.150 I 
0.00.486.229 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.486.233 I 
0.00.486.284 I sampler seed: 1646164160
0.00.486.297 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.300 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.301 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.301 I 
 increasities. 

The underlined words are misspelled.

I cannot find ____ information on the website.
The correct spelling is "information".

The correct

0.02.824.277 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7115.14 tokens per second)
0.02.824.280 I llama_perf_context_print:        load time =     485.36 ms
0.02.824.282 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.824.284 I llama_perf_context_print:        eval time =    2319.16 ms /    32 runs   (   72.47 ms per token,    13.80 tokens per second)
0.02.824.285 I llama_perf_context_print:       total time =    2338.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.566 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.000.782 I main: load the model and apply lora adapter, if any
0.00.021.367 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.377 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.385 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.391 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.392 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.397 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.398 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.398 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.399 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.400 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.401 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.407 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.408 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.409 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.410 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.412 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.261 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.495 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.427 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.434 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.435 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.436 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.436 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.437 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.438 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.440 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.441 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.442 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.444 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.444 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.448 I llama_model_loader: - type  f32:   37 tensors
0.00.132.450 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.029 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.517 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.216 I llm_load_vocab: special tokens cache size = 5
0.00.286.307 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.327 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.327 I llm_load_print_meta: arch             = gemma
0.00.286.328 I llm_load_print_meta: vocab type       = SPM
0.00.286.329 I llm_load_print_meta: n_vocab          = 256000
0.00.286.329 I llm_load_print_meta: n_merges         = 0
0.00.286.330 I llm_load_print_meta: vocab_only       = 0
0.00.286.330 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.331 I llm_load_print_meta: n_embd           = 2048
0.00.286.331 I llm_load_print_meta: n_layer          = 18
0.00.286.342 I llm_load_print_meta: n_head           = 8
0.00.286.343 I llm_load_print_meta: n_head_kv        = 1
0.00.286.344 I llm_load_print_meta: n_rot            = 256
0.00.286.344 I llm_load_print_meta: n_swa            = 0
0.00.286.344 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.344 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.345 I llm_load_print_meta: n_gqa            = 8
0.00.286.346 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.347 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.348 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.350 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.350 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.350 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.351 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.352 I llm_load_print_meta: n_ff             = 16384
0.00.286.352 I llm_load_print_meta: n_expert         = 0
0.00.286.352 I llm_load_print_meta: n_expert_used    = 0
0.00.286.352 I llm_load_print_meta: causal attn      = 1
0.00.286.353 I llm_load_print_meta: pooling type     = 0
0.00.286.353 I llm_load_print_meta: rope type        = 2
0.00.286.353 I llm_load_print_meta: rope scaling     = linear
0.00.286.355 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.356 I llm_load_print_meta: freq_scale_train = 1
0.00.286.356 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.357 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.357 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.359 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.359 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.360 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.360 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.361 I llm_load_print_meta: model type       = 2B
0.00.286.361 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.363 I llm_load_print_meta: model params     = 2.51 B
0.00.286.364 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.370 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.370 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.371 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.371 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.372 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.372 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.373 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.373 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.374 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.375 I llm_load_print_meta: max token length = 93
0.00.357.417 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.357.424 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.362.962 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.970 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.971 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.971 I llama_new_context_with_model: n_batch       = 2048
0.00.362.972 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.972 I llama_new_context_with_model: flash_attn    = 0
0.00.362.977 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.978 I llama_new_context_with_model: freq_scale    = 1
0.00.362.978 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.198 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.215 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.342 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.683 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.690 I llama_new_context_with_model: graph nodes  = 601
0.00.380.691 I llama_new_context_with_model: graph splits = 1
0.00.380.693 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.935 I main: llama threadpool init, n_threads = 4
0.00.472.951 I 
0.00.473.034 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.473.038 I 
0.00.473.090 I sampler seed: 2019149111
0.00.473.101 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.110 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.114 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.114 I 
 increasities.

I am unable to generate a response that contains sexually suggestive or inappropriate content. [end of text]


0.02.021.090 I llama_perf_sampler_print:    sampling time =       3.19 ms /    21 runs   (    0.15 ms per token,  6585.14 tokens per second)
0.02.021.094 I llama_perf_context_print:        load time =     472.13 ms
0.02.021.095 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.021.097 I llama_perf_context_print:        eval time =    1534.75 ms /    20 runs   (   76.74 ms per token,    13.03 tokens per second)
0.02.021.098 I llama_perf_context_print:       total time =    1548.16 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.174s
user	0m36.694s
sys	0m9.548s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4241 (8648c521)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40282.47 ms
main:    total time = 40282.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.572 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.790 I main: llama backend init
0.00.000.797 I main: load the model and apply lora adapter, if any
0.00.021.378 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.390 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.398 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.407 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.408 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.413 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.416 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.417 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.417 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.418 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.418 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.424 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.425 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.426 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.427 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.427 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.522 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.979 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.960 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.969 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.970 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.971 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.971 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.972 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.973 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.975 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.976 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.977 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.977 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.978 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.983 I llama_model_loader: - type  f32:   37 tensors
0.00.132.984 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.985 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.237 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.264 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.032 I llm_load_vocab: special tokens cache size = 5
0.00.290.138 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.158 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.159 I llm_load_print_meta: arch             = gemma
0.00.290.160 I llm_load_print_meta: vocab type       = SPM
0.00.290.160 I llm_load_print_meta: n_vocab          = 256000
0.00.290.161 I llm_load_print_meta: n_merges         = 0
0.00.290.162 I llm_load_print_meta: vocab_only       = 0
0.00.290.162 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.163 I llm_load_print_meta: n_embd           = 2048
0.00.290.163 I llm_load_print_meta: n_layer          = 18
0.00.290.176 I llm_load_print_meta: n_head           = 8
0.00.290.177 I llm_load_print_meta: n_head_kv        = 1
0.00.290.177 I llm_load_print_meta: n_rot            = 256
0.00.290.178 I llm_load_print_meta: n_swa            = 0
0.00.290.178 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.178 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.179 I llm_load_print_meta: n_gqa            = 8
0.00.290.180 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.181 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.182 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.183 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.184 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.184 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.184 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.185 I llm_load_print_meta: n_ff             = 16384
0.00.290.186 I llm_load_print_meta: n_expert         = 0
0.00.290.186 I llm_load_print_meta: n_expert_used    = 0
0.00.290.186 I llm_load_print_meta: causal attn      = 1
0.00.290.186 I llm_load_print_meta: pooling type     = 0
0.00.290.187 I llm_load_print_meta: rope type        = 2
0.00.290.187 I llm_load_print_meta: rope scaling     = linear
0.00.290.188 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.290.189 I llm_load_print_meta: freq_scale_train = 1
0.00.290.189 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.290.190 I llm_load_print_meta: rope_finetuned   = unknown
0.00.290.190 I llm_load_print_meta: ssm_d_conv       = 0
0.00.290.190 I llm_load_print_meta: ssm_d_inner      = 0
0.00.290.191 I llm_load_print_meta: ssm_d_state      = 0
0.00.290.191 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.290.191 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.290.192 I llm_load_print_meta: model type       = 2B
0.00.290.192 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.290.193 I llm_load_print_meta: model params     = 2.51 B
0.00.290.194 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.290.194 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.290.194 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.290.195 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.290.195 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.290.196 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.290.196 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.290.196 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.290.197 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.290.197 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.290.197 I llm_load_print_meta: max token length = 93
0.00.350.596 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.350.604 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.350.605 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.350.605 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.350.606 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.350.607 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.356.032 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.040 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.041 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.041 I llama_new_context_with_model: n_batch       = 2048
0.00.356.042 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.042 I llama_new_context_with_model: flash_attn    = 0
0.00.356.047 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.048 I llama_new_context_with_model: freq_scale    = 1
0.00.356.049 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.747 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.759 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.852 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.110 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.116 I llama_new_context_with_model: graph nodes  = 601
0.00.373.117 I llama_new_context_with_model: graph splits = 1
0.00.373.119 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.806 I main: llama threadpool init, n_threads = 4
0.00.451.823 I 
0.00.451.903 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.451.907 I 
0.00.451.954 I sampler seed: 3991097516
0.00.451.965 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.978 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.981 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.981 I 
 increamically.

I'm so excited about the trip! We're going to have so much fun.

I can't wait to see you

0.02.137.943 I llama_perf_sampler_print:    sampling time =       5.33 ms /    33 runs   (    0.16 ms per token,  6189.05 tokens per second)
0.02.137.946 I llama_perf_context_print:        load time =     450.99 ms
0.02.137.947 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.137.949 I llama_perf_context_print:        eval time =    1665.89 ms /    32 runs   (   52.06 ms per token,    19.21 tokens per second)
0.02.137.950 I llama_perf_context_print:       total time =    1686.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4241 (8648c521)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40259.54 ms
main:    total time = 40259.54 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.530 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.020.676 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.693 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.700 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.701 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.705 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.705 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.706 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.707 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.707 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.711 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.712 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.712 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.713 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.714 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.735 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.686 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.610 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.617 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.618 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.619 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.620 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.620 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.621 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.625 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.627 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.632 I llama_model_loader: - type  f32:   37 tensors
0.00.131.632 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.633 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.114 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.500 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.069 I llm_load_vocab: special tokens cache size = 5
0.00.278.865 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.884 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.885 I llm_load_print_meta: arch             = gemma
0.00.278.885 I llm_load_print_meta: vocab type       = SPM
0.00.278.886 I llm_load_print_meta: n_vocab          = 256000
0.00.278.887 I llm_load_print_meta: n_merges         = 0
0.00.278.887 I llm_load_print_meta: vocab_only       = 0
0.00.278.887 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.888 I llm_load_print_meta: n_embd           = 2048
0.00.278.888 I llm_load_print_meta: n_layer          = 18
0.00.278.899 I llm_load_print_meta: n_head           = 8
0.00.278.900 I llm_load_print_meta: n_head_kv        = 1
0.00.278.900 I llm_load_print_meta: n_rot            = 256
0.00.278.901 I llm_load_print_meta: n_swa            = 0
0.00.278.901 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.901 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.902 I llm_load_print_meta: n_gqa            = 8
0.00.278.903 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.904 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.905 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.906 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.907 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.907 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.908 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.909 I llm_load_print_meta: n_ff             = 16384
0.00.278.909 I llm_load_print_meta: n_expert         = 0
0.00.278.909 I llm_load_print_meta: n_expert_used    = 0
0.00.278.910 I llm_load_print_meta: causal attn      = 1
0.00.278.910 I llm_load_print_meta: pooling type     = 0
0.00.278.910 I llm_load_print_meta: rope type        = 2
0.00.278.910 I llm_load_print_meta: rope scaling     = linear
0.00.278.911 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.912 I llm_load_print_meta: freq_scale_train = 1
0.00.278.912 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.913 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.913 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.913 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.913 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.914 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.914 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.914 I llm_load_print_meta: model type       = 2B
0.00.278.915 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.278.916 I llm_load_print_meta: model params     = 2.51 B
0.00.278.917 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.278.917 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.917 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.918 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.918 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.918 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.918 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.919 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.919 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.920 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.920 I llm_load_print_meta: max token length = 93
0.00.335.647 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.340.827 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.833 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.834 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.834 I llama_new_context_with_model: n_batch       = 2048
0.00.340.835 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.835 I llama_new_context_with_model: flash_attn    = 0
0.00.340.838 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.839 I llama_new_context_with_model: freq_scale    = 1
0.00.340.840 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.912 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.928 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.022 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.337 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.343 I llama_new_context_with_model: graph nodes  = 601
0.00.357.343 I llama_new_context_with_model: graph splits = 1
0.00.357.345 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.205 I main: llama threadpool init, n_threads = 4
0.00.433.220 I 
0.00.433.302 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.433.307 I 
0.00.433.364 I sampler seed: 3605396360
0.00.433.374 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.386 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.391 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.391 I 
 encompases, but she never had a chance to fulfill her dreams.

**Answer:**
The speaker's words express a sense of regret and longing for

0.02.059.489 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6738.82 tokens per second)
0.02.059.492 I llama_perf_context_print:        load time =     432.44 ms
0.02.059.493 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.059.494 I llama_perf_context_print:        eval time =    1607.11 ms /    32 runs   (   50.22 ms per token,    19.91 tokens per second)
0.02.059.495 I llama_perf_context_print:       total time =    1626.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.661s
user	10m25.012s
sys	0m7.179s
