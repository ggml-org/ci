+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.023.582 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.593 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.683 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.695 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.697 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.703 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.705 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.706 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.707 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.709 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.710 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.735 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.743 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.746 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.747 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.748 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.723 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.662 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.845 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.855 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.857 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.858 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.859 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.861 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.862 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.866 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.868 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.869 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.870 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.872 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.880 I llama_model_loader: - type  f32:   37 tensors
0.00.351.883 I llama_model_loader: - type q8_0:  127 tensors
0.00.633.489 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.770.365 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.771.357 I llm_load_vocab: special tokens cache size = 5
0.00.976.494 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.976.572 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.976.573 I llm_load_print_meta: arch             = gemma
0.00.976.573 I llm_load_print_meta: vocab type       = SPM
0.00.976.574 I llm_load_print_meta: n_vocab          = 256000
0.00.976.577 I llm_load_print_meta: n_merges         = 0
0.00.976.577 I llm_load_print_meta: vocab_only       = 0
0.00.976.578 I llm_load_print_meta: n_ctx_train      = 8192
0.00.976.578 I llm_load_print_meta: n_embd           = 2048
0.00.976.578 I llm_load_print_meta: n_layer          = 18
0.00.976.644 I llm_load_print_meta: n_head           = 8
0.00.976.653 I llm_load_print_meta: n_head_kv        = 1
0.00.976.654 I llm_load_print_meta: n_rot            = 256
0.00.976.655 I llm_load_print_meta: n_swa            = 0
0.00.976.659 I llm_load_print_meta: n_embd_head_k    = 256
0.00.976.659 I llm_load_print_meta: n_embd_head_v    = 256
0.00.976.664 I llm_load_print_meta: n_gqa            = 8
0.00.976.676 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.976.682 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.976.685 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.976.686 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.976.686 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.976.687 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.976.688 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.976.693 I llm_load_print_meta: n_ff             = 16384
0.00.976.693 I llm_load_print_meta: n_expert         = 0
0.00.976.694 I llm_load_print_meta: n_expert_used    = 0
0.00.976.694 I llm_load_print_meta: causal attn      = 1
0.00.976.694 I llm_load_print_meta: pooling type     = 0
0.00.976.695 I llm_load_print_meta: rope type        = 2
0.00.976.695 I llm_load_print_meta: rope scaling     = linear
0.00.976.696 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.976.697 I llm_load_print_meta: freq_scale_train = 1
0.00.976.701 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.976.701 I llm_load_print_meta: rope_finetuned   = unknown
0.00.976.702 I llm_load_print_meta: ssm_d_conv       = 0
0.00.976.702 I llm_load_print_meta: ssm_d_inner      = 0
0.00.976.702 I llm_load_print_meta: ssm_d_state      = 0
0.00.976.703 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.976.703 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.976.704 I llm_load_print_meta: model type       = 2B
0.00.976.704 I llm_load_print_meta: model ftype      = Q8_0
0.00.976.705 I llm_load_print_meta: model params     = 2.51 B
0.00.976.714 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.976.715 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.976.716 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.976.716 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.976.717 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.976.718 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.976.718 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.976.719 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.976.726 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.976.727 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.976.728 I llm_load_print_meta: max token length = 93
0.01.077.921 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.077.934 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.077.934 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.077.935 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.077.936 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.077.937 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.083.806 I llama_new_context_with_model: n_seq_max     = 1
0.01.083.812 I llama_new_context_with_model: n_ctx         = 4096
0.01.083.813 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.083.813 I llama_new_context_with_model: n_batch       = 2048
0.01.083.814 I llama_new_context_with_model: n_ubatch      = 512
0.01.083.814 I llama_new_context_with_model: flash_attn    = 0
0.01.083.818 I llama_new_context_with_model: freq_base     = 10000.0
0.01.083.819 I llama_new_context_with_model: freq_scale    = 1
0.01.083.820 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.098.397 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.098.438 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.098.566 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.101.137 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.101.141 I llama_new_context_with_model: graph nodes  = 601
0.01.101.141 I llama_new_context_with_model: graph splits = 1
0.01.101.165 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.710.350 I main: llama threadpool init, n_threads = 4
0.01.710.369 I 
0.01.710.492 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.710.495 I 
0.01.710.732 I sampler seed: 3990124887
0.01.710.745 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.710.757 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.710.758 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.710.758 I 
 increasities in the ancient world.

**Answer:**

**Ancient civilizations displayed remarkable curiosity and ingenuity in their practices and beliefs. While some rituals and practices may

0.15.352.881 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.37 tokens per second)
0.15.352.885 I llama_perf_context_print:        load time =    1709.40 ms
0.15.352.887 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.352.889 I llama_perf_context_print:        eval time =   13553.01 ms /    32 runs   (  423.53 ms per token,     2.36 tokens per second)
0.15.352.890 I llama_perf_context_print:       total time =   13642.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.000.866 I main: load the model and apply lora adapter, if any
0.00.023.519 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.616 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.631 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.636 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.642 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.644 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.646 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.647 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.648 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.649 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.656 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.657 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.658 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.660 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.663 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.576 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.072 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.271 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.280 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.281 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.282 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.283 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.285 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.286 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.291 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.292 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.294 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.295 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.351.297 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.306 I llama_model_loader: - type  f32:   37 tensors
0.00.351.309 I llama_model_loader: - type q8_0:  127 tensors
0.00.613.988 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.742.270 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.743.287 I llm_load_vocab: special tokens cache size = 5
0.00.937.074 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.937.150 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.937.151 I llm_load_print_meta: arch             = gemma
0.00.937.152 I llm_load_print_meta: vocab type       = SPM
0.00.937.152 I llm_load_print_meta: n_vocab          = 256000
0.00.937.155 I llm_load_print_meta: n_merges         = 0
0.00.937.155 I llm_load_print_meta: vocab_only       = 0
0.00.937.156 I llm_load_print_meta: n_ctx_train      = 8192
0.00.937.156 I llm_load_print_meta: n_embd           = 2048
0.00.937.157 I llm_load_print_meta: n_layer          = 18
0.00.937.221 I llm_load_print_meta: n_head           = 8
0.00.937.229 I llm_load_print_meta: n_head_kv        = 1
0.00.937.230 I llm_load_print_meta: n_rot            = 256
0.00.937.230 I llm_load_print_meta: n_swa            = 0
0.00.937.230 I llm_load_print_meta: n_embd_head_k    = 256
0.00.937.231 I llm_load_print_meta: n_embd_head_v    = 256
0.00.937.235 I llm_load_print_meta: n_gqa            = 8
0.00.937.240 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.937.246 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.937.249 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.937.250 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.937.251 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.937.252 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.937.265 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.937.284 I llm_load_print_meta: n_ff             = 16384
0.00.937.285 I llm_load_print_meta: n_expert         = 0
0.00.937.285 I llm_load_print_meta: n_expert_used    = 0
0.00.937.286 I llm_load_print_meta: causal attn      = 1
0.00.937.299 I llm_load_print_meta: pooling type     = 0
0.00.937.301 I llm_load_print_meta: rope type        = 2
0.00.937.302 I llm_load_print_meta: rope scaling     = linear
0.00.937.303 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.937.304 I llm_load_print_meta: freq_scale_train = 1
0.00.937.305 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.937.313 I llm_load_print_meta: rope_finetuned   = unknown
0.00.937.321 I llm_load_print_meta: ssm_d_conv       = 0
0.00.937.322 I llm_load_print_meta: ssm_d_inner      = 0
0.00.937.323 I llm_load_print_meta: ssm_d_state      = 0
0.00.937.323 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.937.324 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.937.324 I llm_load_print_meta: model type       = 2B
0.00.937.325 I llm_load_print_meta: model ftype      = Q8_0
0.00.937.326 I llm_load_print_meta: model params     = 2.51 B
0.00.937.335 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.937.336 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.937.336 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.937.337 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.937.337 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.937.338 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.937.339 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.937.340 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.937.346 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.937.348 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.937.348 I llm_load_print_meta: max token length = 93
0.01.033.747 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.039.613 I llama_new_context_with_model: n_seq_max     = 1
0.01.039.620 I llama_new_context_with_model: n_ctx         = 4096
0.01.039.621 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.039.621 I llama_new_context_with_model: n_batch       = 2048
0.01.039.622 I llama_new_context_with_model: n_ubatch      = 512
0.01.039.623 I llama_new_context_with_model: flash_attn    = 0
0.01.039.625 I llama_new_context_with_model: freq_base     = 10000.0
0.01.039.626 I llama_new_context_with_model: freq_scale    = 1
0.01.039.627 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.054.679 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.054.722 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.054.847 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.057.432 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.057.436 I llama_new_context_with_model: graph nodes  = 601
0.01.057.437 I llama_new_context_with_model: graph splits = 1
0.01.057.460 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.666.655 I main: llama threadpool init, n_threads = 4
0.01.666.673 I 
0.01.666.804 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.666.808 I 
0.01.667.048 I sampler seed: 4006103149
0.01.667.061 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.667.073 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.667.074 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.667.074 I 
 increasities in the human body.

**Explanation:**

* **Muscle contraction:** When a muscle contracts, it pulls on the tendons attached to it, causing

0.15.384.430 I llama_perf_sampler_print:    sampling time =      49.94 ms /    33 runs   (    1.51 ms per token,   660.74 tokens per second)
0.15.384.433 I llama_perf_context_print:        load time =    1665.69 ms
0.15.384.434 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.384.436 I llama_perf_context_print:        eval time =   13626.12 ms /    32 runs   (  425.82 ms per token,     2.35 tokens per second)
0.15.384.437 I llama_perf_context_print:       total time =   13717.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.843 I main: load the model and apply lora adapter, if any
0.00.023.698 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.712 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.808 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.823 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.835 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.844 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.846 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.847 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.848 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.850 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.851 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.862 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.864 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.865 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.866 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.867 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.673 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.751 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.867 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.880 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.881 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.882 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.884 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.885 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.887 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.891 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.892 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.894 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.895 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.352.897 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.906 I llama_model_loader: - type  f32:   37 tensors
0.00.352.909 I llama_model_loader: - type q8_0:  127 tensors
0.00.616.320 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.745.545 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.746.674 I llm_load_vocab: special tokens cache size = 5
0.00.933.718 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.933.793 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.933.796 I llm_load_print_meta: arch             = gemma
0.00.933.797 I llm_load_print_meta: vocab type       = SPM
0.00.933.798 I llm_load_print_meta: n_vocab          = 256000
0.00.933.800 I llm_load_print_meta: n_merges         = 0
0.00.933.801 I llm_load_print_meta: vocab_only       = 0
0.00.933.802 I llm_load_print_meta: n_ctx_train      = 8192
0.00.933.802 I llm_load_print_meta: n_embd           = 2048
0.00.933.802 I llm_load_print_meta: n_layer          = 18
0.00.933.869 I llm_load_print_meta: n_head           = 8
0.00.933.879 I llm_load_print_meta: n_head_kv        = 1
0.00.933.879 I llm_load_print_meta: n_rot            = 256
0.00.933.881 I llm_load_print_meta: n_swa            = 0
0.00.933.881 I llm_load_print_meta: n_embd_head_k    = 256
0.00.933.882 I llm_load_print_meta: n_embd_head_v    = 256
0.00.933.886 I llm_load_print_meta: n_gqa            = 8
0.00.933.891 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.933.896 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.933.897 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.933.899 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.933.909 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.933.910 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.933.910 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.933.918 I llm_load_print_meta: n_ff             = 16384
0.00.933.919 I llm_load_print_meta: n_expert         = 0
0.00.933.919 I llm_load_print_meta: n_expert_used    = 0
0.00.933.919 I llm_load_print_meta: causal attn      = 1
0.00.933.930 I llm_load_print_meta: pooling type     = 0
0.00.933.931 I llm_load_print_meta: rope type        = 2
0.00.933.932 I llm_load_print_meta: rope scaling     = linear
0.00.933.933 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.933.934 I llm_load_print_meta: freq_scale_train = 1
0.00.933.934 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.933.935 I llm_load_print_meta: rope_finetuned   = unknown
0.00.933.935 I llm_load_print_meta: ssm_d_conv       = 0
0.00.933.936 I llm_load_print_meta: ssm_d_inner      = 0
0.00.933.936 I llm_load_print_meta: ssm_d_state      = 0
0.00.933.936 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.933.937 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.933.937 I llm_load_print_meta: model type       = 2B
0.00.933.938 I llm_load_print_meta: model ftype      = Q8_0
0.00.933.939 I llm_load_print_meta: model params     = 2.51 B
0.00.933.948 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.933.948 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.933.949 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.933.949 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.933.950 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.933.951 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.933.951 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.933.952 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.933.966 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.933.968 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.933.968 I llm_load_print_meta: max token length = 93
0.01.011.717 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.011.728 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.011.729 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.011.730 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.011.730 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.011.731 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.017.694 I llama_new_context_with_model: n_seq_max     = 1
0.01.017.701 I llama_new_context_with_model: n_ctx         = 4096
0.01.017.701 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.017.701 I llama_new_context_with_model: n_batch       = 2048
0.01.017.702 I llama_new_context_with_model: n_ubatch      = 512
0.01.017.702 I llama_new_context_with_model: flash_attn    = 0
0.01.017.705 I llama_new_context_with_model: freq_base     = 10000.0
0.01.017.706 I llama_new_context_with_model: freq_scale    = 1
0.01.017.707 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.032.593 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.032.635 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.032.768 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.035.304 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.035.308 I llama_new_context_with_model: graph nodes  = 601
0.01.035.308 I llama_new_context_with_model: graph splits = 1
0.01.035.332 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.647.448 I main: llama threadpool init, n_threads = 4
0.01.647.465 I 
0.01.647.591 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.647.595 I 
0.01.647.828 I sampler seed: 1161182808
0.01.647.841 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.647.853 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.647.854 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.647.854 I 
 increably in 2023, surpassing the 200,000 mark.

**Key Trends in 2023:**

0.15.239.994 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.19 tokens per second)
0.15.239.996 I llama_perf_context_print:        load time =    1646.52 ms
0.15.239.998 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.240.018 I llama_perf_context_print:        eval time =   13502.34 ms /    32 runs   (  421.95 ms per token,     2.37 tokens per second)
0.15.240.020 I llama_perf_context_print:       total time =   13592.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.000.893 I main: load the model and apply lora adapter, if any
0.00.023.547 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.558 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.665 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.678 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.681 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.693 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.698 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.701 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.709 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.711 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.713 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.728 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.733 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.736 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.739 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.742 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.547 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.400 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.497 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.506 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.507 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.509 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.510 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.511 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.513 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.517 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.518 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.519 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.542 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.552 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.562 I llama_model_loader: - type  f32:   37 tensors
0.00.351.565 I llama_model_loader: - type q8_0:  127 tensors
0.00.646.954 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.773.351 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.774.313 I llm_load_vocab: special tokens cache size = 5
0.00.977.952 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.978.027 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.978.028 I llm_load_print_meta: arch             = gemma
0.00.978.028 I llm_load_print_meta: vocab type       = SPM
0.00.978.029 I llm_load_print_meta: n_vocab          = 256000
0.00.978.031 I llm_load_print_meta: n_merges         = 0
0.00.978.032 I llm_load_print_meta: vocab_only       = 0
0.00.978.032 I llm_load_print_meta: n_ctx_train      = 8192
0.00.978.033 I llm_load_print_meta: n_embd           = 2048
0.00.978.033 I llm_load_print_meta: n_layer          = 18
0.00.978.096 I llm_load_print_meta: n_head           = 8
0.00.978.103 I llm_load_print_meta: n_head_kv        = 1
0.00.978.104 I llm_load_print_meta: n_rot            = 256
0.00.978.104 I llm_load_print_meta: n_swa            = 0
0.00.978.104 I llm_load_print_meta: n_embd_head_k    = 256
0.00.978.105 I llm_load_print_meta: n_embd_head_v    = 256
0.00.978.110 I llm_load_print_meta: n_gqa            = 8
0.00.978.119 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.978.125 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.978.127 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.978.129 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.978.131 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.978.131 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.978.132 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.978.139 I llm_load_print_meta: n_ff             = 16384
0.00.978.142 I llm_load_print_meta: n_expert         = 0
0.00.978.143 I llm_load_print_meta: n_expert_used    = 0
0.00.978.144 I llm_load_print_meta: causal attn      = 1
0.00.978.144 I llm_load_print_meta: pooling type     = 0
0.00.978.145 I llm_load_print_meta: rope type        = 2
0.00.978.165 I llm_load_print_meta: rope scaling     = linear
0.00.978.167 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.978.169 I llm_load_print_meta: freq_scale_train = 1
0.00.978.170 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.978.170 I llm_load_print_meta: rope_finetuned   = unknown
0.00.978.171 I llm_load_print_meta: ssm_d_conv       = 0
0.00.978.172 I llm_load_print_meta: ssm_d_inner      = 0
0.00.978.173 I llm_load_print_meta: ssm_d_state      = 0
0.00.978.173 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.978.174 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.978.175 I llm_load_print_meta: model type       = 2B
0.00.978.177 I llm_load_print_meta: model ftype      = Q8_0
0.00.978.178 I llm_load_print_meta: model params     = 2.51 B
0.00.978.189 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.978.190 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.978.191 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.978.192 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.978.193 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.978.194 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.978.195 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.978.196 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.978.204 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.978.206 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.978.207 I llm_load_print_meta: max token length = 93
0.01.051.768 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.051.781 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.057.994 I llama_new_context_with_model: n_seq_max     = 1
0.01.058.004 I llama_new_context_with_model: n_ctx         = 4096
0.01.058.004 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.058.005 I llama_new_context_with_model: n_batch       = 2048
0.01.058.005 I llama_new_context_with_model: n_ubatch      = 512
0.01.058.006 I llama_new_context_with_model: flash_attn    = 0
0.01.058.010 I llama_new_context_with_model: freq_base     = 10000.0
0.01.058.011 I llama_new_context_with_model: freq_scale    = 1
0.01.058.012 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.073.777 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.073.821 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.073.950 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.076.596 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.076.600 I llama_new_context_with_model: graph nodes  = 601
0.01.076.601 I llama_new_context_with_model: graph splits = 1
0.01.076.624 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.685.959 I main: llama threadpool init, n_threads = 4
0.01.685.977 I 
0.01.686.123 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.686.127 I 
0.01.686.375 I sampler seed: 2521316567
0.01.686.389 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.686.402 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.686.407 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.686.407 I 
 increasements in the text.

**Original Text:**

The quick brown fox jumps over the lazy dog.


**Revised Text:**

The swift brown fox

0.15.298.874 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.56 tokens per second)
0.15.298.891 I llama_perf_context_print:        load time =    1684.95 ms
0.15.298.892 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.298.894 I llama_perf_context_print:        eval time =   13523.98 ms /    32 runs   (  422.62 ms per token,     2.37 tokens per second)
0.15.298.895 I llama_perf_context_print:       total time =   13612.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m11.763s
user	3m52.389s
sys	0m9.443s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4241 (8648c521)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186695.89 ms
main:    total time = 186695.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.023.343 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.354 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.449 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.461 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.463 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.469 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.470 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.472 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.473 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.474 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.476 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.485 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.487 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.489 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.490 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.491 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.187 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.251 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.412 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.421 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.423 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.424 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.425 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.427 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.428 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.433 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.434 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.435 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.437 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.439 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.448 I llama_model_loader: - type  f32:   37 tensors
0.00.351.450 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.451 I llama_model_loader: - type q6_K:   19 tensors
0.00.633.158 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.761.949 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.762.873 I llm_load_vocab: special tokens cache size = 5
0.00.958.741 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.958.816 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.958.817 I llm_load_print_meta: arch             = gemma
0.00.958.818 I llm_load_print_meta: vocab type       = SPM
0.00.958.819 I llm_load_print_meta: n_vocab          = 256000
0.00.958.821 I llm_load_print_meta: n_merges         = 0
0.00.958.822 I llm_load_print_meta: vocab_only       = 0
0.00.958.822 I llm_load_print_meta: n_ctx_train      = 8192
0.00.958.823 I llm_load_print_meta: n_embd           = 2048
0.00.958.823 I llm_load_print_meta: n_layer          = 18
0.00.958.887 I llm_load_print_meta: n_head           = 8
0.00.958.894 I llm_load_print_meta: n_head_kv        = 1
0.00.958.895 I llm_load_print_meta: n_rot            = 256
0.00.958.895 I llm_load_print_meta: n_swa            = 0
0.00.958.896 I llm_load_print_meta: n_embd_head_k    = 256
0.00.958.896 I llm_load_print_meta: n_embd_head_v    = 256
0.00.958.901 I llm_load_print_meta: n_gqa            = 8
0.00.958.905 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.958.910 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.958.911 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.958.913 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.958.913 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.958.914 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.958.914 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.958.919 I llm_load_print_meta: n_ff             = 16384
0.00.958.919 I llm_load_print_meta: n_expert         = 0
0.00.958.919 I llm_load_print_meta: n_expert_used    = 0
0.00.958.920 I llm_load_print_meta: causal attn      = 1
0.00.958.920 I llm_load_print_meta: pooling type     = 0
0.00.958.922 I llm_load_print_meta: rope type        = 2
0.00.958.922 I llm_load_print_meta: rope scaling     = linear
0.00.958.924 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.958.925 I llm_load_print_meta: freq_scale_train = 1
0.00.958.925 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.958.925 I llm_load_print_meta: rope_finetuned   = unknown
0.00.958.926 I llm_load_print_meta: ssm_d_conv       = 0
0.00.958.926 I llm_load_print_meta: ssm_d_inner      = 0
0.00.958.927 I llm_load_print_meta: ssm_d_state      = 0
0.00.958.932 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.958.933 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.958.934 I llm_load_print_meta: model type       = 2B
0.00.958.934 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.958.935 I llm_load_print_meta: model params     = 2.51 B
0.00.958.945 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.958.946 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.958.947 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.958.947 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.958.948 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.958.949 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.958.950 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.958.951 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.958.957 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.958.958 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.958.959 I llm_load_print_meta: max token length = 93
0.01.022.263 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.022.272 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.022.273 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.022.274 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.022.274 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.022.275 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.028.055 I llama_new_context_with_model: n_seq_max     = 1
0.01.028.063 I llama_new_context_with_model: n_ctx         = 4096
0.01.028.063 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.028.063 I llama_new_context_with_model: n_batch       = 2048
0.01.028.064 I llama_new_context_with_model: n_ubatch      = 512
0.01.028.064 I llama_new_context_with_model: flash_attn    = 0
0.01.028.067 I llama_new_context_with_model: freq_base     = 10000.0
0.01.028.068 I llama_new_context_with_model: freq_scale    = 1
0.01.028.068 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.042.527 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.042.565 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.042.696 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.045.265 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.045.268 I llama_new_context_with_model: graph nodes  = 601
0.01.045.268 I llama_new_context_with_model: graph splits = 1
0.01.045.292 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.631.651 I main: llama threadpool init, n_threads = 4
0.01.631.668 I 
0.01.631.788 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.631.792 I 
0.01.632.026 I sampler seed: 2014517241
0.01.632.039 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.632.051 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.632.051 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.632.052 I 
 maneuvously.

**Explanation:**

The sentence is grammatically incorrect because it contains a spelling and punctuation mistake. The correct spelling is "indulge."

0.12.861.431 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.12 tokens per second)
0.12.861.434 I llama_perf_context_print:        load time =    1630.71 ms
0.12.861.436 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.861.452 I llama_perf_context_print:        eval time =   11140.48 ms /    32 runs   (  348.14 ms per token,     2.87 tokens per second)
0.12.861.453 I llama_perf_context_print:       total time =   11229.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4241 (8648c521)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186647.55 ms
main:    total time = 186647.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 4241 (8648c521) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.000.894 I main: load the model and apply lora adapter, if any
0.00.027.655 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.027.762 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.777 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.779 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.786 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.790 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.792 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.793 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.794 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.795 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.806 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.808 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.809 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.819 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.027.821 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.523 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.537 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.686 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.695 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.697 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.698 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.699 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.701 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.702 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.707 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.708 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.716 I llama_model_loader: - type  f32:   37 tensors
0.00.355.718 I llama_model_loader: - type q4_K:  108 tensors
0.00.355.719 I llama_model_loader: - type q6_K:   19 tensors
0.00.640.468 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.768.204 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.769.207 I llm_load_vocab: special tokens cache size = 5
0.00.972.565 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.972.644 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.972.645 I llm_load_print_meta: arch             = gemma
0.00.972.646 I llm_load_print_meta: vocab type       = SPM
0.00.972.646 I llm_load_print_meta: n_vocab          = 256000
0.00.972.649 I llm_load_print_meta: n_merges         = 0
0.00.972.649 I llm_load_print_meta: vocab_only       = 0
0.00.972.649 I llm_load_print_meta: n_ctx_train      = 8192
0.00.972.650 I llm_load_print_meta: n_embd           = 2048
0.00.972.650 I llm_load_print_meta: n_layer          = 18
0.00.972.715 I llm_load_print_meta: n_head           = 8
0.00.972.723 I llm_load_print_meta: n_head_kv        = 1
0.00.972.723 I llm_load_print_meta: n_rot            = 256
0.00.972.724 I llm_load_print_meta: n_swa            = 0
0.00.972.724 I llm_load_print_meta: n_embd_head_k    = 256
0.00.972.725 I llm_load_print_meta: n_embd_head_v    = 256
0.00.972.729 I llm_load_print_meta: n_gqa            = 8
0.00.972.734 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.972.740 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.972.742 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.972.743 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.972.744 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.972.745 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.972.757 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.972.763 I llm_load_print_meta: n_ff             = 16384
0.00.972.763 I llm_load_print_meta: n_expert         = 0
0.00.972.764 I llm_load_print_meta: n_expert_used    = 0
0.00.972.781 I llm_load_print_meta: causal attn      = 1
0.00.972.782 I llm_load_print_meta: pooling type     = 0
0.00.972.790 I llm_load_print_meta: rope type        = 2
0.00.972.791 I llm_load_print_meta: rope scaling     = linear
0.00.972.793 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.972.794 I llm_load_print_meta: freq_scale_train = 1
0.00.972.794 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.972.802 I llm_load_print_meta: rope_finetuned   = unknown
0.00.972.803 I llm_load_print_meta: ssm_d_conv       = 0
0.00.972.808 I llm_load_print_meta: ssm_d_inner      = 0
0.00.972.808 I llm_load_print_meta: ssm_d_state      = 0
0.00.972.809 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.972.809 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.972.810 I llm_load_print_meta: model type       = 2B
0.00.972.811 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.972.812 I llm_load_print_meta: model params     = 2.51 B
0.00.972.821 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.972.821 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.972.822 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.972.823 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.972.823 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.972.824 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.972.825 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.972.825 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.972.831 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.972.832 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.972.833 I llm_load_print_meta: max token length = 93
0.01.030.109 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.035.875 I llama_new_context_with_model: n_seq_max     = 1
0.01.035.883 I llama_new_context_with_model: n_ctx         = 4096
0.01.035.883 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.035.884 I llama_new_context_with_model: n_batch       = 2048
0.01.035.884 I llama_new_context_with_model: n_ubatch      = 512
0.01.035.885 I llama_new_context_with_model: flash_attn    = 0
0.01.035.888 I llama_new_context_with_model: freq_base     = 10000.0
0.01.035.889 I llama_new_context_with_model: freq_scale    = 1
0.01.035.889 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.051.055 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.051.100 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.051.226 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.053.826 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.053.830 I llama_new_context_with_model: graph nodes  = 601
0.01.053.830 I llama_new_context_with_model: graph splits = 1
0.01.053.855 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.642.669 I main: llama threadpool init, n_threads = 4
0.01.642.687 I 
0.01.642.814 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.642.818 I 
0.01.643.073 I sampler seed: 3962524050
0.01.643.089 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.643.115 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.643.119 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.643.119 I 
 increasities

I am unable to answer this question as it contains sexually suggestive content that is not appropriate for me to discuss. [end of text]


0.10.798.699 I llama_perf_sampler_print:    sampling time =      40.10 ms /    27 runs   (    1.49 ms per token,   673.25 tokens per second)
0.10.798.702 I llama_perf_context_print:        load time =    1641.68 ms
0.10.798.703 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.798.705 I llama_perf_context_print:        eval time =    9082.74 ms /    26 runs   (  349.34 ms per token,     2.86 tokens per second)
0.10.798.706 I llama_perf_context_print:       total time =    9156.04 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.971s
user	46m41.202s
sys	0m6.447s
