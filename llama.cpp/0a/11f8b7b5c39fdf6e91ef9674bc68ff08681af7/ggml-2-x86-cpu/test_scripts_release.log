+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 4368 (0a11f8b7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.020.983 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.993 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.000 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.008 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.012 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.015 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.016 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.017 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.017 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.018 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.019 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.024 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.024 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.025 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.026 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.026 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.742 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.951 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.750 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.756 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.757 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.757 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.758 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.758 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.759 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.761 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.762 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.762 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.763 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.764 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.767 I llama_model_loader: - type  f32:   37 tensors
0.00.131.768 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.728 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.513 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.003 I llm_load_vocab: special tokens cache size = 5
0.00.267.733 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.747 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.748 I llm_load_print_meta: arch             = gemma
0.00.267.748 I llm_load_print_meta: vocab type       = SPM
0.00.267.749 I llm_load_print_meta: n_vocab          = 256000
0.00.267.749 I llm_load_print_meta: n_merges         = 0
0.00.267.750 I llm_load_print_meta: vocab_only       = 0
0.00.267.750 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.750 I llm_load_print_meta: n_embd           = 2048
0.00.267.751 I llm_load_print_meta: n_layer          = 18
0.00.267.761 I llm_load_print_meta: n_head           = 8
0.00.267.762 I llm_load_print_meta: n_head_kv        = 1
0.00.267.763 I llm_load_print_meta: n_rot            = 256
0.00.267.763 I llm_load_print_meta: n_swa            = 0
0.00.267.763 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.764 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.764 I llm_load_print_meta: n_gqa            = 8
0.00.267.765 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.766 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.767 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.768 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.769 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.769 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.769 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.770 I llm_load_print_meta: n_ff             = 16384
0.00.267.770 I llm_load_print_meta: n_expert         = 0
0.00.267.771 I llm_load_print_meta: n_expert_used    = 0
0.00.267.771 I llm_load_print_meta: causal attn      = 1
0.00.267.771 I llm_load_print_meta: pooling type     = 0
0.00.267.772 I llm_load_print_meta: rope type        = 2
0.00.267.772 I llm_load_print_meta: rope scaling     = linear
0.00.267.773 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.774 I llm_load_print_meta: freq_scale_train = 1
0.00.267.774 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.775 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.775 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.775 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.775 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.776 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.776 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.776 I llm_load_print_meta: model type       = 2B
0.00.267.777 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.778 I llm_load_print_meta: model params     = 2.51 B
0.00.267.778 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.779 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.779 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.780 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.780 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.780 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.780 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.781 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.781 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.782 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.782 I llm_load_print_meta: max token length = 93
0.00.368.434 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.440 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.441 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.441 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.442 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.443 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.625 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.631 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.632 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.632 I llama_new_context_with_model: n_batch       = 2048
0.00.373.632 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.633 I llama_new_context_with_model: flash_attn    = 0
0.00.373.636 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.637 I llama_new_context_with_model: freq_scale    = 1
0.00.373.637 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.657 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.387.726 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.738 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.827 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.075 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.081 I llama_new_context_with_model: graph nodes  = 601
0.00.389.081 I llama_new_context_with_model: graph splits = 1
0.00.389.083 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.084 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.472 I main: llama threadpool init, n_threads = 4
0.00.473.487 I 
0.00.473.558 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.561 I 
0.00.473.606 I sampler seed: 2591957439
0.00.473.617 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.630 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.634 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.634 I 
 increasities with the grace and poise of a ballerina.

This is what I hear when I close my eyes and imagine ballerinas dancing in the sun. [end of text]


0.02.721.065 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6924.05 tokens per second)
0.02.721.068 I llama_perf_context_print:        load time =     472.72 ms
0.02.721.069 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.721.071 I llama_perf_context_print:        eval time =    2228.92 ms /    32 runs   (   69.65 ms per token,    14.36 tokens per second)
0.02.721.072 I llama_perf_context_print:       total time =    2247.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.534 I build: 4368 (0a11f8b7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.070 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.087 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.094 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.099 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.105 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.106 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.107 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.109 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.110 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.111 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.116 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.117 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.118 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.122 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.123 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.273 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.844 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.629 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.636 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.637 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.637 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.638 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.639 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.640 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.643 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.644 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.645 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.645 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.647 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.651 I llama_model_loader: - type  f32:   37 tensors
0.00.130.652 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.546 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.986 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.457 I llm_load_vocab: special tokens cache size = 5
0.00.262.497 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.513 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.514 I llm_load_print_meta: arch             = gemma
0.00.262.514 I llm_load_print_meta: vocab type       = SPM
0.00.262.515 I llm_load_print_meta: n_vocab          = 256000
0.00.262.515 I llm_load_print_meta: n_merges         = 0
0.00.262.516 I llm_load_print_meta: vocab_only       = 0
0.00.262.516 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.516 I llm_load_print_meta: n_embd           = 2048
0.00.262.517 I llm_load_print_meta: n_layer          = 18
0.00.262.527 I llm_load_print_meta: n_head           = 8
0.00.262.528 I llm_load_print_meta: n_head_kv        = 1
0.00.262.529 I llm_load_print_meta: n_rot            = 256
0.00.262.529 I llm_load_print_meta: n_swa            = 0
0.00.262.529 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.530 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.530 I llm_load_print_meta: n_gqa            = 8
0.00.262.532 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.532 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.533 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.535 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.535 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.535 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.536 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.537 I llm_load_print_meta: n_ff             = 16384
0.00.262.537 I llm_load_print_meta: n_expert         = 0
0.00.262.538 I llm_load_print_meta: n_expert_used    = 0
0.00.262.538 I llm_load_print_meta: causal attn      = 1
0.00.262.538 I llm_load_print_meta: pooling type     = 0
0.00.262.538 I llm_load_print_meta: rope type        = 2
0.00.262.539 I llm_load_print_meta: rope scaling     = linear
0.00.262.540 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.541 I llm_load_print_meta: freq_scale_train = 1
0.00.262.541 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.541 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.541 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.542 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.542 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.542 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.543 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.543 I llm_load_print_meta: model type       = 2B
0.00.262.544 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.545 I llm_load_print_meta: model params     = 2.51 B
0.00.262.546 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.546 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.547 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.547 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.547 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.547 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.548 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.548 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.548 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.549 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.549 I llm_load_print_meta: max token length = 93
0.00.357.839 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.363.072 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.080 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.080 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.080 I llama_new_context_with_model: n_batch       = 2048
0.00.363.081 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.081 I llama_new_context_with_model: flash_attn    = 0
0.00.363.084 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.085 I llama_new_context_with_model: freq_scale    = 1
0.00.363.086 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.109 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.377.885 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.900 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.997 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.323 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.329 I llama_new_context_with_model: graph nodes  = 601
0.00.379.330 I llama_new_context_with_model: graph splits = 1
0.00.379.332 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.379.333 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.636 I main: llama threadpool init, n_threads = 4
0.00.460.654 I 
0.00.460.740 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.751 I 
0.00.460.804 I sampler seed: 430718645
0.00.460.815 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.826 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.828 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.828 I 
 increasities.

I cannot access the provided text. [end of text]


0.01.279.150 I llama_perf_sampler_print:    sampling time =       1.82 ms /    13 runs   (    0.14 ms per token,  7146.78 tokens per second)
0.01.279.152 I llama_perf_context_print:        load time =     459.87 ms
0.01.279.153 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.279.155 I llama_perf_context_print:        eval time =     810.59 ms /    12 runs   (   67.55 ms per token,    14.80 tokens per second)
0.01.279.155 I llama_perf_context_print:       total time =     818.52 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.169 I build: 4368 (0a11f8b7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.370 I main: load the model and apply lora adapter, if any
0.00.022.080 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.090 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.101 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.109 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.117 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.118 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.119 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.119 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.120 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.124 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.125 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.126 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.127 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.128 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.576 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.109 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.931 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.937 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.938 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.939 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.940 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.941 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.942 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.945 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.946 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.947 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.948 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.134.949 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.953 I llama_model_loader: - type  f32:   37 tensors
0.00.134.954 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.644 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.165 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.776 I llm_load_vocab: special tokens cache size = 5
0.00.273.012 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.031 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.032 I llm_load_print_meta: arch             = gemma
0.00.273.032 I llm_load_print_meta: vocab type       = SPM
0.00.273.033 I llm_load_print_meta: n_vocab          = 256000
0.00.273.033 I llm_load_print_meta: n_merges         = 0
0.00.273.034 I llm_load_print_meta: vocab_only       = 0
0.00.273.034 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.034 I llm_load_print_meta: n_embd           = 2048
0.00.273.035 I llm_load_print_meta: n_layer          = 18
0.00.273.047 I llm_load_print_meta: n_head           = 8
0.00.273.048 I llm_load_print_meta: n_head_kv        = 1
0.00.273.049 I llm_load_print_meta: n_rot            = 256
0.00.273.049 I llm_load_print_meta: n_swa            = 0
0.00.273.049 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.050 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.050 I llm_load_print_meta: n_gqa            = 8
0.00.273.051 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.052 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.053 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.054 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.055 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.055 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.055 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.056 I llm_load_print_meta: n_ff             = 16384
0.00.273.057 I llm_load_print_meta: n_expert         = 0
0.00.273.057 I llm_load_print_meta: n_expert_used    = 0
0.00.273.057 I llm_load_print_meta: causal attn      = 1
0.00.273.058 I llm_load_print_meta: pooling type     = 0
0.00.273.058 I llm_load_print_meta: rope type        = 2
0.00.273.058 I llm_load_print_meta: rope scaling     = linear
0.00.273.060 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.061 I llm_load_print_meta: freq_scale_train = 1
0.00.273.061 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.062 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.062 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.063 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.063 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.063 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.064 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.068 I llm_load_print_meta: model type       = 2B
0.00.273.068 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.069 I llm_load_print_meta: model params     = 2.51 B
0.00.273.070 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.070 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.071 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.071 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.072 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.072 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.073 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.074 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.074 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.075 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.075 I llm_load_print_meta: max token length = 93
0.00.350.692 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.350.698 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.350.699 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.350.700 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.350.700 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.350.701 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.355.781 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.788 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.789 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.790 I llama_new_context_with_model: n_batch       = 2048
0.00.355.790 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.791 I llama_new_context_with_model: flash_attn    = 0
0.00.355.793 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.794 I llama_new_context_with_model: freq_scale    = 1
0.00.355.795 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.818 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.370.733 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.745 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.838 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.079 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.085 I llama_new_context_with_model: graph nodes  = 601
0.00.372.086 I llama_new_context_with_model: graph splits = 1
0.00.372.088 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.372.088 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.434 I main: llama threadpool init, n_threads = 4
0.00.456.450 I 
0.00.456.528 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.531 I 
0.00.456.572 I sampler seed: 2912877922
0.00.456.583 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.595 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.599 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.599 I 
 increasities, the story of a young woman who escapes the clutches of a tyrannical emperor and finds refuge in a mystical forest.

**Themes:**

* Power

0.02.728.398 I llama_perf_sampler_print:    sampling time =       5.34 ms /    33 runs   (    0.16 ms per token,  6176.31 tokens per second)
0.02.728.400 I llama_perf_context_print:        load time =     456.05 ms
0.02.728.402 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.403 I llama_perf_context_print:        eval time =    2252.98 ms /    32 runs   (   70.41 ms per token,    14.20 tokens per second)
0.02.728.404 I llama_perf_context_print:       total time =    2271.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.537 I build: 4368 (0a11f8b7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.333 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.344 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.355 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.360 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.361 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.366 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.367 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.368 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.369 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.369 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.370 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.376 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.377 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.378 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.379 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.380 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.053.289 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.071 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.904 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.910 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.911 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.911 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.912 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.913 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.914 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.916 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.917 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.918 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.919 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.137.920 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.925 I llama_model_loader: - type  f32:   37 tensors
0.00.137.926 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.076 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.344 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.921 I llm_load_vocab: special tokens cache size = 5
0.00.278.634 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.650 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.650 I llm_load_print_meta: arch             = gemma
0.00.278.651 I llm_load_print_meta: vocab type       = SPM
0.00.278.652 I llm_load_print_meta: n_vocab          = 256000
0.00.278.652 I llm_load_print_meta: n_merges         = 0
0.00.278.652 I llm_load_print_meta: vocab_only       = 0
0.00.278.653 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.653 I llm_load_print_meta: n_embd           = 2048
0.00.278.653 I llm_load_print_meta: n_layer          = 18
0.00.278.664 I llm_load_print_meta: n_head           = 8
0.00.278.665 I llm_load_print_meta: n_head_kv        = 1
0.00.278.666 I llm_load_print_meta: n_rot            = 256
0.00.278.666 I llm_load_print_meta: n_swa            = 0
0.00.278.666 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.667 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.667 I llm_load_print_meta: n_gqa            = 8
0.00.278.668 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.669 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.670 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.671 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.671 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.672 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.672 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.673 I llm_load_print_meta: n_ff             = 16384
0.00.278.674 I llm_load_print_meta: n_expert         = 0
0.00.278.674 I llm_load_print_meta: n_expert_used    = 0
0.00.278.674 I llm_load_print_meta: causal attn      = 1
0.00.278.675 I llm_load_print_meta: pooling type     = 0
0.00.278.675 I llm_load_print_meta: rope type        = 2
0.00.278.675 I llm_load_print_meta: rope scaling     = linear
0.00.278.677 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.677 I llm_load_print_meta: freq_scale_train = 1
0.00.278.677 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.678 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.678 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.678 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.679 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.679 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.679 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.680 I llm_load_print_meta: model type       = 2B
0.00.278.680 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.681 I llm_load_print_meta: model params     = 2.51 B
0.00.278.682 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.682 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.683 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.683 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.683 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.683 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.684 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.684 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.685 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.685 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.685 I llm_load_print_meta: max token length = 93
0.00.349.603 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.349.608 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.354.657 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.662 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.662 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.663 I llama_new_context_with_model: n_batch       = 2048
0.00.354.663 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.664 I llama_new_context_with_model: flash_attn    = 0
0.00.354.666 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.667 I llama_new_context_with_model: freq_scale    = 1
0.00.354.668 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.689 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.368.843 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.855 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.943 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.277 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.282 I llama_new_context_with_model: graph nodes  = 601
0.00.370.282 I llama_new_context_with_model: graph splits = 1
0.00.370.284 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.370.285 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.301 I main: llama threadpool init, n_threads = 4
0.00.457.317 I 
0.00.457.402 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.457.406 I 
0.00.457.450 I sampler seed: 3218490794
0.00.457.464 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.477 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.481 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.482 I 
 secon, a young woman of humble beginnings, discovered a hidden talent for singing at a tender age. 

Driven by a yearning for artistic expression, she set

0.02.870.145 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6937.15 tokens per second)
0.02.870.148 I llama_perf_context_print:        load time =     456.54 ms
0.02.870.149 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.870.151 I llama_perf_context_print:        eval time =    2393.61 ms /    32 runs   (   74.80 ms per token,    13.37 tokens per second)
0.02.870.151 I llama_perf_context_print:       total time =    2412.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.254s
user	0m33.840s
sys	0m9.391s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4368 (0a11f8b7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40241.08 ms
main:    total time = 40241.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.570 I build: 4368 (0a11f8b7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.000.778 I main: load the model and apply lora adapter, if any
0.00.021.040 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.048 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.058 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.066 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.070 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.074 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.075 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.077 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.078 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.079 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.079 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.083 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.084 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.084 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.085 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.086 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.134 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.139.063 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.145.896 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.145.903 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.145.903 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.145.904 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.145.905 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.145.905 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.145.906 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.145.909 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.145.909 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.145.910 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.145.911 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.145.912 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.145.915 I llama_model_loader: - type  f32:   37 tensors
0.00.145.919 I llama_model_loader: - type q4_K:  108 tensors
0.00.145.920 I llama_model_loader: - type q6_K:   19 tensors
0.00.220.647 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.668 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.128 I llm_load_vocab: special tokens cache size = 5
0.00.278.868 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.882 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.883 I llm_load_print_meta: arch             = gemma
0.00.278.883 I llm_load_print_meta: vocab type       = SPM
0.00.278.884 I llm_load_print_meta: n_vocab          = 256000
0.00.278.885 I llm_load_print_meta: n_merges         = 0
0.00.278.885 I llm_load_print_meta: vocab_only       = 0
0.00.278.885 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.885 I llm_load_print_meta: n_embd           = 2048
0.00.278.886 I llm_load_print_meta: n_layer          = 18
0.00.278.897 I llm_load_print_meta: n_head           = 8
0.00.278.898 I llm_load_print_meta: n_head_kv        = 1
0.00.278.899 I llm_load_print_meta: n_rot            = 256
0.00.278.899 I llm_load_print_meta: n_swa            = 0
0.00.278.899 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.900 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.900 I llm_load_print_meta: n_gqa            = 8
0.00.278.901 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.902 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.903 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.904 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.905 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.905 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.906 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.907 I llm_load_print_meta: n_ff             = 16384
0.00.278.908 I llm_load_print_meta: n_expert         = 0
0.00.278.908 I llm_load_print_meta: n_expert_used    = 0
0.00.278.908 I llm_load_print_meta: causal attn      = 1
0.00.278.909 I llm_load_print_meta: pooling type     = 0
0.00.278.909 I llm_load_print_meta: rope type        = 2
0.00.278.909 I llm_load_print_meta: rope scaling     = linear
0.00.278.910 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.911 I llm_load_print_meta: freq_scale_train = 1
0.00.278.911 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.912 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.912 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.912 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.913 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.913 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.913 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.914 I llm_load_print_meta: model type       = 2B
0.00.278.914 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.278.915 I llm_load_print_meta: model params     = 2.51 B
0.00.278.916 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.278.916 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.917 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.917 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.917 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.918 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.918 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.918 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.919 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.919 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.920 I llm_load_print_meta: max token length = 93
0.00.338.537 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.338.545 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.338.545 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.338.546 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.338.547 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.338.547 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.343.853 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.861 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.861 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.862 I llama_new_context_with_model: n_batch       = 2048
0.00.343.862 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.863 I llama_new_context_with_model: flash_attn    = 0
0.00.343.866 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.867 I llama_new_context_with_model: freq_scale    = 1
0.00.343.868 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.889 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.358.770 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.783 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.875 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.150 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.156 I llama_new_context_with_model: graph nodes  = 601
0.00.360.156 I llama_new_context_with_model: graph splits = 1
0.00.360.158 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.360.158 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.114 I main: llama threadpool init, n_threads = 4
0.00.436.131 I 
0.00.436.209 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.436.212 I 
0.00.436.256 I sampler seed: 4103111925
0.00.436.267 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.296 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.300 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.301 I 
 seconally to the previous answer.

I'm sorry, but I am unable to provide any information that could potentially facilitate or promote harmful activities. [end of text]


0.01.982.777 I llama_perf_sampler_print:    sampling time =       4.71 ms /    32 runs   (    0.15 ms per token,  6792.61 tokens per second)
0.01.982.780 I llama_perf_context_print:        load time =     435.32 ms
0.01.982.782 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.982.784 I llama_perf_context_print:        eval time =    1528.99 ms /    31 runs   (   49.32 ms per token,    20.27 tokens per second)
0.01.982.785 I llama_perf_context_print:       total time =    1546.67 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4368 (0a11f8b7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40206.52 ms
main:    total time = 40206.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.524 I build: 4368 (0a11f8b7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.715 I main: llama backend init
0.00.000.721 I main: load the model and apply lora adapter, if any
0.00.021.196 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.211 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.221 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.224 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.228 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.229 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.230 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.230 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.231 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.231 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.235 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.235 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.236 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.236 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.237 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.937 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.320 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.143 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.150 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.151 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.151 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.152 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.153 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.153 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.156 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.156 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.159 I llama_model_loader: - type  f32:   37 tensors
0.00.132.159 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.160 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.706 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.046 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.542 I llm_load_vocab: special tokens cache size = 5
0.00.265.156 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.170 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.171 I llm_load_print_meta: arch             = gemma
0.00.265.171 I llm_load_print_meta: vocab type       = SPM
0.00.265.172 I llm_load_print_meta: n_vocab          = 256000
0.00.265.172 I llm_load_print_meta: n_merges         = 0
0.00.265.173 I llm_load_print_meta: vocab_only       = 0
0.00.265.173 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.173 I llm_load_print_meta: n_embd           = 2048
0.00.265.174 I llm_load_print_meta: n_layer          = 18
0.00.265.185 I llm_load_print_meta: n_head           = 8
0.00.265.186 I llm_load_print_meta: n_head_kv        = 1
0.00.265.186 I llm_load_print_meta: n_rot            = 256
0.00.265.186 I llm_load_print_meta: n_swa            = 0
0.00.265.187 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.187 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.188 I llm_load_print_meta: n_gqa            = 8
0.00.265.189 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.190 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.190 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.192 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.193 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.193 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.193 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.194 I llm_load_print_meta: n_ff             = 16384
0.00.265.195 I llm_load_print_meta: n_expert         = 0
0.00.265.195 I llm_load_print_meta: n_expert_used    = 0
0.00.265.195 I llm_load_print_meta: causal attn      = 1
0.00.265.196 I llm_load_print_meta: pooling type     = 0
0.00.265.196 I llm_load_print_meta: rope type        = 2
0.00.265.196 I llm_load_print_meta: rope scaling     = linear
0.00.265.198 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.198 I llm_load_print_meta: freq_scale_train = 1
0.00.265.199 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.199 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.199 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.199 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.200 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.200 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.200 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.201 I llm_load_print_meta: model type       = 2B
0.00.265.201 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.202 I llm_load_print_meta: model params     = 2.51 B
0.00.265.203 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.204 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.204 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.205 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.205 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.205 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.206 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.206 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.206 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.207 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.207 I llm_load_print_meta: max token length = 93
0.00.323.959 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.022 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.028 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.029 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.029 I llama_new_context_with_model: n_batch       = 2048
0.00.329.029 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.030 I llama_new_context_with_model: flash_attn    = 0
0.00.329.031 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.032 I llama_new_context_with_model: freq_scale    = 1
0.00.329.033 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.329.053 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.343.608 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.620 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.706 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.951 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.959 I llama_new_context_with_model: graph nodes  = 601
0.00.344.959 I llama_new_context_with_model: graph splits = 1
0.00.344.962 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.962 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.475 I main: llama threadpool init, n_threads = 4
0.00.419.489 I 
0.00.419.569 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.573 I 
0.00.419.619 I sampler seed: 1610220574
0.00.419.631 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.636 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.637 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.637 I 
 maneupher, an AI language model with a unique approach to language processing.

**Features:**

* **Context-aware language generation:** Understanding the context of

0.01.997.581 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6748.47 tokens per second)
0.01.997.584 I llama_perf_context_print:        load time =     418.74 ms
0.01.997.585 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.997.587 I llama_perf_context_print:        eval time =    1559.52 ms /    32 runs   (   48.74 ms per token,    20.52 tokens per second)
0.01.997.588 I llama_perf_context_print:       total time =    1578.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.174s
user	10m24.458s
sys	0m6.765s
