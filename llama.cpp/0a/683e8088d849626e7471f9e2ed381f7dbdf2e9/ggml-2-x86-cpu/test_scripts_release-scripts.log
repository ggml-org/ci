+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.550 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.001.886 I main: load the model and apply lora adapter, if any
0.00.022.182 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.232 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.239 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.244 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.245 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.249 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.252 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.252 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.253 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.253 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.254 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.259 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.259 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.260 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.260 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.261 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.591 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.501 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.444 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.451 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.451 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.452 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.452 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.453 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.454 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.456 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.456 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.457 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.458 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.459 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.463 I llama_model_loader: - type  f32:   37 tensors
0.00.132.465 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.471 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.924 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.541 I llm_load_vocab: special tokens cache size = 5
0.00.279.259 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.276 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.277 I llm_load_print_meta: arch             = gemma
0.00.279.278 I llm_load_print_meta: vocab type       = SPM
0.00.279.279 I llm_load_print_meta: n_vocab          = 256000
0.00.279.279 I llm_load_print_meta: n_merges         = 0
0.00.279.279 I llm_load_print_meta: vocab_only       = 0
0.00.279.279 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.280 I llm_load_print_meta: n_embd           = 2048
0.00.279.280 I llm_load_print_meta: n_layer          = 18
0.00.279.292 I llm_load_print_meta: n_head           = 8
0.00.279.293 I llm_load_print_meta: n_head_kv        = 1
0.00.279.294 I llm_load_print_meta: n_rot            = 256
0.00.279.294 I llm_load_print_meta: n_swa            = 0
0.00.279.294 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.295 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.296 I llm_load_print_meta: n_gqa            = 8
0.00.279.297 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.298 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.298 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.300 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.300 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.301 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.301 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.302 I llm_load_print_meta: n_ff             = 16384
0.00.279.302 I llm_load_print_meta: n_expert         = 0
0.00.279.302 I llm_load_print_meta: n_expert_used    = 0
0.00.279.303 I llm_load_print_meta: causal attn      = 1
0.00.279.303 I llm_load_print_meta: pooling type     = 0
0.00.279.303 I llm_load_print_meta: rope type        = 2
0.00.279.304 I llm_load_print_meta: rope scaling     = linear
0.00.279.306 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.307 I llm_load_print_meta: freq_scale_train = 1
0.00.279.307 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.308 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.308 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.308 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.308 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.308 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.309 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.309 I llm_load_print_meta: model type       = 2B
0.00.279.310 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.311 I llm_load_print_meta: model params     = 2.51 B
0.00.279.312 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.312 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.312 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.313 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.313 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.313 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.314 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.314 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.314 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.315 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.315 I llm_load_print_meta: max token length = 93
0.00.385.149 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.385.159 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.385.159 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.385.160 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.385.160 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.385.161 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.390.366 I llama_new_context_with_model: n_ctx      = 8192
0.00.390.372 I llama_new_context_with_model: n_batch    = 2048
0.00.390.373 I llama_new_context_with_model: n_ubatch   = 512
0.00.390.373 I llama_new_context_with_model: flash_attn = 0
0.00.390.375 I llama_new_context_with_model: freq_base  = 10000.0
0.00.390.376 I llama_new_context_with_model: freq_scale = 1
0.00.420.141 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.420.156 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.420.251 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.422.181 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.422.188 I llama_new_context_with_model: graph nodes  = 601
0.00.422.188 I llama_new_context_with_model: graph splits = 1
0.00.422.190 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.512.397 I main: llama threadpool init, n_threads = 4
0.00.512.411 I 
0.00.512.489 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.512.493 I 
0.00.512.544 I sampler seed: 3386605664
0.00.512.556 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.512.559 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.512.559 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.512.560 I 
 increably.

**Assistant**

I am unable to provide responses that contain inappropriate or sexually suggestive content. [end of text]


0.02.193.807 I llama_perf_sampler_print:    sampling time =       3.65 ms /    24 runs   (    0.15 ms per token,  6584.36 tokens per second)
0.02.193.809 I llama_perf_context_print:        load time =     510.49 ms
0.02.193.810 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.193.811 I llama_perf_context_print:        eval time =    1666.13 ms /    23 runs   (   72.44 ms per token,    13.80 tokens per second)
0.02.193.812 I llama_perf_context_print:       total time =    1681.42 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.626 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.846 I main: llama backend init
0.00.001.973 I main: load the model and apply lora adapter, if any
0.00.022.293 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.305 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.312 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.313 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.316 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.317 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.318 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.319 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.319 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.320 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.324 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.325 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.326 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.326 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.326 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.553 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.010 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.931 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.939 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.940 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.940 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.941 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.941 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.942 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.944 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.945 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.946 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.947 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.948 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.951 I llama_model_loader: - type  f32:   37 tensors
0.00.132.955 I llama_model_loader: - type q8_0:  127 tensors
0.00.219.114 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.157 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.832 I llm_load_vocab: special tokens cache size = 5
0.00.293.846 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.866 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.866 I llm_load_print_meta: arch             = gemma
0.00.293.867 I llm_load_print_meta: vocab type       = SPM
0.00.293.868 I llm_load_print_meta: n_vocab          = 256000
0.00.293.868 I llm_load_print_meta: n_merges         = 0
0.00.293.869 I llm_load_print_meta: vocab_only       = 0
0.00.293.869 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.870 I llm_load_print_meta: n_embd           = 2048
0.00.293.870 I llm_load_print_meta: n_layer          = 18
0.00.293.881 I llm_load_print_meta: n_head           = 8
0.00.293.882 I llm_load_print_meta: n_head_kv        = 1
0.00.293.883 I llm_load_print_meta: n_rot            = 256
0.00.293.883 I llm_load_print_meta: n_swa            = 0
0.00.293.883 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.883 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.884 I llm_load_print_meta: n_gqa            = 8
0.00.293.885 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.886 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.887 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.888 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.889 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.889 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.890 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.890 I llm_load_print_meta: n_ff             = 16384
0.00.293.891 I llm_load_print_meta: n_expert         = 0
0.00.293.891 I llm_load_print_meta: n_expert_used    = 0
0.00.293.891 I llm_load_print_meta: causal attn      = 1
0.00.293.892 I llm_load_print_meta: pooling type     = 0
0.00.293.893 I llm_load_print_meta: rope type        = 2
0.00.293.893 I llm_load_print_meta: rope scaling     = linear
0.00.293.894 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.895 I llm_load_print_meta: freq_scale_train = 1
0.00.293.895 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.896 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.896 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.896 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.897 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.897 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.897 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.897 I llm_load_print_meta: model type       = 2B
0.00.293.898 I llm_load_print_meta: model ftype      = Q8_0
0.00.293.899 I llm_load_print_meta: model params     = 2.51 B
0.00.293.900 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.293.900 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.901 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.901 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.901 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.902 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.902 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.902 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.903 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.903 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.903 I llm_load_print_meta: max token length = 93
0.00.390.428 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.395.643 I llama_new_context_with_model: n_ctx      = 8192
0.00.395.650 I llama_new_context_with_model: n_batch    = 2048
0.00.395.651 I llama_new_context_with_model: n_ubatch   = 512
0.00.395.651 I llama_new_context_with_model: flash_attn = 0
0.00.395.654 I llama_new_context_with_model: freq_base  = 10000.0
0.00.395.655 I llama_new_context_with_model: freq_scale = 1
0.00.425.489 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.425.509 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.425.616 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.427.642 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.427.649 I llama_new_context_with_model: graph nodes  = 601
0.00.427.650 I llama_new_context_with_model: graph splits = 1
0.00.427.651 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.514.957 I main: llama threadpool init, n_threads = 4
0.00.514.972 I 
0.00.515.057 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.515.061 I 
0.00.515.108 I sampler seed: 3989510754
0.00.515.119 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.515.123 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.515.123 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.515.123 I 
 increasities?

I am unable to answer this question as it contains inappropriate content. I am programmed to adhere to ethical guidelines and am unable to provide responses that

0.02.811.173 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6626.51 tokens per second)
0.02.811.175 I llama_perf_context_print:        load time =     512.96 ms
0.02.811.176 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.811.178 I llama_perf_context_print:        eval time =    2275.57 ms /    32 runs   (   71.11 ms per token,    14.06 tokens per second)
0.02.811.178 I llama_perf_context_print:       total time =    2296.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.538 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.867 I main: load the model and apply lora adapter, if any
0.00.022.013 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.064 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.072 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.080 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.084 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.088 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.088 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.089 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.089 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.090 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.090 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.094 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.094 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.095 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.096 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.097 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.761 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.982 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.958 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.965 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.965 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.966 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.966 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.967 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.968 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.970 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.970 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.971 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.972 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.972 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.976 I llama_model_loader: - type  f32:   37 tensors
0.00.132.979 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.173 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.311 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.955 I llm_load_vocab: special tokens cache size = 5
0.00.285.938 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.957 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.957 I llm_load_print_meta: arch             = gemma
0.00.285.958 I llm_load_print_meta: vocab type       = SPM
0.00.285.959 I llm_load_print_meta: n_vocab          = 256000
0.00.285.959 I llm_load_print_meta: n_merges         = 0
0.00.285.959 I llm_load_print_meta: vocab_only       = 0
0.00.285.960 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.960 I llm_load_print_meta: n_embd           = 2048
0.00.285.960 I llm_load_print_meta: n_layer          = 18
0.00.285.973 I llm_load_print_meta: n_head           = 8
0.00.285.974 I llm_load_print_meta: n_head_kv        = 1
0.00.285.974 I llm_load_print_meta: n_rot            = 256
0.00.285.974 I llm_load_print_meta: n_swa            = 0
0.00.285.974 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.975 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.976 I llm_load_print_meta: n_gqa            = 8
0.00.285.977 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.978 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.979 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.980 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.980 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.980 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.981 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.982 I llm_load_print_meta: n_ff             = 16384
0.00.285.982 I llm_load_print_meta: n_expert         = 0
0.00.285.982 I llm_load_print_meta: n_expert_used    = 0
0.00.285.983 I llm_load_print_meta: causal attn      = 1
0.00.285.983 I llm_load_print_meta: pooling type     = 0
0.00.285.983 I llm_load_print_meta: rope type        = 2
0.00.285.984 I llm_load_print_meta: rope scaling     = linear
0.00.285.985 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.986 I llm_load_print_meta: freq_scale_train = 1
0.00.285.986 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.987 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.987 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.987 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.987 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.988 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.988 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.988 I llm_load_print_meta: model type       = 2B
0.00.285.989 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.990 I llm_load_print_meta: model params     = 2.51 B
0.00.285.991 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.991 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.991 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.992 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.992 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.993 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.993 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.994 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.994 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.994 I llm_load_print_meta: max token length = 93
0.00.381.073 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.381.081 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.381.082 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.381.083 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.381.083 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.381.084 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.386.260 I llama_new_context_with_model: n_ctx      = 8192
0.00.386.267 I llama_new_context_with_model: n_batch    = 2048
0.00.386.267 I llama_new_context_with_model: n_ubatch   = 512
0.00.386.268 I llama_new_context_with_model: flash_attn = 0
0.00.386.270 I llama_new_context_with_model: freq_base  = 10000.0
0.00.386.271 I llama_new_context_with_model: freq_scale = 1
0.00.415.855 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.415.869 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.415.963 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.417.811 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.417.818 I llama_new_context_with_model: graph nodes  = 601
0.00.417.818 I llama_new_context_with_model: graph splits = 1
0.00.417.820 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.506.788 I main: llama threadpool init, n_threads = 4
0.00.506.801 I 
0.00.506.874 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.506.877 I 
0.00.506.922 I sampler seed: 2615139538
0.00.506.933 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.506.935 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.506.936 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.506.936 I 
 increasities?

I cannot find the requested information in the provided context. Please provide more context or specify the requested information. [end of text]


0.02.337.122 I llama_perf_sampler_print:    sampling time =       4.09 ms /    27 runs   (    0.15 ms per token,  6593.41 tokens per second)
0.02.337.125 I llama_perf_context_print:        load time =     504.90 ms
0.02.337.126 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.337.127 I llama_perf_context_print:        eval time =    1813.88 ms /    26 runs   (   69.76 ms per token,    14.33 tokens per second)
0.02.337.128 I llama_perf_context_print:       total time =    1830.34 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.527 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.001.832 I main: load the model and apply lora adapter, if any
0.00.022.000 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.047 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.057 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.065 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.066 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.070 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.071 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.072 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.072 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.073 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.073 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.078 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.078 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.079 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.079 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.080 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.686 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.373 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.321 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.329 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.329 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.330 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.331 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.331 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.332 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.335 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.337 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.338 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.338 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.339 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.343 I llama_model_loader: - type  f32:   37 tensors
0.00.132.346 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.214 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.219 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.823 I llm_load_vocab: special tokens cache size = 5
0.00.277.881 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.900 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.901 I llm_load_print_meta: arch             = gemma
0.00.277.901 I llm_load_print_meta: vocab type       = SPM
0.00.277.902 I llm_load_print_meta: n_vocab          = 256000
0.00.277.902 I llm_load_print_meta: n_merges         = 0
0.00.277.903 I llm_load_print_meta: vocab_only       = 0
0.00.277.903 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.903 I llm_load_print_meta: n_embd           = 2048
0.00.277.904 I llm_load_print_meta: n_layer          = 18
0.00.277.915 I llm_load_print_meta: n_head           = 8
0.00.277.916 I llm_load_print_meta: n_head_kv        = 1
0.00.277.916 I llm_load_print_meta: n_rot            = 256
0.00.277.916 I llm_load_print_meta: n_swa            = 0
0.00.277.917 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.917 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.918 I llm_load_print_meta: n_gqa            = 8
0.00.277.919 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.921 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.922 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.923 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.923 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.924 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.924 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.926 I llm_load_print_meta: n_ff             = 16384
0.00.277.926 I llm_load_print_meta: n_expert         = 0
0.00.277.926 I llm_load_print_meta: n_expert_used    = 0
0.00.277.927 I llm_load_print_meta: causal attn      = 1
0.00.277.927 I llm_load_print_meta: pooling type     = 0
0.00.277.928 I llm_load_print_meta: rope type        = 2
0.00.277.929 I llm_load_print_meta: rope scaling     = linear
0.00.277.930 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.933 I llm_load_print_meta: freq_scale_train = 1
0.00.277.933 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.934 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.934 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.934 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.934 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.935 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.935 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.936 I llm_load_print_meta: model type       = 2B
0.00.277.937 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.937 I llm_load_print_meta: model params     = 2.51 B
0.00.277.938 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.939 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.940 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.940 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.941 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.942 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.943 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.943 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.943 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.944 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.944 I llm_load_print_meta: max token length = 93
0.00.363.592 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.363.601 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.368.630 I llama_new_context_with_model: n_ctx      = 8192
0.00.368.637 I llama_new_context_with_model: n_batch    = 2048
0.00.368.637 I llama_new_context_with_model: n_ubatch   = 512
0.00.368.638 I llama_new_context_with_model: flash_attn = 0
0.00.368.641 I llama_new_context_with_model: freq_base  = 10000.0
0.00.368.642 I llama_new_context_with_model: freq_scale = 1
0.00.398.072 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.398.090 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.398.186 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.039 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.400.045 I llama_new_context_with_model: graph nodes  = 601
0.00.400.046 I llama_new_context_with_model: graph splits = 1
0.00.400.047 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.595 I main: llama threadpool init, n_threads = 4
0.00.489.609 I 
0.00.489.682 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.685 I 
0.00.489.726 I sampler seed: 1642685929
0.00.489.739 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.746 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.750 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.750 I 
 seconded by the bold.

I have ****never seen ****anything like this before.

I have ****never encountered ****anything more perplexing

0.02.742.618 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6584.20 tokens per second)
0.02.742.621 I llama_perf_context_print:        load time =     487.74 ms
0.02.742.622 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.742.624 I llama_perf_context_print:        eval time =    2231.98 ms /    32 runs   (   69.75 ms per token,    14.34 tokens per second)
0.02.742.624 I llama_perf_context_print:       total time =    2253.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.055s
user	0m35.158s
sys	0m9.804s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3998 (0a683e80)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32028.55 ms
main:    total time = 32028.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.586 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.001.893 I main: load the model and apply lora adapter, if any
0.00.022.281 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.331 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.338 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.343 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.344 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.348 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.348 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.349 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.349 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.350 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.350 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.354 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.354 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.355 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.356 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.356 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.919 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.411 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.340 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.347 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.347 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.348 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.348 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.349 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.350 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.352 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.353 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.353 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.354 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.355 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.358 I llama_model_loader: - type  f32:   37 tensors
0.00.133.361 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.362 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.574 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.940 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.511 I llm_load_vocab: special tokens cache size = 5
0.00.272.687 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.702 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.703 I llm_load_print_meta: arch             = gemma
0.00.272.704 I llm_load_print_meta: vocab type       = SPM
0.00.272.704 I llm_load_print_meta: n_vocab          = 256000
0.00.272.705 I llm_load_print_meta: n_merges         = 0
0.00.272.705 I llm_load_print_meta: vocab_only       = 0
0.00.272.705 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.706 I llm_load_print_meta: n_embd           = 2048
0.00.272.706 I llm_load_print_meta: n_layer          = 18
0.00.272.719 I llm_load_print_meta: n_head           = 8
0.00.272.720 I llm_load_print_meta: n_head_kv        = 1
0.00.272.720 I llm_load_print_meta: n_rot            = 256
0.00.272.720 I llm_load_print_meta: n_swa            = 0
0.00.272.721 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.721 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.722 I llm_load_print_meta: n_gqa            = 8
0.00.272.723 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.724 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.725 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.726 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.726 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.726 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.727 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.728 I llm_load_print_meta: n_ff             = 16384
0.00.272.728 I llm_load_print_meta: n_expert         = 0
0.00.272.728 I llm_load_print_meta: n_expert_used    = 0
0.00.272.729 I llm_load_print_meta: causal attn      = 1
0.00.272.729 I llm_load_print_meta: pooling type     = 0
0.00.272.729 I llm_load_print_meta: rope type        = 2
0.00.272.730 I llm_load_print_meta: rope scaling     = linear
0.00.272.731 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.732 I llm_load_print_meta: freq_scale_train = 1
0.00.272.732 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.732 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.732 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.733 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.733 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.733 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.733 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.734 I llm_load_print_meta: model type       = 2B
0.00.272.734 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.735 I llm_load_print_meta: model params     = 2.51 B
0.00.272.736 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.736 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.737 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.737 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.738 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.738 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.738 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.739 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.739 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.739 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.740 I llm_load_print_meta: max token length = 93
0.00.333.207 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.333.214 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.333.215 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.333.216 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.333.216 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.333.217 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.338.312 I llama_new_context_with_model: n_ctx      = 8192
0.00.338.318 I llama_new_context_with_model: n_batch    = 2048
0.00.338.319 I llama_new_context_with_model: n_ubatch   = 512
0.00.338.319 I llama_new_context_with_model: flash_attn = 0
0.00.338.321 I llama_new_context_with_model: freq_base  = 10000.0
0.00.338.322 I llama_new_context_with_model: freq_scale = 1
0.00.368.223 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.368.241 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.368.348 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.174 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.370.180 I llama_new_context_with_model: graph nodes  = 601
0.00.370.181 I llama_new_context_with_model: graph splits = 1
0.00.370.183 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.088 I main: llama threadpool init, n_threads = 4
0.00.450.101 I 
0.00.450.175 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.450.178 I 
0.00.450.220 I sampler seed: 2081450884
0.00.450.231 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.234 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.235 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.235 I 
 seconally, and there are multiple correct answers. 

Which of the following is a valid expression for a simple linear regression model?

a) y =

0.02.172.303 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6394.11 tokens per second)
0.02.172.306 I llama_perf_context_print:        load time =     448.17 ms
0.02.172.307 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.172.321 I llama_perf_context_print:        eval time =    1700.92 ms /    32 runs   (   53.15 ms per token,    18.81 tokens per second)
0.02.172.321 I llama_perf_context_print:       total time =    1722.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3998 (0a683e80)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32094.47 ms
main:    total time = 32094.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.561 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.892 I main: load the model and apply lora adapter, if any
0.00.022.475 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.488 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.497 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.498 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.502 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.503 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.504 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.504 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.505 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.505 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.510 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.510 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.511 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.511 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.512 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.464 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.494 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.411 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.418 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.419 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.419 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.420 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.420 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.421 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.424 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.425 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.428 I llama_model_loader: - type  f32:   37 tensors
0.00.133.430 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.431 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.021 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.451 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.058 I llm_load_vocab: special tokens cache size = 5
0.00.274.005 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.023 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.023 I llm_load_print_meta: arch             = gemma
0.00.274.024 I llm_load_print_meta: vocab type       = SPM
0.00.274.025 I llm_load_print_meta: n_vocab          = 256000
0.00.274.025 I llm_load_print_meta: n_merges         = 0
0.00.274.025 I llm_load_print_meta: vocab_only       = 0
0.00.274.026 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.026 I llm_load_print_meta: n_embd           = 2048
0.00.274.026 I llm_load_print_meta: n_layer          = 18
0.00.274.038 I llm_load_print_meta: n_head           = 8
0.00.274.039 I llm_load_print_meta: n_head_kv        = 1
0.00.274.039 I llm_load_print_meta: n_rot            = 256
0.00.274.040 I llm_load_print_meta: n_swa            = 0
0.00.274.040 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.040 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.041 I llm_load_print_meta: n_gqa            = 8
0.00.274.042 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.043 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.044 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.045 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.046 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.046 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.046 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.047 I llm_load_print_meta: n_ff             = 16384
0.00.274.047 I llm_load_print_meta: n_expert         = 0
0.00.274.048 I llm_load_print_meta: n_expert_used    = 0
0.00.274.048 I llm_load_print_meta: causal attn      = 1
0.00.274.048 I llm_load_print_meta: pooling type     = 0
0.00.274.049 I llm_load_print_meta: rope type        = 2
0.00.274.049 I llm_load_print_meta: rope scaling     = linear
0.00.274.051 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.051 I llm_load_print_meta: freq_scale_train = 1
0.00.274.052 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.052 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.052 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.053 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.053 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.053 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.053 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.054 I llm_load_print_meta: model type       = 2B
0.00.274.054 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.055 I llm_load_print_meta: model params     = 2.51 B
0.00.274.056 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.056 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.057 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.057 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.057 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.058 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.058 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.059 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.059 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.060 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.060 I llm_load_print_meta: max token length = 93
0.00.333.012 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.338.098 I llama_new_context_with_model: n_ctx      = 8192
0.00.338.105 I llama_new_context_with_model: n_batch    = 2048
0.00.338.106 I llama_new_context_with_model: n_ubatch   = 512
0.00.338.106 I llama_new_context_with_model: flash_attn = 0
0.00.338.109 I llama_new_context_with_model: freq_base  = 10000.0
0.00.338.110 I llama_new_context_with_model: freq_scale = 1
0.00.367.855 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.367.871 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.367.964 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.866 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.369.873 I llama_new_context_with_model: graph nodes  = 601
0.00.369.874 I llama_new_context_with_model: graph splits = 1
0.00.369.875 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.623 I main: llama threadpool init, n_threads = 4
0.00.450.638 I 
0.00.450.714 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.450.718 I 
0.00.450.760 I sampler seed: 686362623
0.00.450.770 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.773 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.774 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.774 I 
 increasities by combining a natural language processing model with a large dataset of text and code.

**Natural Language Processing Model:**

* Uses deep learning algorithms to

0.02.149.302 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6849.32 tokens per second)
0.02.149.304 I llama_perf_context_print:        load time =     448.71 ms
0.02.149.305 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.149.307 I llama_perf_context_print:        eval time =    1678.77 ms /    32 runs   (   52.46 ms per token,    19.06 tokens per second)
0.02.149.307 I llama_perf_context_print:       total time =    1698.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.347s
user	8m15.673s
sys	0m7.116s
