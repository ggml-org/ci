+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.002.827 I main: load the model and apply lora adapter, if any
0.00.025.287 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.500 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.594 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.605 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.607 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.611 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.613 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.626 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.630 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.631 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.632 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.642 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.643 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.645 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.646 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.647 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.119 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.628 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.070 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.079 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.080 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.081 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.083 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.084 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.085 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.089 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.090 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.091 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.092 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.093 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.102 I llama_model_loader: - type  f32:   37 tensors
0.00.270.106 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.714 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.553 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.492 I llm_load_vocab: special tokens cache size = 5
0.00.608.371 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.441 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.442 I llm_load_print_meta: arch             = gemma
0.00.608.443 I llm_load_print_meta: vocab type       = SPM
0.00.608.444 I llm_load_print_meta: n_vocab          = 256000
0.00.608.447 I llm_load_print_meta: n_merges         = 0
0.00.608.447 I llm_load_print_meta: vocab_only       = 0
0.00.608.448 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.448 I llm_load_print_meta: n_embd           = 2048
0.00.608.449 I llm_load_print_meta: n_layer          = 18
0.00.608.513 I llm_load_print_meta: n_head           = 8
0.00.608.520 I llm_load_print_meta: n_head_kv        = 1
0.00.608.521 I llm_load_print_meta: n_rot            = 256
0.00.608.521 I llm_load_print_meta: n_swa            = 0
0.00.608.522 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.522 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.527 I llm_load_print_meta: n_gqa            = 8
0.00.608.531 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.537 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.538 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.539 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.540 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.540 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.540 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.545 I llm_load_print_meta: n_ff             = 16384
0.00.608.546 I llm_load_print_meta: n_expert         = 0
0.00.608.547 I llm_load_print_meta: n_expert_used    = 0
0.00.608.548 I llm_load_print_meta: causal attn      = 1
0.00.608.548 I llm_load_print_meta: pooling type     = 0
0.00.608.549 I llm_load_print_meta: rope type        = 2
0.00.608.550 I llm_load_print_meta: rope scaling     = linear
0.00.608.552 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.553 I llm_load_print_meta: freq_scale_train = 1
0.00.608.553 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.553 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.577 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.577 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.578 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.586 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.587 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.592 I llm_load_print_meta: model type       = 2B
0.00.608.593 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.594 I llm_load_print_meta: model params     = 2.51 B
0.00.608.595 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.603 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.604 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.604 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.605 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.608 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.609 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.610 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.616 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.625 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.626 I llm_load_print_meta: max token length = 93
0.00.717.777 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.717.788 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.717.789 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.717.790 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.717.791 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.717.791 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.723.512 I llama_new_context_with_model: n_ctx      = 8192
0.00.723.520 I llama_new_context_with_model: n_batch    = 2048
0.00.723.520 I llama_new_context_with_model: n_ubatch   = 512
0.00.723.521 I llama_new_context_with_model: flash_attn = 0
0.00.723.523 I llama_new_context_with_model: freq_base  = 10000.0
0.00.723.524 I llama_new_context_with_model: freq_scale = 1
0.00.754.556 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.754.596 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.754.711 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.757.850 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.757.855 I llama_new_context_with_model: graph nodes  = 601
0.00.757.855 I llama_new_context_with_model: graph splits = 1
0.00.757.874 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.367.465 I main: llama threadpool init, n_threads = 4
0.01.367.479 I 
0.01.367.586 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.590 I 
0.01.367.823 I sampler seed: 815893091
0.01.367.836 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.367.843 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.367.844 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.367.844 I 
 seconary rule, also known as the quotient rule, is used to differentiate quotients of functions. It is given by the formula:

$$\frac{d

0.14.930.167 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.71 tokens per second)
0.14.930.171 I llama_perf_context_print:        load time =    1364.54 ms
0.14.930.172 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.930.173 I llama_perf_context_print:        eval time =   13468.60 ms /    32 runs   (  420.89 ms per token,     2.38 tokens per second)
0.14.930.187 I llama_perf_context_print:       total time =   13562.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.002.840 I main: load the model and apply lora adapter, if any
0.00.024.923 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.021 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.035 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.037 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.041 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.045 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.046 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.047 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.049 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.050 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.059 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.061 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.062 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.063 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.072 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.693 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.074 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.487 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.496 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.497 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.498 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.500 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.501 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.502 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.506 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.507 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.508 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.509 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.510 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.520 I llama_model_loader: - type  f32:   37 tensors
0.00.268.524 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.910 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.689 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.672 I llm_load_vocab: special tokens cache size = 5
0.00.603.598 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.672 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.676 I llm_load_print_meta: arch             = gemma
0.00.603.677 I llm_load_print_meta: vocab type       = SPM
0.00.603.678 I llm_load_print_meta: n_vocab          = 256000
0.00.603.680 I llm_load_print_meta: n_merges         = 0
0.00.603.681 I llm_load_print_meta: vocab_only       = 0
0.00.603.681 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.682 I llm_load_print_meta: n_embd           = 2048
0.00.603.682 I llm_load_print_meta: n_layer          = 18
0.00.603.747 I llm_load_print_meta: n_head           = 8
0.00.603.757 I llm_load_print_meta: n_head_kv        = 1
0.00.603.758 I llm_load_print_meta: n_rot            = 256
0.00.603.758 I llm_load_print_meta: n_swa            = 0
0.00.603.759 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.759 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.764 I llm_load_print_meta: n_gqa            = 8
0.00.603.769 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.774 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.778 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.780 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.781 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.781 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.781 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.786 I llm_load_print_meta: n_ff             = 16384
0.00.603.788 I llm_load_print_meta: n_expert         = 0
0.00.603.789 I llm_load_print_meta: n_expert_used    = 0
0.00.603.789 I llm_load_print_meta: causal attn      = 1
0.00.603.800 I llm_load_print_meta: pooling type     = 0
0.00.603.813 I llm_load_print_meta: rope type        = 2
0.00.603.815 I llm_load_print_meta: rope scaling     = linear
0.00.603.817 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.817 I llm_load_print_meta: freq_scale_train = 1
0.00.603.818 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.827 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.827 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.833 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.837 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.837 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.837 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.838 I llm_load_print_meta: model type       = 2B
0.00.603.840 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.841 I llm_load_print_meta: model params     = 2.51 B
0.00.603.841 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.842 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.842 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.843 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.844 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.845 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.845 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.846 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.853 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.855 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.855 I llm_load_print_meta: max token length = 93
0.00.703.326 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.709.167 I llama_new_context_with_model: n_ctx      = 8192
0.00.709.176 I llama_new_context_with_model: n_batch    = 2048
0.00.709.177 I llama_new_context_with_model: n_ubatch   = 512
0.00.709.178 I llama_new_context_with_model: flash_attn = 0
0.00.709.181 I llama_new_context_with_model: freq_base  = 10000.0
0.00.709.182 I llama_new_context_with_model: freq_scale = 1
0.00.741.473 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.741.515 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.741.628 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.744.894 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.744.898 I llama_new_context_with_model: graph nodes  = 601
0.00.744.899 I llama_new_context_with_model: graph splits = 1
0.00.744.915 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.365.842 I main: llama threadpool init, n_threads = 4
0.01.365.857 I 
0.01.365.972 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.365.977 I 
0.01.366.257 I sampler seed: 3607020712
0.01.366.276 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.366.284 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.366.288 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.366.289 I 
 increasities. [end of text]


0.03.058.253 I llama_perf_sampler_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   804.25 tokens per second)
0.03.058.268 I llama_perf_context_print:        load time =    1362.90 ms
0.03.058.270 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.058.271 I llama_perf_context_print:        eval time =    1678.89 ms /     4 runs   (  419.72 ms per token,     2.38 tokens per second)
0.03.058.272 I llama_perf_context_print:       total time =    1692.42 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.024.642 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.861 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.955 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.966 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.968 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.973 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.975 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.976 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.977 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.978 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.979 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.988 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.989 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.991 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.992 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.993 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.326 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.572 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.988 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.995 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.996 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.998 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.998 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.000 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.001 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.006 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.007 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.008 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.009 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.010 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.019 I llama_model_loader: - type  f32:   37 tensors
0.00.268.023 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.318 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.427 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.561 I llm_load_vocab: special tokens cache size = 5
0.00.608.308 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.380 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.382 I llm_load_print_meta: arch             = gemma
0.00.608.383 I llm_load_print_meta: vocab type       = SPM
0.00.608.383 I llm_load_print_meta: n_vocab          = 256000
0.00.608.386 I llm_load_print_meta: n_merges         = 0
0.00.608.387 I llm_load_print_meta: vocab_only       = 0
0.00.608.387 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.388 I llm_load_print_meta: n_embd           = 2048
0.00.608.388 I llm_load_print_meta: n_layer          = 18
0.00.608.454 I llm_load_print_meta: n_head           = 8
0.00.608.461 I llm_load_print_meta: n_head_kv        = 1
0.00.608.462 I llm_load_print_meta: n_rot            = 256
0.00.608.462 I llm_load_print_meta: n_swa            = 0
0.00.608.462 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.463 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.468 I llm_load_print_meta: n_gqa            = 8
0.00.608.473 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.478 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.479 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.505 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.506 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.507 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.507 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.514 I llm_load_print_meta: n_ff             = 16384
0.00.608.515 I llm_load_print_meta: n_expert         = 0
0.00.608.525 I llm_load_print_meta: n_expert_used    = 0
0.00.608.526 I llm_load_print_meta: causal attn      = 1
0.00.608.526 I llm_load_print_meta: pooling type     = 0
0.00.608.527 I llm_load_print_meta: rope type        = 2
0.00.608.527 I llm_load_print_meta: rope scaling     = linear
0.00.608.529 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.530 I llm_load_print_meta: freq_scale_train = 1
0.00.608.530 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.531 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.531 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.531 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.532 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.532 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.533 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.534 I llm_load_print_meta: model type       = 2B
0.00.608.535 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.540 I llm_load_print_meta: model params     = 2.51 B
0.00.608.541 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.541 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.542 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.543 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.543 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.544 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.552 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.553 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.560 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.561 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.562 I llm_load_print_meta: max token length = 93
0.00.705.010 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.705.020 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.705.021 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.705.021 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.705.022 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.705.023 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.710.933 I llama_new_context_with_model: n_ctx      = 8192
0.00.710.943 I llama_new_context_with_model: n_batch    = 2048
0.00.710.944 I llama_new_context_with_model: n_ubatch   = 512
0.00.710.945 I llama_new_context_with_model: flash_attn = 0
0.00.710.949 I llama_new_context_with_model: freq_base  = 10000.0
0.00.710.949 I llama_new_context_with_model: freq_scale = 1
0.00.742.825 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.742.863 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.742.977 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.150 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.746.155 I llama_new_context_with_model: graph nodes  = 601
0.00.746.155 I llama_new_context_with_model: graph splits = 1
0.00.746.172 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.356.189 I main: llama threadpool init, n_threads = 4
0.01.356.202 I 
0.01.356.305 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.356.309 I 
0.01.356.544 I sampler seed: 878654818
0.01.356.556 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.356.563 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.356.564 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.356.564 I 
 seconde à l'équipe technique

**Question :**

Quel est le rôle principal du serveur ?

**Réponse :**

Le serveur est le principal

0.14.932.650 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.61 tokens per second)
0.14.932.653 I llama_perf_context_print:        load time =    1353.29 ms
0.14.932.655 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.932.670 I llama_perf_context_print:        eval time =   13481.38 ms /    32 runs   (  421.29 ms per token,     2.37 tokens per second)
0.14.932.671 I llama_perf_context_print:       total time =   13576.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
0.00.024.582 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.789 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.882 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.893 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.895 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.898 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.900 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.902 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.903 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.904 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.905 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.913 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.917 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.919 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.919 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.920 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.226 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.957 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.335 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.343 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.345 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.346 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.347 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.349 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.350 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.354 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.355 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.357 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.358 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.274.359 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.368 I llama_model_loader: - type  f32:   37 tensors
0.00.274.372 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.434 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.832 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.771 I llm_load_vocab: special tokens cache size = 5
0.00.617.079 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.156 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.156 I llm_load_print_meta: arch             = gemma
0.00.617.157 I llm_load_print_meta: vocab type       = SPM
0.00.617.158 I llm_load_print_meta: n_vocab          = 256000
0.00.617.161 I llm_load_print_meta: n_merges         = 0
0.00.617.161 I llm_load_print_meta: vocab_only       = 0
0.00.617.162 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.162 I llm_load_print_meta: n_embd           = 2048
0.00.617.162 I llm_load_print_meta: n_layer          = 18
0.00.617.228 I llm_load_print_meta: n_head           = 8
0.00.617.235 I llm_load_print_meta: n_head_kv        = 1
0.00.617.236 I llm_load_print_meta: n_rot            = 256
0.00.617.238 I llm_load_print_meta: n_swa            = 0
0.00.617.239 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.240 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.249 I llm_load_print_meta: n_gqa            = 8
0.00.617.254 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.260 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.262 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.263 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.264 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.264 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.275 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.282 I llm_load_print_meta: n_ff             = 16384
0.00.617.283 I llm_load_print_meta: n_expert         = 0
0.00.617.283 I llm_load_print_meta: n_expert_used    = 0
0.00.617.285 I llm_load_print_meta: causal attn      = 1
0.00.617.288 I llm_load_print_meta: pooling type     = 0
0.00.617.288 I llm_load_print_meta: rope type        = 2
0.00.617.289 I llm_load_print_meta: rope scaling     = linear
0.00.617.291 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.292 I llm_load_print_meta: freq_scale_train = 1
0.00.617.292 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.292 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.293 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.293 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.293 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.293 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.294 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.294 I llm_load_print_meta: model type       = 2B
0.00.617.295 I llm_load_print_meta: model ftype      = Q8_0
0.00.617.296 I llm_load_print_meta: model params     = 2.51 B
0.00.617.297 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.617.297 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.298 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.299 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.300 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.300 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.301 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.301 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.307 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.309 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.310 I llm_load_print_meta: max token length = 93
0.00.704.546 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.704.558 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.710.247 I llama_new_context_with_model: n_ctx      = 8192
0.00.710.254 I llama_new_context_with_model: n_batch    = 2048
0.00.710.255 I llama_new_context_with_model: n_ubatch   = 512
0.00.710.256 I llama_new_context_with_model: flash_attn = 0
0.00.710.258 I llama_new_context_with_model: freq_base  = 10000.0
0.00.710.259 I llama_new_context_with_model: freq_scale = 1
0.00.739.833 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.739.870 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.739.985 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.115 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.743.118 I llama_new_context_with_model: graph nodes  = 601
0.00.743.119 I llama_new_context_with_model: graph splits = 1
0.00.743.135 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.515 I main: llama threadpool init, n_threads = 4
0.01.352.527 I 
0.01.352.633 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.637 I 
0.01.352.872 I sampler seed: 2561302428
0.01.352.884 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.892 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.352.892 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.893 I 
 increasively. 

I can only answer questions that I am qualified to answer. I am unable to engage in tasks that require unethical or illegal behavior. [end of text]


0.14.931.792 I llama_perf_sampler_print:    sampling time =      49.00 ms /    33 runs   (    1.48 ms per token,   673.52 tokens per second)
0.14.931.816 I llama_perf_context_print:        load time =    1349.59 ms
0.14.931.821 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.931.824 I llama_perf_context_print:        eval time =   13484.07 ms /    32 runs   (  421.38 ms per token,     2.37 tokens per second)
0.14.931.825 I llama_perf_context_print:       total time =   13579.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.820s
user	3m2.390s
sys	0m9.715s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3998 (0a683e80)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198771.98 ms
main:    total time = 198771.98 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.802 I main: load the model and apply lora adapter, if any
0.00.024.826 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.037 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.139 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.151 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.153 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.157 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.161 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.162 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.163 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.164 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.165 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.180 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.185 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.187 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.188 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.190 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.177 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.474 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.919 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.930 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.931 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.932 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.933 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.935 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.936 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.939 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.940 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.941 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.942 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.943 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.953 I llama_model_loader: - type  f32:   37 tensors
0.00.269.957 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.958 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.347 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.524.374 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.399 I llm_load_vocab: special tokens cache size = 5
0.00.623.648 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.721 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.722 I llm_load_print_meta: arch             = gemma
0.00.623.723 I llm_load_print_meta: vocab type       = SPM
0.00.623.723 I llm_load_print_meta: n_vocab          = 256000
0.00.623.726 I llm_load_print_meta: n_merges         = 0
0.00.623.727 I llm_load_print_meta: vocab_only       = 0
0.00.623.727 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.727 I llm_load_print_meta: n_embd           = 2048
0.00.623.728 I llm_load_print_meta: n_layer          = 18
0.00.623.790 I llm_load_print_meta: n_head           = 8
0.00.623.797 I llm_load_print_meta: n_head_kv        = 1
0.00.623.797 I llm_load_print_meta: n_rot            = 256
0.00.623.798 I llm_load_print_meta: n_swa            = 0
0.00.623.798 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.798 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.803 I llm_load_print_meta: n_gqa            = 8
0.00.623.808 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.814 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.816 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.818 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.818 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.819 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.820 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.825 I llm_load_print_meta: n_ff             = 16384
0.00.623.839 I llm_load_print_meta: n_expert         = 0
0.00.623.844 I llm_load_print_meta: n_expert_used    = 0
0.00.623.844 I llm_load_print_meta: causal attn      = 1
0.00.623.844 I llm_load_print_meta: pooling type     = 0
0.00.623.845 I llm_load_print_meta: rope type        = 2
0.00.623.845 I llm_load_print_meta: rope scaling     = linear
0.00.623.847 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.848 I llm_load_print_meta: freq_scale_train = 1
0.00.623.851 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.852 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.852 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.853 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.853 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.853 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.854 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.854 I llm_load_print_meta: model type       = 2B
0.00.623.856 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.623.857 I llm_load_print_meta: model params     = 2.51 B
0.00.623.857 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.623.858 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.864 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.865 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.866 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.866 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.867 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.868 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.874 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.876 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.877 I llm_load_print_meta: max token length = 93
0.00.686.471 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.686.482 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.686.483 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.686.483 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.686.484 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.686.485 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.692.341 I llama_new_context_with_model: n_ctx      = 8192
0.00.692.348 I llama_new_context_with_model: n_batch    = 2048
0.00.692.349 I llama_new_context_with_model: n_ubatch   = 512
0.00.692.349 I llama_new_context_with_model: flash_attn = 0
0.00.692.351 I llama_new_context_with_model: freq_base  = 10000.0
0.00.692.352 I llama_new_context_with_model: freq_scale = 1
0.00.722.294 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.722.333 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.722.451 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.725.527 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.725.532 I llama_new_context_with_model: graph nodes  = 601
0.00.725.533 I llama_new_context_with_model: graph splits = 1
0.00.725.549 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.050 I main: llama threadpool init, n_threads = 4
0.01.303.062 I 
0.01.303.185 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.190 I 
0.01.303.429 I sampler seed: 2269303508
0.01.303.442 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.303.448 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.303.449 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.303.450 I 
 seconal
I am unable to find the requested information, so I am unable to provide an answer. Please provide more context or specify your request so I can

0.12.172.784 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.03 tokens per second)
0.12.172.800 I llama_perf_context_print:        load time =    1300.14 ms
0.12.172.801 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.172.803 I llama_perf_context_print:        eval time =   10775.04 ms /    32 runs   (  336.72 ms per token,     2.97 tokens per second)
0.12.172.804 I llama_perf_context_print:       total time =   10869.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3998 (0a683e80)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198917.12 ms
main:    total time = 198917.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.697 I build: 3998 (0a683e80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.909 I main: llama backend init
0.00.002.860 I main: load the model and apply lora adapter, if any
0.00.025.156 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.261 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.277 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.282 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.287 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.289 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.290 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.291 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.292 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.293 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.303 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.307 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.308 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.309 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.311 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.676 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.267.772 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.286.306 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.286.316 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.286.317 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.286.319 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.286.320 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.286.321 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.286.322 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.286.326 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.286.327 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.286.336 I llama_model_loader: - type  f32:   37 tensors
0.00.286.340 I llama_model_loader: - type q4_K:  108 tensors
0.00.286.340 I llama_model_loader: - type q6_K:   19 tensors
0.00.476.471 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.543.884 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.544.837 I llm_load_vocab: special tokens cache size = 5
0.00.640.004 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.640.076 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.640.077 I llm_load_print_meta: arch             = gemma
0.00.640.078 I llm_load_print_meta: vocab type       = SPM
0.00.640.079 I llm_load_print_meta: n_vocab          = 256000
0.00.640.081 I llm_load_print_meta: n_merges         = 0
0.00.640.082 I llm_load_print_meta: vocab_only       = 0
0.00.640.082 I llm_load_print_meta: n_ctx_train      = 8192
0.00.640.083 I llm_load_print_meta: n_embd           = 2048
0.00.640.083 I llm_load_print_meta: n_layer          = 18
0.00.640.149 I llm_load_print_meta: n_head           = 8
0.00.640.157 I llm_load_print_meta: n_head_kv        = 1
0.00.640.158 I llm_load_print_meta: n_rot            = 256
0.00.640.158 I llm_load_print_meta: n_swa            = 0
0.00.640.159 I llm_load_print_meta: n_embd_head_k    = 256
0.00.640.159 I llm_load_print_meta: n_embd_head_v    = 256
0.00.640.189 I llm_load_print_meta: n_gqa            = 8
0.00.640.202 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.640.208 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.640.210 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.640.212 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.640.212 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.640.217 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.640.218 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.640.224 I llm_load_print_meta: n_ff             = 16384
0.00.640.224 I llm_load_print_meta: n_expert         = 0
0.00.640.225 I llm_load_print_meta: n_expert_used    = 0
0.00.640.233 I llm_load_print_meta: causal attn      = 1
0.00.640.234 I llm_load_print_meta: pooling type     = 0
0.00.640.235 I llm_load_print_meta: rope type        = 2
0.00.640.240 I llm_load_print_meta: rope scaling     = linear
0.00.640.242 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.640.242 I llm_load_print_meta: freq_scale_train = 1
0.00.640.243 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.640.243 I llm_load_print_meta: rope_finetuned   = unknown
0.00.640.244 I llm_load_print_meta: ssm_d_conv       = 0
0.00.640.244 I llm_load_print_meta: ssm_d_inner      = 0
0.00.640.244 I llm_load_print_meta: ssm_d_state      = 0
0.00.640.253 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.640.254 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.640.255 I llm_load_print_meta: model type       = 2B
0.00.640.256 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.640.257 I llm_load_print_meta: model params     = 2.51 B
0.00.640.258 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.640.258 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.640.259 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.640.259 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.640.260 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.640.261 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.640.262 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.640.262 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.640.269 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.640.271 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.640.271 I llm_load_print_meta: max token length = 93
0.00.702.075 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.707.842 I llama_new_context_with_model: n_ctx      = 8192
0.00.707.852 I llama_new_context_with_model: n_batch    = 2048
0.00.707.853 I llama_new_context_with_model: n_ubatch   = 512
0.00.707.853 I llama_new_context_with_model: flash_attn = 0
0.00.707.857 I llama_new_context_with_model: freq_base  = 10000.0
0.00.707.858 I llama_new_context_with_model: freq_scale = 1
0.00.739.547 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.739.585 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.739.702 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.742.827 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.742.832 I llama_new_context_with_model: graph nodes  = 601
0.00.742.832 I llama_new_context_with_model: graph splits = 1
0.00.742.849 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.856 I main: llama threadpool init, n_threads = 4
0.01.317.870 I 
0.01.317.983 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.987 I 
0.01.318.220 I sampler seed: 638593336
0.01.318.232 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.242 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.318.243 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.318.244 I 
 seconded.

I am unable to access the content of the file at the specified location.

**Possible causes:**

* The file may have been deleted

0.12.238.133 I llama_perf_sampler_print:    sampling time =      48.98 ms /    33 runs   (    1.48 ms per token,   673.79 tokens per second)
0.12.238.137 I llama_perf_context_print:        load time =    1314.87 ms
0.12.238.138 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.238.140 I llama_perf_context_print:        eval time =   10825.86 ms /    32 runs   (  338.31 ms per token,     2.96 tokens per second)
0.12.238.164 I llama_perf_context_print:       total time =   10920.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.102s
user	50m12.305s
sys	0m6.463s
