+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.713 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.002.852 I main: load the model and apply lora adapter, if any
0.00.025.093 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.317 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.421 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.434 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.435 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.440 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.444 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.445 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.446 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.447 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.448 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.460 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.464 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.465 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.466 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.467 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.001 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.289 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.659 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.669 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.670 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.672 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.673 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.674 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.675 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.679 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.680 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.681 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.682 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.684 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.692 I llama_model_loader: - type  f32:   37 tensors
0.00.267.697 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.383 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.525 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.422 I llm_load_vocab: special tokens cache size = 5
0.00.613.234 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.301 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.302 I llm_load_print_meta: arch             = gemma
0.00.613.303 I llm_load_print_meta: vocab type       = SPM
0.00.613.304 I llm_load_print_meta: n_vocab          = 256000
0.00.613.306 I llm_load_print_meta: n_merges         = 0
0.00.613.306 I llm_load_print_meta: vocab_only       = 0
0.00.613.307 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.307 I llm_load_print_meta: n_embd           = 2048
0.00.613.307 I llm_load_print_meta: n_layer          = 18
0.00.613.373 I llm_load_print_meta: n_head           = 8
0.00.613.380 I llm_load_print_meta: n_head_kv        = 1
0.00.613.380 I llm_load_print_meta: n_rot            = 256
0.00.613.381 I llm_load_print_meta: n_swa            = 0
0.00.613.381 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.383 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.387 I llm_load_print_meta: n_gqa            = 8
0.00.613.392 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.397 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.398 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.400 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.400 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.400 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.401 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.406 I llm_load_print_meta: n_ff             = 16384
0.00.613.406 I llm_load_print_meta: n_expert         = 0
0.00.613.407 I llm_load_print_meta: n_expert_used    = 0
0.00.613.408 I llm_load_print_meta: causal attn      = 1
0.00.613.408 I llm_load_print_meta: pooling type     = 0
0.00.613.408 I llm_load_print_meta: rope type        = 2
0.00.613.409 I llm_load_print_meta: rope scaling     = linear
0.00.613.416 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.417 I llm_load_print_meta: freq_scale_train = 1
0.00.613.417 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.418 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.419 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.420 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.420 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.441 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.444 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.445 I llm_load_print_meta: model type       = 2B
0.00.613.446 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.448 I llm_load_print_meta: model params     = 2.51 B
0.00.613.449 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.449 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.450 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.450 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.451 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.451 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.452 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.452 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.459 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.461 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.461 I llm_load_print_meta: max token length = 93
0.00.723.897 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.723.907 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.723.908 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.723.909 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.723.910 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.723.910 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.729.601 I llama_new_context_with_model: n_ctx      = 8192
0.00.729.609 I llama_new_context_with_model: n_batch    = 2048
0.00.729.609 I llama_new_context_with_model: n_ubatch   = 512
0.00.729.610 I llama_new_context_with_model: flash_attn = 0
0.00.729.612 I llama_new_context_with_model: freq_base  = 10000.0
0.00.729.613 I llama_new_context_with_model: freq_scale = 1
0.00.759.394 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.759.433 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.759.550 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.762.685 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.762.689 I llama_new_context_with_model: graph nodes  = 601
0.00.762.690 I llama_new_context_with_model: graph splits = 1
0.00.762.708 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.374.604 I main: llama threadpool init, n_threads = 4
0.01.374.619 I 
0.01.374.730 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.374.734 I 
0.01.374.983 I sampler seed: 612745811
0.01.374.995 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.375.005 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.375.007 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.375.007 I 
 seconary factors in polynomial division.

**Solution:**

**Secondary factors** in polynomial division are the factors that occur in the remainder of the division process in

0.14.789.251 I llama_perf_sampler_print:    sampling time =      48.92 ms /    33 runs   (    1.48 ms per token,   674.54 tokens per second)
0.14.789.258 I llama_perf_context_print:        load time =    1371.62 ms
0.14.789.260 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.789.263 I llama_perf_context_print:        eval time =   13319.74 ms /    32 runs   (  416.24 ms per token,     2.40 tokens per second)
0.14.789.264 I llama_perf_context_print:       total time =   13414.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.686 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.904 I main: llama backend init
0.00.002.846 I main: load the model and apply lora adapter, if any
0.00.025.366 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.485 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.502 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.504 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.510 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.515 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.517 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.519 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.521 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.525 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.539 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.541 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.543 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.545 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.547 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.818 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.910 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.416 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.428 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.430 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.431 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.432 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.433 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.434 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.438 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.439 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.440 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.441 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.442 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.453 I llama_model_loader: - type  f32:   37 tensors
0.00.267.459 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.464 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.919 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.953 I llm_load_vocab: special tokens cache size = 5
0.00.609.570 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.647 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.652 I llm_load_print_meta: arch             = gemma
0.00.609.653 I llm_load_print_meta: vocab type       = SPM
0.00.609.654 I llm_load_print_meta: n_vocab          = 256000
0.00.609.657 I llm_load_print_meta: n_merges         = 0
0.00.609.657 I llm_load_print_meta: vocab_only       = 0
0.00.609.658 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.659 I llm_load_print_meta: n_embd           = 2048
0.00.609.659 I llm_load_print_meta: n_layer          = 18
0.00.609.736 I llm_load_print_meta: n_head           = 8
0.00.609.746 I llm_load_print_meta: n_head_kv        = 1
0.00.609.747 I llm_load_print_meta: n_rot            = 256
0.00.609.748 I llm_load_print_meta: n_swa            = 0
0.00.609.750 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.750 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.757 I llm_load_print_meta: n_gqa            = 8
0.00.609.765 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.774 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.778 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.780 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.781 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.781 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.782 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.790 I llm_load_print_meta: n_ff             = 16384
0.00.609.791 I llm_load_print_meta: n_expert         = 0
0.00.609.792 I llm_load_print_meta: n_expert_used    = 0
0.00.609.793 I llm_load_print_meta: causal attn      = 1
0.00.609.793 I llm_load_print_meta: pooling type     = 0
0.00.609.794 I llm_load_print_meta: rope type        = 2
0.00.609.795 I llm_load_print_meta: rope scaling     = linear
0.00.609.797 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.798 I llm_load_print_meta: freq_scale_train = 1
0.00.609.799 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.799 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.800 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.801 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.801 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.802 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.802 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.803 I llm_load_print_meta: model type       = 2B
0.00.609.805 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.806 I llm_load_print_meta: model params     = 2.51 B
0.00.609.808 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.810 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.811 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.811 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.812 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.813 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.814 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.815 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.822 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.824 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.824 I llm_load_print_meta: max token length = 93
0.00.710.357 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.716.471 I llama_new_context_with_model: n_ctx      = 8192
0.00.716.479 I llama_new_context_with_model: n_batch    = 2048
0.00.716.479 I llama_new_context_with_model: n_ubatch   = 512
0.00.716.480 I llama_new_context_with_model: flash_attn = 0
0.00.716.483 I llama_new_context_with_model: freq_base  = 10000.0
0.00.716.484 I llama_new_context_with_model: freq_scale = 1
0.00.747.884 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.928 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.748.049 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.101 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.751.105 I llama_new_context_with_model: graph nodes  = 601
0.00.751.106 I llama_new_context_with_model: graph splits = 1
0.00.751.123 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.358.995 I main: llama threadpool init, n_threads = 4
0.01.359.009 I 
0.01.359.125 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.129 I 
0.01.359.371 I sampler seed: 3279751577
0.01.359.384 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.393 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.359.398 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.398 I 
 increasities with the characters' personalities, and offer solutions to the problems they face.

**Challenge 1: The overactive mind**

* Character'

0.14.863.434 I llama_perf_sampler_print:    sampling time =      48.87 ms /    33 runs   (    1.48 ms per token,   675.27 tokens per second)
0.14.863.448 I llama_perf_context_print:        load time =    1356.04 ms
0.14.863.451 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.863.453 I llama_perf_context_print:        eval time =   13408.60 ms /    32 runs   (  419.02 ms per token,     2.39 tokens per second)
0.14.863.454 I llama_perf_context_print:       total time =   13504.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.024.919 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.133 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.228 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.239 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.241 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.245 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.247 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.248 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.249 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.251 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.252 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.262 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.263 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.264 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.265 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.275 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.470 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.503 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.926 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.936 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.937 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.938 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.939 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.940 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.941 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.945 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.946 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.947 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.948 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.949 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.958 I llama_model_loader: - type  f32:   37 tensors
0.00.266.964 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.883 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.517 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.507 I llm_load_vocab: special tokens cache size = 5
0.00.623.046 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.116 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.117 I llm_load_print_meta: arch             = gemma
0.00.623.118 I llm_load_print_meta: vocab type       = SPM
0.00.623.119 I llm_load_print_meta: n_vocab          = 256000
0.00.623.121 I llm_load_print_meta: n_merges         = 0
0.00.623.121 I llm_load_print_meta: vocab_only       = 0
0.00.623.122 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.122 I llm_load_print_meta: n_embd           = 2048
0.00.623.122 I llm_load_print_meta: n_layer          = 18
0.00.623.186 I llm_load_print_meta: n_head           = 8
0.00.623.193 I llm_load_print_meta: n_head_kv        = 1
0.00.623.193 I llm_load_print_meta: n_rot            = 256
0.00.623.194 I llm_load_print_meta: n_swa            = 0
0.00.623.195 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.195 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.200 I llm_load_print_meta: n_gqa            = 8
0.00.623.204 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.209 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.210 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.212 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.213 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.213 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.214 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.219 I llm_load_print_meta: n_ff             = 16384
0.00.623.220 I llm_load_print_meta: n_expert         = 0
0.00.623.220 I llm_load_print_meta: n_expert_used    = 0
0.00.623.225 I llm_load_print_meta: causal attn      = 1
0.00.623.225 I llm_load_print_meta: pooling type     = 0
0.00.623.226 I llm_load_print_meta: rope type        = 2
0.00.623.226 I llm_load_print_meta: rope scaling     = linear
0.00.623.228 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.228 I llm_load_print_meta: freq_scale_train = 1
0.00.623.229 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.229 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.230 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.231 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.231 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.231 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.232 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.233 I llm_load_print_meta: model type       = 2B
0.00.623.234 I llm_load_print_meta: model ftype      = Q8_0
0.00.623.234 I llm_load_print_meta: model params     = 2.51 B
0.00.623.236 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.623.236 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.236 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.238 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.238 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.239 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.239 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.240 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.245 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.247 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.247 I llm_load_print_meta: max token length = 93
0.00.721.205 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.721.219 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.721.220 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.721.221 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.721.222 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.721.222 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.727.033 I llama_new_context_with_model: n_ctx      = 8192
0.00.727.041 I llama_new_context_with_model: n_batch    = 2048
0.00.727.041 I llama_new_context_with_model: n_ubatch   = 512
0.00.727.042 I llama_new_context_with_model: flash_attn = 0
0.00.727.045 I llama_new_context_with_model: freq_base  = 10000.0
0.00.727.046 I llama_new_context_with_model: freq_scale = 1
0.00.757.798 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.757.835 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.757.950 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.760.991 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.760.996 I llama_new_context_with_model: graph nodes  = 601
0.00.760.996 I llama_new_context_with_model: graph splits = 1
0.00.761.012 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.369.301 I main: llama threadpool init, n_threads = 4
0.01.369.315 I 
0.01.369.427 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.369.431 I 
0.01.369.679 I sampler seed: 216707692
0.01.369.691 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.369.701 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.369.702 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.369.702 I 
 increasities of the past.

I understand that the question refers to historical events, but I am unable to provide information on events that occurred before the 2

0.14.860.192 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.61 tokens per second)
0.14.860.195 I llama_perf_context_print:        load time =    1366.43 ms
0.14.860.197 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.860.198 I llama_perf_context_print:        eval time =   13396.70 ms /    32 runs   (  418.65 ms per token,     2.39 tokens per second)
0.14.860.199 I llama_perf_context_print:       total time =   13490.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.689 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.950 I main: llama backend init
0.00.002.886 I main: load the model and apply lora adapter, if any
0.00.024.952 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.181 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.288 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.301 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.303 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.308 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.310 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.311 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.312 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.313 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.314 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.329 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.334 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.336 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.338 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.339 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.081 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.967 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.427 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.437 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.438 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.439 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.440 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.441 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.442 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.446 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.447 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.448 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.449 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.450 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.459 I llama_model_loader: - type  f32:   37 tensors
0.00.268.463 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.029 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.546 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.539 I llm_load_vocab: special tokens cache size = 5
0.00.618.868 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.938 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.939 I llm_load_print_meta: arch             = gemma
0.00.618.940 I llm_load_print_meta: vocab type       = SPM
0.00.618.941 I llm_load_print_meta: n_vocab          = 256000
0.00.618.943 I llm_load_print_meta: n_merges         = 0
0.00.618.943 I llm_load_print_meta: vocab_only       = 0
0.00.618.944 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.944 I llm_load_print_meta: n_embd           = 2048
0.00.618.945 I llm_load_print_meta: n_layer          = 18
0.00.619.007 I llm_load_print_meta: n_head           = 8
0.00.619.013 I llm_load_print_meta: n_head_kv        = 1
0.00.619.014 I llm_load_print_meta: n_rot            = 256
0.00.619.014 I llm_load_print_meta: n_swa            = 0
0.00.619.015 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.015 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.020 I llm_load_print_meta: n_gqa            = 8
0.00.619.024 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.029 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.030 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.055 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.056 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.056 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.057 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.062 I llm_load_print_meta: n_ff             = 16384
0.00.619.064 I llm_load_print_meta: n_expert         = 0
0.00.619.064 I llm_load_print_meta: n_expert_used    = 0
0.00.619.064 I llm_load_print_meta: causal attn      = 1
0.00.619.065 I llm_load_print_meta: pooling type     = 0
0.00.619.065 I llm_load_print_meta: rope type        = 2
0.00.619.065 I llm_load_print_meta: rope scaling     = linear
0.00.619.073 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.074 I llm_load_print_meta: freq_scale_train = 1
0.00.619.074 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.075 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.075 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.075 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.076 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.076 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.076 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.077 I llm_load_print_meta: model type       = 2B
0.00.619.078 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.079 I llm_load_print_meta: model params     = 2.51 B
0.00.619.080 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.081 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.082 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.093 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.095 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.095 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.097 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.098 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.105 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.115 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.117 I llm_load_print_meta: max token length = 93
0.00.710.861 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.710.875 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.716.769 I llama_new_context_with_model: n_ctx      = 8192
0.00.716.776 I llama_new_context_with_model: n_batch    = 2048
0.00.716.776 I llama_new_context_with_model: n_ubatch   = 512
0.00.716.777 I llama_new_context_with_model: flash_attn = 0
0.00.716.779 I llama_new_context_with_model: freq_base  = 10000.0
0.00.716.780 I llama_new_context_with_model: freq_scale = 1
0.00.747.417 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.455 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.575 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.750.705 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.750.710 I llama_new_context_with_model: graph nodes  = 601
0.00.750.710 I llama_new_context_with_model: graph splits = 1
0.00.750.726 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.358.559 I main: llama threadpool init, n_threads = 4
0.01.358.572 I 
0.01.358.692 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.358.704 I 
0.01.358.944 I sampler seed: 1882558571
0.01.358.957 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.966 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.358.967 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.969 I 
 seconally.

A scientist discovers a new element with the symbol "X". The element is shiny, brittle, and has a melting point of 20

0.14.860.827 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   670.98 tokens per second)
0.14.860.830 I llama_perf_context_print:        load time =    1355.56 ms
0.14.860.841 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.860.843 I llama_perf_context_print:        eval time =   13406.66 ms /    32 runs   (  418.96 ms per token,     2.39 tokens per second)
0.14.860.845 I llama_perf_context_print:       total time =   13502.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.648s
user	3m48.368s
sys	0m9.789s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (5ed8d335)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198999.05 ms
main:    total time = 198999.05 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.002.823 I main: load the model and apply lora adapter, if any
0.00.025.074 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.295 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.397 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.410 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.412 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.417 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.421 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.422 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.423 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.424 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.425 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.436 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.437 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.438 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.442 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.443 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.809 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.204 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.599 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.609 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.610 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.612 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.613 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.614 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.615 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.619 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.620 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.621 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.622 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.623 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.633 I llama_model_loader: - type  f32:   37 tensors
0.00.267.638 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.638 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.053 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.783 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.786 I llm_load_vocab: special tokens cache size = 5
0.00.609.610 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.681 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.682 I llm_load_print_meta: arch             = gemma
0.00.609.683 I llm_load_print_meta: vocab type       = SPM
0.00.609.684 I llm_load_print_meta: n_vocab          = 256000
0.00.609.686 I llm_load_print_meta: n_merges         = 0
0.00.609.687 I llm_load_print_meta: vocab_only       = 0
0.00.609.687 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.688 I llm_load_print_meta: n_embd           = 2048
0.00.609.688 I llm_load_print_meta: n_layer          = 18
0.00.609.753 I llm_load_print_meta: n_head           = 8
0.00.609.760 I llm_load_print_meta: n_head_kv        = 1
0.00.609.760 I llm_load_print_meta: n_rot            = 256
0.00.609.760 I llm_load_print_meta: n_swa            = 0
0.00.609.762 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.763 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.768 I llm_load_print_meta: n_gqa            = 8
0.00.609.772 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.777 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.778 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.780 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.781 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.782 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.782 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.787 I llm_load_print_meta: n_ff             = 16384
0.00.609.788 I llm_load_print_meta: n_expert         = 0
0.00.609.788 I llm_load_print_meta: n_expert_used    = 0
0.00.609.793 I llm_load_print_meta: causal attn      = 1
0.00.609.793 I llm_load_print_meta: pooling type     = 0
0.00.609.793 I llm_load_print_meta: rope type        = 2
0.00.609.794 I llm_load_print_meta: rope scaling     = linear
0.00.609.795 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.796 I llm_load_print_meta: freq_scale_train = 1
0.00.609.797 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.797 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.798 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.798 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.798 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.799 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.799 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.800 I llm_load_print_meta: model type       = 2B
0.00.609.801 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.609.802 I llm_load_print_meta: model params     = 2.51 B
0.00.609.803 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.609.803 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.804 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.805 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.806 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.806 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.806 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.807 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.813 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.814 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.815 I llm_load_print_meta: max token length = 93
0.00.674.033 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.674.044 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.674.045 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.674.045 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.674.046 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.674.046 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.679.712 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.718 I llama_new_context_with_model: n_batch    = 2048
0.00.679.719 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.719 I llama_new_context_with_model: flash_attn = 0
0.00.679.722 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.722 I llama_new_context_with_model: freq_scale = 1
0.00.708.972 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.012 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.127 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.143 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.148 I llama_new_context_with_model: graph nodes  = 601
0.00.712.148 I llama_new_context_with_model: graph splits = 1
0.00.712.166 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.287.076 I main: llama threadpool init, n_threads = 4
0.01.287.090 I 
0.01.287.199 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.287.203 I 
0.01.287.447 I sampler seed: 2266862925
0.01.287.459 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.287.468 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.287.469 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.287.469 I 
 encompates various components that work together to create a seamless experience for users.

**1. User Interface:**

- The graphical elements that users interact with.

0.12.175.547 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.35 tokens per second)
0.12.175.550 I llama_perf_context_print:        load time =    1284.13 ms
0.12.175.551 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.175.553 I llama_perf_context_print:        eval time =   10793.13 ms /    32 runs   (  337.29 ms per token,     2.96 tokens per second)
0.12.175.553 I llama_perf_context_print:       total time =   10888.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (5ed8d335)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198833.48 ms
main:    total time = 198833.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.807 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.907 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.921 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.922 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.926 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.931 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.932 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.933 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.934 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.935 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.944 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.946 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.947 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.948 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.949 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.590 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.808 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.233 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.241 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.242 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.244 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.245 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.246 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.247 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.251 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.252 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.261 I llama_model_loader: - type  f32:   37 tensors
0.00.267.265 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.266 I llama_model_loader: - type q6_K:   19 tensors
0.00.465.025 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.655 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.572 I llm_load_vocab: special tokens cache size = 5
0.00.627.763 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.844 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.847 I llm_load_print_meta: arch             = gemma
0.00.627.848 I llm_load_print_meta: vocab type       = SPM
0.00.627.849 I llm_load_print_meta: n_vocab          = 256000
0.00.627.851 I llm_load_print_meta: n_merges         = 0
0.00.627.852 I llm_load_print_meta: vocab_only       = 0
0.00.627.852 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.852 I llm_load_print_meta: n_embd           = 2048
0.00.627.853 I llm_load_print_meta: n_layer          = 18
0.00.627.920 I llm_load_print_meta: n_head           = 8
0.00.627.929 I llm_load_print_meta: n_head_kv        = 1
0.00.627.929 I llm_load_print_meta: n_rot            = 256
0.00.627.930 I llm_load_print_meta: n_swa            = 0
0.00.627.930 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.931 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.935 I llm_load_print_meta: n_gqa            = 8
0.00.627.940 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.945 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.946 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.947 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.948 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.948 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.949 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.954 I llm_load_print_meta: n_ff             = 16384
0.00.627.955 I llm_load_print_meta: n_expert         = 0
0.00.627.955 I llm_load_print_meta: n_expert_used    = 0
0.00.627.955 I llm_load_print_meta: causal attn      = 1
0.00.627.956 I llm_load_print_meta: pooling type     = 0
0.00.627.956 I llm_load_print_meta: rope type        = 2
0.00.627.957 I llm_load_print_meta: rope scaling     = linear
0.00.627.958 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.959 I llm_load_print_meta: freq_scale_train = 1
0.00.627.959 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.959 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.960 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.960 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.960 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.961 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.961 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.962 I llm_load_print_meta: model type       = 2B
0.00.627.962 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.627.963 I llm_load_print_meta: model params     = 2.51 B
0.00.627.964 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.627.964 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.965 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.966 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.966 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.967 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.967 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.968 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.974 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.975 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.976 I llm_load_print_meta: max token length = 93
0.00.689.578 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.695.260 I llama_new_context_with_model: n_ctx      = 8192
0.00.695.268 I llama_new_context_with_model: n_batch    = 2048
0.00.695.269 I llama_new_context_with_model: n_ubatch   = 512
0.00.695.269 I llama_new_context_with_model: flash_attn = 0
0.00.695.272 I llama_new_context_with_model: freq_base  = 10000.0
0.00.695.273 I llama_new_context_with_model: freq_scale = 1
0.00.724.650 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.724.689 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.724.821 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.949 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.727.954 I llama_new_context_with_model: graph nodes  = 601
0.00.727.954 I llama_new_context_with_model: graph splits = 1
0.00.727.971 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.302.101 I main: llama threadpool init, n_threads = 4
0.01.302.115 I 
0.01.302.231 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.302.232 I 
0.01.302.476 I sampler seed: 1097542869
0.01.302.490 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.302.498 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.302.499 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.302.499 I 
 increasities can be resolved by:

a) Converting them into geometric series
b) Shifting them
c) Inverting them
d) Shifting them and

0.12.188.692 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.10 tokens per second)
0.12.188.695 I llama_perf_context_print:        load time =    1299.22 ms
0.12.188.697 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.188.713 I llama_perf_context_print:        eval time =   10790.41 ms /    32 runs   (  337.20 ms per token,     2.97 tokens per second)
0.12.188.714 I llama_perf_context_print:       total time =   10886.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.191s
user	50m6.544s
sys	0m6.505s
