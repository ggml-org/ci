+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.549 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.001.883 I main: load the model and apply lora adapter, if any
0.00.022.072 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.122 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.133 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.142 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.148 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.153 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.153 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.154 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.155 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.155 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.156 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.160 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.161 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.161 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.162 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.162 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.296 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.591 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.445 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.452 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.453 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.454 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.454 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.455 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.456 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.458 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.459 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.460 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.461 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.462 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.465 I llama_model_loader: - type  f32:   37 tensors
0.00.132.469 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.901 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.060 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.646 I llm_load_vocab: special tokens cache size = 5
0.00.280.623 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.642 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.643 I llm_load_print_meta: arch             = gemma
0.00.280.643 I llm_load_print_meta: vocab type       = SPM
0.00.280.644 I llm_load_print_meta: n_vocab          = 256000
0.00.280.645 I llm_load_print_meta: n_merges         = 0
0.00.280.645 I llm_load_print_meta: vocab_only       = 0
0.00.280.645 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.645 I llm_load_print_meta: n_embd           = 2048
0.00.280.646 I llm_load_print_meta: n_layer          = 18
0.00.280.656 I llm_load_print_meta: n_head           = 8
0.00.280.657 I llm_load_print_meta: n_head_kv        = 1
0.00.280.657 I llm_load_print_meta: n_rot            = 256
0.00.280.658 I llm_load_print_meta: n_swa            = 0
0.00.280.658 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.658 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.659 I llm_load_print_meta: n_gqa            = 8
0.00.280.660 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.661 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.662 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.663 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.663 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.664 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.664 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.665 I llm_load_print_meta: n_ff             = 16384
0.00.280.665 I llm_load_print_meta: n_expert         = 0
0.00.280.665 I llm_load_print_meta: n_expert_used    = 0
0.00.280.666 I llm_load_print_meta: causal attn      = 1
0.00.280.666 I llm_load_print_meta: pooling type     = 0
0.00.280.666 I llm_load_print_meta: rope type        = 2
0.00.280.667 I llm_load_print_meta: rope scaling     = linear
0.00.280.668 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.669 I llm_load_print_meta: freq_scale_train = 1
0.00.280.669 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.669 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.670 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.670 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.670 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.670 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.671 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.671 I llm_load_print_meta: model type       = 2B
0.00.280.672 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.673 I llm_load_print_meta: model params     = 2.51 B
0.00.280.673 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.674 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.674 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.674 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.675 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.675 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.676 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.676 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.676 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.677 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.677 I llm_load_print_meta: max token length = 93
0.00.388.709 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.388.719 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.388.720 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.388.720 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.388.721 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.388.722 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.395.048 I llama_new_context_with_model: n_ctx      = 8192
0.00.395.056 I llama_new_context_with_model: n_batch    = 2048
0.00.395.059 I llama_new_context_with_model: n_ubatch   = 512
0.00.395.059 I llama_new_context_with_model: flash_attn = 0
0.00.395.062 I llama_new_context_with_model: freq_base  = 10000.0
0.00.395.063 I llama_new_context_with_model: freq_scale = 1
0.00.425.196 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.425.211 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.425.300 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.427.114 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.427.121 I llama_new_context_with_model: graph nodes  = 601
0.00.427.121 I llama_new_context_with_model: graph splits = 1
0.00.427.123 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.517.306 I main: llama threadpool init, n_threads = 4
0.00.517.318 I 
0.00.517.403 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.517.406 I 
0.00.517.447 I sampler seed: 1764244486
0.00.517.457 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.517.468 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.517.468 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.517.468 I 
 increamentalism, also known as incrementalism, is a philosophical theory that emphasizes the gradual development of knowledge and the role of observation and inference in the acquisition of

0.02.851.717 I llama_perf_sampler_print:    sampling time =       4.69 ms /    33 runs   (    0.14 ms per token,  7042.25 tokens per second)
0.02.851.720 I llama_perf_context_print:        load time =     515.40 ms
0.02.851.721 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.851.723 I llama_perf_context_print:        eval time =    2314.81 ms /    32 runs   (   72.34 ms per token,    13.82 tokens per second)
0.02.851.724 I llama_perf_context_print:       total time =    2334.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.537 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.001.811 I main: load the model and apply lora adapter, if any
0.00.022.467 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.481 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.488 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.490 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.494 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.495 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.496 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.497 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.497 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.501 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.502 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.502 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.503 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.504 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.685 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.476 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.406 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.414 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.415 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.415 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.416 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.417 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.417 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.420 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.421 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.421 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.422 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.423 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.427 I llama_model_loader: - type  f32:   37 tensors
0.00.132.429 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.633 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.207 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.832 I llm_load_vocab: special tokens cache size = 5
0.00.279.661 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.677 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.678 I llm_load_print_meta: arch             = gemma
0.00.279.678 I llm_load_print_meta: vocab type       = SPM
0.00.279.679 I llm_load_print_meta: n_vocab          = 256000
0.00.279.679 I llm_load_print_meta: n_merges         = 0
0.00.279.680 I llm_load_print_meta: vocab_only       = 0
0.00.279.680 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.680 I llm_load_print_meta: n_embd           = 2048
0.00.279.681 I llm_load_print_meta: n_layer          = 18
0.00.279.693 I llm_load_print_meta: n_head           = 8
0.00.279.694 I llm_load_print_meta: n_head_kv        = 1
0.00.279.695 I llm_load_print_meta: n_rot            = 256
0.00.279.695 I llm_load_print_meta: n_swa            = 0
0.00.279.695 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.695 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.696 I llm_load_print_meta: n_gqa            = 8
0.00.279.697 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.698 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.699 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.700 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.701 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.701 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.701 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.702 I llm_load_print_meta: n_ff             = 16384
0.00.279.703 I llm_load_print_meta: n_expert         = 0
0.00.279.703 I llm_load_print_meta: n_expert_used    = 0
0.00.279.704 I llm_load_print_meta: causal attn      = 1
0.00.279.704 I llm_load_print_meta: pooling type     = 0
0.00.279.704 I llm_load_print_meta: rope type        = 2
0.00.279.705 I llm_load_print_meta: rope scaling     = linear
0.00.279.706 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.707 I llm_load_print_meta: freq_scale_train = 1
0.00.279.707 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.708 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.708 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.708 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.708 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.708 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.709 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.709 I llm_load_print_meta: model type       = 2B
0.00.279.710 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.711 I llm_load_print_meta: model params     = 2.51 B
0.00.279.712 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.712 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.712 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.713 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.713 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.713 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.714 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.714 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.714 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.715 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.715 I llm_load_print_meta: max token length = 93
0.00.377.461 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.382.648 I llama_new_context_with_model: n_ctx      = 8192
0.00.382.653 I llama_new_context_with_model: n_batch    = 2048
0.00.382.654 I llama_new_context_with_model: n_ubatch   = 512
0.00.382.654 I llama_new_context_with_model: flash_attn = 0
0.00.382.656 I llama_new_context_with_model: freq_base  = 10000.0
0.00.382.657 I llama_new_context_with_model: freq_scale = 1
0.00.412.464 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.412.481 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.412.577 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.414.450 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.414.456 I llama_new_context_with_model: graph nodes  = 601
0.00.414.457 I llama_new_context_with_model: graph splits = 1
0.00.414.459 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.501.415 I main: llama threadpool init, n_threads = 4
0.00.501.428 I 
0.00.501.502 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.501.506 I 
0.00.501.545 I sampler seed: 4128615840
0.00.501.555 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.501.558 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.501.559 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.501.559 I 
 seconary to a primary school level.

**What is a number sequence?**

A number sequence is a list of numbers in order, starting from the

0.02.775.627 I llama_perf_sampler_print:    sampling time =       4.59 ms /    33 runs   (    0.14 ms per token,  7191.11 tokens per second)
0.02.775.629 I llama_perf_context_print:        load time =     499.57 ms
0.02.775.630 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.775.631 I llama_perf_context_print:        eval time =    2254.77 ms /    32 runs   (   70.46 ms per token,    14.19 tokens per second)
0.02.775.632 I llama_perf_context_print:       total time =    2274.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.391 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.605 I main: llama backend init
0.00.001.685 I main: load the model and apply lora adapter, if any
0.00.021.789 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.844 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.855 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.864 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.867 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.871 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.872 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.874 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.874 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.875 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.875 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.880 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.881 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.881 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.882 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.882 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.819 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.310 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.183 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.190 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.191 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.191 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.192 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.192 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.193 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.196 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.196 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.197 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.197 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.198 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.202 I llama_model_loader: - type  f32:   37 tensors
0.00.132.205 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.420 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.172 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.775 I llm_load_vocab: special tokens cache size = 5
0.00.274.879 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.896 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.896 I llm_load_print_meta: arch             = gemma
0.00.274.897 I llm_load_print_meta: vocab type       = SPM
0.00.274.898 I llm_load_print_meta: n_vocab          = 256000
0.00.274.916 I llm_load_print_meta: n_merges         = 0
0.00.274.917 I llm_load_print_meta: vocab_only       = 0
0.00.274.917 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.917 I llm_load_print_meta: n_embd           = 2048
0.00.274.918 I llm_load_print_meta: n_layer          = 18
0.00.274.929 I llm_load_print_meta: n_head           = 8
0.00.274.930 I llm_load_print_meta: n_head_kv        = 1
0.00.274.933 I llm_load_print_meta: n_rot            = 256
0.00.274.933 I llm_load_print_meta: n_swa            = 0
0.00.274.934 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.934 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.935 I llm_load_print_meta: n_gqa            = 8
0.00.274.936 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.937 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.938 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.940 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.940 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.941 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.941 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.942 I llm_load_print_meta: n_ff             = 16384
0.00.274.943 I llm_load_print_meta: n_expert         = 0
0.00.274.943 I llm_load_print_meta: n_expert_used    = 0
0.00.274.944 I llm_load_print_meta: causal attn      = 1
0.00.274.944 I llm_load_print_meta: pooling type     = 0
0.00.274.944 I llm_load_print_meta: rope type        = 2
0.00.274.945 I llm_load_print_meta: rope scaling     = linear
0.00.274.947 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.948 I llm_load_print_meta: freq_scale_train = 1
0.00.274.948 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.948 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.949 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.949 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.949 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.949 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.950 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.950 I llm_load_print_meta: model type       = 2B
0.00.274.951 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.952 I llm_load_print_meta: model params     = 2.51 B
0.00.274.953 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.953 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.954 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.955 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.955 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.955 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.955 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.956 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.956 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.957 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.957 I llm_load_print_meta: max token length = 93
0.00.371.499 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.371.507 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.371.507 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.371.508 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.371.509 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.371.509 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.376.701 I llama_new_context_with_model: n_ctx      = 8192
0.00.376.707 I llama_new_context_with_model: n_batch    = 2048
0.00.376.708 I llama_new_context_with_model: n_ubatch   = 512
0.00.376.708 I llama_new_context_with_model: flash_attn = 0
0.00.376.712 I llama_new_context_with_model: freq_base  = 10000.0
0.00.376.712 I llama_new_context_with_model: freq_scale = 1
0.00.405.049 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.405.061 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.405.154 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.959 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.406.966 I llama_new_context_with_model: graph nodes  = 601
0.00.406.966 I llama_new_context_with_model: graph splits = 1
0.00.406.968 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.499.251 I main: llama threadpool init, n_threads = 4
0.00.499.265 I 
0.00.499.342 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.499.345 I 
0.00.499.391 I sampler seed: 2044547324
0.00.499.402 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.499.407 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.499.407 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.499.407 I 
 increamentalism, and the concept of cultural relativism.

**I. Critically discuss the concept of cultural relativism and its implications.**

**A

0.02.728.673 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6909.55 tokens per second)
0.02.728.677 I llama_perf_context_print:        load time =     497.54 ms
0.02.728.678 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.680 I llama_perf_context_print:        eval time =    2209.83 ms /    32 runs   (   69.06 ms per token,    14.48 tokens per second)
0.02.728.681 I llama_perf_context_print:       total time =    2229.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.556 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.001.952 I main: load the model and apply lora adapter, if any
0.00.022.204 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.260 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.268 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.275 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.276 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.283 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.285 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.287 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.288 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.288 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.289 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.294 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.295 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.296 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.297 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.298 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.268 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.513 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.820 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.826 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.827 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.827 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.828 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.828 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.829 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.832 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.832 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.833 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.833 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.834 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.838 I llama_model_loader: - type  f32:   37 tensors
0.00.133.841 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.833 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.057 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.650 I llm_load_vocab: special tokens cache size = 5
0.00.268.390 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.407 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.408 I llm_load_print_meta: arch             = gemma
0.00.268.408 I llm_load_print_meta: vocab type       = SPM
0.00.268.409 I llm_load_print_meta: n_vocab          = 256000
0.00.268.409 I llm_load_print_meta: n_merges         = 0
0.00.268.410 I llm_load_print_meta: vocab_only       = 0
0.00.268.410 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.410 I llm_load_print_meta: n_embd           = 2048
0.00.268.411 I llm_load_print_meta: n_layer          = 18
0.00.268.422 I llm_load_print_meta: n_head           = 8
0.00.268.423 I llm_load_print_meta: n_head_kv        = 1
0.00.268.424 I llm_load_print_meta: n_rot            = 256
0.00.268.424 I llm_load_print_meta: n_swa            = 0
0.00.268.424 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.424 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.425 I llm_load_print_meta: n_gqa            = 8
0.00.268.426 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.428 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.429 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.430 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.430 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.431 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.432 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.433 I llm_load_print_meta: n_ff             = 16384
0.00.268.434 I llm_load_print_meta: n_expert         = 0
0.00.268.435 I llm_load_print_meta: n_expert_used    = 0
0.00.268.436 I llm_load_print_meta: causal attn      = 1
0.00.268.440 I llm_load_print_meta: pooling type     = 0
0.00.268.440 I llm_load_print_meta: rope type        = 2
0.00.268.441 I llm_load_print_meta: rope scaling     = linear
0.00.268.443 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.444 I llm_load_print_meta: freq_scale_train = 1
0.00.268.444 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.445 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.445 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.446 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.446 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.447 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.447 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.448 I llm_load_print_meta: model type       = 2B
0.00.268.449 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.451 I llm_load_print_meta: model params     = 2.51 B
0.00.268.452 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.452 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.453 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.454 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.455 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.455 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.457 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.457 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.458 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.459 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.459 I llm_load_print_meta: max token length = 93
0.00.359.609 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.359.616 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.364.834 I llama_new_context_with_model: n_ctx      = 8192
0.00.364.841 I llama_new_context_with_model: n_batch    = 2048
0.00.364.841 I llama_new_context_with_model: n_ubatch   = 512
0.00.364.842 I llama_new_context_with_model: flash_attn = 0
0.00.364.846 I llama_new_context_with_model: freq_base  = 10000.0
0.00.364.847 I llama_new_context_with_model: freq_scale = 1
0.00.395.278 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.395.291 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.395.391 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.243 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.397.249 I llama_new_context_with_model: graph nodes  = 601
0.00.397.250 I llama_new_context_with_model: graph splits = 1
0.00.397.252 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.499.466 I main: llama threadpool init, n_threads = 4
0.00.499.479 I 
0.00.499.566 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.499.569 I 
0.00.499.622 I sampler seed: 1166273794
0.00.499.633 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.499.637 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.499.637 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.499.638 I 
 increasels in the forest of the ancient gods.

The murmur of the wind through the rustling leaves was the only sound breaking the silence. The sun, a

0.02.713.666 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6941.52 tokens per second)
0.02.713.668 I llama_perf_context_print:        load time =     497.49 ms
0.02.713.669 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.713.670 I llama_perf_context_print:        eval time =    2193.90 ms /    32 runs   (   68.56 ms per token,    14.59 tokens per second)
0.02.713.671 I llama_perf_context_print:       total time =    2214.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m21.116s
user	0m39.174s
sys	0m9.812s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (5ed8d335)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32057.42 ms
main:    total time = 32057.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.555 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.001.873 I main: load the model and apply lora adapter, if any
0.00.022.053 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.107 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.118 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.124 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.128 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.133 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.133 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.134 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.134 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.135 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.135 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.140 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.141 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.142 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.142 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.143 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.963 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.231 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.144 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.151 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.151 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.152 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.153 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.153 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.154 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.157 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.157 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.158 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.159 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.160 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.164 I llama_model_loader: - type  f32:   37 tensors
0.00.133.166 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.168 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.227 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.764 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.361 I llm_load_vocab: special tokens cache size = 5
0.00.278.189 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.207 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.207 I llm_load_print_meta: arch             = gemma
0.00.278.208 I llm_load_print_meta: vocab type       = SPM
0.00.278.208 I llm_load_print_meta: n_vocab          = 256000
0.00.278.209 I llm_load_print_meta: n_merges         = 0
0.00.278.209 I llm_load_print_meta: vocab_only       = 0
0.00.278.209 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.210 I llm_load_print_meta: n_embd           = 2048
0.00.278.210 I llm_load_print_meta: n_layer          = 18
0.00.278.222 I llm_load_print_meta: n_head           = 8
0.00.278.223 I llm_load_print_meta: n_head_kv        = 1
0.00.278.224 I llm_load_print_meta: n_rot            = 256
0.00.278.224 I llm_load_print_meta: n_swa            = 0
0.00.278.224 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.224 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.225 I llm_load_print_meta: n_gqa            = 8
0.00.278.226 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.227 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.228 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.229 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.230 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.230 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.230 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.231 I llm_load_print_meta: n_ff             = 16384
0.00.278.232 I llm_load_print_meta: n_expert         = 0
0.00.278.232 I llm_load_print_meta: n_expert_used    = 0
0.00.278.232 I llm_load_print_meta: causal attn      = 1
0.00.278.233 I llm_load_print_meta: pooling type     = 0
0.00.278.233 I llm_load_print_meta: rope type        = 2
0.00.278.233 I llm_load_print_meta: rope scaling     = linear
0.00.278.235 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.236 I llm_load_print_meta: freq_scale_train = 1
0.00.278.236 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.237 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.237 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.237 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.237 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.238 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.238 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.238 I llm_load_print_meta: model type       = 2B
0.00.278.239 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.278.240 I llm_load_print_meta: model params     = 2.51 B
0.00.278.240 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.278.241 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.241 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.241 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.242 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.242 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.242 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.242 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.243 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.243 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.244 I llm_load_print_meta: max token length = 93
0.00.339.371 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.339.379 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.339.380 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.339.380 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.339.381 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.339.381 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.344.380 I llama_new_context_with_model: n_ctx      = 8192
0.00.344.385 I llama_new_context_with_model: n_batch    = 2048
0.00.344.386 I llama_new_context_with_model: n_ubatch   = 512
0.00.344.386 I llama_new_context_with_model: flash_attn = 0
0.00.344.388 I llama_new_context_with_model: freq_base  = 10000.0
0.00.344.389 I llama_new_context_with_model: freq_scale = 1
0.00.373.064 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.373.078 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.373.172 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.006 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.375.011 I llama_new_context_with_model: graph nodes  = 601
0.00.375.011 I llama_new_context_with_model: graph splits = 1
0.00.375.013 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.323 I main: llama threadpool init, n_threads = 4
0.00.455.336 I 
0.00.455.413 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.455.416 I 
0.00.455.462 I sampler seed: 2058944713
0.00.455.474 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.477 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.478 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.479 I 
 fufilling to your ears and carrying your sweet melodies to your soul.

This is the perfect song for a summer day. Its cheerful tempo, upbeat melody,

0.02.181.354 I llama_perf_sampler_print:    sampling time =       5.79 ms /    33 runs   (    0.18 ms per token,  5695.55 tokens per second)
0.02.181.357 I llama_perf_context_print:        load time =     453.43 ms
0.02.181.358 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.181.359 I llama_perf_context_print:        eval time =    1704.28 ms /    32 runs   (   53.26 ms per token,    18.78 tokens per second)
0.02.181.360 I llama_perf_context_print:       total time =    1726.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (5ed8d335)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32129.65 ms
main:    total time = 32129.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.533 I build: 3984 (5ed8d335) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.001.847 I main: load the model and apply lora adapter, if any
0.00.021.877 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.889 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.896 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.900 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.907 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.907 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.908 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.909 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.910 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.910 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.914 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.914 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.915 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.916 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.916 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.040 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.187 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.064 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.071 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.072 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.073 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.074 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.075 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.076 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.079 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.080 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.083 I llama_model_loader: - type  f32:   37 tensors
0.00.131.086 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.087 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.233 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.151 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.738 I llm_load_vocab: special tokens cache size = 5
0.00.266.625 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.640 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.640 I llm_load_print_meta: arch             = gemma
0.00.266.641 I llm_load_print_meta: vocab type       = SPM
0.00.266.642 I llm_load_print_meta: n_vocab          = 256000
0.00.266.642 I llm_load_print_meta: n_merges         = 0
0.00.266.642 I llm_load_print_meta: vocab_only       = 0
0.00.266.643 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.643 I llm_load_print_meta: n_embd           = 2048
0.00.266.643 I llm_load_print_meta: n_layer          = 18
0.00.266.656 I llm_load_print_meta: n_head           = 8
0.00.266.656 I llm_load_print_meta: n_head_kv        = 1
0.00.266.657 I llm_load_print_meta: n_rot            = 256
0.00.266.657 I llm_load_print_meta: n_swa            = 0
0.00.266.657 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.658 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.659 I llm_load_print_meta: n_gqa            = 8
0.00.266.660 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.660 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.661 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.662 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.663 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.663 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.663 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.664 I llm_load_print_meta: n_ff             = 16384
0.00.266.665 I llm_load_print_meta: n_expert         = 0
0.00.266.665 I llm_load_print_meta: n_expert_used    = 0
0.00.266.665 I llm_load_print_meta: causal attn      = 1
0.00.266.666 I llm_load_print_meta: pooling type     = 0
0.00.266.666 I llm_load_print_meta: rope type        = 2
0.00.266.666 I llm_load_print_meta: rope scaling     = linear
0.00.266.668 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.668 I llm_load_print_meta: freq_scale_train = 1
0.00.266.669 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.669 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.669 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.670 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.670 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.670 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.670 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.671 I llm_load_print_meta: model type       = 2B
0.00.266.671 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.672 I llm_load_print_meta: model params     = 2.51 B
0.00.266.673 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.673 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.674 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.674 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.675 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.675 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.675 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.676 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.676 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.676 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.677 I llm_load_print_meta: max token length = 93
0.00.327.062 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.332.102 I llama_new_context_with_model: n_ctx      = 8192
0.00.332.108 I llama_new_context_with_model: n_batch    = 2048
0.00.332.108 I llama_new_context_with_model: n_ubatch   = 512
0.00.332.109 I llama_new_context_with_model: flash_attn = 0
0.00.332.111 I llama_new_context_with_model: freq_base  = 10000.0
0.00.332.112 I llama_new_context_with_model: freq_scale = 1
0.00.361.262 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.361.279 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.361.375 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.344 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.363.350 I llama_new_context_with_model: graph nodes  = 601
0.00.363.350 I llama_new_context_with_model: graph splits = 1
0.00.363.352 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.666 I main: llama threadpool init, n_threads = 4
0.00.443.680 I 
0.00.443.758 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.762 I 
0.00.443.807 I sampler seed: 4109868761
0.00.443.819 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.822 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.823 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.823 I 
 squaRED 4000

**Question:** Explain the concept of "time dilation".

**Definition:** Time dilation is the apparent decrease in the rate

0.02.151.773 I llama_perf_sampler_print:    sampling time =       4.69 ms /    33 runs   (    0.14 ms per token,  7039.25 tokens per second)
0.02.151.776 I llama_perf_context_print:        load time =     441.80 ms
0.02.151.778 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.151.779 I llama_perf_context_print:        eval time =    1688.35 ms /    32 runs   (   52.76 ms per token,    18.95 tokens per second)
0.02.151.780 I llama_perf_context_print:       total time =    1708.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.383s
user	8m15.511s
sys	0m7.148s
