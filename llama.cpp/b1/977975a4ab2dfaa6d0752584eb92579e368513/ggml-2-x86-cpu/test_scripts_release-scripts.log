+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4342 (b1977975) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.209 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.219 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.226 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.231 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.232 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.236 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.237 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.238 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.238 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.239 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.239 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.243 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.244 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.245 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.246 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.247 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.456 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.075 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.972 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.979 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.980 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.981 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.981 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.982 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.983 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.986 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.986 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.987 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.988 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.990 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.994 I llama_model_loader: - type  f32:   37 tensors
0.00.132.996 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.070 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.426 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.988 I llm_load_vocab: special tokens cache size = 5
0.00.287.894 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.910 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.910 I llm_load_print_meta: arch             = gemma
0.00.287.911 I llm_load_print_meta: vocab type       = SPM
0.00.287.912 I llm_load_print_meta: n_vocab          = 256000
0.00.287.912 I llm_load_print_meta: n_merges         = 0
0.00.287.912 I llm_load_print_meta: vocab_only       = 0
0.00.287.912 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.913 I llm_load_print_meta: n_embd           = 2048
0.00.287.913 I llm_load_print_meta: n_layer          = 18
0.00.287.925 I llm_load_print_meta: n_head           = 8
0.00.287.926 I llm_load_print_meta: n_head_kv        = 1
0.00.287.926 I llm_load_print_meta: n_rot            = 256
0.00.287.927 I llm_load_print_meta: n_swa            = 0
0.00.287.927 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.927 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.928 I llm_load_print_meta: n_gqa            = 8
0.00.287.929 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.929 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.930 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.932 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.932 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.933 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.933 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.934 I llm_load_print_meta: n_ff             = 16384
0.00.287.934 I llm_load_print_meta: n_expert         = 0
0.00.287.934 I llm_load_print_meta: n_expert_used    = 0
0.00.287.935 I llm_load_print_meta: causal attn      = 1
0.00.287.935 I llm_load_print_meta: pooling type     = 0
0.00.287.935 I llm_load_print_meta: rope type        = 2
0.00.287.935 I llm_load_print_meta: rope scaling     = linear
0.00.287.936 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.937 I llm_load_print_meta: freq_scale_train = 1
0.00.287.937 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.938 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.938 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.938 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.939 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.939 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.939 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.940 I llm_load_print_meta: model type       = 2B
0.00.287.940 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.941 I llm_load_print_meta: model params     = 2.51 B
0.00.287.942 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.942 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.942 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.943 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.943 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.943 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.944 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.944 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.944 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.945 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.945 I llm_load_print_meta: max token length = 93
0.00.388.615 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.388.623 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.388.623 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.388.624 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.388.624 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.388.625 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.393.888 I llama_new_context_with_model: n_seq_max     = 1
0.00.393.895 I llama_new_context_with_model: n_ctx         = 4096
0.00.393.895 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.393.896 I llama_new_context_with_model: n_batch       = 2048
0.00.393.896 I llama_new_context_with_model: n_ubatch      = 512
0.00.393.896 I llama_new_context_with_model: flash_attn    = 0
0.00.393.900 I llama_new_context_with_model: freq_base     = 10000.0
0.00.393.900 I llama_new_context_with_model: freq_scale    = 1
0.00.393.901 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.408.484 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.408.498 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.408.592 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.409.891 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.409.898 I llama_new_context_with_model: graph nodes  = 601
0.00.409.898 I llama_new_context_with_model: graph splits = 1
0.00.409.901 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.409.901 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.494.983 I main: llama threadpool init, n_threads = 4
0.00.494.998 I 
0.00.495.072 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.495.075 I 
0.00.495.120 I sampler seed: 1216056867
0.00.495.131 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.142 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.495.146 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.146 I 
 increasels to investigate the feasibility of creating a decentralized governance platform for a multi-stakeholder organization (MSO).

**Objectives:**

* Assess the feasibility of

0.02.750.031 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6575.01 tokens per second)
0.02.750.033 I llama_perf_context_print:        load time =     494.22 ms
0.02.750.034 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.750.035 I llama_perf_context_print:        eval time =    2235.98 ms /    32 runs   (   69.87 ms per token,    14.31 tokens per second)
0.02.750.036 I llama_perf_context_print:       total time =    2255.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.547 I build: 4342 (b1977975) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.022.858 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.874 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.882 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.883 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.888 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.889 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.889 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.890 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.890 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.891 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.895 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.896 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.896 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.897 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.897 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.522 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.899 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.749 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.755 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.756 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.757 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.758 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.759 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.760 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.764 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.764 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.766 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.766 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.768 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.771 I llama_model_loader: - type  f32:   37 tensors
0.00.133.772 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.445 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.994 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.655 I llm_load_vocab: special tokens cache size = 5
0.00.273.759 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.778 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.778 I llm_load_print_meta: arch             = gemma
0.00.273.779 I llm_load_print_meta: vocab type       = SPM
0.00.273.780 I llm_load_print_meta: n_vocab          = 256000
0.00.273.780 I llm_load_print_meta: n_merges         = 0
0.00.273.780 I llm_load_print_meta: vocab_only       = 0
0.00.273.781 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.781 I llm_load_print_meta: n_embd           = 2048
0.00.273.782 I llm_load_print_meta: n_layer          = 18
0.00.273.793 I llm_load_print_meta: n_head           = 8
0.00.273.794 I llm_load_print_meta: n_head_kv        = 1
0.00.273.794 I llm_load_print_meta: n_rot            = 256
0.00.273.794 I llm_load_print_meta: n_swa            = 0
0.00.273.795 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.795 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.796 I llm_load_print_meta: n_gqa            = 8
0.00.273.797 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.798 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.798 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.800 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.801 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.801 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.802 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.802 I llm_load_print_meta: n_ff             = 16384
0.00.273.803 I llm_load_print_meta: n_expert         = 0
0.00.273.803 I llm_load_print_meta: n_expert_used    = 0
0.00.273.803 I llm_load_print_meta: causal attn      = 1
0.00.273.804 I llm_load_print_meta: pooling type     = 0
0.00.273.804 I llm_load_print_meta: rope type        = 2
0.00.273.804 I llm_load_print_meta: rope scaling     = linear
0.00.273.805 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.806 I llm_load_print_meta: freq_scale_train = 1
0.00.273.806 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.806 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.807 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.807 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.807 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.807 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.808 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.808 I llm_load_print_meta: model type       = 2B
0.00.273.808 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.809 I llm_load_print_meta: model params     = 2.51 B
0.00.273.810 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.811 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.811 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.811 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.812 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.812 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.812 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.813 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.813 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.814 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.814 I llm_load_print_meta: max token length = 93
0.00.367.577 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.372.727 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.733 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.734 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.734 I llama_new_context_with_model: n_batch       = 2048
0.00.372.735 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.735 I llama_new_context_with_model: flash_attn    = 0
0.00.372.737 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.738 I llama_new_context_with_model: freq_scale    = 1
0.00.372.739 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.647 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.661 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.753 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.035 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.042 I llama_new_context_with_model: graph nodes  = 601
0.00.389.042 I llama_new_context_with_model: graph splits = 1
0.00.389.045 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.046 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.216 I main: llama threadpool init, n_threads = 4
0.00.470.233 I 
0.00.470.304 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.308 I 
0.00.470.350 I sampler seed: 511613373
0.00.470.360 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.368 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.369 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.369 I 
 increasities from time to time. [end of text]


0.01.013.762 I llama_perf_sampler_print:    sampling time =       1.23 ms /     9 runs   (    0.14 ms per token,  7299.27 tokens per second)
0.01.013.764 I llama_perf_context_print:        load time =     469.44 ms
0.01.013.765 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.013.766 I llama_perf_context_print:        eval time =     537.76 ms /     8 runs   (   67.22 ms per token,    14.88 tokens per second)
0.01.013.767 I llama_perf_context_print:       total time =     543.55 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.572 I build: 4342 (b1977975) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.021.040 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.053 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.061 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.070 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.071 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.076 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.077 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.078 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.078 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.079 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.080 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.085 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.086 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.087 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.088 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.090 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.083 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.991 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.918 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.924 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.925 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.925 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.926 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.927 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.927 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.930 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.930 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.931 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.932 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.934 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.938 I llama_model_loader: - type  f32:   37 tensors
0.00.132.940 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.003 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.760 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.323 I llm_load_vocab: special tokens cache size = 5
0.00.275.355 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.372 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.372 I llm_load_print_meta: arch             = gemma
0.00.275.373 I llm_load_print_meta: vocab type       = SPM
0.00.275.373 I llm_load_print_meta: n_vocab          = 256000
0.00.275.374 I llm_load_print_meta: n_merges         = 0
0.00.275.374 I llm_load_print_meta: vocab_only       = 0
0.00.275.374 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.375 I llm_load_print_meta: n_embd           = 2048
0.00.275.375 I llm_load_print_meta: n_layer          = 18
0.00.275.387 I llm_load_print_meta: n_head           = 8
0.00.275.388 I llm_load_print_meta: n_head_kv        = 1
0.00.275.388 I llm_load_print_meta: n_rot            = 256
0.00.275.388 I llm_load_print_meta: n_swa            = 0
0.00.275.388 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.389 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.389 I llm_load_print_meta: n_gqa            = 8
0.00.275.390 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.391 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.392 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.394 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.394 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.394 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.395 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.396 I llm_load_print_meta: n_ff             = 16384
0.00.275.396 I llm_load_print_meta: n_expert         = 0
0.00.275.396 I llm_load_print_meta: n_expert_used    = 0
0.00.275.396 I llm_load_print_meta: causal attn      = 1
0.00.275.396 I llm_load_print_meta: pooling type     = 0
0.00.275.397 I llm_load_print_meta: rope type        = 2
0.00.275.397 I llm_load_print_meta: rope scaling     = linear
0.00.275.398 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.399 I llm_load_print_meta: freq_scale_train = 1
0.00.275.399 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.400 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.400 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.401 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.401 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.401 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.401 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.402 I llm_load_print_meta: model type       = 2B
0.00.275.402 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.404 I llm_load_print_meta: model params     = 2.51 B
0.00.275.404 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.405 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.405 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.405 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.405 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.406 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.406 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.406 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.407 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.407 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.407 I llm_load_print_meta: max token length = 93
0.00.352.837 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.352.844 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.845 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.352.845 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.352.846 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.846 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.358.874 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.881 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.881 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.882 I llama_new_context_with_model: n_batch       = 2048
0.00.358.882 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.883 I llama_new_context_with_model: flash_attn    = 0
0.00.358.885 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.886 I llama_new_context_with_model: freq_scale    = 1
0.00.358.887 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.100 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.114 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.205 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.445 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.452 I llama_new_context_with_model: graph nodes  = 601
0.00.375.453 I llama_new_context_with_model: graph splits = 1
0.00.375.456 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.375.457 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.037 I main: llama threadpool init, n_threads = 4
0.00.459.053 I 
0.00.459.126 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.129 I 
0.00.459.170 I sampler seed: 2058005557
0.00.459.180 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.183 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.184 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.187 I 
 increasities?

I am unable to generate a response as the provided context contains sexually suggestive or inappropriate content that I am not allowed to provide. [end of text]


0.02.593.374 I llama_perf_sampler_print:    sampling time =       5.02 ms /    31 runs   (    0.16 ms per token,  6175.30 tokens per second)
0.02.593.376 I llama_perf_context_print:        load time =     458.26 ms
0.02.593.377 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.593.378 I llama_perf_context_print:        eval time =    2116.41 ms /    30 runs   (   70.55 ms per token,    14.17 tokens per second)
0.02.593.379 I llama_perf_context_print:       total time =    2134.34 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.534 I build: 4342 (b1977975) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.222 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.232 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.244 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.253 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.255 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.260 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.268 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.274 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.275 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.276 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.278 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.279 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.918 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.280 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.124 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.130 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.131 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.131 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.132 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.133 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.133 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.135 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.136 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.137 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.138 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.138 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.143 I llama_model_loader: - type  f32:   37 tensors
0.00.132.145 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.059 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.309 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.840 I llm_load_vocab: special tokens cache size = 5
0.00.267.352 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.368 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.368 I llm_load_print_meta: arch             = gemma
0.00.267.369 I llm_load_print_meta: vocab type       = SPM
0.00.267.369 I llm_load_print_meta: n_vocab          = 256000
0.00.267.370 I llm_load_print_meta: n_merges         = 0
0.00.267.370 I llm_load_print_meta: vocab_only       = 0
0.00.267.370 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.370 I llm_load_print_meta: n_embd           = 2048
0.00.267.371 I llm_load_print_meta: n_layer          = 18
0.00.267.382 I llm_load_print_meta: n_head           = 8
0.00.267.383 I llm_load_print_meta: n_head_kv        = 1
0.00.267.383 I llm_load_print_meta: n_rot            = 256
0.00.267.383 I llm_load_print_meta: n_swa            = 0
0.00.267.384 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.384 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.385 I llm_load_print_meta: n_gqa            = 8
0.00.267.386 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.387 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.387 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.389 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.389 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.389 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.390 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.391 I llm_load_print_meta: n_ff             = 16384
0.00.267.391 I llm_load_print_meta: n_expert         = 0
0.00.267.391 I llm_load_print_meta: n_expert_used    = 0
0.00.267.392 I llm_load_print_meta: causal attn      = 1
0.00.267.392 I llm_load_print_meta: pooling type     = 0
0.00.267.392 I llm_load_print_meta: rope type        = 2
0.00.267.393 I llm_load_print_meta: rope scaling     = linear
0.00.267.394 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.394 I llm_load_print_meta: freq_scale_train = 1
0.00.267.395 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.395 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.395 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.396 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.396 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.396 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.396 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.397 I llm_load_print_meta: model type       = 2B
0.00.267.397 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.398 I llm_load_print_meta: model params     = 2.51 B
0.00.267.399 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.399 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.399 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.400 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.400 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.400 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.400 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.401 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.401 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.402 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.402 I llm_load_print_meta: max token length = 93
0.00.338.032 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.338.039 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.343.539 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.546 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.546 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.546 I llama_new_context_with_model: n_batch       = 2048
0.00.343.547 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.547 I llama_new_context_with_model: flash_attn    = 0
0.00.343.550 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.550 I llama_new_context_with_model: freq_scale    = 1
0.00.343.551 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.796 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.811 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.912 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.189 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.195 I llama_new_context_with_model: graph nodes  = 601
0.00.359.195 I llama_new_context_with_model: graph splits = 1
0.00.359.198 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.359.198 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.652 I main: llama threadpool init, n_threads = 4
0.00.454.669 I 
0.00.454.758 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.762 I 
0.00.454.811 I sampler seed: 556909005
0.00.454.822 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.826 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.828 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.828 I 
 increasities, the protagonist is a young woman with a fiery spirit who dreams of escaping her mundane life and finding adventure.

**Chapter 1: The City

0.02.872.363 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6691.00 tokens per second)
0.02.872.365 I llama_perf_context_print:        load time =     453.89 ms
0.02.872.367 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.872.368 I llama_perf_context_print:        eval time =    2398.85 ms /    32 runs   (   74.96 ms per token,    13.34 tokens per second)
0.02.872.369 I llama_perf_context_print:       total time =    2417.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.956s
user	0m32.324s
sys	0m9.389s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4342 (b1977975)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40204.96 ms
main:    total time = 40204.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.564 I build: 4342 (b1977975) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.778 I main: llama backend init
0.00.000.785 I main: load the model and apply lora adapter, if any
0.00.021.205 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.215 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.226 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.237 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.238 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.244 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.245 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.246 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.247 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.248 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.249 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.252 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.253 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.254 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.254 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.255 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.874 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.803 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.792 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.798 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.799 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.799 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.800 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.800 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.801 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.803 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.803 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.804 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.805 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.806 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.809 I llama_model_loader: - type  f32:   37 tensors
0.00.131.810 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.811 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.706 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.271 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.822 I llm_load_vocab: special tokens cache size = 5
0.00.265.627 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.642 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.642 I llm_load_print_meta: arch             = gemma
0.00.265.643 I llm_load_print_meta: vocab type       = SPM
0.00.265.643 I llm_load_print_meta: n_vocab          = 256000
0.00.265.643 I llm_load_print_meta: n_merges         = 0
0.00.265.644 I llm_load_print_meta: vocab_only       = 0
0.00.265.644 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.645 I llm_load_print_meta: n_embd           = 2048
0.00.265.645 I llm_load_print_meta: n_layer          = 18
0.00.265.655 I llm_load_print_meta: n_head           = 8
0.00.265.656 I llm_load_print_meta: n_head_kv        = 1
0.00.265.656 I llm_load_print_meta: n_rot            = 256
0.00.265.656 I llm_load_print_meta: n_swa            = 0
0.00.265.656 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.657 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.658 I llm_load_print_meta: n_gqa            = 8
0.00.265.659 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.660 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.660 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.662 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.662 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.663 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.663 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.664 I llm_load_print_meta: n_ff             = 16384
0.00.265.664 I llm_load_print_meta: n_expert         = 0
0.00.265.665 I llm_load_print_meta: n_expert_used    = 0
0.00.265.665 I llm_load_print_meta: causal attn      = 1
0.00.265.665 I llm_load_print_meta: pooling type     = 0
0.00.265.666 I llm_load_print_meta: rope type        = 2
0.00.265.666 I llm_load_print_meta: rope scaling     = linear
0.00.265.667 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.667 I llm_load_print_meta: freq_scale_train = 1
0.00.265.668 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.668 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.668 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.669 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.669 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.669 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.669 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.670 I llm_load_print_meta: model type       = 2B
0.00.265.671 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.671 I llm_load_print_meta: model params     = 2.51 B
0.00.265.672 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.672 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.673 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.673 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.673 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.673 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.674 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.674 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.675 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.675 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.676 I llm_load_print_meta: max token length = 93
0.00.326.458 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.464 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.465 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.465 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.466 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.466 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.491 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.497 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.497 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.498 I llama_new_context_with_model: n_batch       = 2048
0.00.331.498 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.498 I llama_new_context_with_model: flash_attn    = 0
0.00.331.500 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.501 I llama_new_context_with_model: freq_scale    = 1
0.00.331.502 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.745 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.758 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.848 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.152 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.158 I llama_new_context_with_model: graph nodes  = 601
0.00.347.158 I llama_new_context_with_model: graph splits = 1
0.00.347.161 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.347.161 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.306 I main: llama threadpool init, n_threads = 4
0.00.422.321 I 
0.00.422.394 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.397 I 
0.00.422.438 I sampler seed: 2287106862
0.00.422.450 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.461 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.464 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.464 I 
 increasities

I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks that are within the boundaries of ethical and legal guidelines.

0.02.028.760 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6465.52 tokens per second)
0.02.028.763 I llama_perf_context_print:        load time =     421.51 ms
0.02.028.764 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.028.766 I llama_perf_context_print:        eval time =    1587.74 ms /    32 runs   (   49.62 ms per token,    20.15 tokens per second)
0.02.028.767 I llama_perf_context_print:       total time =    1606.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4342 (b1977975)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40176.01 ms
main:    total time = 40176.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.582 I build: 4342 (b1977975) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.000.788 I main: load the model and apply lora adapter, if any
0.00.021.437 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.452 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.459 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.460 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.465 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.465 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.466 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.467 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.468 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.469 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.474 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.474 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.475 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.476 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.476 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.297 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.362 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.211 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.217 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.218 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.218 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.219 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.220 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.220 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.223 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.223 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.227 I llama_model_loader: - type  f32:   37 tensors
0.00.132.228 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.229 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.437 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.320 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.833 I llm_load_vocab: special tokens cache size = 5
0.00.268.599 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.615 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.616 I llm_load_print_meta: arch             = gemma
0.00.268.617 I llm_load_print_meta: vocab type       = SPM
0.00.268.617 I llm_load_print_meta: n_vocab          = 256000
0.00.268.618 I llm_load_print_meta: n_merges         = 0
0.00.268.618 I llm_load_print_meta: vocab_only       = 0
0.00.268.618 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.619 I llm_load_print_meta: n_embd           = 2048
0.00.268.619 I llm_load_print_meta: n_layer          = 18
0.00.268.630 I llm_load_print_meta: n_head           = 8
0.00.268.631 I llm_load_print_meta: n_head_kv        = 1
0.00.268.631 I llm_load_print_meta: n_rot            = 256
0.00.268.632 I llm_load_print_meta: n_swa            = 0
0.00.268.632 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.632 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.633 I llm_load_print_meta: n_gqa            = 8
0.00.268.634 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.635 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.636 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.637 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.638 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.638 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.639 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.639 I llm_load_print_meta: n_ff             = 16384
0.00.268.640 I llm_load_print_meta: n_expert         = 0
0.00.268.640 I llm_load_print_meta: n_expert_used    = 0
0.00.268.640 I llm_load_print_meta: causal attn      = 1
0.00.268.641 I llm_load_print_meta: pooling type     = 0
0.00.268.641 I llm_load_print_meta: rope type        = 2
0.00.268.641 I llm_load_print_meta: rope scaling     = linear
0.00.268.642 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.643 I llm_load_print_meta: freq_scale_train = 1
0.00.268.643 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.644 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.644 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.644 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.644 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.645 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.645 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.646 I llm_load_print_meta: model type       = 2B
0.00.268.646 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.647 I llm_load_print_meta: model params     = 2.51 B
0.00.268.648 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.649 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.649 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.649 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.649 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.650 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.650 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.650 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.651 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.651 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.651 I llm_load_print_meta: max token length = 93
0.00.328.311 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.333.433 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.440 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.441 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.441 I llama_new_context_with_model: n_batch       = 2048
0.00.333.441 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.442 I llama_new_context_with_model: flash_attn    = 0
0.00.333.444 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.445 I llama_new_context_with_model: freq_scale    = 1
0.00.333.446 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.968 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.982 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.067 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.273 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.279 I llama_new_context_with_model: graph nodes  = 601
0.00.349.280 I llama_new_context_with_model: graph splits = 1
0.00.349.282 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.349.282 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.924 I main: llama threadpool init, n_threads = 4
0.00.423.941 I 
0.00.424.021 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.424.024 I 
0.00.424.071 I sampler seed: 2127036597
0.00.424.081 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.092 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.096 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.096 I 
 seconally, then provide your analysis and conclusions.

**Analysis:**

The provided text does not contain any specific analysis or conclusions, so I am unable to

0.02.018.956 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6712.77 tokens per second)
0.02.018.959 I llama_perf_context_print:        load time =     423.12 ms
0.02.018.960 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.018.961 I llama_perf_context_print:        eval time =    1575.86 ms /    32 runs   (   49.25 ms per token,    20.31 tokens per second)
0.02.018.962 I llama_perf_context_print:       total time =    1595.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.199s
user	10m24.199s
sys	0m6.791s
