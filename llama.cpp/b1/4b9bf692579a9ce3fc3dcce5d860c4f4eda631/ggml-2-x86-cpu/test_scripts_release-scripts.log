+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.601 I build: 4228 (b14b9bf6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.794 I main: llama backend init
0.00.000.803 I main: load the model and apply lora adapter, if any
0.00.021.327 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.336 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.344 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.353 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.356 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.360 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.360 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.361 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.361 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.362 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.362 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.366 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.367 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.367 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.368 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.368 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.830 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.035 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.824 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.830 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.831 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.832 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.833 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.834 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.835 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.838 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.839 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.840 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.841 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.842 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.845 I llama_model_loader: - type  f32:   37 tensors
0.00.130.846 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.843 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.787 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.412 I llm_load_vocab: special tokens cache size = 5
0.00.265.446 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.466 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.466 I llm_load_print_meta: arch             = gemma
0.00.265.467 I llm_load_print_meta: vocab type       = SPM
0.00.265.468 I llm_load_print_meta: n_vocab          = 256000
0.00.265.469 I llm_load_print_meta: n_merges         = 0
0.00.265.469 I llm_load_print_meta: vocab_only       = 0
0.00.265.471 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.471 I llm_load_print_meta: n_embd           = 2048
0.00.265.472 I llm_load_print_meta: n_layer          = 18
0.00.265.484 I llm_load_print_meta: n_head           = 8
0.00.265.485 I llm_load_print_meta: n_head_kv        = 1
0.00.265.485 I llm_load_print_meta: n_rot            = 256
0.00.265.486 I llm_load_print_meta: n_swa            = 0
0.00.265.486 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.486 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.487 I llm_load_print_meta: n_gqa            = 8
0.00.265.488 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.489 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.489 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.491 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.492 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.493 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.493 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.494 I llm_load_print_meta: n_ff             = 16384
0.00.265.494 I llm_load_print_meta: n_expert         = 0
0.00.265.495 I llm_load_print_meta: n_expert_used    = 0
0.00.265.495 I llm_load_print_meta: causal attn      = 1
0.00.265.495 I llm_load_print_meta: pooling type     = 0
0.00.265.496 I llm_load_print_meta: rope type        = 2
0.00.265.496 I llm_load_print_meta: rope scaling     = linear
0.00.265.497 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.498 I llm_load_print_meta: freq_scale_train = 1
0.00.265.498 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.499 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.499 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.499 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.500 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.501 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.501 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.501 I llm_load_print_meta: model type       = 2B
0.00.265.502 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.503 I llm_load_print_meta: model params     = 2.51 B
0.00.265.504 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.504 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.505 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.505 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.506 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.506 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.506 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.507 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.508 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.508 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.509 I llm_load_print_meta: max token length = 93
0.00.365.691 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.698 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.699 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.700 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.700 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.701 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.923 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.929 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.929 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.930 I llama_new_context_with_model: n_batch       = 2048
0.00.370.930 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.931 I llama_new_context_with_model: flash_attn    = 0
0.00.370.933 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.934 I llama_new_context_with_model: freq_scale    = 1
0.00.370.935 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.554 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.569 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.659 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.891 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.898 I llama_new_context_with_model: graph nodes  = 601
0.00.386.898 I llama_new_context_with_model: graph splits = 1
0.00.386.900 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.272 I main: llama threadpool init, n_threads = 4
0.00.471.288 I 
0.00.471.358 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.471.361 I 
0.00.471.403 I sampler seed: 3388033325
0.00.471.414 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.417 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.418 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.419 I 
 increasities, a seductive siren, and a treacherous path.

What story are you telling?

This is the beginning of a short story.

The crimson

0.02.723.150 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6905.21 tokens per second)
0.02.723.152 I llama_perf_context_print:        load time =     470.45 ms
0.02.723.154 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.723.155 I llama_perf_context_print:        eval time =    2233.20 ms /    32 runs   (   69.79 ms per token,    14.33 tokens per second)
0.02.723.156 I llama_perf_context_print:       total time =    2251.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.589 I build: 4228 (b14b9bf6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.813 I main: llama backend init
0.00.000.820 I main: load the model and apply lora adapter, if any
0.00.021.246 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.261 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.268 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.269 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.274 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.275 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.281 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.281 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.282 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.283 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.289 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.290 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.291 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.292 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.293 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.788 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.368 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.162 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.168 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.169 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.170 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.171 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.173 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.174 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.177 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.178 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.179 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.180 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.182 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.187 I llama_model_loader: - type  f32:   37 tensors
0.00.130.188 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.334 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.939 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.529 I llm_load_vocab: special tokens cache size = 5
0.00.266.553 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.568 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.569 I llm_load_print_meta: arch             = gemma
0.00.266.569 I llm_load_print_meta: vocab type       = SPM
0.00.266.570 I llm_load_print_meta: n_vocab          = 256000
0.00.266.570 I llm_load_print_meta: n_merges         = 0
0.00.266.570 I llm_load_print_meta: vocab_only       = 0
0.00.266.571 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.571 I llm_load_print_meta: n_embd           = 2048
0.00.266.571 I llm_load_print_meta: n_layer          = 18
0.00.266.582 I llm_load_print_meta: n_head           = 8
0.00.266.584 I llm_load_print_meta: n_head_kv        = 1
0.00.266.584 I llm_load_print_meta: n_rot            = 256
0.00.266.584 I llm_load_print_meta: n_swa            = 0
0.00.266.585 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.585 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.586 I llm_load_print_meta: n_gqa            = 8
0.00.266.587 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.588 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.589 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.590 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.590 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.591 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.591 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.592 I llm_load_print_meta: n_ff             = 16384
0.00.266.593 I llm_load_print_meta: n_expert         = 0
0.00.266.593 I llm_load_print_meta: n_expert_used    = 0
0.00.266.593 I llm_load_print_meta: causal attn      = 1
0.00.266.593 I llm_load_print_meta: pooling type     = 0
0.00.266.594 I llm_load_print_meta: rope type        = 2
0.00.266.594 I llm_load_print_meta: rope scaling     = linear
0.00.266.596 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.597 I llm_load_print_meta: freq_scale_train = 1
0.00.266.597 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.597 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.598 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.598 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.598 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.598 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.599 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.599 I llm_load_print_meta: model type       = 2B
0.00.266.600 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.601 I llm_load_print_meta: model params     = 2.51 B
0.00.266.601 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.602 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.602 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.602 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.603 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.603 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.603 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.604 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.604 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.605 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.605 I llm_load_print_meta: max token length = 93
0.00.364.053 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.293 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.299 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.300 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.300 I llama_new_context_with_model: n_batch       = 2048
0.00.369.301 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.301 I llama_new_context_with_model: flash_attn    = 0
0.00.369.303 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.304 I llama_new_context_with_model: freq_scale    = 1
0.00.369.305 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.917 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.932 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.021 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.303 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.309 I llama_new_context_with_model: graph nodes  = 601
0.00.385.310 I llama_new_context_with_model: graph splits = 1
0.00.385.311 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.226 I main: llama threadpool init, n_threads = 4
0.00.468.244 I 
0.00.468.336 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.468.340 I 
0.00.468.393 I sampler seed: 2602676642
0.00.468.403 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.408 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.408 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.408 I 
 increasels in the poem, and compare their significance with that of the phoenix.

**The Decadence of the Crescendo**

The crescendo of the

0.02.636.458 I llama_perf_sampler_print:    sampling time =       4.85 ms /    33 runs   (    0.15 ms per token,  6799.92 tokens per second)
0.02.636.462 I llama_perf_context_print:        load time =     467.39 ms
0.02.636.463 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.636.464 I llama_perf_context_print:        eval time =    2149.09 ms /    32 runs   (   67.16 ms per token,    14.89 tokens per second)
0.02.636.465 I llama_perf_context_print:       total time =    2168.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.174 I build: 4228 (b14b9bf6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.388 I main: llama backend init
0.00.000.395 I main: load the model and apply lora adapter, if any
0.00.020.692 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.702 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.711 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.720 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.721 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.725 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.726 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.728 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.728 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.729 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.730 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.736 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.737 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.738 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.738 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.739 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.319 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.830 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.660 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.666 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.668 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.669 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.669 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.670 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.671 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.674 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.675 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.676 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.677 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.129.678 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.682 I llama_model_loader: - type  f32:   37 tensors
0.00.129.683 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.887 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.227 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.790 I llm_load_vocab: special tokens cache size = 5
0.00.265.842 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.856 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.857 I llm_load_print_meta: arch             = gemma
0.00.265.857 I llm_load_print_meta: vocab type       = SPM
0.00.265.858 I llm_load_print_meta: n_vocab          = 256000
0.00.265.859 I llm_load_print_meta: n_merges         = 0
0.00.265.859 I llm_load_print_meta: vocab_only       = 0
0.00.265.859 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.860 I llm_load_print_meta: n_embd           = 2048
0.00.265.860 I llm_load_print_meta: n_layer          = 18
0.00.265.872 I llm_load_print_meta: n_head           = 8
0.00.265.874 I llm_load_print_meta: n_head_kv        = 1
0.00.265.874 I llm_load_print_meta: n_rot            = 256
0.00.265.875 I llm_load_print_meta: n_swa            = 0
0.00.265.875 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.876 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.878 I llm_load_print_meta: n_gqa            = 8
0.00.265.879 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.881 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.882 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.883 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.884 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.885 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.886 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.892 I llm_load_print_meta: n_ff             = 16384
0.00.265.893 I llm_load_print_meta: n_expert         = 0
0.00.265.893 I llm_load_print_meta: n_expert_used    = 0
0.00.265.894 I llm_load_print_meta: causal attn      = 1
0.00.265.895 I llm_load_print_meta: pooling type     = 0
0.00.265.895 I llm_load_print_meta: rope type        = 2
0.00.265.896 I llm_load_print_meta: rope scaling     = linear
0.00.265.898 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.900 I llm_load_print_meta: freq_scale_train = 1
0.00.265.900 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.901 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.901 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.902 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.902 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.903 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.903 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.904 I llm_load_print_meta: model type       = 2B
0.00.265.904 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.905 I llm_load_print_meta: model params     = 2.51 B
0.00.265.907 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.907 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.908 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.908 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.909 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.909 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.910 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.910 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.911 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.912 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.912 I llm_load_print_meta: max token length = 93
0.00.340.465 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.340.471 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.472 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.340.473 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.340.473 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.474 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.345.731 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.737 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.738 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.739 I llama_new_context_with_model: n_batch       = 2048
0.00.345.739 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.739 I llama_new_context_with_model: flash_attn    = 0
0.00.345.741 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.742 I llama_new_context_with_model: freq_scale    = 1
0.00.345.743 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.211 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.224 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.327 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.631 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.639 I llama_new_context_with_model: graph nodes  = 601
0.00.361.639 I llama_new_context_with_model: graph splits = 1
0.00.361.641 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.834 I main: llama threadpool init, n_threads = 4
0.00.446.849 I 
0.00.446.929 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.446.932 I 
0.00.446.993 I sampler seed: 1532617164
0.00.447.003 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.007 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.007 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.009 I 
 increably.

I am a large language model, trained on a massive dataset of text and code. I am able to generate human-quality text in response

0.02.736.982 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6915.34 tokens per second)
0.02.736.985 I llama_perf_context_print:        load time =     446.42 ms
0.02.736.986 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.736.988 I llama_perf_context_print:        eval time =    2270.71 ms /    32 runs   (   70.96 ms per token,    14.09 tokens per second)
0.02.736.989 I llama_perf_context_print:       total time =    2290.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.634 I build: 4228 (b14b9bf6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.825 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.027.053 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.027.064 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.027.072 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.077 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.078 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.082 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.082 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.083 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.083 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.084 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.084 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.089 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.089 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.090 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.091 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.092 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.639 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.137.274 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.144.161 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.144.168 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.144.169 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.144.170 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.144.171 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.144.172 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.144.173 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.144.176 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.144.177 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.144.179 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.144.180 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.144.181 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.144.184 I llama_model_loader: - type  f32:   37 tensors
0.00.144.185 I llama_model_loader: - type q8_0:  127 tensors
0.00.225.070 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.022 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.608 I llm_load_vocab: special tokens cache size = 5
0.00.290.701 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.718 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.718 I llm_load_print_meta: arch             = gemma
0.00.290.719 I llm_load_print_meta: vocab type       = SPM
0.00.290.720 I llm_load_print_meta: n_vocab          = 256000
0.00.290.720 I llm_load_print_meta: n_merges         = 0
0.00.290.721 I llm_load_print_meta: vocab_only       = 0
0.00.290.721 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.722 I llm_load_print_meta: n_embd           = 2048
0.00.290.722 I llm_load_print_meta: n_layer          = 18
0.00.290.734 I llm_load_print_meta: n_head           = 8
0.00.290.735 I llm_load_print_meta: n_head_kv        = 1
0.00.290.735 I llm_load_print_meta: n_rot            = 256
0.00.290.735 I llm_load_print_meta: n_swa            = 0
0.00.290.735 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.736 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.737 I llm_load_print_meta: n_gqa            = 8
0.00.290.738 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.739 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.740 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.741 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.741 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.741 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.742 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.743 I llm_load_print_meta: n_ff             = 16384
0.00.290.743 I llm_load_print_meta: n_expert         = 0
0.00.290.743 I llm_load_print_meta: n_expert_used    = 0
0.00.290.743 I llm_load_print_meta: causal attn      = 1
0.00.290.744 I llm_load_print_meta: pooling type     = 0
0.00.290.744 I llm_load_print_meta: rope type        = 2
0.00.290.745 I llm_load_print_meta: rope scaling     = linear
0.00.290.746 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.290.746 I llm_load_print_meta: freq_scale_train = 1
0.00.290.747 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.290.747 I llm_load_print_meta: rope_finetuned   = unknown
0.00.290.747 I llm_load_print_meta: ssm_d_conv       = 0
0.00.290.748 I llm_load_print_meta: ssm_d_inner      = 0
0.00.290.748 I llm_load_print_meta: ssm_d_state      = 0
0.00.290.748 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.290.748 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.290.749 I llm_load_print_meta: model type       = 2B
0.00.290.750 I llm_load_print_meta: model ftype      = Q8_0
0.00.290.751 I llm_load_print_meta: model params     = 2.51 B
0.00.290.752 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.290.752 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.290.752 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.290.753 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.290.753 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.290.753 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.290.754 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.290.754 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.290.754 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.290.755 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.290.755 I llm_load_print_meta: max token length = 93
0.00.368.168 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.368.174 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.373.317 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.324 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.324 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.324 I llama_new_context_with_model: n_batch       = 2048
0.00.373.325 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.325 I llama_new_context_with_model: flash_attn    = 0
0.00.373.328 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.329 I llama_new_context_with_model: freq_scale    = 1
0.00.373.330 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.566 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.578 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.668 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.928 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.935 I llama_new_context_with_model: graph nodes  = 601
0.00.389.935 I llama_new_context_with_model: graph splits = 1
0.00.389.938 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.173 I main: llama threadpool init, n_threads = 4
0.00.479.189 I 
0.00.479.253 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.479.257 I 
0.00.479.303 I sampler seed: 3345696420
0.00.479.314 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.326 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.329 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.330 I 
 maneuvres, a powerful ability that allows a character to manipulate the emotions of others.

**Usage:**

* The character can cause others to feel fear,

0.02.903.023 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6589.46 tokens per second)
0.02.903.026 I llama_perf_context_print:        load time =     478.32 ms
0.02.903.027 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.903.028 I llama_perf_context_print:        eval time =    2403.91 ms /    32 runs   (   75.12 ms per token,    13.31 tokens per second)
0.02.903.029 I llama_perf_context_print:       total time =    2423.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.476s
user	0m39.407s
sys	0m9.335s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4228 (b14b9bf6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40187.02 ms
main:    total time = 40187.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.174 I build: 4228 (b14b9bf6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.382 I main: llama backend init
0.00.000.388 I main: load the model and apply lora adapter, if any
0.00.020.865 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.877 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.885 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.890 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.891 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.894 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.895 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.896 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.897 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.897 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.898 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.902 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.903 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.903 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.904 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.905 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.468 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.675 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.562 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.570 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.571 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.572 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.572 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.573 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.574 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.577 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.577 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.578 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.579 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.581 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.585 I llama_model_loader: - type  f32:   37 tensors
0.00.130.586 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.586 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.742 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.400 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.928 I llm_load_vocab: special tokens cache size = 5
0.00.264.771 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.787 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.787 I llm_load_print_meta: arch             = gemma
0.00.264.788 I llm_load_print_meta: vocab type       = SPM
0.00.264.789 I llm_load_print_meta: n_vocab          = 256000
0.00.264.789 I llm_load_print_meta: n_merges         = 0
0.00.264.789 I llm_load_print_meta: vocab_only       = 0
0.00.264.790 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.790 I llm_load_print_meta: n_embd           = 2048
0.00.264.790 I llm_load_print_meta: n_layer          = 18
0.00.264.802 I llm_load_print_meta: n_head           = 8
0.00.264.803 I llm_load_print_meta: n_head_kv        = 1
0.00.264.803 I llm_load_print_meta: n_rot            = 256
0.00.264.803 I llm_load_print_meta: n_swa            = 0
0.00.264.803 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.803 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.804 I llm_load_print_meta: n_gqa            = 8
0.00.264.805 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.806 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.807 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.809 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.809 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.809 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.810 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.810 I llm_load_print_meta: n_ff             = 16384
0.00.264.811 I llm_load_print_meta: n_expert         = 0
0.00.264.811 I llm_load_print_meta: n_expert_used    = 0
0.00.264.811 I llm_load_print_meta: causal attn      = 1
0.00.264.811 I llm_load_print_meta: pooling type     = 0
0.00.264.812 I llm_load_print_meta: rope type        = 2
0.00.264.812 I llm_load_print_meta: rope scaling     = linear
0.00.264.814 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.814 I llm_load_print_meta: freq_scale_train = 1
0.00.264.815 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.815 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.815 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.816 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.816 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.817 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.817 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.818 I llm_load_print_meta: model type       = 2B
0.00.264.818 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.819 I llm_load_print_meta: model params     = 2.51 B
0.00.264.820 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.820 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.820 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.821 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.821 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.822 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.822 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.823 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.823 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.824 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.824 I llm_load_print_meta: max token length = 93
0.00.325.430 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.325.436 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.325.437 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.325.438 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.325.438 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.325.439 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.330.463 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.469 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.469 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.470 I llama_new_context_with_model: n_batch       = 2048
0.00.330.470 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.471 I llama_new_context_with_model: flash_attn    = 0
0.00.330.472 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.473 I llama_new_context_with_model: freq_scale    = 1
0.00.330.474 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.766 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.780 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.866 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.063 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.071 I llama_new_context_with_model: graph nodes  = 601
0.00.346.071 I llama_new_context_with_model: graph splits = 1
0.00.346.073 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.110 I main: llama threadpool init, n_threads = 4
0.00.421.127 I 
0.00.421.200 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.421.203 I 
0.00.421.244 I sampler seed: 3184977610
0.00.421.255 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.270 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.274 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.274 I 
 squaRED, a veteran hacker and vigilante, finds himself at a crossroads. While battling the villainous organization HYDRA, he must confront his own past and the consequences

0.02.005.318 I llama_perf_sampler_print:    sampling time =       5.18 ms /    33 runs   (    0.16 ms per token,  6374.35 tokens per second)
0.02.005.321 I llama_perf_context_print:        load time =     420.70 ms
0.02.005.322 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.005.323 I llama_perf_context_print:        eval time =    1565.43 ms /    32 runs   (   48.92 ms per token,    20.44 tokens per second)
0.02.005.324 I llama_perf_context_print:       total time =    1584.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4228 (b14b9bf6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40149.61 ms
main:    total time = 40149.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.525 I build: 4228 (b14b9bf6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.726 I main: load the model and apply lora adapter, if any
0.00.021.146 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.164 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.170 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.171 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.175 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.175 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.176 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.177 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.177 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.178 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.181 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.182 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.186 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.186 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.187 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.838 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.247 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.090 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.097 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.098 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.098 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.099 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.100 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.101 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.104 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.104 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.108 I llama_model_loader: - type  f32:   37 tensors
0.00.130.109 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.110 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.393 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.437 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.037 I llm_load_vocab: special tokens cache size = 5
0.00.266.130 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.146 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.147 I llm_load_print_meta: arch             = gemma
0.00.266.147 I llm_load_print_meta: vocab type       = SPM
0.00.266.148 I llm_load_print_meta: n_vocab          = 256000
0.00.266.149 I llm_load_print_meta: n_merges         = 0
0.00.266.149 I llm_load_print_meta: vocab_only       = 0
0.00.266.149 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.149 I llm_load_print_meta: n_embd           = 2048
0.00.266.150 I llm_load_print_meta: n_layer          = 18
0.00.266.162 I llm_load_print_meta: n_head           = 8
0.00.266.163 I llm_load_print_meta: n_head_kv        = 1
0.00.266.163 I llm_load_print_meta: n_rot            = 256
0.00.266.163 I llm_load_print_meta: n_swa            = 0
0.00.266.164 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.164 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.165 I llm_load_print_meta: n_gqa            = 8
0.00.266.166 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.167 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.167 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.168 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.169 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.169 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.170 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.171 I llm_load_print_meta: n_ff             = 16384
0.00.266.171 I llm_load_print_meta: n_expert         = 0
0.00.266.171 I llm_load_print_meta: n_expert_used    = 0
0.00.266.172 I llm_load_print_meta: causal attn      = 1
0.00.266.172 I llm_load_print_meta: pooling type     = 0
0.00.266.172 I llm_load_print_meta: rope type        = 2
0.00.266.173 I llm_load_print_meta: rope scaling     = linear
0.00.266.174 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.175 I llm_load_print_meta: freq_scale_train = 1
0.00.266.175 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.175 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.176 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.176 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.176 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.177 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.177 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.177 I llm_load_print_meta: model type       = 2B
0.00.266.178 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.179 I llm_load_print_meta: model params     = 2.51 B
0.00.266.179 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.180 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.181 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.181 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.181 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.181 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.182 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.182 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.183 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.183 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.183 I llm_load_print_meta: max token length = 93
0.00.322.219 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.434 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.440 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.440 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.440 I llama_new_context_with_model: n_batch       = 2048
0.00.328.441 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.441 I llama_new_context_with_model: flash_attn    = 0
0.00.328.444 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.445 I llama_new_context_with_model: freq_scale    = 1
0.00.328.445 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.103 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.118 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.216 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.501 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.508 I llama_new_context_with_model: graph nodes  = 601
0.00.345.509 I llama_new_context_with_model: graph splits = 1
0.00.345.510 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.616 I main: llama threadpool init, n_threads = 4
0.00.419.632 I 
0.00.419.706 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.419.709 I 
0.00.419.761 I sampler seed: 1107357212
0.00.419.774 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.779 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.779 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.780 I 
 increasities often involve claims of extraterrestrial life and detailed descriptions of encounters. While these reports are intriguing, it is important to critically evaluate the evidence presented and consider

0.01.964.576 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6697.79 tokens per second)
0.01.964.579 I llama_perf_context_print:        load time =     418.87 ms
0.01.964.580 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.964.581 I llama_perf_context_print:        eval time =    1526.29 ms /    32 runs   (   47.70 ms per token,    20.97 tokens per second)
0.01.964.582 I llama_perf_context_print:       total time =    1544.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.099s
user	10m24.064s
sys	0m6.694s
