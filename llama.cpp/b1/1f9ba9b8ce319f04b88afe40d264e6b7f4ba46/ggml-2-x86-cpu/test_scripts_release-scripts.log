+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.567 I build: 4038 (b11f9ba9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.021.551 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.561 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.569 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.574 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.575 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.578 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.579 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.580 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.581 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.582 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.582 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.586 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.587 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.588 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.589 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.589 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.267 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.872 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.743 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.751 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.752 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.753 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.754 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.755 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.756 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.759 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.760 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.761 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.762 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.764 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.768 I llama_model_loader: - type  f32:   37 tensors
0.00.132.769 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.931 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.784 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.425 I llm_load_vocab: special tokens cache size = 5
0.00.287.407 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.426 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.427 I llm_load_print_meta: arch             = gemma
0.00.287.427 I llm_load_print_meta: vocab type       = SPM
0.00.287.428 I llm_load_print_meta: n_vocab          = 256000
0.00.287.429 I llm_load_print_meta: n_merges         = 0
0.00.287.429 I llm_load_print_meta: vocab_only       = 0
0.00.287.430 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.430 I llm_load_print_meta: n_embd           = 2048
0.00.287.430 I llm_load_print_meta: n_layer          = 18
0.00.287.442 I llm_load_print_meta: n_head           = 8
0.00.287.444 I llm_load_print_meta: n_head_kv        = 1
0.00.287.444 I llm_load_print_meta: n_rot            = 256
0.00.287.444 I llm_load_print_meta: n_swa            = 0
0.00.287.445 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.445 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.446 I llm_load_print_meta: n_gqa            = 8
0.00.287.447 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.448 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.449 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.451 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.451 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.451 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.452 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.453 I llm_load_print_meta: n_ff             = 16384
0.00.287.453 I llm_load_print_meta: n_expert         = 0
0.00.287.453 I llm_load_print_meta: n_expert_used    = 0
0.00.287.454 I llm_load_print_meta: causal attn      = 1
0.00.287.454 I llm_load_print_meta: pooling type     = 0
0.00.287.454 I llm_load_print_meta: rope type        = 2
0.00.287.455 I llm_load_print_meta: rope scaling     = linear
0.00.287.456 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.457 I llm_load_print_meta: freq_scale_train = 1
0.00.287.457 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.458 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.458 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.458 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.458 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.459 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.459 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.460 I llm_load_print_meta: model type       = 2B
0.00.287.460 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.461 I llm_load_print_meta: model params     = 2.51 B
0.00.287.462 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.462 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.463 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.463 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.464 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.464 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.464 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.465 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.465 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.466 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.466 I llm_load_print_meta: max token length = 93
0.00.386.524 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.386.533 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.386.534 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.386.534 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.386.535 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.386.535 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.391.900 I llama_new_context_with_model: n_seq_max     = 1
0.00.391.908 I llama_new_context_with_model: n_ctx         = 4096
0.00.391.908 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.391.909 I llama_new_context_with_model: n_batch       = 2048
0.00.391.909 I llama_new_context_with_model: n_ubatch      = 512
0.00.391.910 I llama_new_context_with_model: flash_attn    = 0
0.00.391.913 I llama_new_context_with_model: freq_base     = 10000.0
0.00.391.914 I llama_new_context_with_model: freq_scale    = 1
0.00.391.915 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.407.922 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.407.939 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.408.036 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.409.261 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.409.268 I llama_new_context_with_model: graph nodes  = 601
0.00.409.269 I llama_new_context_with_model: graph splits = 1
0.00.409.270 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.497.658 I main: llama threadpool init, n_threads = 4
0.00.497.674 I 
0.00.497.753 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.497.756 I 
0.00.497.803 I sampler seed: 2694015169
0.00.497.814 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.497.817 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.497.817 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.497.818 I 
 increasities and anxieties, and the potential for transformative change.

**Keywords:** Transformation, anxiety, self-discovery, personal growth, personal fulfillment.

**

0.02.807.048 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6752.61 tokens per second)
0.02.807.050 I llama_perf_context_print:        load time =     496.74 ms
0.02.807.051 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.807.052 I llama_perf_context_print:        eval time =    2289.05 ms /    32 runs   (   71.53 ms per token,    13.98 tokens per second)
0.02.807.053 I llama_perf_context_print:       total time =    2309.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.534 I build: 4038 (b11f9ba9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.021.552 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.569 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.577 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.578 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.583 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.583 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.585 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.586 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.587 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.588 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.594 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.594 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.595 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.595 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.596 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.556 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.091 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.979 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.987 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.988 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.989 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.989 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.990 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.991 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.994 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.994 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.995 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.995 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.996 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.000 I llama_model_loader: - type  f32:   37 tensors
0.00.133.001 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.140 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.932 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.560 I llm_load_vocab: special tokens cache size = 5
0.00.285.420 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.441 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.442 I llm_load_print_meta: arch             = gemma
0.00.285.442 I llm_load_print_meta: vocab type       = SPM
0.00.285.444 I llm_load_print_meta: n_vocab          = 256000
0.00.285.444 I llm_load_print_meta: n_merges         = 0
0.00.285.445 I llm_load_print_meta: vocab_only       = 0
0.00.285.445 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.445 I llm_load_print_meta: n_embd           = 2048
0.00.285.446 I llm_load_print_meta: n_layer          = 18
0.00.285.458 I llm_load_print_meta: n_head           = 8
0.00.285.459 I llm_load_print_meta: n_head_kv        = 1
0.00.285.460 I llm_load_print_meta: n_rot            = 256
0.00.285.460 I llm_load_print_meta: n_swa            = 0
0.00.285.460 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.460 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.461 I llm_load_print_meta: n_gqa            = 8
0.00.285.462 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.463 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.464 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.466 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.466 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.466 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.466 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.467 I llm_load_print_meta: n_ff             = 16384
0.00.285.468 I llm_load_print_meta: n_expert         = 0
0.00.285.468 I llm_load_print_meta: n_expert_used    = 0
0.00.285.468 I llm_load_print_meta: causal attn      = 1
0.00.285.469 I llm_load_print_meta: pooling type     = 0
0.00.285.469 I llm_load_print_meta: rope type        = 2
0.00.285.469 I llm_load_print_meta: rope scaling     = linear
0.00.285.471 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.472 I llm_load_print_meta: freq_scale_train = 1
0.00.285.472 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.472 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.472 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.473 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.473 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.473 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.473 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.474 I llm_load_print_meta: model type       = 2B
0.00.285.474 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.475 I llm_load_print_meta: model params     = 2.51 B
0.00.285.476 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.476 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.477 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.477 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.478 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.478 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.478 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.479 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.479 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.479 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.480 I llm_load_print_meta: max token length = 93
0.00.381.672 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.387.025 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.030 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.031 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.031 I llama_new_context_with_model: n_batch       = 2048
0.00.387.032 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.032 I llama_new_context_with_model: flash_attn    = 0
0.00.387.035 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.036 I llama_new_context_with_model: freq_scale    = 1
0.00.387.037 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.959 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.991 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.403.082 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.304 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.310 I llama_new_context_with_model: graph nodes  = 601
0.00.404.311 I llama_new_context_with_model: graph splits = 1
0.00.404.312 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.223 I main: llama threadpool init, n_threads = 4
0.00.488.238 I 
0.00.488.317 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.488.320 I 
0.00.488.366 I sampler seed: 1717570905
0.00.488.377 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.380 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.488.381 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.381 I 
 increasities. 

I cannot answer this question as it contains sexually suggestive content that is not appropriate for me to discuss. [end of text]


0.02.322.904 I llama_perf_sampler_print:    sampling time =       4.18 ms /    27 runs   (    0.15 ms per token,  6463.97 tokens per second)
0.02.322.906 I llama_perf_context_print:        load time =     487.33 ms
0.02.322.907 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.322.908 I llama_perf_context_print:        eval time =    1818.82 ms /    26 runs   (   69.95 ms per token,    14.30 tokens per second)
0.02.322.909 I llama_perf_context_print:       total time =    1834.69 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.566 I build: 4038 (b11f9ba9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.021.368 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.380 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.388 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.393 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.394 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.399 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.400 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.400 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.401 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.401 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.402 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.407 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.407 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.408 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.408 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.409 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.029 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.658 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.625 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.631 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.632 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.633 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.633 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.634 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.635 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.637 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.638 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.638 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.639 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.138.641 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.644 I llama_model_loader: - type  f32:   37 tensors
0.00.138.645 I llama_model_loader: - type q8_0:  127 tensors
0.00.220.970 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.277.136 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.277.886 I llm_load_vocab: special tokens cache size = 5
0.00.300.597 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.300.618 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.300.619 I llm_load_print_meta: arch             = gemma
0.00.300.620 I llm_load_print_meta: vocab type       = SPM
0.00.300.621 I llm_load_print_meta: n_vocab          = 256000
0.00.300.621 I llm_load_print_meta: n_merges         = 0
0.00.300.621 I llm_load_print_meta: vocab_only       = 0
0.00.300.622 I llm_load_print_meta: n_ctx_train      = 8192
0.00.300.622 I llm_load_print_meta: n_embd           = 2048
0.00.300.622 I llm_load_print_meta: n_layer          = 18
0.00.300.636 I llm_load_print_meta: n_head           = 8
0.00.300.637 I llm_load_print_meta: n_head_kv        = 1
0.00.300.637 I llm_load_print_meta: n_rot            = 256
0.00.300.638 I llm_load_print_meta: n_swa            = 0
0.00.300.638 I llm_load_print_meta: n_embd_head_k    = 256
0.00.300.638 I llm_load_print_meta: n_embd_head_v    = 256
0.00.300.639 I llm_load_print_meta: n_gqa            = 8
0.00.300.640 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.300.641 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.300.642 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.300.644 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.300.644 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.300.644 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.300.644 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.300.645 I llm_load_print_meta: n_ff             = 16384
0.00.300.646 I llm_load_print_meta: n_expert         = 0
0.00.300.646 I llm_load_print_meta: n_expert_used    = 0
0.00.300.647 I llm_load_print_meta: causal attn      = 1
0.00.300.647 I llm_load_print_meta: pooling type     = 0
0.00.300.647 I llm_load_print_meta: rope type        = 2
0.00.300.648 I llm_load_print_meta: rope scaling     = linear
0.00.300.649 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.300.649 I llm_load_print_meta: freq_scale_train = 1
0.00.300.650 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.300.650 I llm_load_print_meta: rope_finetuned   = unknown
0.00.300.650 I llm_load_print_meta: ssm_d_conv       = 0
0.00.300.651 I llm_load_print_meta: ssm_d_inner      = 0
0.00.300.651 I llm_load_print_meta: ssm_d_state      = 0
0.00.300.651 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.300.651 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.300.652 I llm_load_print_meta: model type       = 2B
0.00.300.652 I llm_load_print_meta: model ftype      = Q8_0
0.00.300.653 I llm_load_print_meta: model params     = 2.51 B
0.00.300.654 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.300.654 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.300.655 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.300.656 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.300.656 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.300.656 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.300.657 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.300.657 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.300.657 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.300.658 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.300.658 I llm_load_print_meta: max token length = 93
0.00.393.718 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.393.727 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.393.728 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.393.728 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.393.729 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.393.730 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.398.892 I llama_new_context_with_model: n_seq_max     = 1
0.00.398.899 I llama_new_context_with_model: n_ctx         = 4096
0.00.398.899 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.398.900 I llama_new_context_with_model: n_batch       = 2048
0.00.398.900 I llama_new_context_with_model: n_ubatch      = 512
0.00.398.901 I llama_new_context_with_model: flash_attn    = 0
0.00.398.903 I llama_new_context_with_model: freq_base     = 10000.0
0.00.398.904 I llama_new_context_with_model: freq_scale    = 1
0.00.398.905 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.414.337 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.414.351 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.414.441 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.415.661 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.415.667 I llama_new_context_with_model: graph nodes  = 601
0.00.415.668 I llama_new_context_with_model: graph splits = 1
0.00.415.670 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.502.364 I main: llama threadpool init, n_threads = 4
0.00.502.378 I 
0.00.502.455 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.502.458 I 
0.00.502.502 I sampler seed: 4267061137
0.00.502.514 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.502.517 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.502.518 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.502.519 I 
 increasively, reaching the highest point in a mere heartbeat.

This peak of unimaginable beauty was fleeting, dissolving into the ethereal glow of twilight, leaving only echoes

0.02.689.818 I llama_perf_sampler_print:    sampling time =       5.15 ms /    33 runs   (    0.16 ms per token,  6402.79 tokens per second)
0.02.689.822 I llama_perf_context_print:        load time =     501.45 ms
0.02.689.823 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.689.825 I llama_perf_context_print:        eval time =    2167.91 ms /    32 runs   (   67.75 ms per token,    14.76 tokens per second)
0.02.689.826 I llama_perf_context_print:       total time =    2187.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.569 I build: 4038 (b11f9ba9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.901 I main: load the model and apply lora adapter, if any
0.00.021.229 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.239 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.246 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.252 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.253 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.257 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.257 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.258 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.258 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.259 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.260 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.264 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.265 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.265 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.266 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.266 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.270 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.793 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.653 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.660 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.661 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.662 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.663 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.664 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.665 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.669 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.669 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.670 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.671 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.672 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.676 I llama_model_loader: - type  f32:   37 tensors
0.00.132.677 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.663 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.153 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.773 I llm_load_vocab: special tokens cache size = 5
0.00.280.602 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.621 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.622 I llm_load_print_meta: arch             = gemma
0.00.280.622 I llm_load_print_meta: vocab type       = SPM
0.00.280.623 I llm_load_print_meta: n_vocab          = 256000
0.00.280.623 I llm_load_print_meta: n_merges         = 0
0.00.280.624 I llm_load_print_meta: vocab_only       = 0
0.00.280.624 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.624 I llm_load_print_meta: n_embd           = 2048
0.00.280.625 I llm_load_print_meta: n_layer          = 18
0.00.280.635 I llm_load_print_meta: n_head           = 8
0.00.280.636 I llm_load_print_meta: n_head_kv        = 1
0.00.280.637 I llm_load_print_meta: n_rot            = 256
0.00.280.637 I llm_load_print_meta: n_swa            = 0
0.00.280.637 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.637 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.638 I llm_load_print_meta: n_gqa            = 8
0.00.280.639 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.640 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.641 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.643 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.643 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.643 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.644 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.645 I llm_load_print_meta: n_ff             = 16384
0.00.280.645 I llm_load_print_meta: n_expert         = 0
0.00.280.645 I llm_load_print_meta: n_expert_used    = 0
0.00.280.646 I llm_load_print_meta: causal attn      = 1
0.00.280.646 I llm_load_print_meta: pooling type     = 0
0.00.280.646 I llm_load_print_meta: rope type        = 2
0.00.280.647 I llm_load_print_meta: rope scaling     = linear
0.00.280.648 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.649 I llm_load_print_meta: freq_scale_train = 1
0.00.280.649 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.649 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.649 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.650 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.650 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.650 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.650 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.651 I llm_load_print_meta: model type       = 2B
0.00.280.651 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.652 I llm_load_print_meta: model params     = 2.51 B
0.00.280.653 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.653 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.654 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.654 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.655 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.655 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.655 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.656 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.656 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.656 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.657 I llm_load_print_meta: max token length = 93
0.00.352.028 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.352.035 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.357.170 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.177 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.177 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.178 I llama_new_context_with_model: n_batch       = 2048
0.00.357.178 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.179 I llama_new_context_with_model: flash_attn    = 0
0.00.357.181 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.182 I llama_new_context_with_model: freq_scale    = 1
0.00.357.183 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.685 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.699 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.059 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.063 I llama_new_context_with_model: graph nodes  = 601
0.00.374.063 I llama_new_context_with_model: graph splits = 1
0.00.374.065 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.172 I main: llama threadpool init, n_threads = 4
0.00.462.184 I 
0.00.462.262 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.462.265 I 
0.00.462.302 I sampler seed: 177100998
0.00.462.312 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.315 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.315 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.316 I 
 increasities in her recent works, resulting in a loss of objectivity and a distorted understanding of reality. [end of text]


0.02.051.785 I llama_perf_sampler_print:    sampling time =       3.40 ms /    22 runs   (    0.15 ms per token,  6466.78 tokens per second)
0.02.051.787 I llama_perf_context_print:        load time =     461.25 ms
0.02.051.788 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.051.789 I llama_perf_context_print:        eval time =    1576.38 ms /    21 runs   (   75.07 ms per token,    13.32 tokens per second)
0.02.051.790 I llama_perf_context_print:       total time =    1589.62 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.653s
user	0m34.661s
sys	0m9.593s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4038 (b11f9ba9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32114.44 ms
main:    total time = 32114.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.566 I build: 4038 (b11f9ba9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.903 I main: load the model and apply lora adapter, if any
0.00.021.553 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.561 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.569 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.574 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.575 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.579 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.580 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.581 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.581 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.582 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.582 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.586 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.587 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.587 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.588 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.588 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.697 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.092 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.932 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.938 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.939 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.939 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.940 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.941 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.941 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.944 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.945 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.945 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.946 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.947 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.951 I llama_model_loader: - type  f32:   37 tensors
0.00.132.952 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.952 I llama_model_loader: - type q6_K:   19 tensors
0.00.214.473 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.731 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.457 I llm_load_vocab: special tokens cache size = 5
0.00.291.597 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.616 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.616 I llm_load_print_meta: arch             = gemma
0.00.291.617 I llm_load_print_meta: vocab type       = SPM
0.00.291.618 I llm_load_print_meta: n_vocab          = 256000
0.00.291.618 I llm_load_print_meta: n_merges         = 0
0.00.291.619 I llm_load_print_meta: vocab_only       = 0
0.00.291.619 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.619 I llm_load_print_meta: n_embd           = 2048
0.00.291.620 I llm_load_print_meta: n_layer          = 18
0.00.291.632 I llm_load_print_meta: n_head           = 8
0.00.291.633 I llm_load_print_meta: n_head_kv        = 1
0.00.291.633 I llm_load_print_meta: n_rot            = 256
0.00.291.633 I llm_load_print_meta: n_swa            = 0
0.00.291.634 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.634 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.635 I llm_load_print_meta: n_gqa            = 8
0.00.291.636 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.637 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.638 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.639 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.639 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.640 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.640 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.641 I llm_load_print_meta: n_ff             = 16384
0.00.291.641 I llm_load_print_meta: n_expert         = 0
0.00.291.642 I llm_load_print_meta: n_expert_used    = 0
0.00.291.642 I llm_load_print_meta: causal attn      = 1
0.00.291.642 I llm_load_print_meta: pooling type     = 0
0.00.291.643 I llm_load_print_meta: rope type        = 2
0.00.291.643 I llm_load_print_meta: rope scaling     = linear
0.00.291.645 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.646 I llm_load_print_meta: freq_scale_train = 1
0.00.291.646 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.646 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.646 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.647 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.647 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.647 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.647 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.648 I llm_load_print_meta: model type       = 2B
0.00.291.648 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.291.649 I llm_load_print_meta: model params     = 2.51 B
0.00.291.650 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.291.650 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.651 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.651 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.651 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.652 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.652 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.653 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.653 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.653 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.654 I llm_load_print_meta: max token length = 93
0.00.353.333 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.353.339 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.353.339 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.353.340 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.353.341 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.353.341 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.358.673 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.681 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.681 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.682 I llama_new_context_with_model: n_batch       = 2048
0.00.358.682 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.683 I llama_new_context_with_model: flash_attn    = 0
0.00.358.685 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.687 I llama_new_context_with_model: freq_scale    = 1
0.00.358.688 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.799 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.814 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.908 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.157 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.163 I llama_new_context_with_model: graph nodes  = 601
0.00.376.163 I llama_new_context_with_model: graph splits = 1
0.00.376.165 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.144 I main: llama threadpool init, n_threads = 4
0.00.459.159 I 
0.00.459.247 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.459.251 I 
0.00.459.298 I sampler seed: 3540787829
0.00.459.310 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.313 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.313 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.314 I 
 maneuvously.

I apologize for the typo. I meant to say "unnecessarily."

**Unnecessarily, the stress began to gnaw at me

0.02.164.293 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6840.80 tokens per second)
0.02.164.295 I llama_perf_context_print:        load time =     458.22 ms
0.02.164.296 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.164.298 I llama_perf_context_print:        eval time =    1686.43 ms /    32 runs   (   52.70 ms per token,    18.97 tokens per second)
0.02.164.298 I llama_perf_context_print:       total time =    1705.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4038 (b11f9ba9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32066.24 ms
main:    total time = 32066.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.576 I build: 4038 (b11f9ba9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.000.907 I main: load the model and apply lora adapter, if any
0.00.021.783 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.801 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.808 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.809 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.813 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.814 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.815 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.815 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.816 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.816 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.821 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.821 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.822 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.823 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.823 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.186 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.926 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.884 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.895 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.896 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.896 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.897 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.898 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.898 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.901 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.902 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.908 I llama_model_loader: - type  f32:   37 tensors
0.00.133.909 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.910 I llama_model_loader: - type q6_K:   19 tensors
0.00.230.021 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.282.781 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.283.469 I llm_load_vocab: special tokens cache size = 5
0.00.304.596 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.304.613 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.304.614 I llm_load_print_meta: arch             = gemma
0.00.304.616 I llm_load_print_meta: vocab type       = SPM
0.00.304.617 I llm_load_print_meta: n_vocab          = 256000
0.00.304.617 I llm_load_print_meta: n_merges         = 0
0.00.304.617 I llm_load_print_meta: vocab_only       = 0
0.00.304.618 I llm_load_print_meta: n_ctx_train      = 8192
0.00.304.618 I llm_load_print_meta: n_embd           = 2048
0.00.304.618 I llm_load_print_meta: n_layer          = 18
0.00.304.629 I llm_load_print_meta: n_head           = 8
0.00.304.630 I llm_load_print_meta: n_head_kv        = 1
0.00.304.631 I llm_load_print_meta: n_rot            = 256
0.00.304.631 I llm_load_print_meta: n_swa            = 0
0.00.304.631 I llm_load_print_meta: n_embd_head_k    = 256
0.00.304.632 I llm_load_print_meta: n_embd_head_v    = 256
0.00.304.636 I llm_load_print_meta: n_gqa            = 8
0.00.304.637 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.304.638 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.304.639 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.304.640 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.304.641 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.304.641 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.304.642 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.304.643 I llm_load_print_meta: n_ff             = 16384
0.00.304.643 I llm_load_print_meta: n_expert         = 0
0.00.304.643 I llm_load_print_meta: n_expert_used    = 0
0.00.304.644 I llm_load_print_meta: causal attn      = 1
0.00.304.644 I llm_load_print_meta: pooling type     = 0
0.00.304.644 I llm_load_print_meta: rope type        = 2
0.00.304.645 I llm_load_print_meta: rope scaling     = linear
0.00.304.646 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.304.647 I llm_load_print_meta: freq_scale_train = 1
0.00.304.648 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.304.648 I llm_load_print_meta: rope_finetuned   = unknown
0.00.304.648 I llm_load_print_meta: ssm_d_conv       = 0
0.00.304.649 I llm_load_print_meta: ssm_d_inner      = 0
0.00.304.650 I llm_load_print_meta: ssm_d_state      = 0
0.00.304.650 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.304.650 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.304.651 I llm_load_print_meta: model type       = 2B
0.00.304.651 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.304.652 I llm_load_print_meta: model params     = 2.51 B
0.00.304.653 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.304.654 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.304.654 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.304.655 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.304.656 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.304.656 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.304.656 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.304.657 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.304.658 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.304.658 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.304.658 I llm_load_print_meta: max token length = 93
0.00.361.466 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.366.995 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.002 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.002 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.003 I llama_new_context_with_model: n_batch       = 2048
0.00.367.003 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.004 I llama_new_context_with_model: flash_attn    = 0
0.00.367.006 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.007 I llama_new_context_with_model: freq_scale    = 1
0.00.367.008 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.300 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.317 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.411 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.686 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.692 I llama_new_context_with_model: graph nodes  = 601
0.00.384.692 I llama_new_context_with_model: graph splits = 1
0.00.384.694 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.092 I main: llama threadpool init, n_threads = 4
0.00.460.105 I 
0.00.460.180 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.183 I 
0.00.460.222 I sampler seed: 3794271636
0.00.460.233 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.236 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.237 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.237 I 
 encomported limbs and deformities due to trauma, disease, or congenital abnormalities. This can result in impaired mobility, pain, and functional limitations.

**Treatment

0.02.131.692 I llama_perf_sampler_print:    sampling time =       5.65 ms /    33 runs   (    0.17 ms per token,  5837.61 tokens per second)
0.02.131.694 I llama_perf_context_print:        load time =     459.16 ms
0.02.131.695 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.131.696 I llama_perf_context_print:        eval time =    1650.69 ms /    32 runs   (   51.58 ms per token,    19.39 tokens per second)
0.02.131.697 I llama_perf_context_print:       total time =    1671.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.502s
user	8m15.476s
sys	0m7.103s
