+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.592 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.799 I main: llama backend init
0.00.001.887 I main: load the model and apply lora adapter, if any
0.00.022.431 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.481 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.492 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.498 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.501 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.505 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.506 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.507 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.507 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.508 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.509 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.514 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.515 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.516 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.516 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.517 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.405 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.624 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.498 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.504 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.504 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.505 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.506 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.506 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.507 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.510 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.510 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.511 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.512 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.513 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.517 I llama_model_loader: - type  f32:   37 tensors
0.00.133.519 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.928 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.604 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.355 I llm_load_vocab: special tokens cache size = 5
0.00.275.232 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.252 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.252 I llm_load_print_meta: arch             = gemma
0.00.275.253 I llm_load_print_meta: vocab type       = SPM
0.00.275.254 I llm_load_print_meta: n_vocab          = 256000
0.00.275.254 I llm_load_print_meta: n_merges         = 0
0.00.275.255 I llm_load_print_meta: vocab_only       = 0
0.00.275.255 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.255 I llm_load_print_meta: n_embd           = 2048
0.00.275.256 I llm_load_print_meta: n_layer          = 18
0.00.275.267 I llm_load_print_meta: n_head           = 8
0.00.275.268 I llm_load_print_meta: n_head_kv        = 1
0.00.275.269 I llm_load_print_meta: n_rot            = 256
0.00.275.269 I llm_load_print_meta: n_swa            = 0
0.00.275.269 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.270 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.271 I llm_load_print_meta: n_gqa            = 8
0.00.275.272 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.273 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.273 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.274 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.275 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.275 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.275 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.276 I llm_load_print_meta: n_ff             = 16384
0.00.275.277 I llm_load_print_meta: n_expert         = 0
0.00.275.277 I llm_load_print_meta: n_expert_used    = 0
0.00.275.277 I llm_load_print_meta: causal attn      = 1
0.00.275.278 I llm_load_print_meta: pooling type     = 0
0.00.275.278 I llm_load_print_meta: rope type        = 2
0.00.275.278 I llm_load_print_meta: rope scaling     = linear
0.00.275.280 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.281 I llm_load_print_meta: freq_scale_train = 1
0.00.275.281 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.282 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.282 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.282 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.282 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.282 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.283 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.283 I llm_load_print_meta: model type       = 2B
0.00.275.284 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.284 I llm_load_print_meta: model params     = 2.51 B
0.00.275.285 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.286 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.286 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.286 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.287 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.287 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.288 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.288 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.288 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.289 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.289 I llm_load_print_meta: max token length = 93
0.00.383.363 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.383.372 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.383.373 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.383.373 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.383.374 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.383.374 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.388.537 I llama_new_context_with_model: n_ctx      = 8192
0.00.388.542 I llama_new_context_with_model: n_batch    = 2048
0.00.388.543 I llama_new_context_with_model: n_ubatch   = 512
0.00.388.543 I llama_new_context_with_model: flash_attn = 0
0.00.388.546 I llama_new_context_with_model: freq_base  = 10000.0
0.00.388.546 I llama_new_context_with_model: freq_scale = 1
0.00.418.972 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.418.985 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.419.082 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.420.957 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.420.963 I llama_new_context_with_model: graph nodes  = 601
0.00.420.964 I llama_new_context_with_model: graph splits = 1
0.00.420.966 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.510.809 I main: llama threadpool init, n_threads = 4
0.00.510.821 I 
0.00.510.891 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.510.894 I 
0.00.510.936 I sampler seed: 379704607
0.00.510.947 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.510.950 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.510.951 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.510.951 I 
 increasities in the media and political discourse, particularly in relation to social justice and equality.

**Arguments in favor of normalization:**

* Allows for easier identification

0.02.835.813 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6569.78 tokens per second)
0.02.835.816 I llama_perf_context_print:        load time =     508.90 ms
0.02.835.818 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.835.819 I llama_perf_context_print:        eval time =    2304.08 ms /    32 runs   (   72.00 ms per token,    13.89 tokens per second)
0.02.835.820 I llama_perf_context_print:       total time =    2325.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.582 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.794 I main: llama backend init
0.00.001.873 I main: load the model and apply lora adapter, if any
0.00.021.745 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.759 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.765 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.766 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.771 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.772 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.773 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.774 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.775 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.775 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.779 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.780 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.780 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.781 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.782 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.711 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.586 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.465 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.471 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.472 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.473 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.473 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.475 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.475 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.478 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.478 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.479 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.480 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.480 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.484 I llama_model_loader: - type  f32:   37 tensors
0.00.132.487 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.362 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.333 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.018 I llm_load_vocab: special tokens cache size = 5
0.00.264.878 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.897 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.898 I llm_load_print_meta: arch             = gemma
0.00.264.898 I llm_load_print_meta: vocab type       = SPM
0.00.264.899 I llm_load_print_meta: n_vocab          = 256000
0.00.264.899 I llm_load_print_meta: n_merges         = 0
0.00.264.900 I llm_load_print_meta: vocab_only       = 0
0.00.264.900 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.900 I llm_load_print_meta: n_embd           = 2048
0.00.264.900 I llm_load_print_meta: n_layer          = 18
0.00.264.911 I llm_load_print_meta: n_head           = 8
0.00.264.912 I llm_load_print_meta: n_head_kv        = 1
0.00.264.912 I llm_load_print_meta: n_rot            = 256
0.00.264.913 I llm_load_print_meta: n_swa            = 0
0.00.264.913 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.913 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.914 I llm_load_print_meta: n_gqa            = 8
0.00.264.915 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.916 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.917 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.918 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.918 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.918 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.919 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.919 I llm_load_print_meta: n_ff             = 16384
0.00.264.920 I llm_load_print_meta: n_expert         = 0
0.00.264.920 I llm_load_print_meta: n_expert_used    = 0
0.00.264.921 I llm_load_print_meta: causal attn      = 1
0.00.264.921 I llm_load_print_meta: pooling type     = 0
0.00.264.921 I llm_load_print_meta: rope type        = 2
0.00.264.922 I llm_load_print_meta: rope scaling     = linear
0.00.264.923 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.924 I llm_load_print_meta: freq_scale_train = 1
0.00.264.924 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.925 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.925 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.925 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.925 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.925 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.926 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.926 I llm_load_print_meta: model type       = 2B
0.00.264.927 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.928 I llm_load_print_meta: model params     = 2.51 B
0.00.264.928 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.929 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.929 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.930 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.930 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.931 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.931 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.931 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.932 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.932 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.932 I llm_load_print_meta: max token length = 93
0.00.363.067 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.368.168 I llama_new_context_with_model: n_ctx      = 8192
0.00.368.173 I llama_new_context_with_model: n_batch    = 2048
0.00.368.174 I llama_new_context_with_model: n_ubatch   = 512
0.00.368.174 I llama_new_context_with_model: flash_attn = 0
0.00.368.177 I llama_new_context_with_model: freq_base  = 10000.0
0.00.368.178 I llama_new_context_with_model: freq_scale = 1
0.00.397.953 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.397.969 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.398.063 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.026 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.400.032 I llama_new_context_with_model: graph nodes  = 601
0.00.400.032 I llama_new_context_with_model: graph splits = 1
0.00.400.034 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.932 I main: llama threadpool init, n_threads = 4
0.00.485.944 I 
0.00.486.013 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.486.017 I 
0.00.486.057 I sampler seed: 1532643154
0.00.486.067 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.072 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.073 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.073 I 
 seconded with the following sentence:

"The company's commitment to diversity and inclusion is commendable, but it must also recognize the need for accountability and transparency

0.02.732.105 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7001.91 tokens per second)
0.02.732.108 I llama_perf_context_print:        load time =     484.04 ms
0.02.732.109 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.732.110 I llama_perf_context_print:        eval time =    2226.69 ms /    32 runs   (   69.58 ms per token,    14.37 tokens per second)
0.02.732.111 I llama_perf_context_print:       total time =    2246.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.543 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.001.874 I main: load the model and apply lora adapter, if any
0.00.022.256 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.307 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.318 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.324 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.325 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.329 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.329 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.330 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.330 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.331 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.336 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.337 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.338 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.338 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.339 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.525 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.968 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.847 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.854 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.854 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.855 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.856 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.857 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.857 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.860 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.861 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.862 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.863 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.863 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.868 I llama_model_loader: - type  f32:   37 tensors
0.00.131.870 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.383 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.268 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.875 I llm_load_vocab: special tokens cache size = 5
0.00.266.606 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.624 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.624 I llm_load_print_meta: arch             = gemma
0.00.266.625 I llm_load_print_meta: vocab type       = SPM
0.00.266.626 I llm_load_print_meta: n_vocab          = 256000
0.00.266.626 I llm_load_print_meta: n_merges         = 0
0.00.266.626 I llm_load_print_meta: vocab_only       = 0
0.00.266.627 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.627 I llm_load_print_meta: n_embd           = 2048
0.00.266.628 I llm_load_print_meta: n_layer          = 18
0.00.266.640 I llm_load_print_meta: n_head           = 8
0.00.266.641 I llm_load_print_meta: n_head_kv        = 1
0.00.266.642 I llm_load_print_meta: n_rot            = 256
0.00.266.642 I llm_load_print_meta: n_swa            = 0
0.00.266.642 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.643 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.643 I llm_load_print_meta: n_gqa            = 8
0.00.266.644 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.645 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.646 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.648 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.648 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.648 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.649 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.650 I llm_load_print_meta: n_ff             = 16384
0.00.266.650 I llm_load_print_meta: n_expert         = 0
0.00.266.650 I llm_load_print_meta: n_expert_used    = 0
0.00.266.651 I llm_load_print_meta: causal attn      = 1
0.00.266.651 I llm_load_print_meta: pooling type     = 0
0.00.266.651 I llm_load_print_meta: rope type        = 2
0.00.266.652 I llm_load_print_meta: rope scaling     = linear
0.00.266.655 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.655 I llm_load_print_meta: freq_scale_train = 1
0.00.266.656 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.656 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.657 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.657 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.657 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.658 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.658 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.659 I llm_load_print_meta: model type       = 2B
0.00.266.659 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.660 I llm_load_print_meta: model params     = 2.51 B
0.00.266.661 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.662 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.663 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.663 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.665 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.665 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.665 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.666 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.666 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.666 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.667 I llm_load_print_meta: max token length = 93
0.00.364.654 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.364.660 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.364.661 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.364.662 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.364.662 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.364.663 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.369.712 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.717 I llama_new_context_with_model: n_batch    = 2048
0.00.369.718 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.718 I llama_new_context_with_model: flash_attn = 0
0.00.369.721 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.721 I llama_new_context_with_model: freq_scale = 1
0.00.399.629 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.399.644 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.399.739 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.615 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.401.622 I llama_new_context_with_model: graph nodes  = 601
0.00.401.623 I llama_new_context_with_model: graph splits = 1
0.00.401.625 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.494.074 I main: llama threadpool init, n_threads = 4
0.00.494.089 I 
0.00.494.163 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.494.166 I 
0.00.494.211 I sampler seed: 922644326
0.00.494.222 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.494.224 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.494.225 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.494.225 I 
 increasities.

I'm not sure what you're trying to say. Could you please provide more context? [end of text]


0.02.225.534 I llama_perf_sampler_print:    sampling time =       3.90 ms /    26 runs   (    0.15 ms per token,  6673.51 tokens per second)
0.02.225.537 I llama_perf_context_print:        load time =     492.18 ms
0.02.225.538 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.225.540 I llama_perf_context_print:        eval time =    1715.10 ms /    25 runs   (   68.60 ms per token,    14.58 tokens per second)
0.02.225.541 I llama_perf_context_print:       total time =    1731.47 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.555 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.001.859 I main: load the model and apply lora adapter, if any
0.00.021.807 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.867 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.889 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.895 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.899 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.904 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.905 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.907 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.908 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.909 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.909 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.915 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.916 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.917 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.918 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.918 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.904 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.105 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.029 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.037 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.038 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.039 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.039 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.040 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.041 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.043 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.044 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.045 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.046 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.047 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.051 I llama_model_loader: - type  f32:   37 tensors
0.00.133.054 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.774 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.666 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.219 I llm_load_vocab: special tokens cache size = 5
0.00.276.689 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.705 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.706 I llm_load_print_meta: arch             = gemma
0.00.276.706 I llm_load_print_meta: vocab type       = SPM
0.00.276.707 I llm_load_print_meta: n_vocab          = 256000
0.00.276.707 I llm_load_print_meta: n_merges         = 0
0.00.276.707 I llm_load_print_meta: vocab_only       = 0
0.00.276.708 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.708 I llm_load_print_meta: n_embd           = 2048
0.00.276.708 I llm_load_print_meta: n_layer          = 18
0.00.276.719 I llm_load_print_meta: n_head           = 8
0.00.276.720 I llm_load_print_meta: n_head_kv        = 1
0.00.276.721 I llm_load_print_meta: n_rot            = 256
0.00.276.721 I llm_load_print_meta: n_swa            = 0
0.00.276.721 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.722 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.723 I llm_load_print_meta: n_gqa            = 8
0.00.276.724 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.724 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.725 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.726 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.727 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.728 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.728 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.729 I llm_load_print_meta: n_ff             = 16384
0.00.276.729 I llm_load_print_meta: n_expert         = 0
0.00.276.729 I llm_load_print_meta: n_expert_used    = 0
0.00.276.730 I llm_load_print_meta: causal attn      = 1
0.00.276.730 I llm_load_print_meta: pooling type     = 0
0.00.276.730 I llm_load_print_meta: rope type        = 2
0.00.276.731 I llm_load_print_meta: rope scaling     = linear
0.00.276.732 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.732 I llm_load_print_meta: freq_scale_train = 1
0.00.276.733 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.733 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.733 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.733 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.734 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.734 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.734 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.735 I llm_load_print_meta: model type       = 2B
0.00.276.735 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.736 I llm_load_print_meta: model params     = 2.51 B
0.00.276.737 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.737 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.738 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.738 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.738 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.739 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.739 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.739 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.740 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.740 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.740 I llm_load_print_meta: max token length = 93
0.00.367.178 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.367.185 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.372.346 I llama_new_context_with_model: n_ctx      = 8192
0.00.372.352 I llama_new_context_with_model: n_batch    = 2048
0.00.372.353 I llama_new_context_with_model: n_ubatch   = 512
0.00.372.353 I llama_new_context_with_model: flash_attn = 0
0.00.372.356 I llama_new_context_with_model: freq_base  = 10000.0
0.00.372.357 I llama_new_context_with_model: freq_scale = 1
0.00.401.023 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.401.038 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.401.144 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.040 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.403.046 I llama_new_context_with_model: graph nodes  = 601
0.00.403.046 I llama_new_context_with_model: graph splits = 1
0.00.403.048 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.935 I main: llama threadpool init, n_threads = 4
0.00.492.949 I 
0.00.493.034 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.493.038 I 
0.00.493.088 I sampler seed: 58916270
0.00.493.099 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.102 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.103 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.103 I 
 increasities

I am unable to access the requested content. As a chatbot, I am restricted from accessing or providing information that may violate privacy or safety regulations.

0.02.703.801 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6711.41 tokens per second)
0.02.703.804 I llama_perf_context_print:        load time =     491.05 ms
0.02.703.806 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.703.808 I llama_perf_context_print:        eval time =    2189.93 ms /    32 runs   (   68.44 ms per token,    14.61 tokens per second)
0.02.703.809 I llama_perf_context_print:       total time =    2210.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.283s
user	0m36.968s
sys	0m9.646s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3991 (fc83a9e5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32027.80 ms
main:    total time = 32027.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.532 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.845 I main: load the model and apply lora adapter, if any
0.00.022.118 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.167 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.175 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.180 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.181 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.184 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.185 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.186 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.186 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.187 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.188 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.191 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.191 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.192 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.193 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.194 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.292 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.369 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.216 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.222 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.223 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.223 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.224 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.224 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.225 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.227 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.228 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.228 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.230 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.231 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.235 I llama_model_loader: - type  f32:   37 tensors
0.00.132.237 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.238 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.361 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.044 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.558 I llm_load_vocab: special tokens cache size = 5
0.00.260.433 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.450 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.451 I llm_load_print_meta: arch             = gemma
0.00.260.451 I llm_load_print_meta: vocab type       = SPM
0.00.260.452 I llm_load_print_meta: n_vocab          = 256000
0.00.260.452 I llm_load_print_meta: n_merges         = 0
0.00.260.452 I llm_load_print_meta: vocab_only       = 0
0.00.260.453 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.453 I llm_load_print_meta: n_embd           = 2048
0.00.260.453 I llm_load_print_meta: n_layer          = 18
0.00.260.464 I llm_load_print_meta: n_head           = 8
0.00.260.465 I llm_load_print_meta: n_head_kv        = 1
0.00.260.466 I llm_load_print_meta: n_rot            = 256
0.00.260.466 I llm_load_print_meta: n_swa            = 0
0.00.260.466 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.466 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.467 I llm_load_print_meta: n_gqa            = 8
0.00.260.468 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.469 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.470 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.471 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.471 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.471 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.471 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.472 I llm_load_print_meta: n_ff             = 16384
0.00.260.473 I llm_load_print_meta: n_expert         = 0
0.00.260.473 I llm_load_print_meta: n_expert_used    = 0
0.00.260.473 I llm_load_print_meta: causal attn      = 1
0.00.260.474 I llm_load_print_meta: pooling type     = 0
0.00.260.474 I llm_load_print_meta: rope type        = 2
0.00.260.474 I llm_load_print_meta: rope scaling     = linear
0.00.260.476 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.477 I llm_load_print_meta: freq_scale_train = 1
0.00.260.477 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.477 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.478 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.478 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.478 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.478 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.479 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.479 I llm_load_print_meta: model type       = 2B
0.00.260.480 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.480 I llm_load_print_meta: model params     = 2.51 B
0.00.260.481 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.481 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.482 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.482 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.482 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.483 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.483 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.483 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.483 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.484 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.484 I llm_load_print_meta: max token length = 93
0.00.320.289 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.320.300 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.320.300 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.320.301 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.320.302 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.320.302 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.325.514 I llama_new_context_with_model: n_ctx      = 8192
0.00.325.522 I llama_new_context_with_model: n_batch    = 2048
0.00.325.523 I llama_new_context_with_model: n_ubatch   = 512
0.00.325.524 I llama_new_context_with_model: flash_attn = 0
0.00.325.527 I llama_new_context_with_model: freq_base  = 10000.0
0.00.325.528 I llama_new_context_with_model: freq_scale = 1
0.00.355.557 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.355.572 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.355.662 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.484 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.357.491 I llama_new_context_with_model: graph nodes  = 601
0.00.357.491 I llama_new_context_with_model: graph splits = 1
0.00.357.493 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.834 I main: llama threadpool init, n_threads = 4
0.00.436.849 I 
0.00.436.923 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.436.926 I 
0.00.436.971 I sampler seed: 1388691014
0.00.436.981 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.985 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.985 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.987 I 
 seconded!

I am unable to access the internet to retrieve the requested data. Please ensure that your internet connection is stable and that you have access to the

0.02.113.908 I llama_perf_sampler_print:    sampling time =       5.41 ms /    33 runs   (    0.16 ms per token,  6096.43 tokens per second)
0.02.113.911 I llama_perf_context_print:        load time =     434.97 ms
0.02.113.912 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.113.913 I llama_perf_context_print:        eval time =    1655.76 ms /    32 runs   (   51.74 ms per token,    19.33 tokens per second)
0.02.113.914 I llama_perf_context_print:       total time =    1677.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3991 (fc83a9e5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32111.75 ms
main:    total time = 32111.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.535 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.001.852 I main: load the model and apply lora adapter, if any
0.00.022.001 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.015 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.021 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.023 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.028 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.032 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.033 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.033 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.034 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.034 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.038 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.038 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.039 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.039 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.040 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.086 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.004 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.788 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.795 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.795 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.796 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.796 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.797 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.798 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.801 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.801 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.804 I llama_model_loader: - type  f32:   37 tensors
0.00.131.806 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.806 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.860 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.536 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.009 I llm_load_vocab: special tokens cache size = 5
0.00.260.654 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.673 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.673 I llm_load_print_meta: arch             = gemma
0.00.260.674 I llm_load_print_meta: vocab type       = SPM
0.00.260.674 I llm_load_print_meta: n_vocab          = 256000
0.00.260.675 I llm_load_print_meta: n_merges         = 0
0.00.260.675 I llm_load_print_meta: vocab_only       = 0
0.00.260.675 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.676 I llm_load_print_meta: n_embd           = 2048
0.00.260.676 I llm_load_print_meta: n_layer          = 18
0.00.260.687 I llm_load_print_meta: n_head           = 8
0.00.260.689 I llm_load_print_meta: n_head_kv        = 1
0.00.260.689 I llm_load_print_meta: n_rot            = 256
0.00.260.689 I llm_load_print_meta: n_swa            = 0
0.00.260.690 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.690 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.691 I llm_load_print_meta: n_gqa            = 8
0.00.260.692 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.693 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.694 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.695 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.696 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.696 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.697 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.697 I llm_load_print_meta: n_ff             = 16384
0.00.260.698 I llm_load_print_meta: n_expert         = 0
0.00.260.698 I llm_load_print_meta: n_expert_used    = 0
0.00.260.698 I llm_load_print_meta: causal attn      = 1
0.00.260.699 I llm_load_print_meta: pooling type     = 0
0.00.260.699 I llm_load_print_meta: rope type        = 2
0.00.260.699 I llm_load_print_meta: rope scaling     = linear
0.00.260.702 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.702 I llm_load_print_meta: freq_scale_train = 1
0.00.260.702 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.703 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.703 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.703 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.704 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.704 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.704 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.705 I llm_load_print_meta: model type       = 2B
0.00.260.705 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.706 I llm_load_print_meta: model params     = 2.51 B
0.00.260.707 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.707 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.708 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.708 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.709 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.709 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.709 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.710 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.710 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.710 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.711 I llm_load_print_meta: max token length = 93
0.00.319.728 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.324.689 I llama_new_context_with_model: n_ctx      = 8192
0.00.324.694 I llama_new_context_with_model: n_batch    = 2048
0.00.324.694 I llama_new_context_with_model: n_ubatch   = 512
0.00.324.695 I llama_new_context_with_model: flash_attn = 0
0.00.324.697 I llama_new_context_with_model: freq_base  = 10000.0
0.00.324.698 I llama_new_context_with_model: freq_scale = 1
0.00.353.654 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.353.669 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.353.761 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.594 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.355.601 I llama_new_context_with_model: graph nodes  = 601
0.00.355.601 I llama_new_context_with_model: graph splits = 1
0.00.355.603 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.646 I main: llama threadpool init, n_threads = 4
0.00.434.660 I 
0.00.434.734 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.434.738 I 
0.00.434.778 I sampler seed: 1034427532
0.00.434.788 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.790 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.791 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.791 I 
 increamically, but they could not hold their laughter for long.

**Explanation:**

* The first sentence sets the tone for the poem.
* The

0.02.117.805 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6497.34 tokens per second)
0.02.117.807 I llama_perf_context_print:        load time =     432.77 ms
0.02.117.808 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.117.809 I llama_perf_context_print:        eval time =    1662.63 ms /    32 runs   (   51.96 ms per token,    19.25 tokens per second)
0.02.117.809 I llama_perf_context_print:       total time =    1683.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.222s
user	8m15.402s
sys	0m7.008s
