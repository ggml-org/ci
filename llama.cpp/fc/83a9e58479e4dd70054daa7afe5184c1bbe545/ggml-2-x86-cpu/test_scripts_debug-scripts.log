+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.765 I main: load the model and apply lora adapter, if any
0.00.024.709 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.914 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.004 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.015 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.016 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.020 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.021 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.022 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.023 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.026 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.027 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.036 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.039 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.041 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.041 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.042 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.097 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.917 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.332 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.339 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.340 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.341 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.342 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.343 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.344 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.347 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.348 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.350 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.350 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.351 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.359 I llama_model_loader: - type  f32:   37 tensors
0.00.267.363 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.244 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.147 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.073 I llm_load_vocab: special tokens cache size = 5
0.00.609.010 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.079 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.080 I llm_load_print_meta: arch             = gemma
0.00.609.081 I llm_load_print_meta: vocab type       = SPM
0.00.609.082 I llm_load_print_meta: n_vocab          = 256000
0.00.609.084 I llm_load_print_meta: n_merges         = 0
0.00.609.085 I llm_load_print_meta: vocab_only       = 0
0.00.609.085 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.086 I llm_load_print_meta: n_embd           = 2048
0.00.609.086 I llm_load_print_meta: n_layer          = 18
0.00.609.150 I llm_load_print_meta: n_head           = 8
0.00.609.157 I llm_load_print_meta: n_head_kv        = 1
0.00.609.158 I llm_load_print_meta: n_rot            = 256
0.00.609.158 I llm_load_print_meta: n_swa            = 0
0.00.609.159 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.160 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.165 I llm_load_print_meta: n_gqa            = 8
0.00.609.170 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.175 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.176 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.178 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.178 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.179 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.179 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.184 I llm_load_print_meta: n_ff             = 16384
0.00.609.189 I llm_load_print_meta: n_expert         = 0
0.00.609.189 I llm_load_print_meta: n_expert_used    = 0
0.00.609.189 I llm_load_print_meta: causal attn      = 1
0.00.609.190 I llm_load_print_meta: pooling type     = 0
0.00.609.190 I llm_load_print_meta: rope type        = 2
0.00.609.192 I llm_load_print_meta: rope scaling     = linear
0.00.609.194 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.194 I llm_load_print_meta: freq_scale_train = 1
0.00.609.195 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.196 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.196 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.196 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.196 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.197 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.198 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.199 I llm_load_print_meta: model type       = 2B
0.00.609.202 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.203 I llm_load_print_meta: model params     = 2.51 B
0.00.609.204 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.204 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.205 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.205 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.206 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.206 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.206 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.207 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.213 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.214 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.215 I llm_load_print_meta: max token length = 93
0.00.719.642 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.719.650 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.719.651 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.719.652 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.719.652 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.719.653 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.725.348 I llama_new_context_with_model: n_ctx      = 8192
0.00.725.355 I llama_new_context_with_model: n_batch    = 2048
0.00.725.355 I llama_new_context_with_model: n_ubatch   = 512
0.00.725.356 I llama_new_context_with_model: flash_attn = 0
0.00.725.359 I llama_new_context_with_model: freq_base  = 10000.0
0.00.725.360 I llama_new_context_with_model: freq_scale = 1
0.00.754.134 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.754.174 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.754.292 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.757.418 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.757.423 I llama_new_context_with_model: graph nodes  = 601
0.00.757.423 I llama_new_context_with_model: graph splits = 1
0.00.757.439 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.366.239 I main: llama threadpool init, n_threads = 4
0.01.366.252 I 
0.01.366.357 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.366.361 I 
0.01.366.594 I sampler seed: 4180669460
0.01.366.607 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.366.615 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.366.616 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.366.616 I 
 increasements.

**Assistant**

I am unable to provide assistance with this request as it involves potentially harmful or inappropriate content. [end of text]


0.12.709.812 I llama_perf_sampler_print:    sampling time =      40.88 ms /    28 runs   (    1.46 ms per token,   684.88 tokens per second)
0.12.709.815 I llama_perf_context_print:        load time =    1363.38 ms
0.12.709.816 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.709.818 I llama_perf_context_print:        eval time =   11264.44 ms /    27 runs   (  417.20 ms per token,     2.40 tokens per second)
0.12.709.819 I llama_perf_context_print:       total time =   11343.58 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.984 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.085 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.099 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.101 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.105 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.109 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.110 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.112 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.114 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.115 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.129 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.134 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.136 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.138 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.139 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.443 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.146 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.527 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.537 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.538 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.539 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.540 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.541 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.542 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.546 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.547 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.548 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.549 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.551 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.560 I llama_model_loader: - type  f32:   37 tensors
0.00.268.565 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.756 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.143 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.027 I llm_load_vocab: special tokens cache size = 5
0.00.596.604 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.678 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.679 I llm_load_print_meta: arch             = gemma
0.00.596.679 I llm_load_print_meta: vocab type       = SPM
0.00.596.680 I llm_load_print_meta: n_vocab          = 256000
0.00.596.683 I llm_load_print_meta: n_merges         = 0
0.00.596.683 I llm_load_print_meta: vocab_only       = 0
0.00.596.684 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.684 I llm_load_print_meta: n_embd           = 2048
0.00.596.684 I llm_load_print_meta: n_layer          = 18
0.00.596.750 I llm_load_print_meta: n_head           = 8
0.00.596.757 I llm_load_print_meta: n_head_kv        = 1
0.00.596.757 I llm_load_print_meta: n_rot            = 256
0.00.596.758 I llm_load_print_meta: n_swa            = 0
0.00.596.759 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.759 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.764 I llm_load_print_meta: n_gqa            = 8
0.00.596.769 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.775 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.776 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.777 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.779 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.779 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.780 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.785 I llm_load_print_meta: n_ff             = 16384
0.00.596.785 I llm_load_print_meta: n_expert         = 0
0.00.596.786 I llm_load_print_meta: n_expert_used    = 0
0.00.596.786 I llm_load_print_meta: causal attn      = 1
0.00.596.787 I llm_load_print_meta: pooling type     = 0
0.00.596.787 I llm_load_print_meta: rope type        = 2
0.00.596.788 I llm_load_print_meta: rope scaling     = linear
0.00.596.789 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.790 I llm_load_print_meta: freq_scale_train = 1
0.00.596.791 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.791 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.792 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.797 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.797 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.797 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.798 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.798 I llm_load_print_meta: model type       = 2B
0.00.596.799 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.800 I llm_load_print_meta: model params     = 2.51 B
0.00.596.801 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.802 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.803 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.803 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.806 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.807 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.807 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.808 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.814 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.815 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.816 I llm_load_print_meta: max token length = 93
0.00.695.984 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.701.815 I llama_new_context_with_model: n_ctx      = 8192
0.00.701.822 I llama_new_context_with_model: n_batch    = 2048
0.00.701.823 I llama_new_context_with_model: n_ubatch   = 512
0.00.701.823 I llama_new_context_with_model: flash_attn = 0
0.00.701.826 I llama_new_context_with_model: freq_base  = 10000.0
0.00.701.827 I llama_new_context_with_model: freq_scale = 1
0.00.731.253 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.731.296 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.416 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.606 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.734.611 I llama_new_context_with_model: graph nodes  = 601
0.00.734.611 I llama_new_context_with_model: graph splits = 1
0.00.734.626 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.344.054 I main: llama threadpool init, n_threads = 4
0.01.344.067 I 
0.01.344.181 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.185 I 
0.01.344.422 I sampler seed: 2752043531
0.01.344.436 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.443 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.447 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.447 I 
 increasities to the user. [end of text]


0.04.322.380 I llama_perf_sampler_print:    sampling time =      10.52 ms /     8 runs   (    1.32 ms per token,   760.24 tokens per second)
0.04.322.383 I llama_perf_context_print:        load time =    1341.15 ms
0.04.322.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.322.399 I llama_perf_context_print:        eval time =    2956.24 ms /     7 runs   (  422.32 ms per token,     2.37 tokens per second)
0.04.322.400 I llama_perf_context_print:       total time =    2978.34 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.024.638 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.845 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.938 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.950 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.951 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.956 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.957 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.958 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.959 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.960 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.961 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.969 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.971 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.972 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.974 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.975 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.240 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.403 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.820 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.828 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.829 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.830 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.831 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.832 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.833 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.837 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.838 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.839 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.840 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.275.841 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.850 I llama_model_loader: - type  f32:   37 tensors
0.00.275.854 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.778 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.082 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.036 I llm_load_vocab: special tokens cache size = 5
0.00.613.670 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.736 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.737 I llm_load_print_meta: arch             = gemma
0.00.613.738 I llm_load_print_meta: vocab type       = SPM
0.00.613.738 I llm_load_print_meta: n_vocab          = 256000
0.00.613.741 I llm_load_print_meta: n_merges         = 0
0.00.613.742 I llm_load_print_meta: vocab_only       = 0
0.00.613.742 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.743 I llm_load_print_meta: n_embd           = 2048
0.00.613.743 I llm_load_print_meta: n_layer          = 18
0.00.613.804 I llm_load_print_meta: n_head           = 8
0.00.613.811 I llm_load_print_meta: n_head_kv        = 1
0.00.613.811 I llm_load_print_meta: n_rot            = 256
0.00.613.812 I llm_load_print_meta: n_swa            = 0
0.00.613.812 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.813 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.817 I llm_load_print_meta: n_gqa            = 8
0.00.613.822 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.827 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.828 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.829 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.830 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.830 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.830 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.835 I llm_load_print_meta: n_ff             = 16384
0.00.613.836 I llm_load_print_meta: n_expert         = 0
0.00.613.836 I llm_load_print_meta: n_expert_used    = 0
0.00.613.836 I llm_load_print_meta: causal attn      = 1
0.00.613.837 I llm_load_print_meta: pooling type     = 0
0.00.613.837 I llm_load_print_meta: rope type        = 2
0.00.613.837 I llm_load_print_meta: rope scaling     = linear
0.00.613.839 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.839 I llm_load_print_meta: freq_scale_train = 1
0.00.613.840 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.856 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.856 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.857 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.857 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.857 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.858 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.858 I llm_load_print_meta: model type       = 2B
0.00.613.859 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.860 I llm_load_print_meta: model params     = 2.51 B
0.00.613.861 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.861 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.862 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.862 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.863 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.863 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.864 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.864 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.870 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.872 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.873 I llm_load_print_meta: max token length = 93
0.00.713.088 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.713.097 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.713.098 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.713.098 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.713.099 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.713.100 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.719.094 I llama_new_context_with_model: n_ctx      = 8192
0.00.719.102 I llama_new_context_with_model: n_batch    = 2048
0.00.719.102 I llama_new_context_with_model: n_ubatch   = 512
0.00.719.103 I llama_new_context_with_model: flash_attn = 0
0.00.719.105 I llama_new_context_with_model: freq_base  = 10000.0
0.00.719.106 I llama_new_context_with_model: freq_scale = 1
0.00.750.140 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.750.181 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.750.329 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.753.493 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.753.498 I llama_new_context_with_model: graph nodes  = 601
0.00.753.498 I llama_new_context_with_model: graph splits = 1
0.00.753.513 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.365.346 I main: llama threadpool init, n_threads = 4
0.01.365.358 I 
0.01.365.480 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.365.484 I 
0.01.365.721 I sampler seed: 1790081883
0.01.365.734 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.365.744 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.365.745 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.365.745 I 
 increadibly. 

I am not sure if I am supposed to respond with a question or an answer. 

Could you please clarify what type of response

0.15.053.929 I llama_perf_sampler_print:    sampling time =      47.97 ms /    33 runs   (    1.45 ms per token,   688.00 tokens per second)
0.15.053.932 I llama_perf_context_print:        load time =    1362.46 ms
0.15.053.933 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.053.935 I llama_perf_context_print:        eval time =   13594.87 ms /    32 runs   (  424.84 ms per token,     2.35 tokens per second)
0.15.053.961 I llama_perf_context_print:       total time =   13688.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.024.345 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.547 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.635 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.645 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.647 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.651 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.653 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.654 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.655 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.657 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.658 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.666 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.670 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.671 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.672 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.673 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.522 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.317 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.672 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.680 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.681 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.682 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.683 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.684 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.686 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.689 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.690 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.691 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.692 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.693 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.701 I llama_model_loader: - type  f32:   37 tensors
0.00.267.705 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.950 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.708 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.654 I llm_load_vocab: special tokens cache size = 5
0.00.597.905 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.974 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.975 I llm_load_print_meta: arch             = gemma
0.00.597.975 I llm_load_print_meta: vocab type       = SPM
0.00.597.976 I llm_load_print_meta: n_vocab          = 256000
0.00.597.978 I llm_load_print_meta: n_merges         = 0
0.00.597.979 I llm_load_print_meta: vocab_only       = 0
0.00.597.979 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.980 I llm_load_print_meta: n_embd           = 2048
0.00.597.980 I llm_load_print_meta: n_layer          = 18
0.00.598.044 I llm_load_print_meta: n_head           = 8
0.00.598.050 I llm_load_print_meta: n_head_kv        = 1
0.00.598.051 I llm_load_print_meta: n_rot            = 256
0.00.598.051 I llm_load_print_meta: n_swa            = 0
0.00.598.052 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.052 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.057 I llm_load_print_meta: n_gqa            = 8
0.00.598.062 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.068 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.070 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.072 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.073 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.073 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.074 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.079 I llm_load_print_meta: n_ff             = 16384
0.00.598.080 I llm_load_print_meta: n_expert         = 0
0.00.598.081 I llm_load_print_meta: n_expert_used    = 0
0.00.598.081 I llm_load_print_meta: causal attn      = 1
0.00.598.081 I llm_load_print_meta: pooling type     = 0
0.00.598.082 I llm_load_print_meta: rope type        = 2
0.00.598.083 I llm_load_print_meta: rope scaling     = linear
0.00.598.085 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.085 I llm_load_print_meta: freq_scale_train = 1
0.00.598.086 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.086 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.091 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.092 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.092 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.092 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.093 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.093 I llm_load_print_meta: model type       = 2B
0.00.598.094 I llm_load_print_meta: model ftype      = Q8_0
0.00.598.095 I llm_load_print_meta: model params     = 2.51 B
0.00.598.096 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.598.097 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.097 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.101 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.101 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.102 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.102 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.102 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.107 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.109 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.109 I llm_load_print_meta: max token length = 93
0.00.689.449 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.689.457 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.695.071 I llama_new_context_with_model: n_ctx      = 8192
0.00.695.079 I llama_new_context_with_model: n_batch    = 2048
0.00.695.079 I llama_new_context_with_model: n_ubatch   = 512
0.00.695.080 I llama_new_context_with_model: flash_attn = 0
0.00.695.082 I llama_new_context_with_model: freq_base  = 10000.0
0.00.695.083 I llama_new_context_with_model: freq_scale = 1
0.00.724.633 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.724.670 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.724.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.933 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.727.937 I llama_new_context_with_model: graph nodes  = 601
0.00.727.937 I llama_new_context_with_model: graph splits = 1
0.00.727.953 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.573 I main: llama threadpool init, n_threads = 4
0.01.335.587 I 
0.01.335.696 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.335.696 I 
0.01.335.931 I sampler seed: 1609638920
0.01.335.945 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.335.952 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.335.952 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.335.953 I 
 increasities

The provided text contains a reference to "reciprocal violations." I am unable to interpret the context of this reference as it is not provided in

0.14.871.142 I llama_perf_sampler_print:    sampling time =      48.24 ms /    33 runs   (    1.46 ms per token,   684.11 tokens per second)
0.14.871.146 I llama_perf_context_print:        load time =    1332.69 ms
0.14.871.150 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.871.152 I llama_perf_context_print:        eval time =   13442.01 ms /    32 runs   (  420.06 ms per token,     2.38 tokens per second)
0.14.871.154 I llama_perf_context_print:       total time =   13535.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.787s
user	2m58.848s
sys	0m9.609s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3991 (fc83a9e5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199719.53 ms
main:    total time = 199719.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
0.00.025.289 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.517 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.613 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.624 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.625 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.630 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.632 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.634 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.635 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.636 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.637 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.647 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.651 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.652 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.653 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.654 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.284 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.844 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.142 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.151 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.152 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.153 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.154 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.155 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.156 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.160 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.161 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.162 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.163 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.164 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.173 I llama_model_loader: - type  f32:   37 tensors
0.00.267.177 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.178 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.545 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.149 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.038 I llm_load_vocab: special tokens cache size = 5
0.00.605.840 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.903 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.904 I llm_load_print_meta: arch             = gemma
0.00.605.905 I llm_load_print_meta: vocab type       = SPM
0.00.605.906 I llm_load_print_meta: n_vocab          = 256000
0.00.605.908 I llm_load_print_meta: n_merges         = 0
0.00.605.909 I llm_load_print_meta: vocab_only       = 0
0.00.605.909 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.910 I llm_load_print_meta: n_embd           = 2048
0.00.605.910 I llm_load_print_meta: n_layer          = 18
0.00.605.975 I llm_load_print_meta: n_head           = 8
0.00.605.982 I llm_load_print_meta: n_head_kv        = 1
0.00.605.983 I llm_load_print_meta: n_rot            = 256
0.00.605.984 I llm_load_print_meta: n_swa            = 0
0.00.605.984 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.984 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.989 I llm_load_print_meta: n_gqa            = 8
0.00.605.994 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.999 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.000 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.003 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.004 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.004 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.005 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.011 I llm_load_print_meta: n_ff             = 16384
0.00.606.011 I llm_load_print_meta: n_expert         = 0
0.00.606.012 I llm_load_print_meta: n_expert_used    = 0
0.00.606.013 I llm_load_print_meta: causal attn      = 1
0.00.606.013 I llm_load_print_meta: pooling type     = 0
0.00.606.014 I llm_load_print_meta: rope type        = 2
0.00.606.014 I llm_load_print_meta: rope scaling     = linear
0.00.606.015 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.016 I llm_load_print_meta: freq_scale_train = 1
0.00.606.017 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.017 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.017 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.018 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.018 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.018 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.029 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.031 I llm_load_print_meta: model type       = 2B
0.00.606.032 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.606.033 I llm_load_print_meta: model params     = 2.51 B
0.00.606.034 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.606.044 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.046 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.047 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.047 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.048 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.048 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.049 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.055 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.057 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.057 I llm_load_print_meta: max token length = 93
0.00.670.322 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.670.330 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.670.330 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.670.331 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.670.332 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.670.332 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.676.007 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.015 I llama_new_context_with_model: n_batch    = 2048
0.00.676.015 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.016 I llama_new_context_with_model: flash_attn = 0
0.00.676.018 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.019 I llama_new_context_with_model: freq_scale = 1
0.00.706.738 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.706.777 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.706.894 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.709.947 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.709.951 I llama_new_context_with_model: graph nodes  = 601
0.00.709.952 I llama_new_context_with_model: graph splits = 1
0.00.709.968 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.880 I main: llama threadpool init, n_threads = 4
0.01.284.893 I 
0.01.284.999 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.003 I 
0.01.285.233 I sampler seed: 3330826981
0.01.285.246 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.253 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.285.254 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.285.254 I 
 strick, a 19-year-old college student, is at a crossroads in her life. She has a strong desire to pursue her passion for environmental

0.12.134.252 I llama_perf_sampler_print:    sampling time =      48.01 ms /    33 runs   (    1.45 ms per token,   687.31 tokens per second)
0.12.134.256 I llama_perf_context_print:        load time =    1281.99 ms
0.12.134.280 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.134.282 I llama_perf_context_print:        eval time =   10756.15 ms /    32 runs   (  336.13 ms per token,     2.98 tokens per second)
0.12.134.283 I llama_perf_context_print:       total time =   10849.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3991 (fc83a9e5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199668.77 ms
main:    total time = 199668.77 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 3991 (fc83a9e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.827 I main: load the model and apply lora adapter, if any
0.00.024.772 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.872 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.886 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.887 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.891 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.895 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.897 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.898 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.899 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.899 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.909 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.911 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.912 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.921 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.923 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.281 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.988 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.343 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.354 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.355 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.356 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.357 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.358 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.359 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.363 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.364 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.374 I llama_model_loader: - type  f32:   37 tensors
0.00.266.378 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.378 I llama_model_loader: - type q6_K:   19 tensors
0.00.439.559 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.850 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.790 I llm_load_vocab: special tokens cache size = 5
0.00.595.623 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.686 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.687 I llm_load_print_meta: arch             = gemma
0.00.595.688 I llm_load_print_meta: vocab type       = SPM
0.00.595.689 I llm_load_print_meta: n_vocab          = 256000
0.00.595.691 I llm_load_print_meta: n_merges         = 0
0.00.595.692 I llm_load_print_meta: vocab_only       = 0
0.00.595.692 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.693 I llm_load_print_meta: n_embd           = 2048
0.00.595.693 I llm_load_print_meta: n_layer          = 18
0.00.595.756 I llm_load_print_meta: n_head           = 8
0.00.595.763 I llm_load_print_meta: n_head_kv        = 1
0.00.595.764 I llm_load_print_meta: n_rot            = 256
0.00.595.764 I llm_load_print_meta: n_swa            = 0
0.00.595.764 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.765 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.770 I llm_load_print_meta: n_gqa            = 8
0.00.595.774 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.780 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.781 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.783 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.783 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.783 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.788 I llm_load_print_meta: n_ff             = 16384
0.00.595.789 I llm_load_print_meta: n_expert         = 0
0.00.595.789 I llm_load_print_meta: n_expert_used    = 0
0.00.595.790 I llm_load_print_meta: causal attn      = 1
0.00.595.790 I llm_load_print_meta: pooling type     = 0
0.00.595.790 I llm_load_print_meta: rope type        = 2
0.00.595.791 I llm_load_print_meta: rope scaling     = linear
0.00.595.793 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.793 I llm_load_print_meta: freq_scale_train = 1
0.00.595.794 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.794 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.795 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.795 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.795 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.795 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.796 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.796 I llm_load_print_meta: model type       = 2B
0.00.595.797 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.595.798 I llm_load_print_meta: model params     = 2.51 B
0.00.595.799 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.595.799 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.819 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.820 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.821 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.821 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.822 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.822 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.828 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.830 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.830 I llm_load_print_meta: max token length = 93
0.00.658.320 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.663.980 I llama_new_context_with_model: n_ctx      = 8192
0.00.663.988 I llama_new_context_with_model: n_batch    = 2048
0.00.663.988 I llama_new_context_with_model: n_ubatch   = 512
0.00.663.989 I llama_new_context_with_model: flash_attn = 0
0.00.663.991 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.992 I llama_new_context_with_model: freq_scale = 1
0.00.695.137 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.695.179 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.695.294 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.394 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.398 I llama_new_context_with_model: graph nodes  = 601
0.00.698.399 I llama_new_context_with_model: graph splits = 1
0.00.698.416 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.273.436 I main: llama threadpool init, n_threads = 4
0.01.273.449 I 
0.01.273.556 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.273.560 I 
0.01.273.787 I sampler seed: 1748669082
0.01.273.799 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.273.806 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.273.807 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.273.807 I 
 increasities

I am unable to generate responses that are sexually suggestive in nature. My purpose is to assist users with tasks and provide information. [end of text]


0.11.189.392 I llama_perf_sampler_print:    sampling time =      43.37 ms /    30 runs   (    1.45 ms per token,   691.67 tokens per second)
0.11.189.396 I llama_perf_context_print:        load time =    1270.52 ms
0.11.189.408 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.189.410 I llama_perf_context_print:        eval time =    9831.03 ms /    29 runs   (  339.00 ms per token,     2.95 tokens per second)
0.11.189.411 I llama_perf_context_print:       total time =    9915.97 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.614s
user	50m9.656s
sys	0m6.321s
