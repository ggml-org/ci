+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4374 (af43dc7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.000.842 I main: load the model and apply lora adapter, if any
0.00.023.267 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.279 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.366 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.398 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.402 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.413 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.416 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.418 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.420 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.423 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.425 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.432 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.438 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.441 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.443 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.445 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.025 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.061 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.317 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.330 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.332 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.333 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.334 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.336 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.337 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.341 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.342 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.344 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.345 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.347 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.356 I llama_model_loader: - type  f32:   37 tensors
0.00.352.359 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.169 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.604 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.676 I llm_load_vocab: special tokens cache size = 5
0.00.830.618 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.830.692 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.830.700 I llm_load_print_meta: arch             = gemma
0.00.830.701 I llm_load_print_meta: vocab type       = SPM
0.00.830.702 I llm_load_print_meta: n_vocab          = 256000
0.00.830.705 I llm_load_print_meta: n_merges         = 0
0.00.830.706 I llm_load_print_meta: vocab_only       = 0
0.00.830.706 I llm_load_print_meta: n_ctx_train      = 8192
0.00.830.726 I llm_load_print_meta: n_embd           = 2048
0.00.830.729 I llm_load_print_meta: n_layer          = 18
0.00.830.799 I llm_load_print_meta: n_head           = 8
0.00.830.811 I llm_load_print_meta: n_head_kv        = 1
0.00.830.812 I llm_load_print_meta: n_rot            = 256
0.00.830.813 I llm_load_print_meta: n_swa            = 0
0.00.830.816 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.817 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.823 I llm_load_print_meta: n_gqa            = 8
0.00.830.832 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.841 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.844 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.845 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.846 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.847 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.848 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.853 I llm_load_print_meta: n_ff             = 16384
0.00.830.854 I llm_load_print_meta: n_expert         = 0
0.00.830.854 I llm_load_print_meta: n_expert_used    = 0
0.00.830.855 I llm_load_print_meta: causal attn      = 1
0.00.830.855 I llm_load_print_meta: pooling type     = 0
0.00.830.856 I llm_load_print_meta: rope type        = 2
0.00.830.856 I llm_load_print_meta: rope scaling     = linear
0.00.830.858 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.859 I llm_load_print_meta: freq_scale_train = 1
0.00.830.860 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.861 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.861 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.862 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.863 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.863 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.869 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.881 I llm_load_print_meta: model type       = 2B
0.00.830.883 I llm_load_print_meta: model ftype      = Q8_0
0.00.830.884 I llm_load_print_meta: model params     = 2.51 B
0.00.830.885 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.830.885 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.886 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.887 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.888 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.888 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.889 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.889 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.895 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.897 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.897 I llm_load_print_meta: max token length = 93
0.00.932.151 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.932.160 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.932.161 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.932.162 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.932.163 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.932.163 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.938.129 I llama_new_context_with_model: n_seq_max     = 1
0.00.938.137 I llama_new_context_with_model: n_ctx         = 4096
0.00.938.137 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.938.138 I llama_new_context_with_model: n_batch       = 2048
0.00.938.138 I llama_new_context_with_model: n_ubatch      = 512
0.00.938.139 I llama_new_context_with_model: flash_attn    = 0
0.00.938.142 I llama_new_context_with_model: freq_base     = 10000.0
0.00.938.143 I llama_new_context_with_model: freq_scale    = 1
0.00.938.143 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.938.229 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.953.015 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.953.054 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.953.172 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.955.832 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.955.837 I llama_new_context_with_model: graph nodes  = 601
0.00.955.837 I llama_new_context_with_model: graph splits = 1
0.00.955.862 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.955.865 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.567.914 I main: llama threadpool init, n_threads = 4
0.01.567.929 I 
0.01.568.049 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.568.054 I 
0.01.568.281 I sampler seed: 1285641589
0.01.568.294 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.568.304 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.568.305 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.568.306 I 
 increasively.

I am not able to generate responses that are sexually suggestive in nature. [end of text]


0.09.604.897 I llama_perf_sampler_print:    sampling time =      29.50 ms /    20 runs   (    1.48 ms per token,   677.92 tokens per second)
0.09.604.901 I llama_perf_context_print:        load time =    1566.98 ms
0.09.604.902 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.604.914 I llama_perf_context_print:        eval time =    7983.30 ms /    19 runs   (  420.17 ms per token,     2.38 tokens per second)
0.09.604.916 I llama_perf_context_print:       total time =    8036.99 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4374 (af43dc7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.023.969 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.068 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.083 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.088 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.094 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.096 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.097 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.098 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.100 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.101 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.107 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.108 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.110 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.111 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.112 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.028 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.083 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.237 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.245 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.246 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.247 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.248 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.250 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.251 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.255 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.257 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.258 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.259 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.352.261 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.269 I llama_model_loader: - type  f32:   37 tensors
0.00.352.271 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.166 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.405 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.266 I llm_load_vocab: special tokens cache size = 5
0.00.818.159 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.818.239 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.818.244 I llm_load_print_meta: arch             = gemma
0.00.818.244 I llm_load_print_meta: vocab type       = SPM
0.00.818.246 I llm_load_print_meta: n_vocab          = 256000
0.00.818.248 I llm_load_print_meta: n_merges         = 0
0.00.818.248 I llm_load_print_meta: vocab_only       = 0
0.00.818.249 I llm_load_print_meta: n_ctx_train      = 8192
0.00.818.249 I llm_load_print_meta: n_embd           = 2048
0.00.818.250 I llm_load_print_meta: n_layer          = 18
0.00.818.325 I llm_load_print_meta: n_head           = 8
0.00.818.333 I llm_load_print_meta: n_head_kv        = 1
0.00.818.334 I llm_load_print_meta: n_rot            = 256
0.00.818.334 I llm_load_print_meta: n_swa            = 0
0.00.818.335 I llm_load_print_meta: n_embd_head_k    = 256
0.00.818.336 I llm_load_print_meta: n_embd_head_v    = 256
0.00.818.341 I llm_load_print_meta: n_gqa            = 8
0.00.818.346 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.818.351 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.818.352 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.818.354 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.818.354 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.818.355 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.818.356 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.818.361 I llm_load_print_meta: n_ff             = 16384
0.00.818.362 I llm_load_print_meta: n_expert         = 0
0.00.818.362 I llm_load_print_meta: n_expert_used    = 0
0.00.818.364 I llm_load_print_meta: causal attn      = 1
0.00.818.364 I llm_load_print_meta: pooling type     = 0
0.00.818.365 I llm_load_print_meta: rope type        = 2
0.00.818.366 I llm_load_print_meta: rope scaling     = linear
0.00.818.367 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.818.373 I llm_load_print_meta: freq_scale_train = 1
0.00.818.374 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.818.374 I llm_load_print_meta: rope_finetuned   = unknown
0.00.818.374 I llm_load_print_meta: ssm_d_conv       = 0
0.00.818.375 I llm_load_print_meta: ssm_d_inner      = 0
0.00.818.386 I llm_load_print_meta: ssm_d_state      = 0
0.00.818.387 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.818.388 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.818.400 I llm_load_print_meta: model type       = 2B
0.00.818.401 I llm_load_print_meta: model ftype      = Q8_0
0.00.818.403 I llm_load_print_meta: model params     = 2.51 B
0.00.818.404 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.818.405 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.818.406 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.818.406 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.818.408 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.818.408 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.818.408 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.818.409 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.818.416 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.818.417 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.818.418 I llm_load_print_meta: max token length = 93
0.00.915.451 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.921.690 I llama_new_context_with_model: n_seq_max     = 1
0.00.921.698 I llama_new_context_with_model: n_ctx         = 4096
0.00.921.699 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.921.699 I llama_new_context_with_model: n_batch       = 2048
0.00.921.699 I llama_new_context_with_model: n_ubatch      = 512
0.00.921.700 I llama_new_context_with_model: flash_attn    = 0
0.00.921.704 I llama_new_context_with_model: freq_base     = 10000.0
0.00.921.704 I llama_new_context_with_model: freq_scale    = 1
0.00.921.705 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.921.802 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.937.556 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.937.598 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.937.719 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.940.417 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.940.422 I llama_new_context_with_model: graph nodes  = 601
0.00.940.422 I llama_new_context_with_model: graph splits = 1
0.00.940.445 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.940.448 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.552.437 I main: llama threadpool init, n_threads = 4
0.01.552.452 I 
0.01.552.577 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.552.578 I 
0.01.552.802 I sampler seed: 4082452456
0.01.552.817 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.552.827 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.552.830 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.552.830 I 
 seconally.

I'm not sure what to make for dinner tonight. Can you help me out?

I'm open to suggestions that are quick

0.15.141.616 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.57 tokens per second)
0.15.141.631 I llama_perf_context_print:        load time =    1551.47 ms
0.15.141.633 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.141.635 I llama_perf_context_print:        eval time =   13499.25 ms /    32 runs   (  421.85 ms per token,     2.37 tokens per second)
0.15.141.636 I llama_perf_context_print:       total time =   13589.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4374 (af43dc7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.852 I main: load the model and apply lora adapter, if any
0.00.023.295 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.306 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.394 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.406 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.408 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.413 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.417 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.418 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.419 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.420 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.422 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.435 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.437 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.439 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.440 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.442 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.077 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.257 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.449 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.458 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.459 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.460 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.462 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.463 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.464 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.468 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.470 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.471 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.472 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.352.474 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.482 I llama_model_loader: - type  f32:   37 tensors
0.00.352.484 I llama_model_loader: - type q8_0:  127 tensors
0.00.570.657 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.900 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.928 I llm_load_vocab: special tokens cache size = 5
0.00.826.420 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.826.496 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.826.501 I llm_load_print_meta: arch             = gemma
0.00.826.502 I llm_load_print_meta: vocab type       = SPM
0.00.826.503 I llm_load_print_meta: n_vocab          = 256000
0.00.826.505 I llm_load_print_meta: n_merges         = 0
0.00.826.506 I llm_load_print_meta: vocab_only       = 0
0.00.826.506 I llm_load_print_meta: n_ctx_train      = 8192
0.00.826.506 I llm_load_print_meta: n_embd           = 2048
0.00.826.507 I llm_load_print_meta: n_layer          = 18
0.00.826.569 I llm_load_print_meta: n_head           = 8
0.00.826.576 I llm_load_print_meta: n_head_kv        = 1
0.00.826.577 I llm_load_print_meta: n_rot            = 256
0.00.826.577 I llm_load_print_meta: n_swa            = 0
0.00.826.578 I llm_load_print_meta: n_embd_head_k    = 256
0.00.826.578 I llm_load_print_meta: n_embd_head_v    = 256
0.00.826.583 I llm_load_print_meta: n_gqa            = 8
0.00.826.588 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.826.593 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.826.594 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.826.595 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.826.596 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.826.596 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.826.597 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.826.602 I llm_load_print_meta: n_ff             = 16384
0.00.826.603 I llm_load_print_meta: n_expert         = 0
0.00.826.604 I llm_load_print_meta: n_expert_used    = 0
0.00.826.604 I llm_load_print_meta: causal attn      = 1
0.00.826.606 I llm_load_print_meta: pooling type     = 0
0.00.826.606 I llm_load_print_meta: rope type        = 2
0.00.826.607 I llm_load_print_meta: rope scaling     = linear
0.00.826.608 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.826.609 I llm_load_print_meta: freq_scale_train = 1
0.00.826.609 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.826.610 I llm_load_print_meta: rope_finetuned   = unknown
0.00.826.610 I llm_load_print_meta: ssm_d_conv       = 0
0.00.826.610 I llm_load_print_meta: ssm_d_inner      = 0
0.00.826.610 I llm_load_print_meta: ssm_d_state      = 0
0.00.826.611 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.826.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.826.628 I llm_load_print_meta: model type       = 2B
0.00.826.629 I llm_load_print_meta: model ftype      = Q8_0
0.00.826.630 I llm_load_print_meta: model params     = 2.51 B
0.00.826.634 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.826.635 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.826.635 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.826.636 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.826.636 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.826.637 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.826.637 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.826.637 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.826.643 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.826.645 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.826.646 I llm_load_print_meta: max token length = 93
0.00.905.403 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.905.414 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.905.414 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.905.415 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.905.416 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.905.417 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.911.367 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.374 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.374 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.375 I llama_new_context_with_model: n_batch       = 2048
0.00.911.375 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.376 I llama_new_context_with_model: flash_attn    = 0
0.00.911.379 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.380 I llama_new_context_with_model: freq_scale    = 1
0.00.911.380 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.911.466 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.925.788 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.925.830 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.925.956 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.928.604 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.928.608 I llama_new_context_with_model: graph nodes  = 601
0.00.928.609 I llama_new_context_with_model: graph splits = 1
0.00.928.632 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.928.634 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.538.990 I main: llama threadpool init, n_threads = 4
0.01.539.007 I 
0.01.539.122 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.539.127 I 
0.01.539.354 I sampler seed: 1564718523
0.01.539.367 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.539.379 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.539.380 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.539.380 I 
 seconary key figures and explain their contributions to the field of political science.

**Secondary Key Figures in Political Science:**

**1. Auguste Comte:**


0.15.042.414 I llama_perf_sampler_print:    sampling time =      49.52 ms /    33 runs   (    1.50 ms per token,   666.45 tokens per second)
0.15.042.417 I llama_perf_context_print:        load time =    1538.05 ms
0.15.042.431 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.042.433 I llama_perf_context_print:        eval time =   13413.57 ms /    32 runs   (  419.17 ms per token,     2.39 tokens per second)
0.15.042.434 I llama_perf_context_print:       total time =   13503.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 4374 (af43dc7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.000.826 I main: load the model and apply lora adapter, if any
0.00.023.008 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.020 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.103 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.115 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.117 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.123 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.124 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.126 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.127 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.128 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.130 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.135 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.137 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.139 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.140 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.141 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.578 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.576 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.742 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.752 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.753 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.754 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.756 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.757 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.758 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.762 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.763 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.765 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.766 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.768 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.777 I llama_model_loader: - type  f32:   37 tensors
0.00.351.780 I llama_model_loader: - type q8_0:  127 tensors
0.00.581.384 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.499 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.398 I llm_load_vocab: special tokens cache size = 5
0.00.849.071 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.849.144 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.849.149 I llm_load_print_meta: arch             = gemma
0.00.849.150 I llm_load_print_meta: vocab type       = SPM
0.00.849.151 I llm_load_print_meta: n_vocab          = 256000
0.00.849.153 I llm_load_print_meta: n_merges         = 0
0.00.849.154 I llm_load_print_meta: vocab_only       = 0
0.00.849.155 I llm_load_print_meta: n_ctx_train      = 8192
0.00.849.155 I llm_load_print_meta: n_embd           = 2048
0.00.849.155 I llm_load_print_meta: n_layer          = 18
0.00.849.228 I llm_load_print_meta: n_head           = 8
0.00.849.235 I llm_load_print_meta: n_head_kv        = 1
0.00.849.236 I llm_load_print_meta: n_rot            = 256
0.00.849.236 I llm_load_print_meta: n_swa            = 0
0.00.849.236 I llm_load_print_meta: n_embd_head_k    = 256
0.00.849.237 I llm_load_print_meta: n_embd_head_v    = 256
0.00.849.241 I llm_load_print_meta: n_gqa            = 8
0.00.849.246 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.849.252 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.849.254 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.849.256 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.849.256 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.849.256 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.849.257 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.849.262 I llm_load_print_meta: n_ff             = 16384
0.00.849.262 I llm_load_print_meta: n_expert         = 0
0.00.849.264 I llm_load_print_meta: n_expert_used    = 0
0.00.849.265 I llm_load_print_meta: causal attn      = 1
0.00.849.265 I llm_load_print_meta: pooling type     = 0
0.00.849.265 I llm_load_print_meta: rope type        = 2
0.00.849.266 I llm_load_print_meta: rope scaling     = linear
0.00.849.268 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.849.269 I llm_load_print_meta: freq_scale_train = 1
0.00.849.270 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.849.270 I llm_load_print_meta: rope_finetuned   = unknown
0.00.849.271 I llm_load_print_meta: ssm_d_conv       = 0
0.00.849.271 I llm_load_print_meta: ssm_d_inner      = 0
0.00.849.283 I llm_load_print_meta: ssm_d_state      = 0
0.00.849.284 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.849.284 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.849.296 I llm_load_print_meta: model type       = 2B
0.00.849.297 I llm_load_print_meta: model ftype      = Q8_0
0.00.849.298 I llm_load_print_meta: model params     = 2.51 B
0.00.849.299 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.849.312 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.849.313 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.849.314 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.849.314 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.849.315 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.849.319 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.849.319 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.849.326 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.849.328 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.849.328 I llm_load_print_meta: max token length = 93
0.00.923.060 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.923.072 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.928.938 I llama_new_context_with_model: n_seq_max     = 1
0.00.928.945 I llama_new_context_with_model: n_ctx         = 4096
0.00.928.945 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.928.946 I llama_new_context_with_model: n_batch       = 2048
0.00.928.946 I llama_new_context_with_model: n_ubatch      = 512
0.00.928.947 I llama_new_context_with_model: flash_attn    = 0
0.00.928.950 I llama_new_context_with_model: freq_base     = 10000.0
0.00.928.951 I llama_new_context_with_model: freq_scale    = 1
0.00.928.952 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.046 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.943.818 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.943.855 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.943.969 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.946.545 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.946.549 I llama_new_context_with_model: graph nodes  = 601
0.00.946.549 I llama_new_context_with_model: graph splits = 1
0.00.946.572 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.946.574 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.556.152 I main: llama threadpool init, n_threads = 4
0.01.556.169 I 
0.01.556.287 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.556.292 I 
0.01.556.518 I sampler seed: 3902217930
0.01.556.532 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.556.545 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.556.545 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.556.546 I 
 increasels are a symbol of bravery and the desire to conquer. [end of text]


0.07.448.846 I llama_perf_sampler_print:    sampling time =      21.79 ms /    15 runs   (    1.45 ms per token,   688.29 tokens per second)
0.07.448.850 I llama_perf_context_print:        load time =    1555.24 ms
0.07.448.851 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.448.853 I llama_perf_context_print:        eval time =    5852.37 ms /    14 runs   (  418.03 ms per token,     2.39 tokens per second)
0.07.448.864 I llama_perf_context_print:       total time =    5892.71 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.781s
user	2m57.722s
sys	0m9.293s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4374 (af43dc7b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186794.09 ms
main:    total time = 186794.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 4374 (af43dc7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.000.834 I main: load the model and apply lora adapter, if any
0.00.023.562 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.573 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.662 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.674 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.676 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.682 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.685 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.686 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.690 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.691 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.692 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.698 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.699 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.700 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.702 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.703 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.291 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.113 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.260 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.268 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.269 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.271 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.272 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.273 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.275 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.279 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.280 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.282 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.283 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.285 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.293 I llama_model_loader: - type  f32:   37 tensors
0.00.352.295 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.296 I llama_model_loader: - type q6_K:   19 tensors
0.00.566.407 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.087 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.624.067 I llm_load_vocab: special tokens cache size = 5
0.00.817.173 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.817.243 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.817.247 I llm_load_print_meta: arch             = gemma
0.00.817.248 I llm_load_print_meta: vocab type       = SPM
0.00.817.249 I llm_load_print_meta: n_vocab          = 256000
0.00.817.251 I llm_load_print_meta: n_merges         = 0
0.00.817.252 I llm_load_print_meta: vocab_only       = 0
0.00.817.252 I llm_load_print_meta: n_ctx_train      = 8192
0.00.817.253 I llm_load_print_meta: n_embd           = 2048
0.00.817.253 I llm_load_print_meta: n_layer          = 18
0.00.817.318 I llm_load_print_meta: n_head           = 8
0.00.817.324 I llm_load_print_meta: n_head_kv        = 1
0.00.817.325 I llm_load_print_meta: n_rot            = 256
0.00.817.325 I llm_load_print_meta: n_swa            = 0
0.00.817.326 I llm_load_print_meta: n_embd_head_k    = 256
0.00.817.326 I llm_load_print_meta: n_embd_head_v    = 256
0.00.817.331 I llm_load_print_meta: n_gqa            = 8
0.00.817.336 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.817.340 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.817.342 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.817.343 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.817.343 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.817.344 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.817.344 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.817.349 I llm_load_print_meta: n_ff             = 16384
0.00.817.350 I llm_load_print_meta: n_expert         = 0
0.00.817.350 I llm_load_print_meta: n_expert_used    = 0
0.00.817.350 I llm_load_print_meta: causal attn      = 1
0.00.817.350 I llm_load_print_meta: pooling type     = 0
0.00.817.351 I llm_load_print_meta: rope type        = 2
0.00.817.351 I llm_load_print_meta: rope scaling     = linear
0.00.817.353 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.817.353 I llm_load_print_meta: freq_scale_train = 1
0.00.817.354 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.817.354 I llm_load_print_meta: rope_finetuned   = unknown
0.00.817.354 I llm_load_print_meta: ssm_d_conv       = 0
0.00.817.355 I llm_load_print_meta: ssm_d_inner      = 0
0.00.817.355 I llm_load_print_meta: ssm_d_state      = 0
0.00.817.355 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.817.356 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.817.368 I llm_load_print_meta: model type       = 2B
0.00.817.369 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.817.370 I llm_load_print_meta: model params     = 2.51 B
0.00.817.371 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.817.371 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.817.372 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.817.372 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.817.373 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.817.373 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.817.373 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.817.374 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.817.380 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.817.381 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.817.381 I llm_load_print_meta: max token length = 93
0.00.880.643 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.880.652 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.880.653 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.880.653 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.880.654 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.880.655 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.886.468 I llama_new_context_with_model: n_seq_max     = 1
0.00.886.476 I llama_new_context_with_model: n_ctx         = 4096
0.00.886.476 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.886.477 I llama_new_context_with_model: n_batch       = 2048
0.00.886.477 I llama_new_context_with_model: n_ubatch      = 512
0.00.886.478 I llama_new_context_with_model: flash_attn    = 0
0.00.886.481 I llama_new_context_with_model: freq_base     = 10000.0
0.00.886.481 I llama_new_context_with_model: freq_scale    = 1
0.00.886.482 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.886.582 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.900.791 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.900.827 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.900.947 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.903.508 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.903.512 I llama_new_context_with_model: graph nodes  = 601
0.00.903.512 I llama_new_context_with_model: graph splits = 1
0.00.903.534 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.903.537 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.485.220 I main: llama threadpool init, n_threads = 4
0.01.485.237 I 
0.01.485.361 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.485.365 I 
0.01.485.588 I sampler seed: 3405810207
0.01.485.601 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.485.610 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.485.614 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.485.614 I 
 increasities to the original text, adding explanations.

Original Text:

> The quick brown fox jumped over the lazy dog.


Corrected Version:

>

0.12.643.040 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.19 tokens per second)
0.12.643.043 I llama_perf_context_print:        load time =    1484.30 ms
0.12.643.044 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.643.046 I llama_perf_context_print:        eval time =   11068.93 ms /    32 runs   (  345.90 ms per token,     2.89 tokens per second)
0.12.643.047 I llama_perf_context_print:       total time =   11157.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4374 (af43dc7b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186780.09 ms
main:    total time = 186780.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4374 (af43dc7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.023.345 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.443 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.457 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.459 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.464 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.466 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.468 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.469 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.471 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.473 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.478 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.479 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.481 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.482 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.483 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.715 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.501 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.657 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.667 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.668 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.670 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.671 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.673 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.674 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.678 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.680 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.688 I llama_model_loader: - type  f32:   37 tensors
0.00.351.691 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.691 I llama_model_loader: - type q6_K:   19 tensors
0.00.590.309 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.582 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.476 I llm_load_vocab: special tokens cache size = 5
0.00.854.357 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.854.437 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.854.442 I llm_load_print_meta: arch             = gemma
0.00.854.442 I llm_load_print_meta: vocab type       = SPM
0.00.854.443 I llm_load_print_meta: n_vocab          = 256000
0.00.854.445 I llm_load_print_meta: n_merges         = 0
0.00.854.446 I llm_load_print_meta: vocab_only       = 0
0.00.854.446 I llm_load_print_meta: n_ctx_train      = 8192
0.00.854.447 I llm_load_print_meta: n_embd           = 2048
0.00.854.447 I llm_load_print_meta: n_layer          = 18
0.00.854.513 I llm_load_print_meta: n_head           = 8
0.00.854.520 I llm_load_print_meta: n_head_kv        = 1
0.00.854.521 I llm_load_print_meta: n_rot            = 256
0.00.854.521 I llm_load_print_meta: n_swa            = 0
0.00.854.522 I llm_load_print_meta: n_embd_head_k    = 256
0.00.854.523 I llm_load_print_meta: n_embd_head_v    = 256
0.00.854.528 I llm_load_print_meta: n_gqa            = 8
0.00.854.533 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.854.538 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.854.539 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.854.541 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.854.541 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.854.542 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.854.542 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.854.547 I llm_load_print_meta: n_ff             = 16384
0.00.854.548 I llm_load_print_meta: n_expert         = 0
0.00.854.548 I llm_load_print_meta: n_expert_used    = 0
0.00.854.549 I llm_load_print_meta: causal attn      = 1
0.00.854.553 I llm_load_print_meta: pooling type     = 0
0.00.854.553 I llm_load_print_meta: rope type        = 2
0.00.854.554 I llm_load_print_meta: rope scaling     = linear
0.00.854.555 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.854.556 I llm_load_print_meta: freq_scale_train = 1
0.00.854.557 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.854.558 I llm_load_print_meta: rope_finetuned   = unknown
0.00.854.558 I llm_load_print_meta: ssm_d_conv       = 0
0.00.854.558 I llm_load_print_meta: ssm_d_inner      = 0
0.00.854.559 I llm_load_print_meta: ssm_d_state      = 0
0.00.854.559 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.854.560 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.854.574 I llm_load_print_meta: model type       = 2B
0.00.854.576 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.854.576 I llm_load_print_meta: model params     = 2.51 B
0.00.854.577 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.854.578 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.854.578 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.854.588 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.854.589 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.854.589 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.854.590 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.854.591 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.854.597 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.854.599 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.854.599 I llm_load_print_meta: max token length = 93
0.00.914.465 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.920.227 I llama_new_context_with_model: n_seq_max     = 1
0.00.920.234 I llama_new_context_with_model: n_ctx         = 4096
0.00.920.235 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.920.235 I llama_new_context_with_model: n_batch       = 2048
0.00.920.236 I llama_new_context_with_model: n_ubatch      = 512
0.00.920.236 I llama_new_context_with_model: flash_attn    = 0
0.00.920.239 I llama_new_context_with_model: freq_base     = 10000.0
0.00.920.239 I llama_new_context_with_model: freq_scale    = 1
0.00.920.240 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.325 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.935.014 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.935.053 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.935.165 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.937.756 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.937.760 I llama_new_context_with_model: graph nodes  = 601
0.00.937.761 I llama_new_context_with_model: graph splits = 1
0.00.937.784 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.937.787 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.518.833 I main: llama threadpool init, n_threads = 4
0.01.518.849 I 
0.01.518.971 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.518.976 I 
0.01.519.203 I sampler seed: 4069564643
0.01.519.216 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.519.225 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.519.228 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.519.229 I 
 encompassing a wide range of topics, from philosophy and science to history and social sciences. [end of text]


0.08.118.671 I llama_perf_sampler_print:    sampling time =      29.54 ms /    20 runs   (    1.48 ms per token,   676.96 tokens per second)
0.08.118.675 I llama_perf_context_print:        load time =    1517.88 ms
0.08.118.676 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.118.678 I llama_perf_context_print:        eval time =    6545.40 ms /    19 runs   (  344.49 ms per token,     2.90 tokens per second)
0.08.118.679 I llama_perf_context_print:       total time =    6599.85 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m37.231s
user	46m26.376s
sys	0m6.324s
