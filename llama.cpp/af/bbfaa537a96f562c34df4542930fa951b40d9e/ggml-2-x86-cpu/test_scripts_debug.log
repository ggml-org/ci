+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.683 I build: 3824 (afbbfaa5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.002.832 I main: load the model and apply lora adapter, if any
0.00.025.129 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.323 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.419 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.432 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.433 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.438 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.442 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.443 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.444 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.444 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.445 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.452 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.453 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.454 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.455 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.456 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.304 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.568 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.199.004 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.199.014 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.199.015 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.199.016 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.199.017 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.199.018 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.199.019 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.199.023 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.199.023 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.199.024 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.199.025 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.199.026 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.036 I llama_model_loader: - type  f32:   37 tensors
0.00.199.040 I llama_model_loader: - type q8_0:  127 tensors
0.00.516.711 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.548.652 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.549.801 I llm_load_vocab: special tokens cache size = 5
0.00.607.389 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.451 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.452 I llm_load_print_meta: arch             = gemma
0.00.607.453 I llm_load_print_meta: vocab type       = SPM
0.00.607.454 I llm_load_print_meta: n_vocab          = 256000
0.00.607.457 I llm_load_print_meta: n_merges         = 0
0.00.607.457 I llm_load_print_meta: vocab_only       = 0
0.00.607.457 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.458 I llm_load_print_meta: n_embd           = 2048
0.00.607.458 I llm_load_print_meta: n_layer          = 18
0.00.607.493 I llm_load_print_meta: n_head           = 8
0.00.607.501 I llm_load_print_meta: n_head_kv        = 1
0.00.607.501 I llm_load_print_meta: n_rot            = 256
0.00.607.502 I llm_load_print_meta: n_swa            = 0
0.00.607.502 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.503 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.507 I llm_load_print_meta: n_gqa            = 8
0.00.607.512 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.517 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.518 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.520 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.520 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.521 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.521 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.527 I llm_load_print_meta: n_ff             = 16384
0.00.607.528 I llm_load_print_meta: n_expert         = 0
0.00.607.528 I llm_load_print_meta: n_expert_used    = 0
0.00.607.529 I llm_load_print_meta: causal attn      = 1
0.00.607.529 I llm_load_print_meta: pooling type     = 0
0.00.607.529 I llm_load_print_meta: rope type        = 2
0.00.607.530 I llm_load_print_meta: rope scaling     = linear
0.00.607.531 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.532 I llm_load_print_meta: freq_scale_train = 1
0.00.607.532 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.533 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.533 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.533 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.534 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.534 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.534 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.535 I llm_load_print_meta: model type       = 2B
0.00.607.536 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.537 I llm_load_print_meta: model params     = 2.51 B
0.00.607.537 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.538 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.538 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.539 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.539 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.539 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.540 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.540 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.546 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.548 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.548 I llm_load_print_meta: max token length = 93
0.00.607.733 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.706.008 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.706.018 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.706.019 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.706.019 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.706.020 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.706.021 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.711.959 I llama_new_context_with_model: n_ctx      = 8192
0.00.711.969 I llama_new_context_with_model: n_batch    = 2048
0.00.711.970 I llama_new_context_with_model: n_ubatch   = 512
0.00.711.971 I llama_new_context_with_model: flash_attn = 0
0.00.711.975 I llama_new_context_with_model: freq_base  = 10000.0
0.00.711.976 I llama_new_context_with_model: freq_scale = 1
0.00.743.492 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.743.536 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.743.654 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.745.080 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.745.086 I llama_new_context_with_model: graph nodes  = 601
0.00.745.087 I llama_new_context_with_model: graph splits = 1
0.00.745.102 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.406 I main: llama threadpool init, n_threads = 4
0.01.359.418 I 
0.01.359.510 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.514 I 
0.01.359.676 I sampler seed: 3788536554
0.01.359.687 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.692 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.359.693 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.693 I 
 increasities is a common feature of the nervous system. They can occur spontaneously or be elicited by external stimuli.

**What are the possible mechanisms underlying the occurrence

0.14.906.746 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.97 tokens per second)
0.14.906.749 I llama_perf_context_print:        load time =    1356.47 ms
0.14.906.750 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.906.752 I llama_perf_context_print:        eval time =   13463.97 ms /    32 runs   (  420.75 ms per token,     2.38 tokens per second)
0.14.906.753 I llama_perf_context_print:       total time =   13547.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.656 I build: 3824 (afbbfaa5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.808 I main: load the model and apply lora adapter, if any
0.00.025.377 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.474 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.491 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.495 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.500 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.501 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.502 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.503 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.505 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.506 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.513 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.514 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.515 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.516 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.519 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.439 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.831 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.199.296 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.199.307 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.199.308 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.199.309 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.199.310 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.199.311 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.199.312 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.199.315 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.199.316 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.199.317 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.199.317 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.199.318 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.326 I llama_model_loader: - type  f32:   37 tensors
0.00.199.331 I llama_model_loader: - type q8_0:  127 tensors
0.00.543.361 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.575.263 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.576.335 I llm_load_vocab: special tokens cache size = 5
0.00.633.960 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.634.020 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.634.021 I llm_load_print_meta: arch             = gemma
0.00.634.022 I llm_load_print_meta: vocab type       = SPM
0.00.634.023 I llm_load_print_meta: n_vocab          = 256000
0.00.634.025 I llm_load_print_meta: n_merges         = 0
0.00.634.026 I llm_load_print_meta: vocab_only       = 0
0.00.634.026 I llm_load_print_meta: n_ctx_train      = 8192
0.00.634.026 I llm_load_print_meta: n_embd           = 2048
0.00.634.027 I llm_load_print_meta: n_layer          = 18
0.00.634.061 I llm_load_print_meta: n_head           = 8
0.00.634.067 I llm_load_print_meta: n_head_kv        = 1
0.00.634.068 I llm_load_print_meta: n_rot            = 256
0.00.634.069 I llm_load_print_meta: n_swa            = 0
0.00.634.069 I llm_load_print_meta: n_embd_head_k    = 256
0.00.634.069 I llm_load_print_meta: n_embd_head_v    = 256
0.00.634.074 I llm_load_print_meta: n_gqa            = 8
0.00.634.079 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.634.083 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.634.085 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.634.086 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.634.086 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.634.087 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.634.087 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.634.092 I llm_load_print_meta: n_ff             = 16384
0.00.634.092 I llm_load_print_meta: n_expert         = 0
0.00.634.093 I llm_load_print_meta: n_expert_used    = 0
0.00.634.093 I llm_load_print_meta: causal attn      = 1
0.00.634.094 I llm_load_print_meta: pooling type     = 0
0.00.634.094 I llm_load_print_meta: rope type        = 2
0.00.634.095 I llm_load_print_meta: rope scaling     = linear
0.00.634.096 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.634.097 I llm_load_print_meta: freq_scale_train = 1
0.00.634.097 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.634.098 I llm_load_print_meta: rope_finetuned   = unknown
0.00.634.098 I llm_load_print_meta: ssm_d_conv       = 0
0.00.634.098 I llm_load_print_meta: ssm_d_inner      = 0
0.00.634.099 I llm_load_print_meta: ssm_d_state      = 0
0.00.634.099 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.634.099 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.634.100 I llm_load_print_meta: model type       = 2B
0.00.634.101 I llm_load_print_meta: model ftype      = Q8_0
0.00.634.101 I llm_load_print_meta: model params     = 2.51 B
0.00.634.102 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.634.103 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.634.103 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.634.104 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.634.104 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.634.104 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.634.105 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.634.105 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.634.111 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.634.113 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.634.113 I llm_load_print_meta: max token length = 93
0.00.634.298 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.726.965 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.732.730 I llama_new_context_with_model: n_ctx      = 8192
0.00.732.739 I llama_new_context_with_model: n_batch    = 2048
0.00.732.739 I llama_new_context_with_model: n_ubatch   = 512
0.00.732.740 I llama_new_context_with_model: flash_attn = 0
0.00.732.743 I llama_new_context_with_model: freq_base  = 10000.0
0.00.732.744 I llama_new_context_with_model: freq_scale = 1
0.00.764.972 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.765.012 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.765.124 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.766.523 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.766.530 I llama_new_context_with_model: graph nodes  = 601
0.00.766.531 I llama_new_context_with_model: graph splits = 1
0.00.766.547 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.400.026 I main: llama threadpool init, n_threads = 4
0.01.400.039 I 
0.01.400.133 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.400.137 I 
0.01.400.297 I sampler seed: 1259936600
0.01.400.308 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.400.313 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.400.313 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.400.314 I 
 increably.

I understand. I will adjust my response accordingly. [end of text]


0.07.708.641 I llama_perf_sampler_print:    sampling time =      23.09 ms /    16 runs   (    1.44 ms per token,   692.82 tokens per second)
0.07.708.656 I llama_perf_context_print:        load time =    1397.12 ms
0.07.708.658 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.708.660 I llama_perf_context_print:        eval time =    6268.94 ms /    15 runs   (  417.93 ms per token,     2.39 tokens per second)
0.07.708.661 I llama_perf_context_print:       total time =    6308.63 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.668 I build: 3824 (afbbfaa5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.002.820 I main: load the model and apply lora adapter, if any
0.00.024.788 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.995 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.090 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.102 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.103 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.108 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.109 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.109 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.110 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.111 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.112 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.119 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.121 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.122 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.130 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.132 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.882 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.432 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.972 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.981 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.982 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.983 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.984 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.985 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.986 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.989 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.990 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.991 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.992 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.198.993 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.003 I llama_model_loader: - type  f32:   37 tensors
0.00.199.007 I llama_model_loader: - type q8_0:  127 tensors
0.00.517.790 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.549.759 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.550.797 I llm_load_vocab: special tokens cache size = 5
0.00.608.291 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.354 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.358 I llm_load_print_meta: arch             = gemma
0.00.608.359 I llm_load_print_meta: vocab type       = SPM
0.00.608.359 I llm_load_print_meta: n_vocab          = 256000
0.00.608.362 I llm_load_print_meta: n_merges         = 0
0.00.608.363 I llm_load_print_meta: vocab_only       = 0
0.00.608.363 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.364 I llm_load_print_meta: n_embd           = 2048
0.00.608.364 I llm_load_print_meta: n_layer          = 18
0.00.608.399 I llm_load_print_meta: n_head           = 8
0.00.608.408 I llm_load_print_meta: n_head_kv        = 1
0.00.608.410 I llm_load_print_meta: n_rot            = 256
0.00.608.410 I llm_load_print_meta: n_swa            = 0
0.00.608.411 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.411 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.416 I llm_load_print_meta: n_gqa            = 8
0.00.608.421 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.426 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.428 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.429 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.430 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.430 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.432 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.437 I llm_load_print_meta: n_ff             = 16384
0.00.608.438 I llm_load_print_meta: n_expert         = 0
0.00.608.438 I llm_load_print_meta: n_expert_used    = 0
0.00.608.449 I llm_load_print_meta: causal attn      = 1
0.00.608.452 I llm_load_print_meta: pooling type     = 0
0.00.608.452 I llm_load_print_meta: rope type        = 2
0.00.608.453 I llm_load_print_meta: rope scaling     = linear
0.00.608.454 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.455 I llm_load_print_meta: freq_scale_train = 1
0.00.608.455 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.456 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.456 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.456 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.457 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.458 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.458 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.472 I llm_load_print_meta: model type       = 2B
0.00.608.473 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.475 I llm_load_print_meta: model params     = 2.51 B
0.00.608.476 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.476 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.477 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.477 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.478 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.479 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.479 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.488 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.495 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.497 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.497 I llm_load_print_meta: max token length = 93
0.00.608.678 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.684.226 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.684.237 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.684.238 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.684.238 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.684.239 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.684.240 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.691.067 I llama_new_context_with_model: n_ctx      = 8192
0.00.691.075 I llama_new_context_with_model: n_batch    = 2048
0.00.691.076 I llama_new_context_with_model: n_ubatch   = 512
0.00.691.077 I llama_new_context_with_model: flash_attn = 0
0.00.691.080 I llama_new_context_with_model: freq_base  = 10000.0
0.00.691.081 I llama_new_context_with_model: freq_scale = 1
0.00.722.020 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.722.062 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.722.175 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.723.557 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.562 I llama_new_context_with_model: graph nodes  = 601
0.00.723.563 I llama_new_context_with_model: graph splits = 1
0.00.723.578 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.379.357 I main: llama threadpool init, n_threads = 4
0.01.379.372 I 
0.01.379.469 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.379.473 I 
0.01.379.636 I sampler seed: 2235864704
0.01.379.647 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.379.653 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.379.654 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.379.654 I 
 increamental and incremental updates.

**Incremental updates** are changes to the data that do not require the entire dataset to be processed again. Incremental updates can be

0.14.972.532 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.51 tokens per second)
0.14.972.535 I llama_perf_context_print:        load time =    1376.44 ms
0.14.972.536 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.972.538 I llama_perf_context_print:        eval time =   13510.82 ms /    32 runs   (  422.21 ms per token,     2.37 tokens per second)
0.14.972.539 I llama_perf_context_print:       total time =   13593.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.655 I build: 3824 (afbbfaa5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.002.801 I main: load the model and apply lora adapter, if any
0.00.025.112 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.317 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.410 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.423 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.424 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.429 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.430 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.431 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.432 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.432 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.433 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.442 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.443 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.444 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.445 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.446 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.233 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.298 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.770 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.780 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.781 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.782 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.783 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.785 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.785 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.789 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.790 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.791 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.792 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.198.793 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.802 I llama_model_loader: - type  f32:   37 tensors
0.00.198.806 I llama_model_loader: - type q8_0:  127 tensors
0.00.529.879 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.561.806 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.562.977 I llm_load_vocab: special tokens cache size = 5
0.00.620.456 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.513 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.514 I llm_load_print_meta: arch             = gemma
0.00.620.515 I llm_load_print_meta: vocab type       = SPM
0.00.620.516 I llm_load_print_meta: n_vocab          = 256000
0.00.620.518 I llm_load_print_meta: n_merges         = 0
0.00.620.518 I llm_load_print_meta: vocab_only       = 0
0.00.620.519 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.519 I llm_load_print_meta: n_embd           = 2048
0.00.620.519 I llm_load_print_meta: n_layer          = 18
0.00.620.554 I llm_load_print_meta: n_head           = 8
0.00.620.561 I llm_load_print_meta: n_head_kv        = 1
0.00.620.562 I llm_load_print_meta: n_rot            = 256
0.00.620.562 I llm_load_print_meta: n_swa            = 0
0.00.620.563 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.563 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.569 I llm_load_print_meta: n_gqa            = 8
0.00.620.573 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.579 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.580 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.581 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.581 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.582 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.582 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.587 I llm_load_print_meta: n_ff             = 16384
0.00.620.588 I llm_load_print_meta: n_expert         = 0
0.00.620.588 I llm_load_print_meta: n_expert_used    = 0
0.00.620.589 I llm_load_print_meta: causal attn      = 1
0.00.620.589 I llm_load_print_meta: pooling type     = 0
0.00.620.589 I llm_load_print_meta: rope type        = 2
0.00.620.590 I llm_load_print_meta: rope scaling     = linear
0.00.620.591 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.592 I llm_load_print_meta: freq_scale_train = 1
0.00.620.593 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.593 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.593 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.594 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.594 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.594 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.595 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.596 I llm_load_print_meta: model type       = 2B
0.00.620.597 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.597 I llm_load_print_meta: model params     = 2.51 B
0.00.620.598 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.599 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.599 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.600 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.600 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.600 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.601 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.601 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.606 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.608 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.608 I llm_load_print_meta: max token length = 93
0.00.620.788 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.261 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.693.272 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.699.739 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.748 I llama_new_context_with_model: n_batch    = 2048
0.00.699.748 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.749 I llama_new_context_with_model: flash_attn = 0
0.00.699.753 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.753 I llama_new_context_with_model: freq_scale = 1
0.00.731.702 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.731.747 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.866 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.733.312 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.318 I llama_new_context_with_model: graph nodes  = 601
0.00.733.319 I llama_new_context_with_model: graph splits = 1
0.00.733.337 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.351.277 I main: llama threadpool init, n_threads = 4
0.01.351.291 I 
0.01.351.387 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.351.391 I 
0.01.351.557 I sampler seed: 2025372258
0.01.351.567 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.572 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.351.585 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.588 I 
 increadibly well with the music, creating a truly immersive experience.

I can't help but think of the feeling of being completely lost in the music,

0.14.994.661 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.32 tokens per second)
0.14.994.663 I llama_perf_context_print:        load time =    1348.37 ms
0.14.994.665 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.994.667 I llama_perf_context_print:        eval time =   13560.31 ms /    32 runs   (  423.76 ms per token,     2.36 tokens per second)
0.14.994.691 I llama_perf_context_print:       total time =   13643.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.593s
user	3m21.448s
sys	0m9.659s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3824 (afbbfaa5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199474.86 ms
main:    total time = 199474.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.694 I build: 3824 (afbbfaa5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.002.854 I main: load the model and apply lora adapter, if any
0.00.024.855 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.062 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.158 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.172 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.173 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.178 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.182 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.183 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.184 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.185 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.185 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.193 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.195 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.196 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.197 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.198 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.607 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.728 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.209 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.218 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.219 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.220 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.221 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.222 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.223 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.226 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.227 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.228 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.229 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.230 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.238 I llama_model_loader: - type  f32:   37 tensors
0.00.198.243 I llama_model_loader: - type q4_K:  108 tensors
0.00.198.243 I llama_model_loader: - type q6_K:   19 tensors
0.00.525.150 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.557.966 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.559.035 I llm_load_vocab: special tokens cache size = 5
0.00.616.599 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.661 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.662 I llm_load_print_meta: arch             = gemma
0.00.616.663 I llm_load_print_meta: vocab type       = SPM
0.00.616.664 I llm_load_print_meta: n_vocab          = 256000
0.00.616.667 I llm_load_print_meta: n_merges         = 0
0.00.616.667 I llm_load_print_meta: vocab_only       = 0
0.00.616.668 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.669 I llm_load_print_meta: n_embd           = 2048
0.00.616.669 I llm_load_print_meta: n_layer          = 18
0.00.616.704 I llm_load_print_meta: n_head           = 8
0.00.616.710 I llm_load_print_meta: n_head_kv        = 1
0.00.616.711 I llm_load_print_meta: n_rot            = 256
0.00.616.711 I llm_load_print_meta: n_swa            = 0
0.00.616.712 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.712 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.717 I llm_load_print_meta: n_gqa            = 8
0.00.616.721 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.726 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.727 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.729 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.729 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.730 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.730 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.735 I llm_load_print_meta: n_ff             = 16384
0.00.616.735 I llm_load_print_meta: n_expert         = 0
0.00.616.736 I llm_load_print_meta: n_expert_used    = 0
0.00.616.736 I llm_load_print_meta: causal attn      = 1
0.00.616.736 I llm_load_print_meta: pooling type     = 0
0.00.616.737 I llm_load_print_meta: rope type        = 2
0.00.616.737 I llm_load_print_meta: rope scaling     = linear
0.00.616.739 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.739 I llm_load_print_meta: freq_scale_train = 1
0.00.616.739 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.740 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.740 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.740 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.741 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.741 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.741 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.742 I llm_load_print_meta: model type       = 2B
0.00.616.743 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.616.743 I llm_load_print_meta: model params     = 2.51 B
0.00.616.744 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.616.744 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.745 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.745 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.746 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.746 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.746 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.747 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.753 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.754 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.755 I llm_load_print_meta: max token length = 93
0.00.616.948 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.675.715 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.675.728 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.675.729 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.675.729 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.675.730 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.675.731 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.681.514 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.523 I llama_new_context_with_model: n_batch    = 2048
0.00.681.524 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.525 I llama_new_context_with_model: flash_attn = 0
0.00.681.529 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.530 I llama_new_context_with_model: freq_scale = 1
0.00.714.075 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.120 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.714.231 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.715.614 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.715.620 I llama_new_context_with_model: graph nodes  = 601
0.00.715.621 I llama_new_context_with_model: graph splits = 1
0.00.715.636 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.289 I main: llama threadpool init, n_threads = 4
0.01.297.301 I 
0.01.297.393 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.397 I 
0.01.297.562 I sampler seed: 3203472307
0.01.297.573 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.578 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.297.580 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.581 I 
 guaranteing the health of a loved one?

**Here are some ways to express your love and support:**

**Words:**

* Say "I love

0.12.362.429 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.85 tokens per second)
0.12.362.450 I llama_perf_context_print:        load time =    1294.33 ms
0.12.362.462 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.362.468 I llama_perf_context_print:        eval time =   10981.30 ms /    32 runs   (  343.17 ms per token,     2.91 tokens per second)
0.12.362.468 I llama_perf_context_print:       total time =   11065.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3824 (afbbfaa5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199449.00 ms
main:    total time = 199449.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.703 I build: 3824 (afbbfaa5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.938 I main: llama backend init
0.00.002.897 I main: load the model and apply lora adapter, if any
0.00.025.085 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.186 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.203 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.205 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.210 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.211 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.213 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.214 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.215 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.216 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.223 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.224 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.228 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.229 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.229 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.644 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.089 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.538 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.548 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.549 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.550 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.551 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.552 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.553 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.556 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.557 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.566 I llama_model_loader: - type  f32:   37 tensors
0.00.198.588 I llama_model_loader: - type q4_K:  108 tensors
0.00.198.590 I llama_model_loader: - type q6_K:   19 tensors
0.00.505.240 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.536.709 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.803 I llm_load_vocab: special tokens cache size = 5
0.00.595.352 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.411 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.412 I llm_load_print_meta: arch             = gemma
0.00.595.412 I llm_load_print_meta: vocab type       = SPM
0.00.595.413 I llm_load_print_meta: n_vocab          = 256000
0.00.595.415 I llm_load_print_meta: n_merges         = 0
0.00.595.416 I llm_load_print_meta: vocab_only       = 0
0.00.595.416 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.417 I llm_load_print_meta: n_embd           = 2048
0.00.595.417 I llm_load_print_meta: n_layer          = 18
0.00.595.454 I llm_load_print_meta: n_head           = 8
0.00.595.465 I llm_load_print_meta: n_head_kv        = 1
0.00.595.465 I llm_load_print_meta: n_rot            = 256
0.00.595.466 I llm_load_print_meta: n_swa            = 0
0.00.595.466 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.468 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.473 I llm_load_print_meta: n_gqa            = 8
0.00.595.478 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.483 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.487 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.488 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.489 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.489 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.489 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.494 I llm_load_print_meta: n_ff             = 16384
0.00.595.495 I llm_load_print_meta: n_expert         = 0
0.00.595.496 I llm_load_print_meta: n_expert_used    = 0
0.00.595.496 I llm_load_print_meta: causal attn      = 1
0.00.595.496 I llm_load_print_meta: pooling type     = 0
0.00.595.498 I llm_load_print_meta: rope type        = 2
0.00.595.498 I llm_load_print_meta: rope scaling     = linear
0.00.595.500 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.501 I llm_load_print_meta: freq_scale_train = 1
0.00.595.502 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.502 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.502 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.503 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.503 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.504 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.504 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.505 I llm_load_print_meta: model type       = 2B
0.00.595.506 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.595.506 I llm_load_print_meta: model params     = 2.51 B
0.00.595.507 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.595.508 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.508 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.509 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.510 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.510 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.523 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.524 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.529 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.532 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.532 I llm_load_print_meta: max token length = 93
0.00.595.714 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.276 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.659.036 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.045 I llama_new_context_with_model: n_batch    = 2048
0.00.659.045 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.046 I llama_new_context_with_model: flash_attn = 0
0.00.659.050 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.051 I llama_new_context_with_model: freq_scale = 1
0.00.690.815 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.690.862 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.690.973 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.692.350 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.692.357 I llama_new_context_with_model: graph nodes  = 601
0.00.692.357 I llama_new_context_with_model: graph splits = 1
0.00.692.374 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.100 I main: llama threadpool init, n_threads = 4
0.01.271.113 I 
0.01.271.209 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.212 I 
0.01.271.377 I sampler seed: 896769916
0.01.271.388 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.392 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.271.393 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.271.393 I 
 seconally.

I am unable to generate the requested response because I am unable to access external websites or specific data sources. [end of text]


0.10.176.322 I llama_perf_sampler_print:    sampling time =      39.96 ms /    27 runs   (    1.48 ms per token,   675.74 tokens per second)
0.10.176.336 I llama_perf_context_print:        load time =    1268.09 ms
0.10.176.339 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.176.341 I llama_perf_context_print:        eval time =    8837.85 ms /    26 runs   (  339.92 ms per token,     2.94 tokens per second)
0.10.176.342 I llama_perf_context_print:       total time =    8905.23 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.484s
user	50m13.820s
sys	0m6.625s
