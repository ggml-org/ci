+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 3942 (afd9909a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.912 I main: llama backend init
0.00.002.846 I main: load the model and apply lora adapter, if any
0.00.024.843 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.046 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.135 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.146 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.148 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.152 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.154 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.156 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.157 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.158 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.160 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.167 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.169 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.169 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.170 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.171 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.591 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.111 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.422 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.433 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.434 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.435 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.436 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.437 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.438 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.442 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.442 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.444 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.445 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.446 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.456 I llama_model_loader: - type  f32:   37 tensors
0.00.266.461 I llama_model_loader: - type q8_0:  127 tensors
0.00.430.594 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.489.536 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.490.439 I llm_load_vocab: special tokens cache size = 5
0.00.599.192 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.259 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.260 I llm_load_print_meta: arch             = gemma
0.00.599.261 I llm_load_print_meta: vocab type       = SPM
0.00.599.262 I llm_load_print_meta: n_vocab          = 256000
0.00.599.264 I llm_load_print_meta: n_merges         = 0
0.00.599.264 I llm_load_print_meta: vocab_only       = 0
0.00.599.265 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.265 I llm_load_print_meta: n_embd           = 2048
0.00.599.265 I llm_load_print_meta: n_layer          = 18
0.00.599.328 I llm_load_print_meta: n_head           = 8
0.00.599.334 I llm_load_print_meta: n_head_kv        = 1
0.00.599.335 I llm_load_print_meta: n_rot            = 256
0.00.599.335 I llm_load_print_meta: n_swa            = 0
0.00.599.336 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.337 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.341 I llm_load_print_meta: n_gqa            = 8
0.00.599.346 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.352 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.354 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.355 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.356 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.356 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.356 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.361 I llm_load_print_meta: n_ff             = 16384
0.00.599.362 I llm_load_print_meta: n_expert         = 0
0.00.599.363 I llm_load_print_meta: n_expert_used    = 0
0.00.599.364 I llm_load_print_meta: causal attn      = 1
0.00.599.364 I llm_load_print_meta: pooling type     = 0
0.00.599.364 I llm_load_print_meta: rope type        = 2
0.00.599.376 I llm_load_print_meta: rope scaling     = linear
0.00.599.381 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.381 I llm_load_print_meta: freq_scale_train = 1
0.00.599.382 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.383 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.384 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.384 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.384 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.385 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.385 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.386 I llm_load_print_meta: model type       = 2B
0.00.599.387 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.388 I llm_load_print_meta: model params     = 2.51 B
0.00.599.389 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.390 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.390 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.391 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.392 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.392 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.392 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.393 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.400 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.401 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.402 I llm_load_print_meta: max token length = 93
0.00.599.567 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.699.010 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.699.022 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.699.023 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.699.024 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.699.024 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.699.025 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.704.880 I llama_new_context_with_model: n_ctx      = 8192
0.00.704.890 I llama_new_context_with_model: n_batch    = 2048
0.00.704.890 I llama_new_context_with_model: n_ubatch   = 512
0.00.704.891 I llama_new_context_with_model: flash_attn = 0
0.00.704.894 I llama_new_context_with_model: freq_base  = 10000.0
0.00.704.895 I llama_new_context_with_model: freq_scale = 1
0.00.736.013 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.736.061 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.736.173 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.737.605 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.737.610 I llama_new_context_with_model: graph nodes  = 601
0.00.737.610 I llama_new_context_with_model: graph splits = 1
0.00.737.626 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.084 I main: llama threadpool init, n_threads = 4
0.01.347.096 I 
0.01.347.201 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.205 I 
0.01.347.384 I sampler seed: 2316527806
0.01.347.395 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.403 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.347.404 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.406 I 
 increasities.
I cannot provide sexually suggestive or inappropriate content. [end of text]


0.07.231.927 I llama_perf_sampler_print:    sampling time =      21.63 ms /    15 runs   (    1.44 ms per token,   693.35 tokens per second)
0.07.231.948 I llama_perf_context_print:        load time =    1344.15 ms
0.07.231.950 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.231.951 I llama_perf_context_print:        eval time =    5848.11 ms /    14 runs   (  417.72 ms per token,     2.39 tokens per second)
0.07.231.961 I llama_perf_context_print:       total time =    5884.85 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 3942 (afd9909a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.700 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.791 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.804 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.806 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.810 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.813 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.814 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.815 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.816 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.817 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.823 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.825 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.827 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.828 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.829 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.778 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.412 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.555 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.563 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.564 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.565 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.566 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.567 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.568 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.573 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.574 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.575 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.576 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.577 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.586 I llama_model_loader: - type  f32:   37 tensors
0.00.265.590 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.734 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.044 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.923 I llm_load_vocab: special tokens cache size = 5
0.00.606.978 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.054 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.055 I llm_load_print_meta: arch             = gemma
0.00.607.056 I llm_load_print_meta: vocab type       = SPM
0.00.607.057 I llm_load_print_meta: n_vocab          = 256000
0.00.607.059 I llm_load_print_meta: n_merges         = 0
0.00.607.060 I llm_load_print_meta: vocab_only       = 0
0.00.607.060 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.061 I llm_load_print_meta: n_embd           = 2048
0.00.607.061 I llm_load_print_meta: n_layer          = 18
0.00.607.126 I llm_load_print_meta: n_head           = 8
0.00.607.132 I llm_load_print_meta: n_head_kv        = 1
0.00.607.133 I llm_load_print_meta: n_rot            = 256
0.00.607.133 I llm_load_print_meta: n_swa            = 0
0.00.607.135 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.136 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.140 I llm_load_print_meta: n_gqa            = 8
0.00.607.145 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.150 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.182 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.185 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.186 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.186 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.186 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.192 I llm_load_print_meta: n_ff             = 16384
0.00.607.193 I llm_load_print_meta: n_expert         = 0
0.00.607.193 I llm_load_print_meta: n_expert_used    = 0
0.00.607.194 I llm_load_print_meta: causal attn      = 1
0.00.607.194 I llm_load_print_meta: pooling type     = 0
0.00.607.194 I llm_load_print_meta: rope type        = 2
0.00.607.196 I llm_load_print_meta: rope scaling     = linear
0.00.607.197 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.201 I llm_load_print_meta: freq_scale_train = 1
0.00.607.201 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.201 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.202 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.202 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.202 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.203 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.203 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.203 I llm_load_print_meta: model type       = 2B
0.00.607.204 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.205 I llm_load_print_meta: model params     = 2.51 B
0.00.607.206 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.206 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.207 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.207 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.215 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.216 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.224 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.225 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.231 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.232 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.233 I llm_load_print_meta: max token length = 93
0.00.607.403 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.703.995 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.709.670 I llama_new_context_with_model: n_ctx      = 8192
0.00.709.678 I llama_new_context_with_model: n_batch    = 2048
0.00.709.678 I llama_new_context_with_model: n_ubatch   = 512
0.00.709.679 I llama_new_context_with_model: flash_attn = 0
0.00.709.682 I llama_new_context_with_model: freq_base  = 10000.0
0.00.709.683 I llama_new_context_with_model: freq_scale = 1
0.00.738.779 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.738.824 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.738.938 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.379 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.740.384 I llama_new_context_with_model: graph nodes  = 601
0.00.740.384 I llama_new_context_with_model: graph splits = 1
0.00.740.399 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.351.489 I main: llama threadpool init, n_threads = 4
0.01.351.503 I 
0.01.351.613 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.351.617 I 
0.01.351.800 I sampler seed: 2978895155
0.01.351.811 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.818 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.351.819 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.822 I 
 increasities, and other sexual encounters are not appropriate subjects to discuss in this context. [end of text]


0.08.919.733 I llama_perf_sampler_print:    sampling time =      27.78 ms /    19 runs   (    1.46 ms per token,   684.04 tokens per second)
0.08.919.736 I llama_perf_context_print:        load time =    1348.60 ms
0.08.919.737 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.919.739 I llama_perf_context_print:        eval time =    7521.03 ms /    18 runs   (  417.84 ms per token,     2.39 tokens per second)
0.08.919.739 I llama_perf_context_print:       total time =    7568.25 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 3942 (afd9909a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.024.519 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.714 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.799 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.810 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.811 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.815 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.817 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.818 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.819 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.820 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.821 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.827 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.831 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.832 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.833 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.834 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.939 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.265.609 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.283.737 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.283.746 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.283.747 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.283.748 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.283.749 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.283.750 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.283.751 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.283.755 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.283.756 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.283.757 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.283.757 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.283.759 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.283.768 I llama_model_loader: - type  f32:   37 tensors
0.00.283.772 I llama_model_loader: - type q8_0:  127 tensors
0.00.464.092 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.436 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.297 I llm_load_vocab: special tokens cache size = 5
0.00.624.031 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.101 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.101 I llm_load_print_meta: arch             = gemma
0.00.624.102 I llm_load_print_meta: vocab type       = SPM
0.00.624.103 I llm_load_print_meta: n_vocab          = 256000
0.00.624.105 I llm_load_print_meta: n_merges         = 0
0.00.624.106 I llm_load_print_meta: vocab_only       = 0
0.00.624.106 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.107 I llm_load_print_meta: n_embd           = 2048
0.00.624.107 I llm_load_print_meta: n_layer          = 18
0.00.624.170 I llm_load_print_meta: n_head           = 8
0.00.624.177 I llm_load_print_meta: n_head_kv        = 1
0.00.624.177 I llm_load_print_meta: n_rot            = 256
0.00.624.178 I llm_load_print_meta: n_swa            = 0
0.00.624.178 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.178 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.183 I llm_load_print_meta: n_gqa            = 8
0.00.624.188 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.193 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.195 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.196 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.197 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.197 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.198 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.203 I llm_load_print_meta: n_ff             = 16384
0.00.624.203 I llm_load_print_meta: n_expert         = 0
0.00.624.204 I llm_load_print_meta: n_expert_used    = 0
0.00.624.204 I llm_load_print_meta: causal attn      = 1
0.00.624.205 I llm_load_print_meta: pooling type     = 0
0.00.624.206 I llm_load_print_meta: rope type        = 2
0.00.624.206 I llm_load_print_meta: rope scaling     = linear
0.00.624.208 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.208 I llm_load_print_meta: freq_scale_train = 1
0.00.624.209 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.209 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.210 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.210 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.210 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.211 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.211 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.212 I llm_load_print_meta: model type       = 2B
0.00.624.213 I llm_load_print_meta: model ftype      = Q8_0
0.00.624.214 I llm_load_print_meta: model params     = 2.51 B
0.00.624.215 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.624.215 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.216 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.216 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.217 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.217 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.218 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.218 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.224 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.225 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.226 I llm_load_print_meta: max token length = 93
0.00.624.393 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.702.423 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.702.432 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.702.433 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.702.434 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.702.434 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.702.435 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.708.104 I llama_new_context_with_model: n_ctx      = 8192
0.00.708.111 I llama_new_context_with_model: n_batch    = 2048
0.00.708.111 I llama_new_context_with_model: n_ubatch   = 512
0.00.708.112 I llama_new_context_with_model: flash_attn = 0
0.00.708.114 I llama_new_context_with_model: freq_base  = 10000.0
0.00.708.114 I llama_new_context_with_model: freq_scale = 1
0.00.736.714 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.736.759 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.736.873 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.284 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.738.289 I llama_new_context_with_model: graph nodes  = 601
0.00.738.289 I llama_new_context_with_model: graph splits = 1
0.00.738.304 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.385.810 I main: llama threadpool init, n_threads = 4
0.01.385.823 I 
0.01.385.932 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.385.936 I 
0.01.386.123 I sampler seed: 3273221123
0.01.386.136 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.386.144 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.386.147 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.386.148 I 
 increasities?

I cannot find the requested information in the provided context. Therefore, I am unable to answer this question. [end of text]


0.12.428.170 I llama_perf_sampler_print:    sampling time =      40.03 ms /    27 runs   (    1.48 ms per token,   674.46 tokens per second)
0.12.428.173 I llama_perf_context_print:        load time =    1382.94 ms
0.12.428.187 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.428.189 I llama_perf_context_print:        eval time =   10975.54 ms /    26 runs   (  422.14 ms per token,     2.37 tokens per second)
0.12.428.190 I llama_perf_context_print:       total time =   11042.37 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 3942 (afd9909a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.809 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.010 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.097 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.108 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.110 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.114 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.117 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.118 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.119 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.121 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.122 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.129 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.130 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.131 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.132 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.134 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.368 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.873 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.027 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.035 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.036 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.037 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.038 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.039 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.040 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.043 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.044 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.046 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.046 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.048 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.056 I llama_model_loader: - type  f32:   37 tensors
0.00.267.061 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.365 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.756 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.731 I llm_load_vocab: special tokens cache size = 5
0.00.607.405 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.475 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.476 I llm_load_print_meta: arch             = gemma
0.00.607.477 I llm_load_print_meta: vocab type       = SPM
0.00.607.478 I llm_load_print_meta: n_vocab          = 256000
0.00.607.480 I llm_load_print_meta: n_merges         = 0
0.00.607.481 I llm_load_print_meta: vocab_only       = 0
0.00.607.481 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.482 I llm_load_print_meta: n_embd           = 2048
0.00.607.482 I llm_load_print_meta: n_layer          = 18
0.00.607.544 I llm_load_print_meta: n_head           = 8
0.00.607.552 I llm_load_print_meta: n_head_kv        = 1
0.00.607.552 I llm_load_print_meta: n_rot            = 256
0.00.607.553 I llm_load_print_meta: n_swa            = 0
0.00.607.554 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.554 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.559 I llm_load_print_meta: n_gqa            = 8
0.00.607.565 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.570 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.571 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.573 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.573 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.574 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.575 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.580 I llm_load_print_meta: n_ff             = 16384
0.00.607.594 I llm_load_print_meta: n_expert         = 0
0.00.607.595 I llm_load_print_meta: n_expert_used    = 0
0.00.607.596 I llm_load_print_meta: causal attn      = 1
0.00.607.596 I llm_load_print_meta: pooling type     = 0
0.00.607.596 I llm_load_print_meta: rope type        = 2
0.00.607.597 I llm_load_print_meta: rope scaling     = linear
0.00.607.599 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.600 I llm_load_print_meta: freq_scale_train = 1
0.00.607.600 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.601 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.601 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.602 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.602 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.602 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.617 I llm_load_print_meta: model type       = 2B
0.00.607.618 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.619 I llm_load_print_meta: model params     = 2.51 B
0.00.607.620 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.620 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.621 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.621 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.622 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.623 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.623 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.624 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.630 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.632 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.632 I llm_load_print_meta: max token length = 93
0.00.607.798 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.679.059 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.679.070 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.684.525 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.531 I llama_new_context_with_model: n_batch    = 2048
0.00.684.532 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.532 I llama_new_context_with_model: flash_attn = 0
0.00.684.534 I llama_new_context_with_model: freq_base  = 10000.0
0.00.684.535 I llama_new_context_with_model: freq_scale = 1
0.00.713.650 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.713.689 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.713.800 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.715.134 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.715.139 I llama_new_context_with_model: graph nodes  = 601
0.00.715.139 I llama_new_context_with_model: graph splits = 1
0.00.715.155 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.325.154 I main: llama threadpool init, n_threads = 4
0.01.325.167 I 
0.01.325.272 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.325.276 I 
0.01.325.456 I sampler seed: 3496194580
0.01.325.468 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.325.475 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.325.477 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.325.477 I 
 increamically.

A scientist discovers a new type of bacteria that can break down complex organic molecules into simpler ones, opening up new possibilities for environmental cleanup and the

0.14.834.212 I llama_perf_sampler_print:    sampling time =      49.70 ms /    33 runs   (    1.51 ms per token,   663.94 tokens per second)
0.14.834.216 I llama_perf_context_print:        load time =    1322.29 ms
0.14.834.218 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.834.220 I llama_perf_context_print:        eval time =   13426.17 ms /    32 runs   (  419.57 ms per token,     2.38 tokens per second)
0.14.834.223 I llama_perf_context_print:       total time =   13509.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m54.217s
user	2m44.763s
sys	0m9.488s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3942 (afd9909a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198805.90 ms
main:    total time = 198805.90 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.679 I build: 3942 (afd9909a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.882 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.024.847 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.069 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.168 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.182 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.184 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.190 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.194 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.196 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.197 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.199 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.201 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.210 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.215 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.217 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.219 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.221 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.589 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.267.110 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.285.283 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.285.290 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.285.292 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.285.293 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.285.294 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.285.295 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.285.296 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.285.299 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.285.300 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.285.301 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.285.302 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.285.304 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.285.312 I llama_model_loader: - type  f32:   37 tensors
0.00.285.316 I llama_model_loader: - type q4_K:  108 tensors
0.00.285.317 I llama_model_loader: - type q6_K:   19 tensors
0.00.464.059 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.317 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.172 I llm_load_vocab: special tokens cache size = 5
0.00.625.678 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.749 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.750 I llm_load_print_meta: arch             = gemma
0.00.625.751 I llm_load_print_meta: vocab type       = SPM
0.00.625.752 I llm_load_print_meta: n_vocab          = 256000
0.00.625.754 I llm_load_print_meta: n_merges         = 0
0.00.625.754 I llm_load_print_meta: vocab_only       = 0
0.00.625.755 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.755 I llm_load_print_meta: n_embd           = 2048
0.00.625.756 I llm_load_print_meta: n_layer          = 18
0.00.625.820 I llm_load_print_meta: n_head           = 8
0.00.625.827 I llm_load_print_meta: n_head_kv        = 1
0.00.625.828 I llm_load_print_meta: n_rot            = 256
0.00.625.828 I llm_load_print_meta: n_swa            = 0
0.00.625.828 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.829 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.833 I llm_load_print_meta: n_gqa            = 8
0.00.625.838 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.843 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.844 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.845 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.846 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.846 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.846 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.851 I llm_load_print_meta: n_ff             = 16384
0.00.625.852 I llm_load_print_meta: n_expert         = 0
0.00.625.853 I llm_load_print_meta: n_expert_used    = 0
0.00.625.854 I llm_load_print_meta: causal attn      = 1
0.00.625.854 I llm_load_print_meta: pooling type     = 0
0.00.625.854 I llm_load_print_meta: rope type        = 2
0.00.625.855 I llm_load_print_meta: rope scaling     = linear
0.00.625.856 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.857 I llm_load_print_meta: freq_scale_train = 1
0.00.625.861 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.862 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.862 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.862 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.863 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.863 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.865 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.866 I llm_load_print_meta: model type       = 2B
0.00.625.867 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.625.868 I llm_load_print_meta: model params     = 2.51 B
0.00.625.869 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.625.869 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.870 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.870 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.878 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.879 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.879 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.880 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.886 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.887 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.888 I llm_load_print_meta: max token length = 93
0.00.626.067 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.479 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.687.490 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.687.491 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.687.492 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.687.492 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.687.493 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.693.252 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.259 I llama_new_context_with_model: n_batch    = 2048
0.00.693.260 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.261 I llama_new_context_with_model: flash_attn = 0
0.00.693.263 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.264 I llama_new_context_with_model: freq_scale = 1
0.00.723.239 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.723.285 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.408 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.818 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.822 I llama_new_context_with_model: graph nodes  = 601
0.00.724.823 I llama_new_context_with_model: graph splits = 1
0.00.724.838 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.306.022 I main: llama threadpool init, n_threads = 4
0.01.306.036 I 
0.01.306.144 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.306.145 I 
0.01.306.335 I sampler seed: 1222381694
0.01.306.349 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.306.356 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.306.357 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.306.358 I 
 maneutruely.

I am not able to answer this question as it contains sexually suggestive content. [end of text]


0.08.462.252 I llama_perf_sampler_print:    sampling time =      32.52 ms /    22 runs   (    1.48 ms per token,   676.57 tokens per second)
0.08.462.256 I llama_perf_context_print:        load time =    1303.11 ms
0.08.462.258 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.462.260 I llama_perf_context_print:        eval time =    7101.60 ms /    21 runs   (  338.17 ms per token,     2.96 tokens per second)
0.08.462.260 I llama_perf_context_print:       total time =    7156.24 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3942 (afd9909a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198356.74 ms
main:    total time = 198356.74 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 3942 (afd9909a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.024.614 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.710 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.725 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.730 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.735 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.744 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.746 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.755 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.759 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.760 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.766 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.767 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.768 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.774 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.776 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.874 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.405 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.512 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.520 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.521 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.522 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.523 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.524 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.525 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.529 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.530 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.539 I llama_model_loader: - type  f32:   37 tensors
0.00.264.544 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.545 I llama_model_loader: - type q6_K:   19 tensors
0.00.440.979 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.454 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.265 I llm_load_vocab: special tokens cache size = 5
0.00.605.677 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.743 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.743 I llm_load_print_meta: arch             = gemma
0.00.605.744 I llm_load_print_meta: vocab type       = SPM
0.00.605.745 I llm_load_print_meta: n_vocab          = 256000
0.00.605.747 I llm_load_print_meta: n_merges         = 0
0.00.605.747 I llm_load_print_meta: vocab_only       = 0
0.00.605.748 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.748 I llm_load_print_meta: n_embd           = 2048
0.00.605.748 I llm_load_print_meta: n_layer          = 18
0.00.605.814 I llm_load_print_meta: n_head           = 8
0.00.605.821 I llm_load_print_meta: n_head_kv        = 1
0.00.605.821 I llm_load_print_meta: n_rot            = 256
0.00.605.822 I llm_load_print_meta: n_swa            = 0
0.00.605.822 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.824 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.828 I llm_load_print_meta: n_gqa            = 8
0.00.605.833 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.838 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.840 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.841 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.842 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.842 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.842 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.847 I llm_load_print_meta: n_ff             = 16384
0.00.605.847 I llm_load_print_meta: n_expert         = 0
0.00.605.848 I llm_load_print_meta: n_expert_used    = 0
0.00.605.849 I llm_load_print_meta: causal attn      = 1
0.00.605.849 I llm_load_print_meta: pooling type     = 0
0.00.605.849 I llm_load_print_meta: rope type        = 2
0.00.605.850 I llm_load_print_meta: rope scaling     = linear
0.00.605.851 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.853 I llm_load_print_meta: freq_scale_train = 1
0.00.605.853 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.855 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.855 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.856 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.856 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.857 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.857 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.858 I llm_load_print_meta: model type       = 2B
0.00.605.859 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.605.860 I llm_load_print_meta: model params     = 2.51 B
0.00.605.864 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.605.865 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.865 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.866 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.866 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.867 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.867 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.868 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.873 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.875 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.876 I llm_load_print_meta: max token length = 93
0.00.606.044 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.664.157 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.669.715 I llama_new_context_with_model: n_ctx      = 8192
0.00.669.721 I llama_new_context_with_model: n_batch    = 2048
0.00.669.722 I llama_new_context_with_model: n_ubatch   = 512
0.00.669.722 I llama_new_context_with_model: flash_attn = 0
0.00.669.724 I llama_new_context_with_model: freq_base  = 10000.0
0.00.669.725 I llama_new_context_with_model: freq_scale = 1
0.00.698.915 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.698.959 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.699.074 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.700.422 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.700.427 I llama_new_context_with_model: graph nodes  = 601
0.00.700.427 I llama_new_context_with_model: graph splits = 1
0.00.700.443 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.920 I main: llama threadpool init, n_threads = 4
0.01.279.932 I 
0.01.280.039 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.280.043 I 
0.01.280.216 I sampler seed: 3779715413
0.01.280.228 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.236 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.280.236 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.280.237 I 
 seconded the question. I understand that.

I'm not sure if I'm understanding your question correctly. Please clarify your question and rephrase it

0.12.166.461 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.04 tokens per second)
0.12.166.475 I llama_perf_context_print:        load time =    1277.05 ms
0.12.166.477 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.166.479 I llama_perf_context_print:        eval time =   10805.03 ms /    32 runs   (  337.66 ms per token,     2.96 tokens per second)
0.12.166.481 I llama_perf_context_print:       total time =   10886.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m0.661s
user	49m51.057s
sys	0m6.311s
