+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.679 I build: 3782 (8a308354) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.002.827 I main: load the model and apply lora adapter, if any
0.00.024.777 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.965 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.049 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.060 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.061 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.064 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.065 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.067 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.067 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.069 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.070 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.076 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.077 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.078 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.079 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.080 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.691 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.490 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.404 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.411 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.412 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.413 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.414 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.415 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.416 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.419 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.420 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.420 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.421 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.423 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.430 I llama_model_loader: - type  f32:   37 tensors
0.00.195.434 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.831 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.461.864 I llm_load_vocab: special tokens cache size = 5
0.00.519.676 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.519.727 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.519.728 I llm_load_print_meta: arch             = gemma
0.00.519.728 I llm_load_print_meta: vocab type       = SPM
0.00.519.729 I llm_load_print_meta: n_vocab          = 256000
0.00.519.732 I llm_load_print_meta: n_merges         = 0
0.00.519.732 I llm_load_print_meta: vocab_only       = 0
0.00.519.732 I llm_load_print_meta: n_ctx_train      = 8192
0.00.519.733 I llm_load_print_meta: n_embd           = 2048
0.00.519.733 I llm_load_print_meta: n_layer          = 18
0.00.519.764 I llm_load_print_meta: n_head           = 8
0.00.519.770 I llm_load_print_meta: n_head_kv        = 1
0.00.519.771 I llm_load_print_meta: n_rot            = 256
0.00.519.771 I llm_load_print_meta: n_swa            = 0
0.00.519.771 I llm_load_print_meta: n_embd_head_k    = 256
0.00.519.772 I llm_load_print_meta: n_embd_head_v    = 256
0.00.519.777 I llm_load_print_meta: n_gqa            = 8
0.00.519.781 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.519.786 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.519.787 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.519.788 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.519.789 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.519.789 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.519.790 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.519.813 I llm_load_print_meta: n_ff             = 16384
0.00.519.814 I llm_load_print_meta: n_expert         = 0
0.00.519.814 I llm_load_print_meta: n_expert_used    = 0
0.00.519.815 I llm_load_print_meta: causal attn      = 1
0.00.519.815 I llm_load_print_meta: pooling type     = 0
0.00.519.815 I llm_load_print_meta: rope type        = 2
0.00.519.816 I llm_load_print_meta: rope scaling     = linear
0.00.519.817 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.519.818 I llm_load_print_meta: freq_scale_train = 1
0.00.519.818 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.519.818 I llm_load_print_meta: rope_finetuned   = unknown
0.00.519.819 I llm_load_print_meta: ssm_d_conv       = 0
0.00.519.819 I llm_load_print_meta: ssm_d_inner      = 0
0.00.519.828 I llm_load_print_meta: ssm_d_state      = 0
0.00.519.829 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.519.829 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.519.831 I llm_load_print_meta: model type       = 2B
0.00.519.832 I llm_load_print_meta: model ftype      = Q8_0
0.00.519.834 I llm_load_print_meta: model params     = 2.51 B
0.00.519.834 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.519.835 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.519.835 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.519.836 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.519.836 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.519.836 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.519.837 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.519.841 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.519.841 I llm_load_print_meta: max token length = 93
0.00.520.015 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.619.822 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.619.830 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.619.830 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.619.831 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.619.832 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.619.832 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.625.563 I llama_new_context_with_model: n_ctx      = 8192
0.00.625.570 I llama_new_context_with_model: n_batch    = 2048
0.00.625.571 I llama_new_context_with_model: n_ubatch   = 512
0.00.625.571 I llama_new_context_with_model: flash_attn = 0
0.00.625.573 I llama_new_context_with_model: freq_base  = 10000.0
0.00.625.574 I llama_new_context_with_model: freq_scale = 1
0.00.654.851 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.654.891 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.655.012 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.656.418 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.656.424 I llama_new_context_with_model: graph nodes  = 601
0.00.656.425 I llama_new_context_with_model: graph splits = 1
0.00.656.442 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.267.506 I main: llama threadpool init, n_threads = 4
0.01.267.518 I 
0.01.267.612 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.267.616 I 
0.01.267.779 I sampler seed: 2418556692
0.01.267.792 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.267.797 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.267.799 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneurors

The maneurors are a species of creatures that resemble large, bipedal spiders, but are actually small, furry insects. They are found in warm

0.14.797.503 I llama_perf_sampler_print:    sampling time =      48.21 ms /    33 runs   (    1.46 ms per token,   684.56 tokens per second)
0.14.797.506 I llama_perf_context_print:        load time =    1264.60 ms
0.14.797.507 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.797.509 I llama_perf_context_print:        eval time =   13448.66 ms /    32 runs   (  420.27 ms per token,     2.38 tokens per second)
0.14.797.522 I llama_perf_context_print:       total time =   13530.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.639 I build: 3782 (8a308354) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.787 I main: load the model and apply lora adapter, if any
0.00.024.679 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.768 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.782 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.786 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.790 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.791 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.793 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.794 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.795 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.795 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.802 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.803 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.804 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.805 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.806 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.061 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.798 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.752 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.759 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.760 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.761 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.762 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.763 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.764 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.767 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.768 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.768 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.769 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.194.770 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.779 I llama_model_loader: - type  f32:   37 tensors
0.00.194.783 I llama_model_loader: - type q8_0:  127 tensors
0.00.466.480 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.467.515 I llm_load_vocab: special tokens cache size = 5
0.00.525.359 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.525.413 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.525.414 I llm_load_print_meta: arch             = gemma
0.00.525.415 I llm_load_print_meta: vocab type       = SPM
0.00.525.416 I llm_load_print_meta: n_vocab          = 256000
0.00.525.418 I llm_load_print_meta: n_merges         = 0
0.00.525.419 I llm_load_print_meta: vocab_only       = 0
0.00.525.419 I llm_load_print_meta: n_ctx_train      = 8192
0.00.525.419 I llm_load_print_meta: n_embd           = 2048
0.00.525.420 I llm_load_print_meta: n_layer          = 18
0.00.525.452 I llm_load_print_meta: n_head           = 8
0.00.525.458 I llm_load_print_meta: n_head_kv        = 1
0.00.525.459 I llm_load_print_meta: n_rot            = 256
0.00.525.459 I llm_load_print_meta: n_swa            = 0
0.00.525.459 I llm_load_print_meta: n_embd_head_k    = 256
0.00.525.460 I llm_load_print_meta: n_embd_head_v    = 256
0.00.525.464 I llm_load_print_meta: n_gqa            = 8
0.00.525.488 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.525.494 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.525.495 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.525.497 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.525.497 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.525.497 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.525.498 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.525.503 I llm_load_print_meta: n_ff             = 16384
0.00.525.503 I llm_load_print_meta: n_expert         = 0
0.00.525.504 I llm_load_print_meta: n_expert_used    = 0
0.00.525.505 I llm_load_print_meta: causal attn      = 1
0.00.525.505 I llm_load_print_meta: pooling type     = 0
0.00.525.506 I llm_load_print_meta: rope type        = 2
0.00.525.506 I llm_load_print_meta: rope scaling     = linear
0.00.525.508 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.525.508 I llm_load_print_meta: freq_scale_train = 1
0.00.525.508 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.525.516 I llm_load_print_meta: rope_finetuned   = unknown
0.00.525.517 I llm_load_print_meta: ssm_d_conv       = 0
0.00.525.517 I llm_load_print_meta: ssm_d_inner      = 0
0.00.525.518 I llm_load_print_meta: ssm_d_state      = 0
0.00.525.518 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.525.518 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.525.519 I llm_load_print_meta: model type       = 2B
0.00.525.520 I llm_load_print_meta: model ftype      = Q8_0
0.00.525.528 I llm_load_print_meta: model params     = 2.51 B
0.00.525.529 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.525.529 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.525.536 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.525.541 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.525.541 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.525.542 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.525.542 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.525.543 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.525.544 I llm_load_print_meta: max token length = 93
0.00.525.716 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.621.706 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.627.426 I llama_new_context_with_model: n_ctx      = 8192
0.00.627.432 I llama_new_context_with_model: n_batch    = 2048
0.00.627.433 I llama_new_context_with_model: n_ubatch   = 512
0.00.627.433 I llama_new_context_with_model: flash_attn = 0
0.00.627.436 I llama_new_context_with_model: freq_base  = 10000.0
0.00.627.437 I llama_new_context_with_model: freq_scale = 1
0.00.657.950 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.657.997 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.121 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.659.469 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.659.475 I llama_new_context_with_model: graph nodes  = 601
0.00.659.475 I llama_new_context_with_model: graph splits = 1
0.00.659.502 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.270.086 I main: llama threadpool init, n_threads = 4
0.01.270.097 I 
0.01.270.191 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.270.195 I 
0.01.270.358 I sampler seed: 2445326627
0.01.270.369 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.270.374 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.270.374 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably, the rhythmic rasping of the wind whistling through the bare branches, a soothing balm in the storm.

The sun peeked over the horizon,

0.14.768.292 I llama_perf_sampler_print:    sampling time =      48.59 ms /    33 runs   (    1.47 ms per token,   679.14 tokens per second)
0.14.768.304 I llama_perf_context_print:        load time =    1267.22 ms
0.14.768.306 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.768.308 I llama_perf_context_print:        eval time =   13416.90 ms /    32 runs   (  419.28 ms per token,     2.39 tokens per second)
0.14.768.310 I llama_perf_context_print:       total time =   13498.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.657 I build: 3782 (8a308354) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.002.846 I main: load the model and apply lora adapter, if any
0.00.026.790 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.027.009 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.027.107 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.119 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.121 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.126 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.129 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.131 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.132 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.133 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.134 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.145 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.158 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.162 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.164 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.165 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.099.912 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.188.726 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.200.750 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.200.757 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.200.758 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.200.759 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.200.760 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.200.761 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.200.762 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.200.765 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.200.766 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.200.767 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.200.768 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.200.769 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.200.776 I llama_model_loader: - type  f32:   37 tensors
0.00.200.780 I llama_model_loader: - type q8_0:  127 tensors
0.00.480.069 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.481.213 I llm_load_vocab: special tokens cache size = 5
0.00.539.610 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.539.669 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.539.670 I llm_load_print_meta: arch             = gemma
0.00.539.671 I llm_load_print_meta: vocab type       = SPM
0.00.539.671 I llm_load_print_meta: n_vocab          = 256000
0.00.539.673 I llm_load_print_meta: n_merges         = 0
0.00.539.674 I llm_load_print_meta: vocab_only       = 0
0.00.539.674 I llm_load_print_meta: n_ctx_train      = 8192
0.00.539.675 I llm_load_print_meta: n_embd           = 2048
0.00.539.675 I llm_load_print_meta: n_layer          = 18
0.00.539.709 I llm_load_print_meta: n_head           = 8
0.00.539.716 I llm_load_print_meta: n_head_kv        = 1
0.00.539.716 I llm_load_print_meta: n_rot            = 256
0.00.539.717 I llm_load_print_meta: n_swa            = 0
0.00.539.717 I llm_load_print_meta: n_embd_head_k    = 256
0.00.539.717 I llm_load_print_meta: n_embd_head_v    = 256
0.00.539.722 I llm_load_print_meta: n_gqa            = 8
0.00.539.726 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.539.731 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.539.732 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.539.742 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.539.743 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.539.743 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.539.744 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.539.749 I llm_load_print_meta: n_ff             = 16384
0.00.539.749 I llm_load_print_meta: n_expert         = 0
0.00.539.750 I llm_load_print_meta: n_expert_used    = 0
0.00.539.750 I llm_load_print_meta: causal attn      = 1
0.00.539.750 I llm_load_print_meta: pooling type     = 0
0.00.539.751 I llm_load_print_meta: rope type        = 2
0.00.539.751 I llm_load_print_meta: rope scaling     = linear
0.00.539.753 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.539.753 I llm_load_print_meta: freq_scale_train = 1
0.00.539.754 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.539.754 I llm_load_print_meta: rope_finetuned   = unknown
0.00.539.754 I llm_load_print_meta: ssm_d_conv       = 0
0.00.539.754 I llm_load_print_meta: ssm_d_inner      = 0
0.00.539.755 I llm_load_print_meta: ssm_d_state      = 0
0.00.539.755 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.539.756 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.539.756 I llm_load_print_meta: model type       = 2B
0.00.539.757 I llm_load_print_meta: model ftype      = Q8_0
0.00.539.758 I llm_load_print_meta: model params     = 2.51 B
0.00.539.759 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.539.759 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.539.761 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.539.762 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.539.762 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.539.767 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.539.767 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.539.768 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.539.768 I llm_load_print_meta: max token length = 93
0.00.539.945 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.616.627 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.616.639 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.616.640 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.616.640 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.616.641 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.616.642 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.622.570 I llama_new_context_with_model: n_ctx      = 8192
0.00.622.578 I llama_new_context_with_model: n_batch    = 2048
0.00.622.578 I llama_new_context_with_model: n_ubatch   = 512
0.00.622.579 I llama_new_context_with_model: flash_attn = 0
0.00.622.582 I llama_new_context_with_model: freq_base  = 10000.0
0.00.622.582 I llama_new_context_with_model: freq_scale = 1
0.00.652.045 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.652.087 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.652.198 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.653.626 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.653.634 I llama_new_context_with_model: graph nodes  = 601
0.00.653.635 I llama_new_context_with_model: graph splits = 1
0.00.653.653 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.494 I main: llama threadpool init, n_threads = 4
0.01.311.505 I 
0.01.311.600 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.608 I 
0.01.311.774 I sampler seed: 2213508186
0.01.311.788 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.311.794 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.311.795 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably and with a joyous enthusiasm.

I'm not sure if you're familiar with him, but he's the most joyful person I know

0.14.923.851 I llama_perf_sampler_print:    sampling time =      48.02 ms /    33 runs   (    1.46 ms per token,   687.24 tokens per second)
0.14.923.854 I llama_perf_context_print:        load time =    1308.56 ms
0.14.923.855 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.923.857 I llama_perf_context_print:        eval time =   13531.95 ms /    32 runs   (  422.87 ms per token,     2.36 tokens per second)
0.14.923.857 I llama_perf_context_print:       total time =   13612.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.631 I build: 3782 (8a308354) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.853 I main: load the model and apply lora adapter, if any
0.00.024.672 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.869 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.955 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.967 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.969 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.972 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.974 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.975 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.975 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.976 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.978 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.986 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.991 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.992 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.994 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.995 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.220 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.633 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.584 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.592 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.593 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.594 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.594 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.595 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.596 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.601 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.601 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.602 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.603 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.195.604 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.612 I llama_model_loader: - type  f32:   37 tensors
0.00.195.617 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.412 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.423 I llm_load_vocab: special tokens cache size = 5
0.00.526.317 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.526.378 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.526.379 I llm_load_print_meta: arch             = gemma
0.00.526.380 I llm_load_print_meta: vocab type       = SPM
0.00.526.380 I llm_load_print_meta: n_vocab          = 256000
0.00.526.383 I llm_load_print_meta: n_merges         = 0
0.00.526.383 I llm_load_print_meta: vocab_only       = 0
0.00.526.384 I llm_load_print_meta: n_ctx_train      = 8192
0.00.526.384 I llm_load_print_meta: n_embd           = 2048
0.00.526.385 I llm_load_print_meta: n_layer          = 18
0.00.526.419 I llm_load_print_meta: n_head           = 8
0.00.526.425 I llm_load_print_meta: n_head_kv        = 1
0.00.526.425 I llm_load_print_meta: n_rot            = 256
0.00.526.426 I llm_load_print_meta: n_swa            = 0
0.00.526.426 I llm_load_print_meta: n_embd_head_k    = 256
0.00.526.426 I llm_load_print_meta: n_embd_head_v    = 256
0.00.526.431 I llm_load_print_meta: n_gqa            = 8
0.00.526.435 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.526.439 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.526.441 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.526.442 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.526.443 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.526.443 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.526.444 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.526.448 I llm_load_print_meta: n_ff             = 16384
0.00.526.449 I llm_load_print_meta: n_expert         = 0
0.00.526.449 I llm_load_print_meta: n_expert_used    = 0
0.00.526.449 I llm_load_print_meta: causal attn      = 1
0.00.526.450 I llm_load_print_meta: pooling type     = 0
0.00.526.450 I llm_load_print_meta: rope type        = 2
0.00.526.450 I llm_load_print_meta: rope scaling     = linear
0.00.526.452 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.526.452 I llm_load_print_meta: freq_scale_train = 1
0.00.526.453 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.526.453 I llm_load_print_meta: rope_finetuned   = unknown
0.00.526.453 I llm_load_print_meta: ssm_d_conv       = 0
0.00.526.453 I llm_load_print_meta: ssm_d_inner      = 0
0.00.526.454 I llm_load_print_meta: ssm_d_state      = 0
0.00.526.454 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.526.455 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.526.456 I llm_load_print_meta: model type       = 2B
0.00.526.456 I llm_load_print_meta: model ftype      = Q8_0
0.00.526.457 I llm_load_print_meta: model params     = 2.51 B
0.00.526.458 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.526.458 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.526.459 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.526.460 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.526.460 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.526.460 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.526.461 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.526.461 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.526.461 I llm_load_print_meta: max token length = 93
0.00.526.626 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.598.124 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.598.131 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.603.782 I llama_new_context_with_model: n_ctx      = 8192
0.00.603.789 I llama_new_context_with_model: n_batch    = 2048
0.00.603.790 I llama_new_context_with_model: n_ubatch   = 512
0.00.603.790 I llama_new_context_with_model: flash_attn = 0
0.00.603.793 I llama_new_context_with_model: freq_base  = 10000.0
0.00.603.793 I llama_new_context_with_model: freq_scale = 1
0.00.633.171 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.633.212 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.633.327 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.634.702 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.634.709 I llama_new_context_with_model: graph nodes  = 601
0.00.634.710 I llama_new_context_with_model: graph splits = 1
0.00.634.729 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.248.086 I main: llama threadpool init, n_threads = 4
0.01.248.098 I 
0.01.248.192 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.248.197 I 
0.01.248.364 I sampler seed: 97582489
0.01.248.374 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.248.379 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.248.380 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities with an emotional intensity that captivates the audience.

This is how I would describe a dance performance.

**Question:** What kind of dance performance

0.14.804.424 I llama_perf_sampler_print:    sampling time =      48.28 ms /    33 runs   (    1.46 ms per token,   683.48 tokens per second)
0.14.804.427 I llama_perf_context_print:        load time =    1245.15 ms
0.14.804.429 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.804.432 I llama_perf_context_print:        eval time =   13475.00 ms /    32 runs   (  421.09 ms per token,     2.37 tokens per second)
0.14.804.433 I llama_perf_context_print:       total time =   13556.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.965s
user	3m49.250s
sys	0m9.440s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3782 (8a308354)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 204110.32 ms
main:    total time = 204110.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.592 I build: 3782 (8a308354) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.768 I main: llama backend init
0.00.002.692 I main: load the model and apply lora adapter, if any
0.00.024.710 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.902 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.997 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.009 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.011 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.015 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.019 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.020 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.021 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.021 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.022 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.029 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.030 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.031 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.033 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.041 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.095 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.578 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.628 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.637 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.638 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.639 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.640 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.641 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.642 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.645 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.646 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.647 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.648 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.648 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.657 I llama_model_loader: - type  f32:   37 tensors
0.00.195.661 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.661 I llama_model_loader: - type q6_K:   19 tensors
0.00.470.519 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.471.556 I llm_load_vocab: special tokens cache size = 5
0.00.534.948 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.535.014 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.535.018 I llm_load_print_meta: arch             = gemma
0.00.535.019 I llm_load_print_meta: vocab type       = SPM
0.00.535.019 I llm_load_print_meta: n_vocab          = 256000
0.00.535.021 I llm_load_print_meta: n_merges         = 0
0.00.535.022 I llm_load_print_meta: vocab_only       = 0
0.00.535.022 I llm_load_print_meta: n_ctx_train      = 8192
0.00.535.022 I llm_load_print_meta: n_embd           = 2048
0.00.535.023 I llm_load_print_meta: n_layer          = 18
0.00.535.057 I llm_load_print_meta: n_head           = 8
0.00.535.067 I llm_load_print_meta: n_head_kv        = 1
0.00.535.068 I llm_load_print_meta: n_rot            = 256
0.00.535.068 I llm_load_print_meta: n_swa            = 0
0.00.535.069 I llm_load_print_meta: n_embd_head_k    = 256
0.00.535.069 I llm_load_print_meta: n_embd_head_v    = 256
0.00.535.074 I llm_load_print_meta: n_gqa            = 8
0.00.535.078 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.535.083 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.535.084 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.535.085 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.535.086 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.535.086 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.535.087 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.535.091 I llm_load_print_meta: n_ff             = 16384
0.00.535.092 I llm_load_print_meta: n_expert         = 0
0.00.535.092 I llm_load_print_meta: n_expert_used    = 0
0.00.535.092 I llm_load_print_meta: causal attn      = 1
0.00.535.093 I llm_load_print_meta: pooling type     = 0
0.00.535.095 I llm_load_print_meta: rope type        = 2
0.00.535.095 I llm_load_print_meta: rope scaling     = linear
0.00.535.096 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.535.097 I llm_load_print_meta: freq_scale_train = 1
0.00.535.098 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.535.098 I llm_load_print_meta: rope_finetuned   = unknown
0.00.535.098 I llm_load_print_meta: ssm_d_conv       = 0
0.00.535.099 I llm_load_print_meta: ssm_d_inner      = 0
0.00.535.099 I llm_load_print_meta: ssm_d_state      = 0
0.00.535.099 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.535.114 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.535.115 I llm_load_print_meta: model type       = 2B
0.00.535.116 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.535.117 I llm_load_print_meta: model params     = 2.51 B
0.00.535.118 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.535.118 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.535.119 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.535.119 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.535.120 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.535.121 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.535.122 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.535.122 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.535.122 I llm_load_print_meta: max token length = 93
0.00.535.289 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.606.735 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.606.746 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.606.748 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.606.749 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.606.749 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.606.750 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.612.659 I llama_new_context_with_model: n_ctx      = 8192
0.00.612.667 I llama_new_context_with_model: n_batch    = 2048
0.00.612.667 I llama_new_context_with_model: n_ubatch   = 512
0.00.612.668 I llama_new_context_with_model: flash_attn = 0
0.00.612.672 I llama_new_context_with_model: freq_base  = 10000.0
0.00.612.674 I llama_new_context_with_model: freq_scale = 1
0.00.643.879 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.643.927 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.644.046 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.645.444 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.645.451 I llama_new_context_with_model: graph nodes  = 601
0.00.645.451 I llama_new_context_with_model: graph splits = 1
0.00.645.469 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.396.056 I main: llama threadpool init, n_threads = 4
0.01.396.067 I 
0.01.396.164 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.396.168 I 
0.01.396.333 I sampler seed: 4150107639
0.01.396.346 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.396.352 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.396.353 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

The provided text does not mention anything about seconally, so I am unable to extract the requested data from the provided context. [end of text]


0.12.353.357 I llama_perf_sampler_print:    sampling time =      45.34 ms /    31 runs   (    1.46 ms per token,   683.78 tokens per second)
0.12.353.360 I llama_perf_context_print:        load time =    1393.28 ms
0.12.353.372 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.353.375 I llama_perf_context_print:        eval time =   10878.18 ms /    30 runs   (  362.61 ms per token,     2.76 tokens per second)
0.12.353.376 I llama_perf_context_print:       total time =   10957.31 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3782 (8a308354)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198961.06 ms
main:    total time = 198961.06 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.627 I build: 3782 (8a308354) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.025.080 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.171 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.185 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.187 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.192 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.193 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.194 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.195 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.195 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.196 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.202 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.203 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.205 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.206 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.207 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.751 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.753 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.763 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.772 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.773 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.773 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.774 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.775 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.775 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.779 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.779 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.790 I llama_model_loader: - type  f32:   37 tensors
0.00.196.795 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.796 I llama_model_loader: - type q6_K:   19 tensors
0.00.470.425 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.471.414 I llm_load_vocab: special tokens cache size = 5
0.00.529.286 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.529.341 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.529.342 I llm_load_print_meta: arch             = gemma
0.00.529.342 I llm_load_print_meta: vocab type       = SPM
0.00.529.343 I llm_load_print_meta: n_vocab          = 256000
0.00.529.346 I llm_load_print_meta: n_merges         = 0
0.00.529.347 I llm_load_print_meta: vocab_only       = 0
0.00.529.348 I llm_load_print_meta: n_ctx_train      = 8192
0.00.529.348 I llm_load_print_meta: n_embd           = 2048
0.00.529.349 I llm_load_print_meta: n_layer          = 18
0.00.529.380 I llm_load_print_meta: n_head           = 8
0.00.529.390 I llm_load_print_meta: n_head_kv        = 1
0.00.529.391 I llm_load_print_meta: n_rot            = 256
0.00.529.391 I llm_load_print_meta: n_swa            = 0
0.00.529.401 I llm_load_print_meta: n_embd_head_k    = 256
0.00.529.402 I llm_load_print_meta: n_embd_head_v    = 256
0.00.529.408 I llm_load_print_meta: n_gqa            = 8
0.00.529.413 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.529.418 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.529.422 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.529.423 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.529.424 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.529.424 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.529.424 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.529.429 I llm_load_print_meta: n_ff             = 16384
0.00.529.430 I llm_load_print_meta: n_expert         = 0
0.00.529.431 I llm_load_print_meta: n_expert_used    = 0
0.00.529.432 I llm_load_print_meta: causal attn      = 1
0.00.529.432 I llm_load_print_meta: pooling type     = 0
0.00.529.432 I llm_load_print_meta: rope type        = 2
0.00.529.446 I llm_load_print_meta: rope scaling     = linear
0.00.529.448 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.529.457 I llm_load_print_meta: freq_scale_train = 1
0.00.529.460 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.529.461 I llm_load_print_meta: rope_finetuned   = unknown
0.00.529.461 I llm_load_print_meta: ssm_d_conv       = 0
0.00.529.461 I llm_load_print_meta: ssm_d_inner      = 0
0.00.529.462 I llm_load_print_meta: ssm_d_state      = 0
0.00.529.462 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.529.462 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.529.463 I llm_load_print_meta: model type       = 2B
0.00.529.464 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.529.465 I llm_load_print_meta: model params     = 2.51 B
0.00.529.466 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.529.466 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.529.467 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.529.470 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.529.470 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.529.471 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.529.471 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.529.472 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.529.472 I llm_load_print_meta: max token length = 93
0.00.529.651 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.587.765 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.593.455 I llama_new_context_with_model: n_ctx      = 8192
0.00.593.461 I llama_new_context_with_model: n_batch    = 2048
0.00.593.462 I llama_new_context_with_model: n_ubatch   = 512
0.00.593.462 I llama_new_context_with_model: flash_attn = 0
0.00.593.465 I llama_new_context_with_model: freq_base  = 10000.0
0.00.593.466 I llama_new_context_with_model: freq_scale = 1
0.00.623.861 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.623.906 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.624.020 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.625.382 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.625.388 I llama_new_context_with_model: graph nodes  = 601
0.00.625.389 I llama_new_context_with_model: graph splits = 1
0.00.625.408 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.206.873 I main: llama threadpool init, n_threads = 4
0.01.206.883 I 
0.01.206.972 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.206.976 I 
0.01.207.136 I sampler seed: 456124195
0.01.207.146 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.207.150 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.207.151 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and other sexual activities are illegal in India. What are the consequences for violating this law?

**Answer:**

**Consequences for Violating Sexual Laws

0.12.104.860 I llama_perf_sampler_print:    sampling time =      48.02 ms /    33 runs   (    1.46 ms per token,   687.24 tokens per second)
0.12.104.881 I llama_perf_context_print:        load time =    1204.02 ms
0.12.104.883 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.104.886 I llama_perf_context_print:        eval time =   10816.49 ms /    32 runs   (  338.02 ms per token,     2.96 tokens per second)
0.12.104.888 I llama_perf_context_print:       total time =   10898.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m10.389s
user	50m12.217s
sys	0m6.330s
