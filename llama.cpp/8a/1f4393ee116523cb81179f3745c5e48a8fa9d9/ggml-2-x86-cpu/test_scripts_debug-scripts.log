+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 3911 (8a1f4393) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.024.953 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.161 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.247 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.258 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.262 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.266 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.267 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.269 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.270 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.271 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.272 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.278 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.279 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.280 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.281 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.282 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.122 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.032 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.119 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.127 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.128 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.130 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.131 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.132 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.133 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.137 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.138 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.139 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.140 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.141 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.148 I llama_model_loader: - type  f32:   37 tensors
0.00.269.152 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.643 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.039 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.039 I llm_load_vocab: special tokens cache size = 5
0.00.600.954 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.024 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.025 I llm_load_print_meta: arch             = gemma
0.00.601.025 I llm_load_print_meta: vocab type       = SPM
0.00.601.026 I llm_load_print_meta: n_vocab          = 256000
0.00.601.029 I llm_load_print_meta: n_merges         = 0
0.00.601.029 I llm_load_print_meta: vocab_only       = 0
0.00.601.030 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.030 I llm_load_print_meta: n_embd           = 2048
0.00.601.031 I llm_load_print_meta: n_layer          = 18
0.00.601.095 I llm_load_print_meta: n_head           = 8
0.00.601.102 I llm_load_print_meta: n_head_kv        = 1
0.00.601.103 I llm_load_print_meta: n_rot            = 256
0.00.601.103 I llm_load_print_meta: n_swa            = 0
0.00.601.104 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.104 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.109 I llm_load_print_meta: n_gqa            = 8
0.00.601.113 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.118 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.120 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.122 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.122 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.123 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.124 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.132 I llm_load_print_meta: n_ff             = 16384
0.00.601.133 I llm_load_print_meta: n_expert         = 0
0.00.601.133 I llm_load_print_meta: n_expert_used    = 0
0.00.601.134 I llm_load_print_meta: causal attn      = 1
0.00.601.135 I llm_load_print_meta: pooling type     = 0
0.00.601.136 I llm_load_print_meta: rope type        = 2
0.00.601.136 I llm_load_print_meta: rope scaling     = linear
0.00.601.138 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.139 I llm_load_print_meta: freq_scale_train = 1
0.00.601.142 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.143 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.143 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.143 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.143 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.144 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.144 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.145 I llm_load_print_meta: model type       = 2B
0.00.601.145 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.146 I llm_load_print_meta: model params     = 2.51 B
0.00.601.147 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.147 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.148 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.151 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.151 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.152 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.152 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.152 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.158 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.160 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.160 I llm_load_print_meta: max token length = 93
0.00.601.326 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.701.611 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.701.622 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.701.623 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.701.624 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.701.625 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.701.625 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.707.349 I llama_new_context_with_model: n_ctx      = 8192
0.00.707.357 I llama_new_context_with_model: n_batch    = 2048
0.00.707.357 I llama_new_context_with_model: n_ubatch   = 512
0.00.707.358 I llama_new_context_with_model: flash_attn = 0
0.00.707.360 I llama_new_context_with_model: freq_base  = 10000.0
0.00.707.361 I llama_new_context_with_model: freq_scale = 1
0.00.736.854 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.736.897 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.737.009 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.400 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.738.405 I llama_new_context_with_model: graph nodes  = 601
0.00.738.405 I llama_new_context_with_model: graph splits = 1
0.00.738.421 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.883 I main: llama threadpool init, n_threads = 4
0.01.350.894 I 
0.01.351.010 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.351.014 I 
0.01.351.182 I sampler seed: 3294242929
0.01.351.192 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.200 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.351.200 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.201 I 
 increablingly, the stars began to twinkle and the moon rose like a fiery ball.

What is the meaning of the passage?

The passage is describing

0.14.854.606 I llama_perf_sampler_print:    sampling time =      49.07 ms /    33 runs   (    1.49 ms per token,   672.55 tokens per second)
0.14.854.609 I llama_perf_context_print:        load time =    1348.01 ms
0.14.854.624 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.854.626 I llama_perf_context_print:        eval time =   13422.02 ms /    32 runs   (  419.44 ms per token,     2.38 tokens per second)
0.14.854.627 I llama_perf_context_print:       total time =   13503.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 3911 (8a1f4393) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.002.748 I main: load the model and apply lora adapter, if any
0.00.025.013 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.107 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.122 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.125 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.130 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.131 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.132 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.134 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.135 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.136 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.142 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.143 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.144 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.145 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.147 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.651 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.576 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.738 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.745 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.747 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.748 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.748 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.750 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.751 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.754 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.755 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.756 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.757 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.758 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.766 I llama_model_loader: - type  f32:   37 tensors
0.00.268.769 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.286 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.206 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.219 I llm_load_vocab: special tokens cache size = 5
0.00.590.884 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.590.953 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.590.957 I llm_load_print_meta: arch             = gemma
0.00.590.958 I llm_load_print_meta: vocab type       = SPM
0.00.590.959 I llm_load_print_meta: n_vocab          = 256000
0.00.590.961 I llm_load_print_meta: n_merges         = 0
0.00.590.962 I llm_load_print_meta: vocab_only       = 0
0.00.590.962 I llm_load_print_meta: n_ctx_train      = 8192
0.00.590.962 I llm_load_print_meta: n_embd           = 2048
0.00.590.963 I llm_load_print_meta: n_layer          = 18
0.00.591.028 I llm_load_print_meta: n_head           = 8
0.00.591.039 I llm_load_print_meta: n_head_kv        = 1
0.00.591.039 I llm_load_print_meta: n_rot            = 256
0.00.591.041 I llm_load_print_meta: n_swa            = 0
0.00.591.041 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.041 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.046 I llm_load_print_meta: n_gqa            = 8
0.00.591.051 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.057 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.059 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.060 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.061 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.061 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.061 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.066 I llm_load_print_meta: n_ff             = 16384
0.00.591.067 I llm_load_print_meta: n_expert         = 0
0.00.591.067 I llm_load_print_meta: n_expert_used    = 0
0.00.591.067 I llm_load_print_meta: causal attn      = 1
0.00.591.068 I llm_load_print_meta: pooling type     = 0
0.00.591.068 I llm_load_print_meta: rope type        = 2
0.00.591.069 I llm_load_print_meta: rope scaling     = linear
0.00.591.080 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.081 I llm_load_print_meta: freq_scale_train = 1
0.00.591.082 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.082 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.094 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.095 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.096 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.096 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.096 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.105 I llm_load_print_meta: model type       = 2B
0.00.591.106 I llm_load_print_meta: model ftype      = Q8_0
0.00.591.107 I llm_load_print_meta: model params     = 2.51 B
0.00.591.108 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.591.108 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.116 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.117 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.118 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.118 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.118 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.119 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.125 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.126 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.127 I llm_load_print_meta: max token length = 93
0.00.591.288 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.061 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.692.815 I llama_new_context_with_model: n_ctx      = 8192
0.00.692.822 I llama_new_context_with_model: n_batch    = 2048
0.00.692.823 I llama_new_context_with_model: n_ubatch   = 512
0.00.692.823 I llama_new_context_with_model: flash_attn = 0
0.00.692.825 I llama_new_context_with_model: freq_base  = 10000.0
0.00.692.826 I llama_new_context_with_model: freq_scale = 1
0.00.721.633 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.721.682 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.721.799 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.153 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.157 I llama_new_context_with_model: graph nodes  = 601
0.00.723.158 I llama_new_context_with_model: graph splits = 1
0.00.723.173 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.785 I main: llama threadpool init, n_threads = 4
0.01.335.799 I 
0.01.335.925 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.335.930 I 
0.01.336.145 I sampler seed: 289054547
0.01.336.159 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.336.167 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.336.171 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.336.172 I 
 increasities with a new, sleek design.

**Key Features:**

* Sleek, modern design
* Durable materials
* Responsive technology for optimal user

0.14.995.448 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.49 tokens per second)
0.14.995.451 I llama_perf_context_print:        load time =    1332.95 ms
0.14.995.464 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.995.467 I llama_perf_context_print:        eval time =   13577.93 ms /    32 runs   (  424.31 ms per token,     2.36 tokens per second)
0.14.995.468 I llama_perf_context_print:       total time =   13659.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 3911 (8a1f4393) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.818 I main: load the model and apply lora adapter, if any
0.00.025.114 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.326 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.414 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.425 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.427 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.431 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.432 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.434 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.435 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.436 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.437 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.444 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.445 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.447 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.448 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.449 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.943 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.892 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.991 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.000 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.001 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.002 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.003 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.006 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.009 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.010 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.011 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.012 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.013 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.021 I llama_model_loader: - type  f32:   37 tensors
0.00.269.026 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.996 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.347 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.399 I llm_load_vocab: special tokens cache size = 5
0.00.589.766 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.851 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.852 I llm_load_print_meta: arch             = gemma
0.00.589.854 I llm_load_print_meta: vocab type       = SPM
0.00.589.855 I llm_load_print_meta: n_vocab          = 256000
0.00.589.861 I llm_load_print_meta: n_merges         = 0
0.00.589.863 I llm_load_print_meta: vocab_only       = 0
0.00.589.872 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.872 I llm_load_print_meta: n_embd           = 2048
0.00.589.884 I llm_load_print_meta: n_layer          = 18
0.00.589.952 I llm_load_print_meta: n_head           = 8
0.00.589.961 I llm_load_print_meta: n_head_kv        = 1
0.00.589.962 I llm_load_print_meta: n_rot            = 256
0.00.589.963 I llm_load_print_meta: n_swa            = 0
0.00.589.970 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.978 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.984 I llm_load_print_meta: n_gqa            = 8
0.00.589.989 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.997 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.998 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.590.000 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.590.000 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.590.001 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.590.001 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.006 I llm_load_print_meta: n_ff             = 16384
0.00.590.007 I llm_load_print_meta: n_expert         = 0
0.00.590.009 I llm_load_print_meta: n_expert_used    = 0
0.00.590.010 I llm_load_print_meta: causal attn      = 1
0.00.590.010 I llm_load_print_meta: pooling type     = 0
0.00.590.010 I llm_load_print_meta: rope type        = 2
0.00.590.011 I llm_load_print_meta: rope scaling     = linear
0.00.590.012 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.013 I llm_load_print_meta: freq_scale_train = 1
0.00.590.013 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.014 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.014 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.014 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.015 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.015 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.015 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.016 I llm_load_print_meta: model type       = 2B
0.00.590.024 I llm_load_print_meta: model ftype      = Q8_0
0.00.590.025 I llm_load_print_meta: model params     = 2.51 B
0.00.590.026 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.590.027 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.028 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.029 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.031 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.031 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.032 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.032 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.038 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.040 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.040 I llm_load_print_meta: max token length = 93
0.00.590.206 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.667.966 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.667.975 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.667.976 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.667.977 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.667.977 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.667.978 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.673.646 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.652 I llama_new_context_with_model: n_batch    = 2048
0.00.673.653 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.653 I llama_new_context_with_model: flash_attn = 0
0.00.673.656 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.657 I llama_new_context_with_model: freq_scale = 1
0.00.702.775 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.816 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.929 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.276 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.704.281 I llama_new_context_with_model: graph nodes  = 601
0.00.704.281 I llama_new_context_with_model: graph splits = 1
0.00.704.298 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.482 I main: llama threadpool init, n_threads = 4
0.01.317.495 I 
0.01.317.604 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.610 I 
0.01.317.783 I sampler seed: 2567248035
0.01.317.810 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.820 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.317.821 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.821 I 
 increasities and the development of a new discourse culture.

## The Intersection of Decorum and Dissent: A New Discourse Culture

The rise of digital platforms and

0.14.869.692 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.30 tokens per second)
0.14.869.708 I llama_perf_context_print:        load time =    1314.57 ms
0.14.869.710 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.869.714 I llama_perf_context_print:        eval time =   13470.54 ms /    32 runs   (  420.95 ms per token,     2.38 tokens per second)
0.14.869.715 I llama_perf_context_print:       total time =   13552.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 3911 (8a1f4393) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.002.833 I main: load the model and apply lora adapter, if any
0.00.024.585 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.800 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.897 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.908 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.910 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.915 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.920 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.922 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.924 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.925 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.927 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.936 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.938 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.939 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.941 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.942 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.212 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.079 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.230 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.237 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.238 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.239 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.240 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.242 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.243 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.246 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.247 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.248 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.249 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.250 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.258 I llama_model_loader: - type  f32:   37 tensors
0.00.268.262 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.266 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.487.052 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.488.069 I llm_load_vocab: special tokens cache size = 5
0.00.582.979 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.583.048 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.583.049 I llm_load_print_meta: arch             = gemma
0.00.583.050 I llm_load_print_meta: vocab type       = SPM
0.00.583.051 I llm_load_print_meta: n_vocab          = 256000
0.00.583.053 I llm_load_print_meta: n_merges         = 0
0.00.583.054 I llm_load_print_meta: vocab_only       = 0
0.00.583.054 I llm_load_print_meta: n_ctx_train      = 8192
0.00.583.054 I llm_load_print_meta: n_embd           = 2048
0.00.583.055 I llm_load_print_meta: n_layer          = 18
0.00.583.119 I llm_load_print_meta: n_head           = 8
0.00.583.129 I llm_load_print_meta: n_head_kv        = 1
0.00.583.133 I llm_load_print_meta: n_rot            = 256
0.00.583.133 I llm_load_print_meta: n_swa            = 0
0.00.583.134 I llm_load_print_meta: n_embd_head_k    = 256
0.00.583.135 I llm_load_print_meta: n_embd_head_v    = 256
0.00.583.141 I llm_load_print_meta: n_gqa            = 8
0.00.583.147 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.583.156 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.583.163 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.583.168 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.583.168 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.583.169 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.583.170 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.583.177 I llm_load_print_meta: n_ff             = 16384
0.00.583.179 I llm_load_print_meta: n_expert         = 0
0.00.583.180 I llm_load_print_meta: n_expert_used    = 0
0.00.583.181 I llm_load_print_meta: causal attn      = 1
0.00.583.182 I llm_load_print_meta: pooling type     = 0
0.00.583.183 I llm_load_print_meta: rope type        = 2
0.00.583.187 I llm_load_print_meta: rope scaling     = linear
0.00.583.189 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.583.190 I llm_load_print_meta: freq_scale_train = 1
0.00.583.190 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.583.191 I llm_load_print_meta: rope_finetuned   = unknown
0.00.583.191 I llm_load_print_meta: ssm_d_conv       = 0
0.00.583.191 I llm_load_print_meta: ssm_d_inner      = 0
0.00.583.192 I llm_load_print_meta: ssm_d_state      = 0
0.00.583.192 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.583.193 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.583.194 I llm_load_print_meta: model type       = 2B
0.00.583.196 I llm_load_print_meta: model ftype      = Q8_0
0.00.583.196 I llm_load_print_meta: model params     = 2.51 B
0.00.583.197 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.583.198 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.583.199 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.583.200 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.583.201 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.583.202 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.583.203 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.583.205 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.583.211 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.583.213 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.583.214 I llm_load_print_meta: max token length = 93
0.00.583.388 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.654.443 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.654.453 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.660.283 I llama_new_context_with_model: n_ctx      = 8192
0.00.660.291 I llama_new_context_with_model: n_batch    = 2048
0.00.660.291 I llama_new_context_with_model: n_ubatch   = 512
0.00.660.292 I llama_new_context_with_model: flash_attn = 0
0.00.660.294 I llama_new_context_with_model: freq_base  = 10000.0
0.00.660.295 I llama_new_context_with_model: freq_scale = 1
0.00.688.722 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.688.764 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.688.896 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.690.280 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.690.285 I llama_new_context_with_model: graph nodes  = 601
0.00.690.286 I llama_new_context_with_model: graph splits = 1
0.00.690.302 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.818 I main: llama threadpool init, n_threads = 4
0.01.301.829 I 
0.01.301.954 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.958 I 
0.01.302.130 I sampler seed: 40440457
0.01.302.141 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.302.147 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.302.149 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.302.159 I 
 increadibly, and in a way that the ordinary observer would find unintelligible.

Imagine a vast cosmic canvas, stretching endlessly beyond the reach of any human eye.

0.14.841.920 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.06 tokens per second)
0.14.841.924 I llama_perf_context_print:        load time =    1298.89 ms
0.14.841.926 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.841.937 I llama_perf_context_print:        eval time =   13459.06 ms /    32 runs   (  420.60 ms per token,     2.38 tokens per second)
0.14.841.939 I llama_perf_context_print:       total time =   13540.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.876s
user	3m49.589s
sys	0m9.414s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3911 (8a1f4393)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198268.56 ms
main:    total time = 198268.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 3911 (8a1f4393) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.002.811 I main: load the model and apply lora adapter, if any
0.00.024.797 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.003 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.099 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.111 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.119 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.121 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.122 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.123 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.124 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.131 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.133 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.134 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.135 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.136 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.809 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.614 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.832 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.839 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.840 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.841 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.842 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.844 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.845 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.848 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.849 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.850 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.851 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.852 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.860 I llama_model_loader: - type  f32:   37 tensors
0.00.268.863 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.864 I llama_model_loader: - type q6_K:   19 tensors
0.00.438.438 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.178 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.489.163 I llm_load_vocab: special tokens cache size = 5
0.00.583.969 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.584.034 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.584.035 I llm_load_print_meta: arch             = gemma
0.00.584.036 I llm_load_print_meta: vocab type       = SPM
0.00.584.037 I llm_load_print_meta: n_vocab          = 256000
0.00.584.039 I llm_load_print_meta: n_merges         = 0
0.00.584.040 I llm_load_print_meta: vocab_only       = 0
0.00.584.041 I llm_load_print_meta: n_ctx_train      = 8192
0.00.584.041 I llm_load_print_meta: n_embd           = 2048
0.00.584.042 I llm_load_print_meta: n_layer          = 18
0.00.584.103 I llm_load_print_meta: n_head           = 8
0.00.584.110 I llm_load_print_meta: n_head_kv        = 1
0.00.584.111 I llm_load_print_meta: n_rot            = 256
0.00.584.111 I llm_load_print_meta: n_swa            = 0
0.00.584.111 I llm_load_print_meta: n_embd_head_k    = 256
0.00.584.112 I llm_load_print_meta: n_embd_head_v    = 256
0.00.584.116 I llm_load_print_meta: n_gqa            = 8
0.00.584.121 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.584.126 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.584.127 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.584.129 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.584.129 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.584.130 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.584.130 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.584.135 I llm_load_print_meta: n_ff             = 16384
0.00.584.135 I llm_load_print_meta: n_expert         = 0
0.00.584.135 I llm_load_print_meta: n_expert_used    = 0
0.00.584.136 I llm_load_print_meta: causal attn      = 1
0.00.584.136 I llm_load_print_meta: pooling type     = 0
0.00.584.137 I llm_load_print_meta: rope type        = 2
0.00.584.138 I llm_load_print_meta: rope scaling     = linear
0.00.584.139 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.584.140 I llm_load_print_meta: freq_scale_train = 1
0.00.584.140 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.584.141 I llm_load_print_meta: rope_finetuned   = unknown
0.00.584.141 I llm_load_print_meta: ssm_d_conv       = 0
0.00.584.141 I llm_load_print_meta: ssm_d_inner      = 0
0.00.584.142 I llm_load_print_meta: ssm_d_state      = 0
0.00.584.142 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.584.143 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.584.143 I llm_load_print_meta: model type       = 2B
0.00.584.144 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.584.145 I llm_load_print_meta: model params     = 2.51 B
0.00.584.146 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.584.146 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.584.148 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.584.148 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.584.149 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.584.159 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.584.160 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.584.161 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.584.168 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.584.169 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.584.170 I llm_load_print_meta: max token length = 93
0.00.584.346 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.645.040 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.645.050 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.645.051 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.645.052 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.645.053 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.645.053 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.650.671 I llama_new_context_with_model: n_ctx      = 8192
0.00.650.678 I llama_new_context_with_model: n_batch    = 2048
0.00.650.679 I llama_new_context_with_model: n_ubatch   = 512
0.00.650.679 I llama_new_context_with_model: flash_attn = 0
0.00.650.682 I llama_new_context_with_model: freq_base  = 10000.0
0.00.650.683 I llama_new_context_with_model: freq_scale = 1
0.00.680.204 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.680.246 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.680.370 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.681.755 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.681.760 I llama_new_context_with_model: graph nodes  = 601
0.00.681.761 I llama_new_context_with_model: graph splits = 1
0.00.681.775 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.585 I main: llama threadpool init, n_threads = 4
0.01.260.597 I 
0.01.260.704 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.708 I 
0.01.260.871 I sampler seed: 934697416
0.01.260.882 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.260.890 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.260.891 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.260.901 I 
 increasities is a beautiful and unique way to create music.

The sound is unlike anything I've ever heard before. It's ethereal, otherworldly

0.12.140.283 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   672.00 tokens per second)
0.12.140.297 I llama_perf_context_print:        load time =    1257.69 ms
0.12.140.300 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.140.302 I llama_perf_context_print:        eval time =   10798.03 ms /    32 runs   (  337.44 ms per token,     2.96 tokens per second)
0.12.140.303 I llama_perf_context_print:       total time =   10879.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3911 (8a1f4393)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198095.75 ms
main:    total time = 198095.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3911 (8a1f4393) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.817 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.024.695 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.783 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.796 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.797 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.801 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.805 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.806 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.807 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.809 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.810 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.816 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.817 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.818 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.819 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.820 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.639 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.189 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.473 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.480 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.481 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.482 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.483 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.485 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.486 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.490 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.491 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.498 I llama_model_loader: - type  f32:   37 tensors
0.00.268.502 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.503 I llama_model_loader: - type q6_K:   19 tensors
0.00.434.603 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.623 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.485.641 I llm_load_vocab: special tokens cache size = 5
0.00.581.874 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.581.940 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.581.941 I llm_load_print_meta: arch             = gemma
0.00.581.942 I llm_load_print_meta: vocab type       = SPM
0.00.581.943 I llm_load_print_meta: n_vocab          = 256000
0.00.581.946 I llm_load_print_meta: n_merges         = 0
0.00.581.946 I llm_load_print_meta: vocab_only       = 0
0.00.581.946 I llm_load_print_meta: n_ctx_train      = 8192
0.00.581.947 I llm_load_print_meta: n_embd           = 2048
0.00.581.947 I llm_load_print_meta: n_layer          = 18
0.00.582.013 I llm_load_print_meta: n_head           = 8
0.00.582.019 I llm_load_print_meta: n_head_kv        = 1
0.00.582.020 I llm_load_print_meta: n_rot            = 256
0.00.582.020 I llm_load_print_meta: n_swa            = 0
0.00.582.021 I llm_load_print_meta: n_embd_head_k    = 256
0.00.582.021 I llm_load_print_meta: n_embd_head_v    = 256
0.00.582.025 I llm_load_print_meta: n_gqa            = 8
0.00.582.030 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.582.035 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.582.036 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.582.038 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.582.039 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.582.040 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.582.040 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.582.045 I llm_load_print_meta: n_ff             = 16384
0.00.582.046 I llm_load_print_meta: n_expert         = 0
0.00.582.047 I llm_load_print_meta: n_expert_used    = 0
0.00.582.047 I llm_load_print_meta: causal attn      = 1
0.00.582.047 I llm_load_print_meta: pooling type     = 0
0.00.582.048 I llm_load_print_meta: rope type        = 2
0.00.582.056 I llm_load_print_meta: rope scaling     = linear
0.00.582.072 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.582.073 I llm_load_print_meta: freq_scale_train = 1
0.00.582.074 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.582.074 I llm_load_print_meta: rope_finetuned   = unknown
0.00.582.075 I llm_load_print_meta: ssm_d_conv       = 0
0.00.582.075 I llm_load_print_meta: ssm_d_inner      = 0
0.00.582.075 I llm_load_print_meta: ssm_d_state      = 0
0.00.582.076 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.582.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.582.077 I llm_load_print_meta: model type       = 2B
0.00.582.078 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.582.079 I llm_load_print_meta: model params     = 2.51 B
0.00.582.080 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.582.080 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.582.081 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.582.081 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.582.082 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.582.083 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.582.083 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.582.091 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.582.098 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.582.099 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.582.100 I llm_load_print_meta: max token length = 93
0.00.582.278 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.641.425 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.647.009 I llama_new_context_with_model: n_ctx      = 8192
0.00.647.016 I llama_new_context_with_model: n_batch    = 2048
0.00.647.016 I llama_new_context_with_model: n_ubatch   = 512
0.00.647.017 I llama_new_context_with_model: flash_attn = 0
0.00.647.019 I llama_new_context_with_model: freq_base  = 10000.0
0.00.647.020 I llama_new_context_with_model: freq_scale = 1
0.00.675.950 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.675.995 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.676.107 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.677.451 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.677.456 I llama_new_context_with_model: graph nodes  = 601
0.00.677.456 I llama_new_context_with_model: graph splits = 1
0.00.677.473 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.259.272 I main: llama threadpool init, n_threads = 4
0.01.259.284 I 
0.01.259.390 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.259.391 I 
0.01.259.559 I sampler seed: 3676058374
0.01.259.570 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.259.575 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.259.576 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.259.576 I 
 seconded, and then exorbitantly escalated into a catastrophic inferno.

The inferno raged for two days, destroying countless homes and businesses and leaving hundreds of people trapped

0.12.290.050 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.91 tokens per second)
0.12.290.053 I llama_perf_context_print:        load time =    1256.40 ms
0.12.290.054 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.290.056 I llama_perf_context_print:        eval time =   10949.33 ms /    32 runs   (  342.17 ms per token,     2.92 tokens per second)
0.12.290.057 I llama_perf_context_print:       total time =   11030.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.677s
user	50m5.549s
sys	0m6.306s
