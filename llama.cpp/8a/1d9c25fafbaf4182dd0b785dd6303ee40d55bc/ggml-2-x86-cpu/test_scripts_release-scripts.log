+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.546 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.032.295 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.032.305 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.032.314 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.032.320 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.032.321 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.032.324 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.032.324 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.032.325 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.032.326 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.032.326 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.032.327 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.032.331 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.032.332 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.032.332 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.032.333 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.032.333 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.344 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.372 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.654 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.660 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.661 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.661 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.662 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.663 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.664 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.666 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.668 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.139.669 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.670 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.139.670 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.139.673 I llama_model_loader: - type  f32:   37 tensors
0.00.139.674 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.202 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.137 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.876 I llm_load_vocab: special tokens cache size = 5
0.00.275.520 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.550 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.552 I llm_load_print_meta: arch             = gemma
0.00.275.552 I llm_load_print_meta: vocab type       = SPM
0.00.275.553 I llm_load_print_meta: n_vocab          = 256000
0.00.275.554 I llm_load_print_meta: n_merges         = 0
0.00.275.554 I llm_load_print_meta: vocab_only       = 0
0.00.275.554 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.555 I llm_load_print_meta: n_embd           = 2048
0.00.275.555 I llm_load_print_meta: n_layer          = 18
0.00.275.565 I llm_load_print_meta: n_head           = 8
0.00.275.567 I llm_load_print_meta: n_head_kv        = 1
0.00.275.567 I llm_load_print_meta: n_rot            = 256
0.00.275.568 I llm_load_print_meta: n_swa            = 0
0.00.275.568 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.568 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.570 I llm_load_print_meta: n_gqa            = 8
0.00.275.572 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.573 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.574 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.575 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.576 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.576 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.577 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.579 I llm_load_print_meta: n_ff             = 16384
0.00.275.579 I llm_load_print_meta: n_expert         = 0
0.00.275.579 I llm_load_print_meta: n_expert_used    = 0
0.00.275.579 I llm_load_print_meta: causal attn      = 1
0.00.275.580 I llm_load_print_meta: pooling type     = 0
0.00.275.580 I llm_load_print_meta: rope type        = 2
0.00.275.580 I llm_load_print_meta: rope scaling     = linear
0.00.275.581 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.582 I llm_load_print_meta: freq_scale_train = 1
0.00.275.582 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.583 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.583 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.583 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.583 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.584 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.584 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.586 I llm_load_print_meta: model type       = 2B
0.00.275.587 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.588 I llm_load_print_meta: model params     = 2.51 B
0.00.275.589 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.589 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.590 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.590 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.590 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.591 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.591 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.592 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.592 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.592 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.593 I llm_load_print_meta: max token length = 93
0.00.375.144 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.375.153 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.375.153 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.375.154 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.375.155 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.375.155 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.376.526 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.530 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.530 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.530 I llama_new_context_with_model: n_batch       = 2048
0.00.376.531 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.531 I llama_new_context_with_model: flash_attn    = 0
0.00.376.534 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.535 I llama_new_context_with_model: freq_scale    = 1
0.00.376.535 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.559 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.390.416 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.428 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.520 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.373 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.378 I llama_new_context_with_model: graph nodes  = 601
0.00.392.379 I llama_new_context_with_model: graph splits = 1
0.00.392.382 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.392.382 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.716 I main: llama threadpool init, n_threads = 4
0.00.476.728 I 
0.00.476.800 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.476.806 I 
0.00.476.838 I sampler seed: 2918895218
0.00.476.848 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.851 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.852 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.853 I 
 increasities that can be observed in a variety of contexts.

**Context A: A classroom setting:**

* Students are engaged in a math lesson, but

0.02.720.740 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6015.31 tokens per second)
0.02.720.742 I llama_perf_context_print:        load time =     475.95 ms
0.02.720.743 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.720.745 I llama_perf_context_print:        eval time =    2224.40 ms /    32 runs   (   69.51 ms per token,    14.39 tokens per second)
0.02.720.746 I llama_perf_context_print:       total time =    2244.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.176 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.376 I main: llama backend init
0.00.000.382 I main: load the model and apply lora adapter, if any
0.00.029.355 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.029.371 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.379 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.380 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.383 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.384 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.385 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.386 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.389 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.389 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.394 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.395 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.396 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.396 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.332 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.279 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.555 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.561 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.562 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.562 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.563 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.564 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.564 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.567 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.568 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.569 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.570 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.136.570 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.136.574 I llama_model_loader: - type  f32:   37 tensors
0.00.136.575 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.474 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.974 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.517 I llm_load_vocab: special tokens cache size = 5
0.00.273.035 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.052 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.053 I llm_load_print_meta: arch             = gemma
0.00.273.053 I llm_load_print_meta: vocab type       = SPM
0.00.273.054 I llm_load_print_meta: n_vocab          = 256000
0.00.273.054 I llm_load_print_meta: n_merges         = 0
0.00.273.055 I llm_load_print_meta: vocab_only       = 0
0.00.273.055 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.055 I llm_load_print_meta: n_embd           = 2048
0.00.273.055 I llm_load_print_meta: n_layer          = 18
0.00.273.067 I llm_load_print_meta: n_head           = 8
0.00.273.069 I llm_load_print_meta: n_head_kv        = 1
0.00.273.070 I llm_load_print_meta: n_rot            = 256
0.00.273.070 I llm_load_print_meta: n_swa            = 0
0.00.273.070 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.070 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.072 I llm_load_print_meta: n_gqa            = 8
0.00.273.074 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.075 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.076 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.078 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.078 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.079 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.079 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.081 I llm_load_print_meta: n_ff             = 16384
0.00.273.081 I llm_load_print_meta: n_expert         = 0
0.00.273.082 I llm_load_print_meta: n_expert_used    = 0
0.00.273.082 I llm_load_print_meta: causal attn      = 1
0.00.273.082 I llm_load_print_meta: pooling type     = 0
0.00.273.083 I llm_load_print_meta: rope type        = 2
0.00.273.083 I llm_load_print_meta: rope scaling     = linear
0.00.273.084 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.085 I llm_load_print_meta: freq_scale_train = 1
0.00.273.085 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.085 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.086 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.086 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.086 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.087 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.087 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.089 I llm_load_print_meta: model type       = 2B
0.00.273.091 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.091 I llm_load_print_meta: model params     = 2.51 B
0.00.273.092 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.092 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.093 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.093 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.093 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.093 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.094 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.094 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.094 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.095 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.095 I llm_load_print_meta: max token length = 93
0.00.367.663 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.368.998 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.002 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.003 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.003 I llama_new_context_with_model: n_batch       = 2048
0.00.369.004 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.004 I llama_new_context_with_model: flash_attn    = 0
0.00.369.006 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.007 I llama_new_context_with_model: freq_scale    = 1
0.00.369.008 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.027 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.383.548 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.564 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.660 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.565 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.572 I llama_new_context_with_model: graph nodes  = 601
0.00.385.573 I llama_new_context_with_model: graph splits = 1
0.00.385.576 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.385.577 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.723 I main: llama threadpool init, n_threads = 4
0.00.470.736 I 
0.00.470.812 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.816 I 
0.00.470.848 I sampler seed: 1455243502
0.00.470.858 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.861 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.861 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.862 I 
 increasities with a focus on the emotional impact on the individual. 

**Answer:**

**The emotional impact of narcissistic personality disorder on an individual is multifaceted

0.02.669.680 I llama_perf_sampler_print:    sampling time =       5.50 ms /    33 runs   (    0.17 ms per token,  6004.37 tokens per second)
0.02.669.682 I llama_perf_context_print:        load time =     470.32 ms
0.02.669.683 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.669.685 I llama_perf_context_print:        eval time =    2179.20 ms /    32 runs   (   68.10 ms per token,    14.68 tokens per second)
0.02.669.686 I llama_perf_context_print:       total time =    2198.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.559 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.000.783 I main: load the model and apply lora adapter, if any
0.00.030.377 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.386 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.395 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.400 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.401 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.404 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.405 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.406 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.406 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.407 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.407 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.412 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.412 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.413 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.413 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.414 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.863 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.215 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.568 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.576 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.577 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.578 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.578 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.579 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.580 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.582 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.584 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.585 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.586 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.138.586 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.138.590 I llama_model_loader: - type  f32:   37 tensors
0.00.138.590 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.699 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.166 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.796 I llm_load_vocab: special tokens cache size = 5
0.00.274.255 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.273 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.274 I llm_load_print_meta: arch             = gemma
0.00.274.274 I llm_load_print_meta: vocab type       = SPM
0.00.274.275 I llm_load_print_meta: n_vocab          = 256000
0.00.274.275 I llm_load_print_meta: n_merges         = 0
0.00.274.276 I llm_load_print_meta: vocab_only       = 0
0.00.274.276 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.276 I llm_load_print_meta: n_embd           = 2048
0.00.274.277 I llm_load_print_meta: n_layer          = 18
0.00.274.289 I llm_load_print_meta: n_head           = 8
0.00.274.291 I llm_load_print_meta: n_head_kv        = 1
0.00.274.291 I llm_load_print_meta: n_rot            = 256
0.00.274.291 I llm_load_print_meta: n_swa            = 0
0.00.274.292 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.292 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.294 I llm_load_print_meta: n_gqa            = 8
0.00.274.295 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.297 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.297 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.299 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.299 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.299 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.300 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.301 I llm_load_print_meta: n_ff             = 16384
0.00.274.302 I llm_load_print_meta: n_expert         = 0
0.00.274.302 I llm_load_print_meta: n_expert_used    = 0
0.00.274.302 I llm_load_print_meta: causal attn      = 1
0.00.274.302 I llm_load_print_meta: pooling type     = 0
0.00.274.303 I llm_load_print_meta: rope type        = 2
0.00.274.303 I llm_load_print_meta: rope scaling     = linear
0.00.274.305 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.305 I llm_load_print_meta: freq_scale_train = 1
0.00.274.305 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.306 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.306 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.306 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.307 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.307 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.307 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.309 I llm_load_print_meta: model type       = 2B
0.00.274.310 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.311 I llm_load_print_meta: model params     = 2.51 B
0.00.274.312 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.312 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.313 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.313 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.313 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.314 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.314 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.314 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.315 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.315 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.316 I llm_load_print_meta: max token length = 93
0.00.352.079 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.352.087 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.087 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.352.088 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.352.088 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.089 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.353.431 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.435 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.436 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.436 I llama_new_context_with_model: n_batch       = 2048
0.00.353.437 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.437 I llama_new_context_with_model: flash_attn    = 0
0.00.353.439 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.440 I llama_new_context_with_model: freq_scale    = 1
0.00.353.441 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.460 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.367.610 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.624 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.720 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.915 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.923 I llama_new_context_with_model: graph nodes  = 601
0.00.369.923 I llama_new_context_with_model: graph splits = 1
0.00.369.926 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.369.926 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.433 I main: llama threadpool init, n_threads = 4
0.00.456.449 I 
0.00.456.527 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.532 I 
0.00.456.579 I sampler seed: 3289964236
0.00.456.590 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.594 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.594 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.594 I 
 increasities of the past.

I think that's a very interesting perspective. I'd love to hear more about it.

**Answer:**



0.02.762.576 I llama_perf_sampler_print:    sampling time =       6.12 ms /    33 runs   (    0.19 ms per token,  5395.68 tokens per second)
0.02.762.578 I llama_perf_context_print:        load time =     455.63 ms
0.02.762.579 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.762.581 I llama_perf_context_print:        eval time =    2285.64 ms /    32 runs   (   71.43 ms per token,    14.00 tokens per second)
0.02.762.581 I llama_perf_context_print:       total time =    2306.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.572 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.776 I main: llama backend init
0.00.000.783 I main: load the model and apply lora adapter, if any
0.00.031.183 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.031.192 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.031.200 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.207 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.210 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.213 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.214 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.215 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.215 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.216 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.217 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.222 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.223 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.224 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.225 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.508 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.688 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.211 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.218 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.219 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.219 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.220 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.221 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.222 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.224 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.225 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.139.225 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.226 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.139.227 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.139.232 I llama_model_loader: - type  f32:   37 tensors
0.00.139.233 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.260 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.589 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.202 I llm_load_vocab: special tokens cache size = 5
0.00.272.662 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.682 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.684 I llm_load_print_meta: arch             = gemma
0.00.272.684 I llm_load_print_meta: vocab type       = SPM
0.00.272.685 I llm_load_print_meta: n_vocab          = 256000
0.00.272.685 I llm_load_print_meta: n_merges         = 0
0.00.272.686 I llm_load_print_meta: vocab_only       = 0
0.00.272.686 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.687 I llm_load_print_meta: n_embd           = 2048
0.00.272.687 I llm_load_print_meta: n_layer          = 18
0.00.272.699 I llm_load_print_meta: n_head           = 8
0.00.272.701 I llm_load_print_meta: n_head_kv        = 1
0.00.272.701 I llm_load_print_meta: n_rot            = 256
0.00.272.702 I llm_load_print_meta: n_swa            = 0
0.00.272.702 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.702 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.704 I llm_load_print_meta: n_gqa            = 8
0.00.272.706 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.708 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.709 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.710 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.711 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.711 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.711 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.713 I llm_load_print_meta: n_ff             = 16384
0.00.272.713 I llm_load_print_meta: n_expert         = 0
0.00.272.714 I llm_load_print_meta: n_expert_used    = 0
0.00.272.714 I llm_load_print_meta: causal attn      = 1
0.00.272.714 I llm_load_print_meta: pooling type     = 0
0.00.272.715 I llm_load_print_meta: rope type        = 2
0.00.272.715 I llm_load_print_meta: rope scaling     = linear
0.00.272.716 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.717 I llm_load_print_meta: freq_scale_train = 1
0.00.272.717 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.717 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.718 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.718 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.718 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.719 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.719 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.721 I llm_load_print_meta: model type       = 2B
0.00.272.722 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.723 I llm_load_print_meta: model params     = 2.51 B
0.00.272.724 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.724 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.724 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.725 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.725 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.725 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.726 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.726 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.726 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.727 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.727 I llm_load_print_meta: max token length = 93
0.00.343.736 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.743 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.345.067 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.071 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.071 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.072 I llama_new_context_with_model: n_batch       = 2048
0.00.345.072 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.073 I llama_new_context_with_model: flash_attn    = 0
0.00.345.075 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.076 I llama_new_context_with_model: freq_scale    = 1
0.00.345.077 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.094 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.359.054 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.065 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.158 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.987 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.993 I llama_new_context_with_model: graph nodes  = 601
0.00.360.994 I llama_new_context_with_model: graph splits = 1
0.00.360.997 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.360.997 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.626 I main: llama threadpool init, n_threads = 4
0.00.448.639 I 
0.00.448.714 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.448.717 I 
0.00.448.753 I sampler seed: 259978924
0.00.448.763 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.766 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.767 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.767 I 
 increasities, a powerful force in ancient Egypt.

**Answer:**
The provided text does not contain any information related to the ancient Egyptian civilization or the concept

0.02.847.715 I llama_perf_sampler_print:    sampling time =       6.11 ms /    33 runs   (    0.19 ms per token,  5402.75 tokens per second)
0.02.847.718 I llama_perf_context_print:        load time =     447.82 ms
0.02.847.719 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.847.720 I llama_perf_context_print:        eval time =    2378.64 ms /    32 runs   (   74.33 ms per token,    13.45 tokens per second)
0.02.847.721 I llama_perf_context_print:       total time =    2399.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.853s
user	0m39.627s
sys	0m9.275s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4449 (8a1d9c25)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40301.58 ms
main:    total time = 40301.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.193 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.386 I main: llama backend init
0.00.000.392 I main: load the model and apply lora adapter, if any
0.00.029.337 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.029.347 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.029.356 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.362 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.365 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.368 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.369 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.369 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.370 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.371 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.371 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.375 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.376 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.376 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.377 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.055.559 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.246 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.661 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.667 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.668 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.668 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.669 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.670 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.670 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.672 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.673 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.136.675 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.136.676 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.676 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.136.677 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.680 I llama_model_loader: - type  f32:   37 tensors
0.00.136.681 I llama_model_loader: - type q4_K:  108 tensors
0.00.136.682 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.927 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.694 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.237 I llm_load_vocab: special tokens cache size = 5
0.00.264.785 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.805 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.807 I llm_load_print_meta: arch             = gemma
0.00.264.807 I llm_load_print_meta: vocab type       = SPM
0.00.264.808 I llm_load_print_meta: n_vocab          = 256000
0.00.264.808 I llm_load_print_meta: n_merges         = 0
0.00.264.808 I llm_load_print_meta: vocab_only       = 0
0.00.264.809 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.809 I llm_load_print_meta: n_embd           = 2048
0.00.264.809 I llm_load_print_meta: n_layer          = 18
0.00.264.821 I llm_load_print_meta: n_head           = 8
0.00.264.823 I llm_load_print_meta: n_head_kv        = 1
0.00.264.823 I llm_load_print_meta: n_rot            = 256
0.00.264.823 I llm_load_print_meta: n_swa            = 0
0.00.264.823 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.824 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.825 I llm_load_print_meta: n_gqa            = 8
0.00.264.827 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.828 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.829 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.831 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.831 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.831 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.832 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.833 I llm_load_print_meta: n_ff             = 16384
0.00.264.834 I llm_load_print_meta: n_expert         = 0
0.00.264.834 I llm_load_print_meta: n_expert_used    = 0
0.00.264.834 I llm_load_print_meta: causal attn      = 1
0.00.264.834 I llm_load_print_meta: pooling type     = 0
0.00.264.835 I llm_load_print_meta: rope type        = 2
0.00.264.835 I llm_load_print_meta: rope scaling     = linear
0.00.264.836 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.837 I llm_load_print_meta: freq_scale_train = 1
0.00.264.837 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.838 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.838 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.839 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.839 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.839 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.840 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.841 I llm_load_print_meta: model type       = 2B
0.00.264.843 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.843 I llm_load_print_meta: model params     = 2.51 B
0.00.264.844 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.844 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.845 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.845 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.845 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.845 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.846 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.847 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.847 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.847 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.848 I llm_load_print_meta: max token length = 93
0.00.326.105 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.110 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.111 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.111 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.112 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.112 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.327.397 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.400 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.401 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.401 I llama_new_context_with_model: n_batch       = 2048
0.00.327.402 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.402 I llama_new_context_with_model: flash_attn    = 0
0.00.327.404 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.405 I llama_new_context_with_model: freq_scale    = 1
0.00.327.406 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.327.424 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.341.461 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.475 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.563 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.812 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.819 I llama_new_context_with_model: graph nodes  = 601
0.00.343.820 I llama_new_context_with_model: graph splits = 1
0.00.343.823 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.343.824 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.190 I main: llama threadpool init, n_threads = 4
0.00.419.204 I 
0.00.419.279 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.282 I 
0.00.419.315 I sampler seed: 3653790988
0.00.419.326 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.339 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.342 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.343 I 
 seconally.

I am sorry, I am unable to generate responses that contain sexually suggestive or inappropriate language. [end of text]


0.01.568.390 I llama_perf_sampler_print:    sampling time =       4.07 ms /    24 runs   (    0.17 ms per token,  5898.26 tokens per second)
0.01.568.392 I llama_perf_context_print:        load time =     418.78 ms
0.01.568.393 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.568.395 I llama_perf_context_print:        eval time =    1135.16 ms /    23 runs   (   49.35 ms per token,    20.26 tokens per second)
0.01.568.395 I llama_perf_context_print:       total time =    1149.21 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4449 (8a1d9c25)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40211.56 ms
main:    total time = 40211.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.520 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.029.710 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.029.726 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.734 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.738 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.742 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.743 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.744 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.745 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.746 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.747 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.751 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.752 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.753 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.753 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.055.600 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.570 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.833 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.841 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.842 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.842 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.843 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.844 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.844 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.846 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.847 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.136.848 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.136.851 I llama_model_loader: - type  f32:   37 tensors
0.00.136.852 I llama_model_loader: - type q4_K:  108 tensors
0.00.136.852 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.733 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.959 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.712 I llm_load_vocab: special tokens cache size = 5
0.00.279.378 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.402 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.405 I llm_load_print_meta: arch             = gemma
0.00.279.406 I llm_load_print_meta: vocab type       = SPM
0.00.279.407 I llm_load_print_meta: n_vocab          = 256000
0.00.279.407 I llm_load_print_meta: n_merges         = 0
0.00.279.407 I llm_load_print_meta: vocab_only       = 0
0.00.279.408 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.408 I llm_load_print_meta: n_embd           = 2048
0.00.279.408 I llm_load_print_meta: n_layer          = 18
0.00.279.420 I llm_load_print_meta: n_head           = 8
0.00.279.422 I llm_load_print_meta: n_head_kv        = 1
0.00.279.423 I llm_load_print_meta: n_rot            = 256
0.00.279.424 I llm_load_print_meta: n_swa            = 0
0.00.279.424 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.425 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.429 I llm_load_print_meta: n_gqa            = 8
0.00.279.431 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.433 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.438 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.440 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.440 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.441 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.441 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.447 I llm_load_print_meta: n_ff             = 16384
0.00.279.448 I llm_load_print_meta: n_expert         = 0
0.00.279.448 I llm_load_print_meta: n_expert_used    = 0
0.00.279.449 I llm_load_print_meta: causal attn      = 1
0.00.279.449 I llm_load_print_meta: pooling type     = 0
0.00.279.450 I llm_load_print_meta: rope type        = 2
0.00.279.450 I llm_load_print_meta: rope scaling     = linear
0.00.279.452 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.453 I llm_load_print_meta: freq_scale_train = 1
0.00.279.454 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.455 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.455 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.456 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.457 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.457 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.458 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.460 I llm_load_print_meta: model type       = 2B
0.00.279.462 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.462 I llm_load_print_meta: model params     = 2.51 B
0.00.279.463 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.464 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.465 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.465 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.467 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.467 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.468 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.468 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.469 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.470 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.471 I llm_load_print_meta: max token length = 93
0.00.335.965 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.337.299 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.303 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.303 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.304 I llama_new_context_with_model: n_batch       = 2048
0.00.337.304 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.305 I llama_new_context_with_model: flash_attn    = 0
0.00.337.307 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.308 I llama_new_context_with_model: freq_scale    = 1
0.00.337.309 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.329 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.352.018 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.031 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.120 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.042 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.049 I llama_new_context_with_model: graph nodes  = 601
0.00.354.049 I llama_new_context_with_model: graph splits = 1
0.00.354.052 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.354.053 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.252 I main: llama threadpool init, n_threads = 4
0.00.428.266 I 
0.00.428.340 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.428.343 I 
0.00.428.375 I sampler seed: 3374210163
0.00.428.385 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.389 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.401 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.404 I 
 increasities

I'm not sure what you're asking for. Please provide more context or ask a different question. [end of text]


0.01.693.278 I llama_perf_sampler_print:    sampling time =       4.44 ms /    27 runs   (    0.16 ms per token,  6087.94 tokens per second)
0.01.693.281 I llama_perf_context_print:        load time =     427.50 ms
0.01.693.282 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.693.284 I llama_perf_context_print:        eval time =    1249.47 ms /    26 runs   (   48.06 ms per token,    20.81 tokens per second)
0.01.693.285 I llama_perf_context_print:       total time =    1265.03 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.638s
user	10m20.998s
sys	0m6.954s
