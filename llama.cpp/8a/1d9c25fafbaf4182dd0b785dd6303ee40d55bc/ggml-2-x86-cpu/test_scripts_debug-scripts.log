+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.085.489 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.500 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.594 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.618 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.626 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.631 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.633 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.635 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.637 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.638 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.640 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.647 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.649 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.650 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.652 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.653 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.287.523 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.389.128 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.095 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.122 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.124 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.126 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.128 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.130 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.132 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.137 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.139 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.413.141 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.143 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.413.145 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.413.153 I llama_model_loader: - type  f32:   37 tensors
0.00.413.155 I llama_model_loader: - type q8_0:  127 tensors
0.00.681.846 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.806.292 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.807.305 I llm_load_vocab: special tokens cache size = 5
0.01.022.332 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.022.412 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.022.417 I llm_load_print_meta: arch             = gemma
0.01.022.418 I llm_load_print_meta: vocab type       = SPM
0.01.022.419 I llm_load_print_meta: n_vocab          = 256000
0.01.022.421 I llm_load_print_meta: n_merges         = 0
0.01.022.422 I llm_load_print_meta: vocab_only       = 0
0.01.022.422 I llm_load_print_meta: n_ctx_train      = 8192
0.01.022.422 I llm_load_print_meta: n_embd           = 2048
0.01.022.423 I llm_load_print_meta: n_layer          = 18
0.01.022.502 I llm_load_print_meta: n_head           = 8
0.01.022.510 I llm_load_print_meta: n_head_kv        = 1
0.01.022.514 I llm_load_print_meta: n_rot            = 256
0.01.022.514 I llm_load_print_meta: n_swa            = 0
0.01.022.515 I llm_load_print_meta: n_embd_head_k    = 256
0.01.022.515 I llm_load_print_meta: n_embd_head_v    = 256
0.01.022.520 I llm_load_print_meta: n_gqa            = 8
0.01.022.524 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.022.529 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.022.531 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.022.533 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.022.533 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.022.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.022.535 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.022.539 I llm_load_print_meta: n_ff             = 16384
0.01.022.540 I llm_load_print_meta: n_expert         = 0
0.01.022.541 I llm_load_print_meta: n_expert_used    = 0
0.01.022.541 I llm_load_print_meta: causal attn      = 1
0.01.022.542 I llm_load_print_meta: pooling type     = 0
0.01.022.543 I llm_load_print_meta: rope type        = 2
0.01.022.543 I llm_load_print_meta: rope scaling     = linear
0.01.022.545 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.022.546 I llm_load_print_meta: freq_scale_train = 1
0.01.022.546 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.022.546 I llm_load_print_meta: rope_finetuned   = unknown
0.01.022.547 I llm_load_print_meta: ssm_d_conv       = 0
0.01.022.548 I llm_load_print_meta: ssm_d_inner      = 0
0.01.022.548 I llm_load_print_meta: ssm_d_state      = 0
0.01.022.548 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.022.549 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.022.552 I llm_load_print_meta: model type       = 2B
0.01.022.555 I llm_load_print_meta: model ftype      = Q8_0
0.01.022.555 I llm_load_print_meta: model params     = 2.51 B
0.01.022.557 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.022.557 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.022.557 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.022.570 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.022.571 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.022.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.022.574 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.022.575 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.022.582 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.022.583 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.022.585 I llm_load_print_meta: max token length = 93
0.01.125.529 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.125.536 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.125.537 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.125.538 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.125.539 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.125.539 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.132.516 I llama_new_context_with_model: n_seq_max     = 1
0.01.132.521 I llama_new_context_with_model: n_ctx         = 4096
0.01.132.522 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.132.522 I llama_new_context_with_model: n_batch       = 2048
0.01.132.523 I llama_new_context_with_model: n_ubatch      = 512
0.01.132.523 I llama_new_context_with_model: flash_attn    = 0
0.01.132.525 I llama_new_context_with_model: freq_base     = 10000.0
0.01.132.526 I llama_new_context_with_model: freq_scale    = 1
0.01.132.527 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.132.611 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.146.656 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.146.699 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.146.831 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.150.364 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.150.368 I llama_new_context_with_model: graph nodes  = 601
0.01.150.369 I llama_new_context_with_model: graph splits = 1
0.01.150.394 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.150.395 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.763.125 I main: llama threadpool init, n_threads = 4
0.01.763.142 I 
0.01.763.264 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.763.268 I 
0.01.763.502 I sampler seed: 3004575183
0.01.763.516 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.763.528 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.763.528 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.763.529 I 
 maneuvring.

**The Context**

The context of this question involves a character named Anya who is struggling to manage her time effectively. She feels overwhelmed

0.15.345.589 I llama_perf_sampler_print:    sampling time =      49.78 ms /    33 runs   (    1.51 ms per token,   662.88 tokens per second)
0.15.345.611 I llama_perf_context_print:        load time =    1762.20 ms
0.15.345.613 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.345.615 I llama_perf_context_print:        eval time =   13497.42 ms /    32 runs   (  421.79 ms per token,     2.37 tokens per second)
0.15.345.616 I llama_perf_context_print:       total time =   13582.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.836 I main: load the model and apply lora adapter, if any
0.00.086.540 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.650 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.674 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.677 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.682 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.685 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.687 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.689 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.690 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.692 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.700 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.704 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.706 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.707 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.709 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.291.033 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.767 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.023 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.036 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.038 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.040 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.042 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.044 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.046 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.050 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.052 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.417.054 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.417.056 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.058 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.417.067 I llama_model_loader: - type  f32:   37 tensors
0.00.417.069 I llama_model_loader: - type q8_0:  127 tensors
0.00.676.033 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.794.874 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.795.799 I llm_load_vocab: special tokens cache size = 5
0.01.015.515 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.015.598 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.015.603 I llm_load_print_meta: arch             = gemma
0.01.015.604 I llm_load_print_meta: vocab type       = SPM
0.01.015.605 I llm_load_print_meta: n_vocab          = 256000
0.01.015.607 I llm_load_print_meta: n_merges         = 0
0.01.015.607 I llm_load_print_meta: vocab_only       = 0
0.01.015.608 I llm_load_print_meta: n_ctx_train      = 8192
0.01.015.608 I llm_load_print_meta: n_embd           = 2048
0.01.015.608 I llm_load_print_meta: n_layer          = 18
0.01.015.688 I llm_load_print_meta: n_head           = 8
0.01.015.698 I llm_load_print_meta: n_head_kv        = 1
0.01.015.699 I llm_load_print_meta: n_rot            = 256
0.01.015.699 I llm_load_print_meta: n_swa            = 0
0.01.015.699 I llm_load_print_meta: n_embd_head_k    = 256
0.01.015.700 I llm_load_print_meta: n_embd_head_v    = 256
0.01.015.704 I llm_load_print_meta: n_gqa            = 8
0.01.015.709 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.015.713 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.015.715 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.015.717 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.015.718 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.015.719 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.015.720 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.015.724 I llm_load_print_meta: n_ff             = 16384
0.01.015.726 I llm_load_print_meta: n_expert         = 0
0.01.015.727 I llm_load_print_meta: n_expert_used    = 0
0.01.015.728 I llm_load_print_meta: causal attn      = 1
0.01.015.728 I llm_load_print_meta: pooling type     = 0
0.01.015.729 I llm_load_print_meta: rope type        = 2
0.01.015.730 I llm_load_print_meta: rope scaling     = linear
0.01.015.731 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.015.732 I llm_load_print_meta: freq_scale_train = 1
0.01.015.732 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.015.733 I llm_load_print_meta: rope_finetuned   = unknown
0.01.015.733 I llm_load_print_meta: ssm_d_conv       = 0
0.01.015.736 I llm_load_print_meta: ssm_d_inner      = 0
0.01.015.737 I llm_load_print_meta: ssm_d_state      = 0
0.01.015.737 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.015.737 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.015.740 I llm_load_print_meta: model type       = 2B
0.01.015.742 I llm_load_print_meta: model ftype      = Q8_0
0.01.015.742 I llm_load_print_meta: model params     = 2.51 B
0.01.015.753 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.015.755 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.015.755 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.015.756 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.015.756 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.015.757 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.015.757 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.015.758 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.015.765 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.015.766 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.015.767 I llm_load_print_meta: max token length = 93
0.01.111.518 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.118.561 I llama_new_context_with_model: n_seq_max     = 1
0.01.118.567 I llama_new_context_with_model: n_ctx         = 4096
0.01.118.568 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.118.568 I llama_new_context_with_model: n_batch       = 2048
0.01.118.569 I llama_new_context_with_model: n_ubatch      = 512
0.01.118.569 I llama_new_context_with_model: flash_attn    = 0
0.01.118.572 I llama_new_context_with_model: freq_base     = 10000.0
0.01.118.573 I llama_new_context_with_model: freq_scale    = 1
0.01.118.574 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.118.668 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.134.197 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.134.242 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.134.371 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.137.635 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.137.639 I llama_new_context_with_model: graph nodes  = 601
0.01.137.639 I llama_new_context_with_model: graph splits = 1
0.01.137.665 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.137.668 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.752.300 I main: llama threadpool init, n_threads = 4
0.01.752.317 I 
0.01.752.440 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.752.444 I 
0.01.752.679 I sampler seed: 2349817472
0.01.752.694 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.752.704 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.752.705 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.752.705 I 
 increably.

I am unable to generate a response as requested because I am unable to access external websites or specific information from the internet. [end of text]


0.14.091.121 I llama_perf_sampler_print:    sampling time =      45.17 ms /    30 runs   (    1.51 ms per token,   664.19 tokens per second)
0.14.091.138 I llama_perf_context_print:        load time =    1751.38 ms
0.14.091.140 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.091.142 I llama_perf_context_print:        eval time =   12260.96 ms /    29 runs   (  422.79 ms per token,     2.37 tokens per second)
0.14.091.143 I llama_perf_context_print:       total time =   12338.83 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.085.048 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.085.063 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.085.158 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.177 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.179 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.185 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.188 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.189 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.193 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.195 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.204 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.207 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.219 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.222 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.288.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.536 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.609 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.619 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.621 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.622 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.624 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.626 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.628 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.632 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.634 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.415.636 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.415.638 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.415.640 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.415.648 I llama_model_loader: - type  f32:   37 tensors
0.00.415.649 I llama_model_loader: - type q8_0:  127 tensors
0.00.686.323 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.811.689 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.812.628 I llm_load_vocab: special tokens cache size = 5
0.01.036.923 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.037.004 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.037.009 I llm_load_print_meta: arch             = gemma
0.01.037.010 I llm_load_print_meta: vocab type       = SPM
0.01.037.010 I llm_load_print_meta: n_vocab          = 256000
0.01.037.013 I llm_load_print_meta: n_merges         = 0
0.01.037.013 I llm_load_print_meta: vocab_only       = 0
0.01.037.014 I llm_load_print_meta: n_ctx_train      = 8192
0.01.037.014 I llm_load_print_meta: n_embd           = 2048
0.01.037.014 I llm_load_print_meta: n_layer          = 18
0.01.037.093 I llm_load_print_meta: n_head           = 8
0.01.037.103 I llm_load_print_meta: n_head_kv        = 1
0.01.037.104 I llm_load_print_meta: n_rot            = 256
0.01.037.104 I llm_load_print_meta: n_swa            = 0
0.01.037.104 I llm_load_print_meta: n_embd_head_k    = 256
0.01.037.105 I llm_load_print_meta: n_embd_head_v    = 256
0.01.037.111 I llm_load_print_meta: n_gqa            = 8
0.01.037.116 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.037.122 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.037.125 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.037.128 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.037.128 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.037.129 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.037.129 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.037.134 I llm_load_print_meta: n_ff             = 16384
0.01.037.135 I llm_load_print_meta: n_expert         = 0
0.01.037.135 I llm_load_print_meta: n_expert_used    = 0
0.01.037.136 I llm_load_print_meta: causal attn      = 1
0.01.037.136 I llm_load_print_meta: pooling type     = 0
0.01.037.136 I llm_load_print_meta: rope type        = 2
0.01.037.138 I llm_load_print_meta: rope scaling     = linear
0.01.037.139 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.037.140 I llm_load_print_meta: freq_scale_train = 1
0.01.037.140 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.037.141 I llm_load_print_meta: rope_finetuned   = unknown
0.01.037.141 I llm_load_print_meta: ssm_d_conv       = 0
0.01.037.142 I llm_load_print_meta: ssm_d_inner      = 0
0.01.037.143 I llm_load_print_meta: ssm_d_state      = 0
0.01.037.143 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.037.144 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.037.147 I llm_load_print_meta: model type       = 2B
0.01.037.148 I llm_load_print_meta: model ftype      = Q8_0
0.01.037.149 I llm_load_print_meta: model params     = 2.51 B
0.01.037.150 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.037.160 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.037.161 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.037.163 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.037.164 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.037.165 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.037.165 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.037.166 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.037.172 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.037.174 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.037.175 I llm_load_print_meta: max token length = 93
0.01.117.127 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.117.137 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.117.138 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.117.139 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.117.140 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.117.140 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.124.117 I llama_new_context_with_model: n_seq_max     = 1
0.01.124.122 I llama_new_context_with_model: n_ctx         = 4096
0.01.124.123 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.124.123 I llama_new_context_with_model: n_batch       = 2048
0.01.124.124 I llama_new_context_with_model: n_ubatch      = 512
0.01.124.124 I llama_new_context_with_model: flash_attn    = 0
0.01.124.127 I llama_new_context_with_model: freq_base     = 10000.0
0.01.124.127 I llama_new_context_with_model: freq_scale    = 1
0.01.124.128 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.124.210 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.138.720 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.138.758 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.138.881 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.142.446 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.142.449 I llama_new_context_with_model: graph nodes  = 601
0.01.142.450 I llama_new_context_with_model: graph splits = 1
0.01.142.475 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.142.478 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.752.771 I main: llama threadpool init, n_threads = 4
0.01.752.788 I 
0.01.752.911 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.752.916 I 
0.01.753.152 I sampler seed: 4152097933
0.01.753.167 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.753.176 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.753.180 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.753.180 I 
 increamental, 
and conditional statements.

**Question:**

Write a program in Python that implements the above concepts.

**Answer:**

```python

0.15.316.065 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.37 tokens per second)
0.15.316.080 I llama_perf_context_print:        load time =    1751.84 ms
0.15.316.082 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.316.084 I llama_perf_context_print:        eval time =   13478.76 ms /    32 runs   (  421.21 ms per token,     2.37 tokens per second)
0.15.316.085 I llama_perf_context_print:       total time =   13563.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.085.688 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.705 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.801 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.825 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.830 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.835 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.837 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.840 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.842 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.843 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.845 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.853 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.855 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.857 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.859 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.876 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.288.530 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.240 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.215 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.224 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.226 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.228 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.229 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.232 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.233 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.238 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.240 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.414.242 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.244 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.414.245 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.414.253 I llama_model_loader: - type  f32:   37 tensors
0.00.414.255 I llama_model_loader: - type q8_0:  127 tensors
0.00.677.086 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.796.925 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.797.891 I llm_load_vocab: special tokens cache size = 5
0.01.014.828 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.014.907 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.014.912 I llm_load_print_meta: arch             = gemma
0.01.014.913 I llm_load_print_meta: vocab type       = SPM
0.01.014.914 I llm_load_print_meta: n_vocab          = 256000
0.01.014.916 I llm_load_print_meta: n_merges         = 0
0.01.014.917 I llm_load_print_meta: vocab_only       = 0
0.01.014.917 I llm_load_print_meta: n_ctx_train      = 8192
0.01.014.918 I llm_load_print_meta: n_embd           = 2048
0.01.014.918 I llm_load_print_meta: n_layer          = 18
0.01.014.998 I llm_load_print_meta: n_head           = 8
0.01.015.008 I llm_load_print_meta: n_head_kv        = 1
0.01.015.009 I llm_load_print_meta: n_rot            = 256
0.01.015.009 I llm_load_print_meta: n_swa            = 0
0.01.015.010 I llm_load_print_meta: n_embd_head_k    = 256
0.01.015.010 I llm_load_print_meta: n_embd_head_v    = 256
0.01.015.015 I llm_load_print_meta: n_gqa            = 8
0.01.015.020 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.015.025 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.015.028 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.015.029 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.015.030 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.015.030 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.015.031 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.015.035 I llm_load_print_meta: n_ff             = 16384
0.01.015.036 I llm_load_print_meta: n_expert         = 0
0.01.015.036 I llm_load_print_meta: n_expert_used    = 0
0.01.015.038 I llm_load_print_meta: causal attn      = 1
0.01.015.039 I llm_load_print_meta: pooling type     = 0
0.01.015.039 I llm_load_print_meta: rope type        = 2
0.01.015.042 I llm_load_print_meta: rope scaling     = linear
0.01.015.043 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.015.044 I llm_load_print_meta: freq_scale_train = 1
0.01.015.044 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.015.044 I llm_load_print_meta: rope_finetuned   = unknown
0.01.015.045 I llm_load_print_meta: ssm_d_conv       = 0
0.01.015.045 I llm_load_print_meta: ssm_d_inner      = 0
0.01.015.045 I llm_load_print_meta: ssm_d_state      = 0
0.01.015.046 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.015.046 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.015.049 I llm_load_print_meta: model type       = 2B
0.01.015.051 I llm_load_print_meta: model ftype      = Q8_0
0.01.015.051 I llm_load_print_meta: model params     = 2.51 B
0.01.015.052 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.015.053 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.015.054 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.015.054 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.015.055 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.015.055 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.015.056 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.015.056 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.015.064 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.015.067 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.015.068 I llm_load_print_meta: max token length = 93
0.01.087.965 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.087.977 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.095.148 I llama_new_context_with_model: n_seq_max     = 1
0.01.095.155 I llama_new_context_with_model: n_ctx         = 4096
0.01.095.155 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.095.156 I llama_new_context_with_model: n_batch       = 2048
0.01.095.156 I llama_new_context_with_model: n_ubatch      = 512
0.01.095.157 I llama_new_context_with_model: flash_attn    = 0
0.01.095.160 I llama_new_context_with_model: freq_base     = 10000.0
0.01.095.161 I llama_new_context_with_model: freq_scale    = 1
0.01.095.162 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.095.252 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.110.784 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.110.830 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.110.961 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.114.230 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.114.234 I llama_new_context_with_model: graph nodes  = 601
0.01.114.235 I llama_new_context_with_model: graph splits = 1
0.01.114.261 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.114.264 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.727.967 I main: llama threadpool init, n_threads = 4
0.01.727.985 I 
0.01.728.109 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.728.114 I 
0.01.728.349 I sampler seed: 4127659890
0.01.728.363 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.728.373 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.728.377 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.728.377 I 
 increasities. 

I am not sure what you are trying to say. Please rephrase your question. [end of text]


0.11.606.504 I llama_perf_sampler_print:    sampling time =      35.41 ms /    24 runs   (    1.48 ms per token,   677.70 tokens per second)
0.11.606.507 I llama_perf_context_print:        load time =    1727.04 ms
0.11.606.509 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.606.530 I llama_perf_context_print:        eval time =    9816.95 ms /    23 runs   (  426.82 ms per token,     2.34 tokens per second)
0.11.606.532 I llama_perf_context_print:       total time =    9878.55 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m7.330s
user	3m33.322s
sys	0m9.294s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4449 (8a1d9c25)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186323.65 ms
main:    total time = 186323.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.084.683 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.084.695 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.084.790 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.084.807 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.084.810 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.084.814 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.084.816 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.084.817 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.084.819 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.084.820 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.084.822 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.084.828 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.084.830 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.084.832 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.084.833 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.287.172 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.388.935 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.125 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.137 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.139 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.140 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.142 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.144 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.146 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.151 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.152 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.413.155 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.413.157 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.158 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.413.160 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.413.168 I llama_model_loader: - type  f32:   37 tensors
0.00.413.170 I llama_model_loader: - type q4_K:  108 tensors
0.00.413.170 I llama_model_loader: - type q6_K:   19 tensors
0.00.677.805 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.798.941 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.799.851 I llm_load_vocab: special tokens cache size = 5
0.01.005.736 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.005.815 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.005.820 I llm_load_print_meta: arch             = gemma
0.01.005.821 I llm_load_print_meta: vocab type       = SPM
0.01.005.822 I llm_load_print_meta: n_vocab          = 256000
0.01.005.824 I llm_load_print_meta: n_merges         = 0
0.01.005.825 I llm_load_print_meta: vocab_only       = 0
0.01.005.825 I llm_load_print_meta: n_ctx_train      = 8192
0.01.005.825 I llm_load_print_meta: n_embd           = 2048
0.01.005.826 I llm_load_print_meta: n_layer          = 18
0.01.005.902 I llm_load_print_meta: n_head           = 8
0.01.005.912 I llm_load_print_meta: n_head_kv        = 1
0.01.005.913 I llm_load_print_meta: n_rot            = 256
0.01.005.913 I llm_load_print_meta: n_swa            = 0
0.01.005.913 I llm_load_print_meta: n_embd_head_k    = 256
0.01.005.914 I llm_load_print_meta: n_embd_head_v    = 256
0.01.005.918 I llm_load_print_meta: n_gqa            = 8
0.01.005.923 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.005.929 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.005.931 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.005.933 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.005.933 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.005.934 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.005.935 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.005.940 I llm_load_print_meta: n_ff             = 16384
0.01.005.941 I llm_load_print_meta: n_expert         = 0
0.01.005.942 I llm_load_print_meta: n_expert_used    = 0
0.01.005.942 I llm_load_print_meta: causal attn      = 1
0.01.005.943 I llm_load_print_meta: pooling type     = 0
0.01.005.944 I llm_load_print_meta: rope type        = 2
0.01.005.944 I llm_load_print_meta: rope scaling     = linear
0.01.005.946 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.005.947 I llm_load_print_meta: freq_scale_train = 1
0.01.005.948 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.005.948 I llm_load_print_meta: rope_finetuned   = unknown
0.01.005.949 I llm_load_print_meta: ssm_d_conv       = 0
0.01.005.950 I llm_load_print_meta: ssm_d_inner      = 0
0.01.005.950 I llm_load_print_meta: ssm_d_state      = 0
0.01.005.951 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.005.951 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.005.954 I llm_load_print_meta: model type       = 2B
0.01.005.956 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.005.957 I llm_load_print_meta: model params     = 2.51 B
0.01.005.958 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.005.959 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.005.959 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.005.960 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.005.961 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.005.961 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.005.962 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.005.963 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.005.970 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.005.972 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.005.975 I llm_load_print_meta: max token length = 93
0.01.068.794 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.068.805 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.068.806 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.068.807 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.068.808 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.068.809 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.075.853 I llama_new_context_with_model: n_seq_max     = 1
0.01.075.858 I llama_new_context_with_model: n_ctx         = 4096
0.01.075.859 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.075.859 I llama_new_context_with_model: n_batch       = 2048
0.01.075.860 I llama_new_context_with_model: n_ubatch      = 512
0.01.075.860 I llama_new_context_with_model: flash_attn    = 0
0.01.075.863 I llama_new_context_with_model: freq_base     = 10000.0
0.01.075.864 I llama_new_context_with_model: freq_scale    = 1
0.01.075.864 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.075.945 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.090.391 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.090.430 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.090.553 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.093.756 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.093.760 I llama_new_context_with_model: graph nodes  = 601
0.01.093.761 I llama_new_context_with_model: graph splits = 1
0.01.093.785 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.093.788 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.672.120 I main: llama threadpool init, n_threads = 4
0.01.672.138 I 
0.01.672.260 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.672.265 I 
0.01.672.496 I sampler seed: 136966968
0.01.672.510 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.672.522 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.672.523 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.672.523 I 
 seconally and with care.

This is the first time I have encountered this word.

I have encountered this word once before, and I can't

0.12.740.982 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.12 tokens per second)
0.12.740.986 I llama_perf_context_print:        load time =    1671.18 ms
0.12.740.988 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.740.990 I llama_perf_context_print:        eval time =   10983.82 ms /    32 runs   (  343.24 ms per token,     2.91 tokens per second)
0.12.740.991 I llama_perf_context_print:       total time =   11068.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4449 (8a1d9c25)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186268.48 ms
main:    total time = 186268.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4449 (8a1d9c25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.085.342 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.460 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.484 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.487 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.492 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.494 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.496 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.497 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.499 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.500 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.508 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.510 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.511 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.513 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.288.491 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.390 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.692 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.704 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.706 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.708 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.709 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.712 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.713 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.719 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.720 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.414.722 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.414.732 I llama_model_loader: - type  f32:   37 tensors
0.00.414.734 I llama_model_loader: - type q4_K:  108 tensors
0.00.414.735 I llama_model_loader: - type q6_K:   19 tensors
0.00.680.498 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.800.806 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.801.715 I llm_load_vocab: special tokens cache size = 5
0.01.020.272 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.020.350 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.020.355 I llm_load_print_meta: arch             = gemma
0.01.020.356 I llm_load_print_meta: vocab type       = SPM
0.01.020.356 I llm_load_print_meta: n_vocab          = 256000
0.01.020.358 I llm_load_print_meta: n_merges         = 0
0.01.020.359 I llm_load_print_meta: vocab_only       = 0
0.01.020.359 I llm_load_print_meta: n_ctx_train      = 8192
0.01.020.360 I llm_load_print_meta: n_embd           = 2048
0.01.020.360 I llm_load_print_meta: n_layer          = 18
0.01.020.439 I llm_load_print_meta: n_head           = 8
0.01.020.448 I llm_load_print_meta: n_head_kv        = 1
0.01.020.451 I llm_load_print_meta: n_rot            = 256
0.01.020.452 I llm_load_print_meta: n_swa            = 0
0.01.020.452 I llm_load_print_meta: n_embd_head_k    = 256
0.01.020.452 I llm_load_print_meta: n_embd_head_v    = 256
0.01.020.457 I llm_load_print_meta: n_gqa            = 8
0.01.020.462 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.020.467 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.020.468 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.020.470 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.020.471 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.020.472 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.020.473 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.020.478 I llm_load_print_meta: n_ff             = 16384
0.01.020.479 I llm_load_print_meta: n_expert         = 0
0.01.020.479 I llm_load_print_meta: n_expert_used    = 0
0.01.020.480 I llm_load_print_meta: causal attn      = 1
0.01.020.480 I llm_load_print_meta: pooling type     = 0
0.01.020.481 I llm_load_print_meta: rope type        = 2
0.01.020.482 I llm_load_print_meta: rope scaling     = linear
0.01.020.484 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.020.485 I llm_load_print_meta: freq_scale_train = 1
0.01.020.507 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.020.511 I llm_load_print_meta: rope_finetuned   = unknown
0.01.020.511 I llm_load_print_meta: ssm_d_conv       = 0
0.01.020.511 I llm_load_print_meta: ssm_d_inner      = 0
0.01.020.512 I llm_load_print_meta: ssm_d_state      = 0
0.01.020.512 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.020.513 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.020.516 I llm_load_print_meta: model type       = 2B
0.01.020.517 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.020.518 I llm_load_print_meta: model params     = 2.51 B
0.01.020.519 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.020.519 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.020.520 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.020.520 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.020.521 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.020.522 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.020.523 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.020.523 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.020.530 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.020.531 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.020.532 I llm_load_print_meta: max token length = 93
0.01.080.213 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.087.140 I llama_new_context_with_model: n_seq_max     = 1
0.01.087.145 I llama_new_context_with_model: n_ctx         = 4096
0.01.087.145 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.087.146 I llama_new_context_with_model: n_batch       = 2048
0.01.087.146 I llama_new_context_with_model: n_ubatch      = 512
0.01.087.147 I llama_new_context_with_model: flash_attn    = 0
0.01.087.149 I llama_new_context_with_model: freq_base     = 10000.0
0.01.087.150 I llama_new_context_with_model: freq_scale    = 1
0.01.087.150 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.087.230 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.102.016 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.102.060 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.102.187 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.105.384 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.105.388 I llama_new_context_with_model: graph nodes  = 601
0.01.105.388 I llama_new_context_with_model: graph splits = 1
0.01.105.414 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.105.417 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.684.790 I main: llama threadpool init, n_threads = 4
0.01.684.806 I 
0.01.684.926 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.684.930 I 
0.01.685.161 I sampler seed: 3965346071
0.01.685.174 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.685.184 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.685.187 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.685.187 I 
 seconally and succinctly. [end of text]


0.03.770.605 I llama_perf_sampler_print:    sampling time =       9.43 ms /     7 runs   (    1.35 ms per token,   742.15 tokens per second)
0.03.770.618 I llama_perf_context_print:        load time =    1683.88 ms
0.03.770.620 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.770.623 I llama_perf_context_print:        eval time =    2068.40 ms /     6 runs   (  344.73 ms per token,     2.90 tokens per second)
0.03.770.624 I llama_perf_context_print:       total time =    2085.83 ms /     7 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m32.374s
user	46m6.352s
sys	0m6.425s
