+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.175 I build: 4380 (ce083a54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.359 I main: llama backend init
0.00.000.366 I main: load the model and apply lora adapter, if any
0.00.021.271 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.284 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.296 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.301 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.303 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.308 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.308 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.309 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.310 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.310 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.311 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.316 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.317 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.318 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.319 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.553 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.947 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.804 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.810 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.811 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.811 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.812 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.813 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.814 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.816 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.817 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.817 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.818 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.819 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.823 I llama_model_loader: - type  f32:   37 tensors
0.00.132.825 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.337 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.766 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.363 I llm_load_vocab: special tokens cache size = 5
0.00.276.457 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.475 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.476 I llm_load_print_meta: arch             = gemma
0.00.276.476 I llm_load_print_meta: vocab type       = SPM
0.00.276.477 I llm_load_print_meta: n_vocab          = 256000
0.00.276.477 I llm_load_print_meta: n_merges         = 0
0.00.276.478 I llm_load_print_meta: vocab_only       = 0
0.00.276.478 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.478 I llm_load_print_meta: n_embd           = 2048
0.00.276.479 I llm_load_print_meta: n_layer          = 18
0.00.276.490 I llm_load_print_meta: n_head           = 8
0.00.276.491 I llm_load_print_meta: n_head_kv        = 1
0.00.276.491 I llm_load_print_meta: n_rot            = 256
0.00.276.492 I llm_load_print_meta: n_swa            = 0
0.00.276.492 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.492 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.493 I llm_load_print_meta: n_gqa            = 8
0.00.276.494 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.495 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.496 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.497 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.498 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.498 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.498 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.499 I llm_load_print_meta: n_ff             = 16384
0.00.276.500 I llm_load_print_meta: n_expert         = 0
0.00.276.500 I llm_load_print_meta: n_expert_used    = 0
0.00.276.500 I llm_load_print_meta: causal attn      = 1
0.00.276.501 I llm_load_print_meta: pooling type     = 0
0.00.276.501 I llm_load_print_meta: rope type        = 2
0.00.276.501 I llm_load_print_meta: rope scaling     = linear
0.00.276.503 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.503 I llm_load_print_meta: freq_scale_train = 1
0.00.276.504 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.504 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.504 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.504 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.505 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.505 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.506 I llm_load_print_meta: model type       = 2B
0.00.276.506 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.507 I llm_load_print_meta: model params     = 2.51 B
0.00.276.508 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.508 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.509 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.509 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.509 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.510 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.510 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.510 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.510 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.511 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.511 I llm_load_print_meta: max token length = 93
0.00.377.109 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.377.118 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.377.119 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.377.119 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.377.120 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.377.121 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.382.455 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.462 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.462 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.463 I llama_new_context_with_model: n_batch       = 2048
0.00.382.463 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.464 I llama_new_context_with_model: flash_attn    = 0
0.00.382.467 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.468 I llama_new_context_with_model: freq_scale    = 1
0.00.382.469 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.491 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.397.212 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.224 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.323 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.583 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.398.589 I llama_new_context_with_model: graph nodes  = 601
0.00.398.589 I llama_new_context_with_model: graph splits = 1
0.00.398.592 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.398.593 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.531 I main: llama threadpool init, n_threads = 4
0.00.484.546 I 
0.00.484.621 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.624 I 
0.00.484.665 I sampler seed: 4229026411
0.00.484.676 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.689 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.693 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.693 I 
 increably. [end of text]


0.00.771.820 I llama_perf_sampler_print:    sampling time =       0.65 ms /     5 runs   (    0.13 ms per token,  7739.94 tokens per second)
0.00.771.822 I llama_perf_context_print:        load time =     484.15 ms
0.00.771.823 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.771.824 I llama_perf_context_print:        eval time =     283.74 ms /     4 runs   (   70.93 ms per token,    14.10 tokens per second)
0.00.771.825 I llama_perf_context_print:       total time =     287.29 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.544 I build: 4380 (ce083a54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.000.735 I main: load the model and apply lora adapter, if any
0.00.020.852 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.867 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.878 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.881 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.885 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.886 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.887 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.887 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.888 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.888 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.893 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.893 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.894 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.895 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.895 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.957 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.985 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.838 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.846 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.848 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.848 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.849 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.850 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.850 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.853 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.853 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.854 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.854 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.855 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.860 I llama_model_loader: - type  f32:   37 tensors
0.00.131.861 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.169 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.323 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.906 I llm_load_vocab: special tokens cache size = 5
0.00.278.964 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.982 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.983 I llm_load_print_meta: arch             = gemma
0.00.278.984 I llm_load_print_meta: vocab type       = SPM
0.00.278.984 I llm_load_print_meta: n_vocab          = 256000
0.00.278.985 I llm_load_print_meta: n_merges         = 0
0.00.278.985 I llm_load_print_meta: vocab_only       = 0
0.00.278.986 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.986 I llm_load_print_meta: n_embd           = 2048
0.00.278.986 I llm_load_print_meta: n_layer          = 18
0.00.278.998 I llm_load_print_meta: n_head           = 8
0.00.278.999 I llm_load_print_meta: n_head_kv        = 1
0.00.278.999 I llm_load_print_meta: n_rot            = 256
0.00.278.999 I llm_load_print_meta: n_swa            = 0
0.00.279.000 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.000 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.001 I llm_load_print_meta: n_gqa            = 8
0.00.279.002 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.003 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.003 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.005 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.005 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.005 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.006 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.006 I llm_load_print_meta: n_ff             = 16384
0.00.279.007 I llm_load_print_meta: n_expert         = 0
0.00.279.007 I llm_load_print_meta: n_expert_used    = 0
0.00.279.007 I llm_load_print_meta: causal attn      = 1
0.00.279.008 I llm_load_print_meta: pooling type     = 0
0.00.279.008 I llm_load_print_meta: rope type        = 2
0.00.279.008 I llm_load_print_meta: rope scaling     = linear
0.00.279.010 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.010 I llm_load_print_meta: freq_scale_train = 1
0.00.279.011 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.011 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.011 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.012 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.012 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.012 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.012 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.013 I llm_load_print_meta: model type       = 2B
0.00.279.013 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.014 I llm_load_print_meta: model params     = 2.51 B
0.00.279.015 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.015 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.016 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.016 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.017 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.017 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.017 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.018 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.018 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.018 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.019 I llm_load_print_meta: max token length = 93
0.00.372.987 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.378.140 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.146 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.146 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.147 I llama_new_context_with_model: n_batch       = 2048
0.00.378.147 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.148 I llama_new_context_with_model: flash_attn    = 0
0.00.378.150 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.151 I llama_new_context_with_model: freq_scale    = 1
0.00.378.152 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.175 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.393.124 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.140 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.233 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.476 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.482 I llama_new_context_with_model: graph nodes  = 601
0.00.394.483 I llama_new_context_with_model: graph splits = 1
0.00.394.485 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.394.486 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.132 I main: llama threadpool init, n_threads = 4
0.00.477.148 I 
0.00.477.225 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.228 I 
0.00.477.273 I sampler seed: 1639316702
0.00.477.283 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.295 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.299 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.299 I 
 increasities. 

I am unable to generate text that is sexually suggestive in nature. [end of text]


0.01.792.032 I llama_perf_sampler_print:    sampling time =       2.94 ms /    20 runs   (    0.15 ms per token,  6791.17 tokens per second)
0.01.792.034 I llama_perf_context_print:        load time =     476.38 ms
0.01.792.035 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.792.037 I llama_perf_context_print:        eval time =    1302.60 ms /    19 runs   (   68.56 ms per token,    14.59 tokens per second)
0.01.792.038 I llama_perf_context_print:       total time =    1314.91 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.561 I build: 4380 (ce083a54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.022.680 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.691 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.703 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.708 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.709 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.713 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.714 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.715 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.715 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.716 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.717 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.722 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.722 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.723 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.723 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.724 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.309 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.409 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.242 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.248 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.249 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.250 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.251 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.252 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.253 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.256 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.257 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.258 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.259 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.260 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.264 I llama_model_loader: - type  f32:   37 tensors
0.00.133.265 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.743 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.274.365 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.275.101 I llm_load_vocab: special tokens cache size = 5
0.00.296.391 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.296.410 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.296.411 I llm_load_print_meta: arch             = gemma
0.00.296.411 I llm_load_print_meta: vocab type       = SPM
0.00.296.412 I llm_load_print_meta: n_vocab          = 256000
0.00.296.414 I llm_load_print_meta: n_merges         = 0
0.00.296.414 I llm_load_print_meta: vocab_only       = 0
0.00.296.427 I llm_load_print_meta: n_ctx_train      = 8192
0.00.296.428 I llm_load_print_meta: n_embd           = 2048
0.00.296.428 I llm_load_print_meta: n_layer          = 18
0.00.296.441 I llm_load_print_meta: n_head           = 8
0.00.296.442 I llm_load_print_meta: n_head_kv        = 1
0.00.296.442 I llm_load_print_meta: n_rot            = 256
0.00.296.443 I llm_load_print_meta: n_swa            = 0
0.00.296.443 I llm_load_print_meta: n_embd_head_k    = 256
0.00.296.444 I llm_load_print_meta: n_embd_head_v    = 256
0.00.296.445 I llm_load_print_meta: n_gqa            = 8
0.00.296.446 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.296.447 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.296.448 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.296.449 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.296.449 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.296.450 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.296.450 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.296.451 I llm_load_print_meta: n_ff             = 16384
0.00.296.452 I llm_load_print_meta: n_expert         = 0
0.00.296.452 I llm_load_print_meta: n_expert_used    = 0
0.00.296.452 I llm_load_print_meta: causal attn      = 1
0.00.296.453 I llm_load_print_meta: pooling type     = 0
0.00.296.453 I llm_load_print_meta: rope type        = 2
0.00.296.454 I llm_load_print_meta: rope scaling     = linear
0.00.296.456 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.296.456 I llm_load_print_meta: freq_scale_train = 1
0.00.296.457 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.296.458 I llm_load_print_meta: rope_finetuned   = unknown
0.00.296.458 I llm_load_print_meta: ssm_d_conv       = 0
0.00.296.458 I llm_load_print_meta: ssm_d_inner      = 0
0.00.296.458 I llm_load_print_meta: ssm_d_state      = 0
0.00.296.459 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.296.459 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.296.462 I llm_load_print_meta: model type       = 2B
0.00.296.463 I llm_load_print_meta: model ftype      = Q8_0
0.00.296.463 I llm_load_print_meta: model params     = 2.51 B
0.00.296.465 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.296.465 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.296.466 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.296.466 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.296.466 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.296.467 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.296.467 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.296.468 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.296.468 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.296.469 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.296.469 I llm_load_print_meta: max token length = 93
0.00.373.488 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.373.496 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.373.496 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.373.497 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.373.498 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.373.498 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.378.806 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.814 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.814 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.815 I llama_new_context_with_model: n_batch       = 2048
0.00.378.815 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.815 I llama_new_context_with_model: flash_attn    = 0
0.00.378.819 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.819 I llama_new_context_with_model: freq_scale    = 1
0.00.378.820 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.843 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.393.849 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.862 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.956 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.248 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.255 I llama_new_context_with_model: graph nodes  = 601
0.00.395.255 I llama_new_context_with_model: graph splits = 1
0.00.395.258 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.395.258 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.724 I main: llama threadpool init, n_threads = 4
0.00.481.740 I 
0.00.481.813 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.481.816 I 
0.00.481.858 I sampler seed: 642174674
0.00.481.869 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.872 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.872 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.872 I 
 increasities, and societal change.

**Question:** Discuss the connection between societal change and the rise of narcissism.

**Discussion:**

**Societal

0.02.804.844 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6634.50 tokens per second)
0.02.804.847 I llama_perf_context_print:        load time =     480.94 ms
0.02.804.848 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.804.850 I llama_perf_context_print:        eval time =    2303.70 ms /    32 runs   (   71.99 ms per token,    13.89 tokens per second)
0.02.804.850 I llama_perf_context_print:       total time =    2323.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.524 I build: 4380 (ce083a54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.695 I main: llama backend init
0.00.000.703 I main: load the model and apply lora adapter, if any
0.00.021.031 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.041 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.053 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.058 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.063 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.067 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.068 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.069 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.070 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.071 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.071 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.075 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.076 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.077 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.077 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.078 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.628 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.929 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.815 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.822 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.823 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.824 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.825 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.826 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.827 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.831 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.831 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.832 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.833 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.835 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.839 I llama_model_loader: - type  f32:   37 tensors
0.00.131.840 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.595 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.528 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.143 I llm_load_vocab: special tokens cache size = 5
0.00.275.416 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.435 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.436 I llm_load_print_meta: arch             = gemma
0.00.275.436 I llm_load_print_meta: vocab type       = SPM
0.00.275.437 I llm_load_print_meta: n_vocab          = 256000
0.00.275.437 I llm_load_print_meta: n_merges         = 0
0.00.275.438 I llm_load_print_meta: vocab_only       = 0
0.00.275.439 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.439 I llm_load_print_meta: n_embd           = 2048
0.00.275.441 I llm_load_print_meta: n_layer          = 18
0.00.275.453 I llm_load_print_meta: n_head           = 8
0.00.275.454 I llm_load_print_meta: n_head_kv        = 1
0.00.275.455 I llm_load_print_meta: n_rot            = 256
0.00.275.455 I llm_load_print_meta: n_swa            = 0
0.00.275.455 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.456 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.457 I llm_load_print_meta: n_gqa            = 8
0.00.275.458 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.459 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.460 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.461 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.462 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.462 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.463 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.464 I llm_load_print_meta: n_ff             = 16384
0.00.275.464 I llm_load_print_meta: n_expert         = 0
0.00.275.465 I llm_load_print_meta: n_expert_used    = 0
0.00.275.465 I llm_load_print_meta: causal attn      = 1
0.00.275.465 I llm_load_print_meta: pooling type     = 0
0.00.275.466 I llm_load_print_meta: rope type        = 2
0.00.275.466 I llm_load_print_meta: rope scaling     = linear
0.00.275.468 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.468 I llm_load_print_meta: freq_scale_train = 1
0.00.275.468 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.469 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.469 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.469 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.470 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.470 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.471 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.471 I llm_load_print_meta: model type       = 2B
0.00.275.472 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.473 I llm_load_print_meta: model params     = 2.51 B
0.00.275.474 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.474 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.475 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.475 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.476 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.477 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.477 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.478 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.478 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.479 I llm_load_print_meta: max token length = 93
0.00.346.854 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.346.860 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.352.091 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.099 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.100 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.100 I llama_new_context_with_model: n_batch       = 2048
0.00.352.101 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.101 I llama_new_context_with_model: flash_attn    = 0
0.00.352.104 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.105 I llama_new_context_with_model: freq_scale    = 1
0.00.352.106 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.129 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.368.286 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.299 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.402 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.672 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.679 I llama_new_context_with_model: graph nodes  = 601
0.00.369.679 I llama_new_context_with_model: graph splits = 1
0.00.369.682 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.369.682 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.406 I main: llama threadpool init, n_threads = 4
0.00.466.423 I 
0.00.466.512 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.466.516 I 
0.00.466.579 I sampler seed: 3139290501
0.00.466.590 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.600 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.604 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.604 I 
 increamental expansion and the subsequent exponential growth of the population. [end of text]


0.01.459.848 I llama_perf_sampler_print:    sampling time =       2.07 ms /    14 runs   (    0.15 ms per token,  6766.55 tokens per second)
0.01.459.851 I llama_perf_context_print:        load time =     465.69 ms
0.01.459.852 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.459.853 I llama_perf_context_print:        eval time =     984.96 ms /    13 runs   (   75.77 ms per token,    13.20 tokens per second)
0.01.459.854 I llama_perf_context_print:       total time =     993.45 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.222s
user	0m22.670s
sys	0m9.584s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4380 (ce083a54)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40256.43 ms
main:    total time = 40256.43 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.173 I build: 4380 (ce083a54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.356 I main: llama backend init
0.00.000.362 I main: load the model and apply lora adapter, if any
0.00.020.752 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.763 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.775 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.780 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.782 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.786 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.787 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.788 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.789 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.789 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.790 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.795 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.795 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.796 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.796 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.796 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.694 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.915 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.801 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.808 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.808 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.809 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.809 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.810 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.811 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.813 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.816 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.816 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.817 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.817 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.821 I llama_model_loader: - type  f32:   37 tensors
0.00.131.822 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.822 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.667 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.670 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.250 I llm_load_vocab: special tokens cache size = 5
0.00.267.255 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.272 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.272 I llm_load_print_meta: arch             = gemma
0.00.267.273 I llm_load_print_meta: vocab type       = SPM
0.00.267.274 I llm_load_print_meta: n_vocab          = 256000
0.00.267.274 I llm_load_print_meta: n_merges         = 0
0.00.267.274 I llm_load_print_meta: vocab_only       = 0
0.00.267.275 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.275 I llm_load_print_meta: n_embd           = 2048
0.00.267.275 I llm_load_print_meta: n_layer          = 18
0.00.267.286 I llm_load_print_meta: n_head           = 8
0.00.267.287 I llm_load_print_meta: n_head_kv        = 1
0.00.267.287 I llm_load_print_meta: n_rot            = 256
0.00.267.288 I llm_load_print_meta: n_swa            = 0
0.00.267.288 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.288 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.289 I llm_load_print_meta: n_gqa            = 8
0.00.267.290 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.291 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.291 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.293 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.294 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.294 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.294 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.295 I llm_load_print_meta: n_ff             = 16384
0.00.267.295 I llm_load_print_meta: n_expert         = 0
0.00.267.296 I llm_load_print_meta: n_expert_used    = 0
0.00.267.296 I llm_load_print_meta: causal attn      = 1
0.00.267.297 I llm_load_print_meta: pooling type     = 0
0.00.267.297 I llm_load_print_meta: rope type        = 2
0.00.267.297 I llm_load_print_meta: rope scaling     = linear
0.00.267.298 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.299 I llm_load_print_meta: freq_scale_train = 1
0.00.267.299 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.300 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.300 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.300 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.300 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.301 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.301 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.301 I llm_load_print_meta: model type       = 2B
0.00.267.302 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.303 I llm_load_print_meta: model params     = 2.51 B
0.00.267.303 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.304 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.304 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.305 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.305 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.305 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.305 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.307 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.307 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.308 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.308 I llm_load_print_meta: max token length = 93
0.00.326.932 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.939 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.940 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.940 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.941 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.941 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.012 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.019 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.019 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.019 I llama_new_context_with_model: n_batch       = 2048
0.00.332.020 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.020 I llama_new_context_with_model: flash_attn    = 0
0.00.332.023 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.024 I llama_new_context_with_model: freq_scale    = 1
0.00.332.024 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.332.043 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.346.725 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.739 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.836 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.089 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.094 I llama_new_context_with_model: graph nodes  = 601
0.00.348.095 I llama_new_context_with_model: graph splits = 1
0.00.348.097 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.097 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.292 I main: llama threadpool init, n_threads = 4
0.00.423.307 I 
0.00.423.397 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.400 I 
0.00.423.441 I sampler seed: 1928422539
0.00.423.452 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.463 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.466 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.467 I 
 seconded and elongated to form a new word.

**Answer:** Elaboration

Elaboration is a process of enhancing or supplementing something by adding more details,

0.02.032.009 I llama_perf_sampler_print:    sampling time =       5.48 ms /    33 runs   (    0.17 ms per token,  6018.60 tokens per second)
0.02.032.013 I llama_perf_context_print:        load time =     422.91 ms
0.02.032.015 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.032.017 I llama_perf_context_print:        eval time =    1588.41 ms /    32 runs   (   49.64 ms per token,    20.15 tokens per second)
0.02.032.017 I llama_perf_context_print:       total time =    1608.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4380 (ce083a54)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40216.24 ms
main:    total time = 40216.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.555 I build: 4380 (ce083a54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.021.414 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.434 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.442 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.443 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.449 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.449 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.451 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.451 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.452 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.453 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.462 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.463 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.464 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.465 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.466 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.221 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.987 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.745 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.751 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.751 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.752 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.753 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.753 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.754 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.756 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.757 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.760 I llama_model_loader: - type  f32:   37 tensors
0.00.130.761 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.762 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.280 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.587 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.214 I llm_load_vocab: special tokens cache size = 5
0.00.264.307 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.323 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.323 I llm_load_print_meta: arch             = gemma
0.00.264.323 I llm_load_print_meta: vocab type       = SPM
0.00.264.324 I llm_load_print_meta: n_vocab          = 256000
0.00.264.324 I llm_load_print_meta: n_merges         = 0
0.00.264.324 I llm_load_print_meta: vocab_only       = 0
0.00.264.325 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.325 I llm_load_print_meta: n_embd           = 2048
0.00.264.326 I llm_load_print_meta: n_layer          = 18
0.00.264.339 I llm_load_print_meta: n_head           = 8
0.00.264.341 I llm_load_print_meta: n_head_kv        = 1
0.00.264.341 I llm_load_print_meta: n_rot            = 256
0.00.264.342 I llm_load_print_meta: n_swa            = 0
0.00.264.342 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.344 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.345 I llm_load_print_meta: n_gqa            = 8
0.00.264.347 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.348 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.349 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.351 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.352 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.353 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.354 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.355 I llm_load_print_meta: n_ff             = 16384
0.00.264.356 I llm_load_print_meta: n_expert         = 0
0.00.264.356 I llm_load_print_meta: n_expert_used    = 0
0.00.264.360 I llm_load_print_meta: causal attn      = 1
0.00.264.360 I llm_load_print_meta: pooling type     = 0
0.00.264.361 I llm_load_print_meta: rope type        = 2
0.00.264.362 I llm_load_print_meta: rope scaling     = linear
0.00.264.364 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.364 I llm_load_print_meta: freq_scale_train = 1
0.00.264.365 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.366 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.366 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.367 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.367 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.368 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.368 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.369 I llm_load_print_meta: model type       = 2B
0.00.264.371 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.372 I llm_load_print_meta: model params     = 2.51 B
0.00.264.374 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.375 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.376 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.376 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.377 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.378 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.379 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.379 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.381 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.382 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.383 I llm_load_print_meta: max token length = 93
0.00.322.150 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.630 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.637 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.638 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.638 I llama_new_context_with_model: n_batch       = 2048
0.00.327.638 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.639 I llama_new_context_with_model: flash_attn    = 0
0.00.327.641 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.642 I llama_new_context_with_model: freq_scale    = 1
0.00.327.643 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.327.665 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.342.669 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.684 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.793 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.060 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.066 I llama_new_context_with_model: graph nodes  = 601
0.00.344.066 I llama_new_context_with_model: graph splits = 1
0.00.344.068 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.069 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.929 I main: llama threadpool init, n_threads = 4
0.00.418.946 I 
0.00.419.030 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.034 I 
0.00.419.079 I sampler seed: 317019698
0.00.419.090 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.094 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.096 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.096 I 
 seconded his position as the leader of the Black Panther Party to T'Challa. This decision has sparked outrage and debate within the African diaspora.

**

0.01.997.415 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6496.06 tokens per second)
0.01.997.417 I llama_perf_context_print:        load time =     418.14 ms
0.01.997.419 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.997.420 I llama_perf_context_print:        eval time =    1558.80 ms /    32 runs   (   48.71 ms per token,    20.53 tokens per second)
0.01.997.421 I llama_perf_context_print:       total time =    1578.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.363s
user	10m24.193s
sys	0m7.149s
