+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3927 (cefd4acb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
0.00.024.748 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.957 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.044 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.055 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.057 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.061 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.062 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.063 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.064 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.065 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.066 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.073 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.076 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.077 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.078 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.079 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.538 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.291 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.992 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.999 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.001 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.002 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.003 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.006 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.010 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.011 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.012 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.013 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.014 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.022 I llama_model_loader: - type  f32:   37 tensors
0.00.271.026 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.338 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.579 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.712 I llm_load_vocab: special tokens cache size = 5
0.00.600.909 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.982 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.983 I llm_load_print_meta: arch             = gemma
0.00.600.983 I llm_load_print_meta: vocab type       = SPM
0.00.600.984 I llm_load_print_meta: n_vocab          = 256000
0.00.600.986 I llm_load_print_meta: n_merges         = 0
0.00.600.987 I llm_load_print_meta: vocab_only       = 0
0.00.600.987 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.987 I llm_load_print_meta: n_embd           = 2048
0.00.600.988 I llm_load_print_meta: n_layer          = 18
0.00.601.053 I llm_load_print_meta: n_head           = 8
0.00.601.060 I llm_load_print_meta: n_head_kv        = 1
0.00.601.060 I llm_load_print_meta: n_rot            = 256
0.00.601.061 I llm_load_print_meta: n_swa            = 0
0.00.601.062 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.062 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.067 I llm_load_print_meta: n_gqa            = 8
0.00.601.072 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.077 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.078 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.079 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.079 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.081 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.081 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.087 I llm_load_print_meta: n_ff             = 16384
0.00.601.087 I llm_load_print_meta: n_expert         = 0
0.00.601.114 I llm_load_print_meta: n_expert_used    = 0
0.00.601.118 I llm_load_print_meta: causal attn      = 1
0.00.601.119 I llm_load_print_meta: pooling type     = 0
0.00.601.119 I llm_load_print_meta: rope type        = 2
0.00.601.120 I llm_load_print_meta: rope scaling     = linear
0.00.601.121 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.122 I llm_load_print_meta: freq_scale_train = 1
0.00.601.122 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.128 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.133 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.133 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.138 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.138 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.139 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.140 I llm_load_print_meta: model type       = 2B
0.00.601.141 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.142 I llm_load_print_meta: model params     = 2.51 B
0.00.601.143 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.143 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.144 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.145 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.153 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.154 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.154 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.162 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.168 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.170 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.170 I llm_load_print_meta: max token length = 93
0.00.601.354 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.705.546 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.705.554 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.705.555 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.705.556 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.705.556 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.705.557 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.711.216 I llama_new_context_with_model: n_ctx      = 8192
0.00.711.224 I llama_new_context_with_model: n_batch    = 2048
0.00.711.224 I llama_new_context_with_model: n_ubatch   = 512
0.00.711.225 I llama_new_context_with_model: flash_attn = 0
0.00.711.227 I llama_new_context_with_model: freq_base  = 10000.0
0.00.711.228 I llama_new_context_with_model: freq_scale = 1
0.00.740.302 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.740.346 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.740.467 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.741.908 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.741.914 I llama_new_context_with_model: graph nodes  = 601
0.00.741.915 I llama_new_context_with_model: graph splits = 1
0.00.741.930 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.961 I main: llama threadpool init, n_threads = 4
0.01.353.972 I 
0.01.354.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.354.087 I 
0.01.354.259 I sampler seed: 3743028981
0.01.354.270 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.354.277 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.354.278 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.354.281 I 
 increasively, but the increase in speed is not proportional to the time elapsed. Explain this observation and suggest a solution.

**Observation:**

The speed of

0.14.886.181 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.34 tokens per second)
0.14.886.185 I llama_perf_context_print:        load time =    1351.08 ms
0.14.886.186 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.886.188 I llama_perf_context_print:        eval time =   13450.28 ms /    32 runs   (  420.32 ms per token,     2.38 tokens per second)
0.14.886.189 I llama_perf_context_print:       total time =   13532.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 3927 (cefd4acb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.831 I main: load the model and apply lora adapter, if any
0.00.025.088 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.183 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.197 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.202 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.206 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.207 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.210 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.211 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.212 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.213 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.220 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.222 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.223 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.225 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.840 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.596 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.274 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.283 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.285 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.286 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.287 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.289 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.290 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.295 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.296 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.297 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.298 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.299 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.306 I llama_model_loader: - type  f32:   37 tensors
0.00.271.310 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.854 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.388 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.404 I llm_load_vocab: special tokens cache size = 5
0.00.599.443 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.512 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.513 I llm_load_print_meta: arch             = gemma
0.00.599.514 I llm_load_print_meta: vocab type       = SPM
0.00.599.515 I llm_load_print_meta: n_vocab          = 256000
0.00.599.517 I llm_load_print_meta: n_merges         = 0
0.00.599.518 I llm_load_print_meta: vocab_only       = 0
0.00.599.518 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.518 I llm_load_print_meta: n_embd           = 2048
0.00.599.519 I llm_load_print_meta: n_layer          = 18
0.00.599.583 I llm_load_print_meta: n_head           = 8
0.00.599.590 I llm_load_print_meta: n_head_kv        = 1
0.00.599.591 I llm_load_print_meta: n_rot            = 256
0.00.599.591 I llm_load_print_meta: n_swa            = 0
0.00.599.592 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.593 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.599 I llm_load_print_meta: n_gqa            = 8
0.00.599.603 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.609 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.612 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.614 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.615 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.615 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.616 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.620 I llm_load_print_meta: n_ff             = 16384
0.00.599.621 I llm_load_print_meta: n_expert         = 0
0.00.599.621 I llm_load_print_meta: n_expert_used    = 0
0.00.599.622 I llm_load_print_meta: causal attn      = 1
0.00.599.622 I llm_load_print_meta: pooling type     = 0
0.00.599.630 I llm_load_print_meta: rope type        = 2
0.00.599.642 I llm_load_print_meta: rope scaling     = linear
0.00.599.644 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.645 I llm_load_print_meta: freq_scale_train = 1
0.00.599.646 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.646 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.647 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.648 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.649 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.649 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.652 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.652 I llm_load_print_meta: model type       = 2B
0.00.599.653 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.654 I llm_load_print_meta: model params     = 2.51 B
0.00.599.655 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.656 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.656 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.657 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.657 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.660 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.660 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.661 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.667 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.668 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.669 I llm_load_print_meta: max token length = 93
0.00.599.830 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.695.491 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.701.089 I llama_new_context_with_model: n_ctx      = 8192
0.00.701.097 I llama_new_context_with_model: n_batch    = 2048
0.00.701.098 I llama_new_context_with_model: n_ubatch   = 512
0.00.701.098 I llama_new_context_with_model: flash_attn = 0
0.00.701.102 I llama_new_context_with_model: freq_base  = 10000.0
0.00.701.102 I llama_new_context_with_model: freq_scale = 1
0.00.731.037 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.731.082 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.203 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.732.590 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.732.596 I llama_new_context_with_model: graph nodes  = 601
0.00.732.596 I llama_new_context_with_model: graph splits = 1
0.00.732.613 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.933 I main: llama threadpool init, n_threads = 4
0.01.342.943 I 
0.01.343.053 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.057 I 
0.01.343.222 I sampler seed: 3022932589
0.01.343.233 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.239 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.343.240 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.242 I 
 increasities in the modern world.

**Discussion Points:**

* What are some of the key factors contributing to the rise of narcissistic personality disorder (NPD)?

0.15.022.675 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.29 tokens per second)
0.15.022.678 I llama_perf_context_print:        load time =    1340.01 ms
0.15.022.679 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.022.693 I llama_perf_context_print:        eval time =   13597.61 ms /    32 runs   (  424.93 ms per token,     2.35 tokens per second)
0.15.022.694 I llama_perf_context_print:       total time =   13679.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 3927 (cefd4acb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.450 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.649 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.731 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.742 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.744 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.748 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.749 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.751 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.752 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.753 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.754 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.761 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.765 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.766 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.767 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.768 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.275 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.175 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.809 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.818 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.819 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.820 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.821 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.823 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.824 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.844 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.848 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.849 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.850 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.852 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.859 I llama_model_loader: - type  f32:   37 tensors
0.00.270.863 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.057 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.014 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.020 I llm_load_vocab: special tokens cache size = 5
0.00.601.242 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.311 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.312 I llm_load_print_meta: arch             = gemma
0.00.601.313 I llm_load_print_meta: vocab type       = SPM
0.00.601.314 I llm_load_print_meta: n_vocab          = 256000
0.00.601.316 I llm_load_print_meta: n_merges         = 0
0.00.601.316 I llm_load_print_meta: vocab_only       = 0
0.00.601.317 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.317 I llm_load_print_meta: n_embd           = 2048
0.00.601.318 I llm_load_print_meta: n_layer          = 18
0.00.601.380 I llm_load_print_meta: n_head           = 8
0.00.601.388 I llm_load_print_meta: n_head_kv        = 1
0.00.601.388 I llm_load_print_meta: n_rot            = 256
0.00.601.389 I llm_load_print_meta: n_swa            = 0
0.00.601.389 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.390 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.395 I llm_load_print_meta: n_gqa            = 8
0.00.601.400 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.405 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.406 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.417 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.418 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.418 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.418 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.423 I llm_load_print_meta: n_ff             = 16384
0.00.601.424 I llm_load_print_meta: n_expert         = 0
0.00.601.434 I llm_load_print_meta: n_expert_used    = 0
0.00.601.436 I llm_load_print_meta: causal attn      = 1
0.00.601.437 I llm_load_print_meta: pooling type     = 0
0.00.601.437 I llm_load_print_meta: rope type        = 2
0.00.601.437 I llm_load_print_meta: rope scaling     = linear
0.00.601.439 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.440 I llm_load_print_meta: freq_scale_train = 1
0.00.601.440 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.441 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.441 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.442 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.451 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.451 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.452 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.453 I llm_load_print_meta: model type       = 2B
0.00.601.454 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.455 I llm_load_print_meta: model params     = 2.51 B
0.00.601.455 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.456 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.457 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.457 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.457 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.458 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.459 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.459 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.465 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.466 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.466 I llm_load_print_meta: max token length = 93
0.00.601.632 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.680.547 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.680.558 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.680.559 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.680.560 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.680.560 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.680.561 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.686.201 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.208 I llama_new_context_with_model: n_batch    = 2048
0.00.686.208 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.209 I llama_new_context_with_model: flash_attn = 0
0.00.686.211 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.212 I llama_new_context_with_model: freq_scale = 1
0.00.716.604 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.647 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.764 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.718.156 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.718.163 I llama_new_context_with_model: graph nodes  = 601
0.00.718.163 I llama_new_context_with_model: graph splits = 1
0.00.718.180 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.329.833 I main: llama threadpool init, n_threads = 4
0.01.329.844 I 
0.01.329.947 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.329.950 I 
0.01.330.115 I sampler seed: 1952376409
0.01.330.127 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.134 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.330.135 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.135 I 
 increably, defying all who dared oppose her.

Who is this person?

**Answer:** Cleopatra.

Cleopatra was a powerful and successful queen of

0.14.833.882 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.30 tokens per second)
0.14.833.887 I llama_perf_context_print:        load time =    1326.95 ms
0.14.833.889 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.833.891 I llama_perf_context_print:        eval time =   13422.03 ms /    32 runs   (  419.44 ms per token,     2.38 tokens per second)
0.14.833.893 I llama_perf_context_print:       total time =   13504.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 3927 (cefd4acb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.002.755 I main: load the model and apply lora adapter, if any
0.00.024.668 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.866 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.949 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.960 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.962 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.966 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.967 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.968 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.972 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.973 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.973 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.980 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.981 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.982 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.983 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.984 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.476 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.680 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.282 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.290 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.291 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.293 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.293 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.294 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.296 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.299 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.300 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.301 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.302 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.303 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.311 I llama_model_loader: - type  f32:   37 tensors
0.00.269.315 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.896 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.052 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.071 I llm_load_vocab: special tokens cache size = 5
0.00.605.032 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.099 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.100 I llm_load_print_meta: arch             = gemma
0.00.605.100 I llm_load_print_meta: vocab type       = SPM
0.00.605.101 I llm_load_print_meta: n_vocab          = 256000
0.00.605.103 I llm_load_print_meta: n_merges         = 0
0.00.605.104 I llm_load_print_meta: vocab_only       = 0
0.00.605.104 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.105 I llm_load_print_meta: n_embd           = 2048
0.00.605.105 I llm_load_print_meta: n_layer          = 18
0.00.605.168 I llm_load_print_meta: n_head           = 8
0.00.605.175 I llm_load_print_meta: n_head_kv        = 1
0.00.605.176 I llm_load_print_meta: n_rot            = 256
0.00.605.177 I llm_load_print_meta: n_swa            = 0
0.00.605.177 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.177 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.182 I llm_load_print_meta: n_gqa            = 8
0.00.605.187 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.192 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.194 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.196 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.196 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.205 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.206 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.211 I llm_load_print_meta: n_ff             = 16384
0.00.605.211 I llm_load_print_meta: n_expert         = 0
0.00.605.223 I llm_load_print_meta: n_expert_used    = 0
0.00.605.224 I llm_load_print_meta: causal attn      = 1
0.00.605.224 I llm_load_print_meta: pooling type     = 0
0.00.605.230 I llm_load_print_meta: rope type        = 2
0.00.605.231 I llm_load_print_meta: rope scaling     = linear
0.00.605.233 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.233 I llm_load_print_meta: freq_scale_train = 1
0.00.605.234 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.234 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.234 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.235 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.235 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.244 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.245 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.246 I llm_load_print_meta: model type       = 2B
0.00.605.247 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.248 I llm_load_print_meta: model params     = 2.51 B
0.00.605.249 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.252 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.253 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.254 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.254 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.262 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.263 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.263 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.270 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.271 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.271 I llm_load_print_meta: max token length = 93
0.00.605.431 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.676.447 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.676.457 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.682.115 I llama_new_context_with_model: n_ctx      = 8192
0.00.682.122 I llama_new_context_with_model: n_batch    = 2048
0.00.682.135 I llama_new_context_with_model: n_ubatch   = 512
0.00.682.136 I llama_new_context_with_model: flash_attn = 0
0.00.682.139 I llama_new_context_with_model: freq_base  = 10000.0
0.00.682.140 I llama_new_context_with_model: freq_scale = 1
0.00.711.330 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.711.372 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.711.488 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.712.883 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.889 I llama_new_context_with_model: graph nodes  = 601
0.00.712.890 I llama_new_context_with_model: graph splits = 1
0.00.712.906 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.329.481 I main: llama threadpool init, n_threads = 4
0.01.329.491 I 
0.01.329.597 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.329.602 I 
0.01.329.765 I sampler seed: 3173287772
0.01.329.775 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.329.781 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.329.783 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.329.783 I 
 increasively.

I am not sure where to begin. Can you give me some guidance?

To begin, you need to identify the specific goal of your

0.14.889.220 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.02 tokens per second)
0.14.889.227 I llama_perf_context_print:        load time =    1326.64 ms
0.14.889.229 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.889.231 I llama_perf_context_print:        eval time =   13477.61 ms /    32 runs   (  421.18 ms per token,     2.37 tokens per second)
0.14.889.233 I llama_perf_context_print:       total time =   13559.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.431s
user	3m49.760s
sys	0m9.359s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3927 (cefd4acb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199475.27 ms
main:    total time = 199475.27 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 3927 (cefd4acb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.024.737 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.932 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.015 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.026 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.027 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.031 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.032 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.034 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.058 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.078 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.083 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.093 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.098 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.100 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.101 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.103 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.443 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.901 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.530 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.538 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.540 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.541 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.542 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.543 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.545 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.549 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.550 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.551 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.552 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.553 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.562 I llama_model_loader: - type  f32:   37 tensors
0.00.270.566 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.567 I llama_model_loader: - type q6_K:   19 tensors
0.00.432.697 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.945 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.486.958 I llm_load_vocab: special tokens cache size = 5
0.00.581.792 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.581.858 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.581.862 I llm_load_print_meta: arch             = gemma
0.00.581.863 I llm_load_print_meta: vocab type       = SPM
0.00.581.864 I llm_load_print_meta: n_vocab          = 256000
0.00.581.866 I llm_load_print_meta: n_merges         = 0
0.00.581.867 I llm_load_print_meta: vocab_only       = 0
0.00.581.867 I llm_load_print_meta: n_ctx_train      = 8192
0.00.581.868 I llm_load_print_meta: n_embd           = 2048
0.00.581.868 I llm_load_print_meta: n_layer          = 18
0.00.581.931 I llm_load_print_meta: n_head           = 8
0.00.581.942 I llm_load_print_meta: n_head_kv        = 1
0.00.581.943 I llm_load_print_meta: n_rot            = 256
0.00.581.944 I llm_load_print_meta: n_swa            = 0
0.00.581.944 I llm_load_print_meta: n_embd_head_k    = 256
0.00.581.944 I llm_load_print_meta: n_embd_head_v    = 256
0.00.581.949 I llm_load_print_meta: n_gqa            = 8
0.00.581.954 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.581.959 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.581.963 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.581.964 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.581.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.581.965 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.581.965 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.581.970 I llm_load_print_meta: n_ff             = 16384
0.00.581.971 I llm_load_print_meta: n_expert         = 0
0.00.581.971 I llm_load_print_meta: n_expert_used    = 0
0.00.581.971 I llm_load_print_meta: causal attn      = 1
0.00.581.972 I llm_load_print_meta: pooling type     = 0
0.00.581.972 I llm_load_print_meta: rope type        = 2
0.00.581.972 I llm_load_print_meta: rope scaling     = linear
0.00.581.974 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.581.974 I llm_load_print_meta: freq_scale_train = 1
0.00.581.975 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.581.976 I llm_load_print_meta: rope_finetuned   = unknown
0.00.581.976 I llm_load_print_meta: ssm_d_conv       = 0
0.00.581.977 I llm_load_print_meta: ssm_d_inner      = 0
0.00.581.977 I llm_load_print_meta: ssm_d_state      = 0
0.00.581.977 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.581.978 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.581.979 I llm_load_print_meta: model type       = 2B
0.00.581.979 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.581.980 I llm_load_print_meta: model params     = 2.51 B
0.00.581.981 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.581.981 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.581.984 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.581.985 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.581.985 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.581.986 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.581.986 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.581.987 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.581.992 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.581.993 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.581.993 I llm_load_print_meta: max token length = 93
0.00.582.156 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.642.531 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.642.539 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.642.540 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.642.541 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.642.541 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.642.542 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.648.131 I llama_new_context_with_model: n_ctx      = 8192
0.00.648.139 I llama_new_context_with_model: n_batch    = 2048
0.00.648.139 I llama_new_context_with_model: n_ubatch   = 512
0.00.648.140 I llama_new_context_with_model: flash_attn = 0
0.00.648.142 I llama_new_context_with_model: freq_base  = 10000.0
0.00.648.143 I llama_new_context_with_model: freq_scale = 1
0.00.677.018 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.677.068 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.677.183 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.678.603 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.678.610 I llama_new_context_with_model: graph nodes  = 601
0.00.678.610 I llama_new_context_with_model: graph splits = 1
0.00.678.625 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.257.191 I main: llama threadpool init, n_threads = 4
0.01.257.203 I 
0.01.257.310 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.257.314 I 
0.01.257.479 I sampler seed: 580509361
0.01.257.490 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.257.496 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.257.497 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.257.498 I 
 squaRED!

I'm so sorry, but I can't answer that question. My purpose is to help people, and that includes protecting people from

0.12.128.591 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.69 tokens per second)
0.12.128.595 I llama_perf_context_print:        load time =    1254.33 ms
0.12.128.596 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.128.598 I llama_perf_context_print:        eval time =   10787.42 ms /    32 runs   (  337.11 ms per token,     2.97 tokens per second)
0.12.128.609 I llama_perf_context_print:       total time =   10871.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3927 (cefd4acb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199378.33 ms
main:    total time = 199378.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.620 I build: 3927 (cefd4acb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.026.873 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.965 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.979 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.981 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.985 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.986 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.987 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.988 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.989 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.991 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.996 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.998 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.998 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.999 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.027.001 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.281 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.813 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.417 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.423 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.424 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.425 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.426 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.427 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.428 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.432 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.433 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.440 I llama_model_loader: - type  f32:   37 tensors
0.00.272.444 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.445 I llama_model_loader: - type q6_K:   19 tensors
0.00.450.774 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.224 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.251 I llm_load_vocab: special tokens cache size = 5
0.00.610.865 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.936 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.937 I llm_load_print_meta: arch             = gemma
0.00.610.937 I llm_load_print_meta: vocab type       = SPM
0.00.610.938 I llm_load_print_meta: n_vocab          = 256000
0.00.610.941 I llm_load_print_meta: n_merges         = 0
0.00.610.941 I llm_load_print_meta: vocab_only       = 0
0.00.610.942 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.942 I llm_load_print_meta: n_embd           = 2048
0.00.610.942 I llm_load_print_meta: n_layer          = 18
0.00.611.009 I llm_load_print_meta: n_head           = 8
0.00.611.016 I llm_load_print_meta: n_head_kv        = 1
0.00.611.016 I llm_load_print_meta: n_rot            = 256
0.00.611.017 I llm_load_print_meta: n_swa            = 0
0.00.611.017 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.017 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.022 I llm_load_print_meta: n_gqa            = 8
0.00.611.027 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.031 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.033 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.034 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.035 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.035 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.037 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.042 I llm_load_print_meta: n_ff             = 16384
0.00.611.042 I llm_load_print_meta: n_expert         = 0
0.00.611.043 I llm_load_print_meta: n_expert_used    = 0
0.00.611.043 I llm_load_print_meta: causal attn      = 1
0.00.611.043 I llm_load_print_meta: pooling type     = 0
0.00.611.043 I llm_load_print_meta: rope type        = 2
0.00.611.055 I llm_load_print_meta: rope scaling     = linear
0.00.611.066 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.067 I llm_load_print_meta: freq_scale_train = 1
0.00.611.068 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.068 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.069 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.069 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.069 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.078 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.078 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.079 I llm_load_print_meta: model type       = 2B
0.00.611.081 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.081 I llm_load_print_meta: model params     = 2.51 B
0.00.611.082 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.082 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.083 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.083 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.084 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.084 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.085 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.085 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.091 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.093 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.094 I llm_load_print_meta: max token length = 93
0.00.611.265 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.669.766 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.675.336 I llama_new_context_with_model: n_ctx      = 8192
0.00.675.342 I llama_new_context_with_model: n_batch    = 2048
0.00.675.343 I llama_new_context_with_model: n_ubatch   = 512
0.00.675.343 I llama_new_context_with_model: flash_attn = 0
0.00.675.345 I llama_new_context_with_model: freq_base  = 10000.0
0.00.675.346 I llama_new_context_with_model: freq_scale = 1
0.00.704.482 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.529 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.642 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.706.038 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.044 I llama_new_context_with_model: graph nodes  = 601
0.00.706.044 I llama_new_context_with_model: graph splits = 1
0.00.706.061 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.808 I main: llama threadpool init, n_threads = 4
0.01.282.818 I 
0.01.282.927 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.282.931 I 
0.01.283.101 I sampler seed: 1168997214
0.01.283.111 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.283.127 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.283.129 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.283.129 I 
 increasities with his assistant, Chloe, who is suffering from a severe case of hypochondria.

**Analysis:**

The scenario presents a complex ethical dilemma

0.12.247.845 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.64 tokens per second)
0.12.247.848 I llama_perf_context_print:        load time =    1279.93 ms
0.12.247.849 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.247.865 I llama_perf_context_print:        eval time =   10883.13 ms /    32 runs   (  340.10 ms per token,     2.94 tokens per second)
0.12.247.867 I llama_perf_context_print:       total time =   10965.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.112s
user	50m15.038s
sys	0m6.401s
