+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.581 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.806 I main: llama backend init
0.00.000.937 I main: load the model and apply lora adapter, if any
0.00.021.345 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.357 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.365 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.374 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.378 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.381 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.382 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.383 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.383 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.384 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.384 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.389 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.390 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.390 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.391 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.935 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.559 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.420 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.426 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.427 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.427 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.428 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.429 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.430 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.432 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.433 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.434 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.434 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.435 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.438 I llama_model_loader: - type  f32:   37 tensors
0.00.131.439 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.332 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.635 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.298 I llm_load_vocab: special tokens cache size = 5
0.00.281.307 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.323 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.323 I llm_load_print_meta: arch             = gemma
0.00.281.324 I llm_load_print_meta: vocab type       = SPM
0.00.281.325 I llm_load_print_meta: n_vocab          = 256000
0.00.281.325 I llm_load_print_meta: n_merges         = 0
0.00.281.326 I llm_load_print_meta: vocab_only       = 0
0.00.281.326 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.326 I llm_load_print_meta: n_embd           = 2048
0.00.281.327 I llm_load_print_meta: n_layer          = 18
0.00.281.339 I llm_load_print_meta: n_head           = 8
0.00.281.340 I llm_load_print_meta: n_head_kv        = 1
0.00.281.340 I llm_load_print_meta: n_rot            = 256
0.00.281.341 I llm_load_print_meta: n_swa            = 0
0.00.281.341 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.341 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.342 I llm_load_print_meta: n_gqa            = 8
0.00.281.344 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.344 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.345 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.347 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.347 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.348 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.349 I llm_load_print_meta: n_ff             = 16384
0.00.281.349 I llm_load_print_meta: n_expert         = 0
0.00.281.350 I llm_load_print_meta: n_expert_used    = 0
0.00.281.350 I llm_load_print_meta: causal attn      = 1
0.00.281.350 I llm_load_print_meta: pooling type     = 0
0.00.281.351 I llm_load_print_meta: rope type        = 2
0.00.281.351 I llm_load_print_meta: rope scaling     = linear
0.00.281.353 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.353 I llm_load_print_meta: freq_scale_train = 1
0.00.281.354 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.354 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.354 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.354 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.355 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.355 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.355 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.356 I llm_load_print_meta: model type       = 2B
0.00.281.356 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.357 I llm_load_print_meta: model params     = 2.51 B
0.00.281.358 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.358 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.359 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.359 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.359 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.360 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.360 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.360 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.361 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.361 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.361 I llm_load_print_meta: max token length = 93
0.00.383.525 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.383.533 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.383.534 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.383.535 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.383.535 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.383.536 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.388.692 I llama_new_context_with_model: n_seq_max     = 1
0.00.388.698 I llama_new_context_with_model: n_ctx         = 4096
0.00.388.698 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.388.699 I llama_new_context_with_model: n_batch       = 2048
0.00.388.699 I llama_new_context_with_model: n_ubatch      = 512
0.00.388.700 I llama_new_context_with_model: flash_attn    = 0
0.00.388.703 I llama_new_context_with_model: freq_base     = 10000.0
0.00.388.704 I llama_new_context_with_model: freq_scale    = 1
0.00.388.704 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.404.321 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.404.337 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.429 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.676 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.683 I llama_new_context_with_model: graph nodes  = 601
0.00.405.683 I llama_new_context_with_model: graph splits = 1
0.00.405.685 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.055 I main: llama threadpool init, n_threads = 4
0.00.491.070 I 
0.00.491.145 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.148 I 
0.00.491.189 I sampler seed: 1539438042
0.00.491.200 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.203 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.205 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.205 I 
 increasities in a relationship and how to navigate them.

**1. Understanding the Causes of Escalating Conflicts**

* Identify common triggers and areas of disagreement

0.02.747.366 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6856.43 tokens per second)
0.02.747.369 I llama_perf_context_print:        load time =     490.09 ms
0.02.747.370 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.747.372 I llama_perf_context_print:        eval time =    2237.50 ms /    32 runs   (   69.92 ms per token,    14.30 tokens per second)
0.02.747.373 I llama_perf_context_print:       total time =    2256.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.526 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.705 I main: llama backend init
0.00.000.836 I main: load the model and apply lora adapter, if any
0.00.020.895 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.911 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.921 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.925 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.928 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.929 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.929 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.930 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.930 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.931 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.935 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.936 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.936 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.937 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.938 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.133 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.504 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.289 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.295 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.296 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.296 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.297 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.298 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.298 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.301 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.301 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.302 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.302 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.303 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.306 I llama_model_loader: - type  f32:   37 tensors
0.00.130.306 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.289 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.352 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.236.810 I llm_load_vocab: special tokens cache size = 5
0.00.257.477 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.257.493 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.257.493 I llm_load_print_meta: arch             = gemma
0.00.257.494 I llm_load_print_meta: vocab type       = SPM
0.00.257.494 I llm_load_print_meta: n_vocab          = 256000
0.00.257.495 I llm_load_print_meta: n_merges         = 0
0.00.257.495 I llm_load_print_meta: vocab_only       = 0
0.00.257.496 I llm_load_print_meta: n_ctx_train      = 8192
0.00.257.496 I llm_load_print_meta: n_embd           = 2048
0.00.257.496 I llm_load_print_meta: n_layer          = 18
0.00.257.508 I llm_load_print_meta: n_head           = 8
0.00.257.509 I llm_load_print_meta: n_head_kv        = 1
0.00.257.509 I llm_load_print_meta: n_rot            = 256
0.00.257.510 I llm_load_print_meta: n_swa            = 0
0.00.257.510 I llm_load_print_meta: n_embd_head_k    = 256
0.00.257.510 I llm_load_print_meta: n_embd_head_v    = 256
0.00.257.511 I llm_load_print_meta: n_gqa            = 8
0.00.257.512 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.257.513 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.257.514 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.257.515 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.257.516 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.257.516 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.257.517 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.257.517 I llm_load_print_meta: n_ff             = 16384
0.00.257.518 I llm_load_print_meta: n_expert         = 0
0.00.257.518 I llm_load_print_meta: n_expert_used    = 0
0.00.257.518 I llm_load_print_meta: causal attn      = 1
0.00.257.519 I llm_load_print_meta: pooling type     = 0
0.00.257.519 I llm_load_print_meta: rope type        = 2
0.00.257.520 I llm_load_print_meta: rope scaling     = linear
0.00.257.521 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.257.522 I llm_load_print_meta: freq_scale_train = 1
0.00.257.522 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.257.523 I llm_load_print_meta: rope_finetuned   = unknown
0.00.257.523 I llm_load_print_meta: ssm_d_conv       = 0
0.00.257.523 I llm_load_print_meta: ssm_d_inner      = 0
0.00.257.523 I llm_load_print_meta: ssm_d_state      = 0
0.00.257.523 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.257.524 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.257.524 I llm_load_print_meta: model type       = 2B
0.00.257.525 I llm_load_print_meta: model ftype      = Q8_0
0.00.257.526 I llm_load_print_meta: model params     = 2.51 B
0.00.257.526 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.257.527 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.257.527 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.257.528 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.257.528 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.257.528 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.257.529 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.257.529 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.257.529 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.257.530 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.257.530 I llm_load_print_meta: max token length = 93
0.00.354.107 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.359.337 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.345 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.345 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.346 I llama_new_context_with_model: n_batch       = 2048
0.00.359.346 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.347 I llama_new_context_with_model: flash_attn    = 0
0.00.359.351 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.352 I llama_new_context_with_model: freq_scale    = 1
0.00.359.353 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.726 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.742 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.837 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.079 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.084 I llama_new_context_with_model: graph nodes  = 601
0.00.377.085 I llama_new_context_with_model: graph splits = 1
0.00.377.086 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.548 I main: llama threadpool init, n_threads = 4
0.00.460.561 I 
0.00.460.638 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.641 I 
0.00.460.689 I sampler seed: 2609040983
0.00.460.702 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.705 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.706 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.706 I 
 increably.

I'm sorry, but I cannot generate responses that are sexually suggestive or contain inappropriate content. [end of text]


0.02.113.361 I llama_perf_sampler_print:    sampling time =       3.53 ms /    25 runs   (    0.14 ms per token,  7076.14 tokens per second)
0.02.113.363 I llama_perf_context_print:        load time =     459.69 ms
0.02.113.364 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.113.366 I llama_perf_context_print:        eval time =    1638.86 ms /    24 runs   (   68.29 ms per token,    14.64 tokens per second)
0.02.113.366 I llama_perf_context_print:       total time =    1652.82 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.567 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.904 I main: load the model and apply lora adapter, if any
0.00.021.357 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.368 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.376 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.381 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.382 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.386 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.387 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.388 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.388 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.389 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.389 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.393 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.394 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.395 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.396 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.137 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.170 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.645 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.652 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.653 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.654 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.655 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.656 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.661 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.661 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.662 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.663 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.137.664 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.668 I llama_model_loader: - type  f32:   37 tensors
0.00.137.669 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.299 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.890 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.494 I llm_load_vocab: special tokens cache size = 5
0.00.291.798 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.815 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.815 I llm_load_print_meta: arch             = gemma
0.00.291.816 I llm_load_print_meta: vocab type       = SPM
0.00.291.817 I llm_load_print_meta: n_vocab          = 256000
0.00.291.817 I llm_load_print_meta: n_merges         = 0
0.00.291.818 I llm_load_print_meta: vocab_only       = 0
0.00.291.818 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.818 I llm_load_print_meta: n_embd           = 2048
0.00.291.818 I llm_load_print_meta: n_layer          = 18
0.00.291.830 I llm_load_print_meta: n_head           = 8
0.00.291.831 I llm_load_print_meta: n_head_kv        = 1
0.00.291.832 I llm_load_print_meta: n_rot            = 256
0.00.291.832 I llm_load_print_meta: n_swa            = 0
0.00.291.832 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.833 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.834 I llm_load_print_meta: n_gqa            = 8
0.00.291.835 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.836 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.836 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.838 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.838 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.838 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.839 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.840 I llm_load_print_meta: n_ff             = 16384
0.00.291.840 I llm_load_print_meta: n_expert         = 0
0.00.291.840 I llm_load_print_meta: n_expert_used    = 0
0.00.291.841 I llm_load_print_meta: causal attn      = 1
0.00.291.841 I llm_load_print_meta: pooling type     = 0
0.00.291.842 I llm_load_print_meta: rope type        = 2
0.00.291.842 I llm_load_print_meta: rope scaling     = linear
0.00.291.843 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.844 I llm_load_print_meta: freq_scale_train = 1
0.00.291.844 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.845 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.845 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.845 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.845 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.845 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.846 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.846 I llm_load_print_meta: model type       = 2B
0.00.291.847 I llm_load_print_meta: model ftype      = Q8_0
0.00.291.847 I llm_load_print_meta: model params     = 2.51 B
0.00.291.848 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.849 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.849 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.849 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.850 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.850 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.850 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.851 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.851 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.851 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.852 I llm_load_print_meta: max token length = 93
0.00.384.962 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.384.968 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.384.969 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.384.970 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.384.970 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.384.971 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.390.190 I llama_new_context_with_model: n_seq_max     = 1
0.00.390.197 I llama_new_context_with_model: n_ctx         = 4096
0.00.390.197 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.390.197 I llama_new_context_with_model: n_batch       = 2048
0.00.390.198 I llama_new_context_with_model: n_ubatch      = 512
0.00.390.198 I llama_new_context_with_model: flash_attn    = 0
0.00.390.201 I llama_new_context_with_model: freq_base     = 10000.0
0.00.390.202 I llama_new_context_with_model: freq_scale    = 1
0.00.390.203 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.515 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.530 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.620 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.869 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.875 I llama_new_context_with_model: graph nodes  = 601
0.00.406.876 I llama_new_context_with_model: graph splits = 1
0.00.406.877 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.293 I main: llama threadpool init, n_threads = 4
0.00.491.307 I 
0.00.491.382 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.385 I 
0.00.491.426 I sampler seed: 2779840376
0.00.491.438 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.440 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.441 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.441 I 
 maneuvled?

I am unable to access the context of the question to determine the correct spelling of the word. Therefore, I am unable to provide you

0.02.679.545 I llama_perf_sampler_print:    sampling time =       5.68 ms /    33 runs   (    0.17 ms per token,  5809.86 tokens per second)
0.02.679.547 I llama_perf_context_print:        load time =     490.37 ms
0.02.679.549 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.679.550 I llama_perf_context_print:        eval time =    2168.39 ms /    32 runs   (   67.76 ms per token,    14.76 tokens per second)
0.02.679.551 I llama_perf_context_print:       total time =    2188.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.531 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.900 I main: load the model and apply lora adapter, if any
0.00.021.058 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.067 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.074 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.078 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.080 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.085 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.085 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.086 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.087 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.088 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.089 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.094 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.095 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.096 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.096 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.097 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.613 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.105 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.953 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.959 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.959 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.960 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.961 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.961 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.962 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.964 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.965 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.965 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.965 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.966 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.970 I llama_model_loader: - type  f32:   37 tensors
0.00.130.971 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.998 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.962 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.444 I llm_load_vocab: special tokens cache size = 5
0.00.258.227 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.243 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.244 I llm_load_print_meta: arch             = gemma
0.00.258.244 I llm_load_print_meta: vocab type       = SPM
0.00.258.245 I llm_load_print_meta: n_vocab          = 256000
0.00.258.245 I llm_load_print_meta: n_merges         = 0
0.00.258.246 I llm_load_print_meta: vocab_only       = 0
0.00.258.246 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.246 I llm_load_print_meta: n_embd           = 2048
0.00.258.246 I llm_load_print_meta: n_layer          = 18
0.00.258.258 I llm_load_print_meta: n_head           = 8
0.00.258.259 I llm_load_print_meta: n_head_kv        = 1
0.00.258.260 I llm_load_print_meta: n_rot            = 256
0.00.258.260 I llm_load_print_meta: n_swa            = 0
0.00.258.260 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.261 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.261 I llm_load_print_meta: n_gqa            = 8
0.00.258.263 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.264 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.264 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.266 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.266 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.266 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.267 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.268 I llm_load_print_meta: n_ff             = 16384
0.00.258.268 I llm_load_print_meta: n_expert         = 0
0.00.258.268 I llm_load_print_meta: n_expert_used    = 0
0.00.258.269 I llm_load_print_meta: causal attn      = 1
0.00.258.269 I llm_load_print_meta: pooling type     = 0
0.00.258.269 I llm_load_print_meta: rope type        = 2
0.00.258.270 I llm_load_print_meta: rope scaling     = linear
0.00.258.271 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.272 I llm_load_print_meta: freq_scale_train = 1
0.00.258.272 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.272 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.272 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.273 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.273 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.273 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.273 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.274 I llm_load_print_meta: model type       = 2B
0.00.258.275 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.275 I llm_load_print_meta: model params     = 2.51 B
0.00.258.276 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.277 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.277 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.277 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.278 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.278 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.278 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.279 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.279 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.279 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.280 I llm_load_print_meta: max token length = 93
0.00.329.449 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.329.458 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.334.759 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.766 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.766 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.767 I llama_new_context_with_model: n_batch       = 2048
0.00.334.768 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.768 I llama_new_context_with_model: flash_attn    = 0
0.00.334.771 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.771 I llama_new_context_with_model: freq_scale    = 1
0.00.334.772 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.174 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.190 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.288 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.535 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.540 I llama_new_context_with_model: graph nodes  = 601
0.00.351.540 I llama_new_context_with_model: graph splits = 1
0.00.351.541 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.711 I main: llama threadpool init, n_threads = 4
0.00.435.723 I 
0.00.435.814 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.435.817 I 
0.00.435.864 I sampler seed: 1230634444
0.00.435.876 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.435.879 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.435.881 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.435.881 I 
 increasively.

I'm not sure what you mean. Can you please explain? [end of text]


0.01.810.545 I llama_perf_sampler_print:    sampling time =       3.04 ms /    20 runs   (    0.15 ms per token,  6578.95 tokens per second)
0.01.810.548 I llama_perf_context_print:        load time =     434.79 ms
0.01.810.549 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.810.550 I llama_perf_context_print:        eval time =    1362.74 ms /    19 runs   (   71.72 ms per token,    13.94 tokens per second)
0.01.810.551 I llama_perf_context_print:       total time =    1374.84 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.827s
user	0m32.708s
sys	0m9.413s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4023 (ce027adf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32091.19 ms
main:    total time = 32091.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.881 I main: load the model and apply lora adapter, if any
0.00.021.668 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.676 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.685 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.690 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.691 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.695 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.698 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.699 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.699 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.700 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.700 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.704 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.704 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.705 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.705 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.706 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.012 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.940 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.790 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.796 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.796 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.797 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.798 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.799 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.799 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.802 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.802 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.803 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.804 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.805 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.808 I llama_model_loader: - type  f32:   37 tensors
0.00.131.809 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.809 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.661 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.774 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.308 I llm_load_vocab: special tokens cache size = 5
0.00.264.213 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.230 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.231 I llm_load_print_meta: arch             = gemma
0.00.264.231 I llm_load_print_meta: vocab type       = SPM
0.00.264.232 I llm_load_print_meta: n_vocab          = 256000
0.00.264.232 I llm_load_print_meta: n_merges         = 0
0.00.264.233 I llm_load_print_meta: vocab_only       = 0
0.00.264.233 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.233 I llm_load_print_meta: n_embd           = 2048
0.00.264.234 I llm_load_print_meta: n_layer          = 18
0.00.264.245 I llm_load_print_meta: n_head           = 8
0.00.264.246 I llm_load_print_meta: n_head_kv        = 1
0.00.264.247 I llm_load_print_meta: n_rot            = 256
0.00.264.247 I llm_load_print_meta: n_swa            = 0
0.00.264.247 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.247 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.248 I llm_load_print_meta: n_gqa            = 8
0.00.264.249 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.250 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.251 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.253 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.253 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.253 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.253 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.254 I llm_load_print_meta: n_ff             = 16384
0.00.264.255 I llm_load_print_meta: n_expert         = 0
0.00.264.255 I llm_load_print_meta: n_expert_used    = 0
0.00.264.255 I llm_load_print_meta: causal attn      = 1
0.00.264.256 I llm_load_print_meta: pooling type     = 0
0.00.264.256 I llm_load_print_meta: rope type        = 2
0.00.264.256 I llm_load_print_meta: rope scaling     = linear
0.00.264.258 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.259 I llm_load_print_meta: freq_scale_train = 1
0.00.264.260 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.260 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.260 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.260 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.261 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.261 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.261 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.262 I llm_load_print_meta: model type       = 2B
0.00.264.262 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.263 I llm_load_print_meta: model params     = 2.51 B
0.00.264.264 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.265 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.265 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.266 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.267 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.267 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.267 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.268 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.268 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.269 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.269 I llm_load_print_meta: max token length = 93
0.00.326.156 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.326.161 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.326.161 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.326.162 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.326.163 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.326.163 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.386 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.392 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.392 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.393 I llama_new_context_with_model: n_batch       = 2048
0.00.331.393 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.394 I llama_new_context_with_model: flash_attn    = 0
0.00.331.396 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.397 I llama_new_context_with_model: freq_scale    = 1
0.00.331.398 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.373 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.391 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.481 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.691 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.697 I llama_new_context_with_model: graph nodes  = 601
0.00.347.697 I llama_new_context_with_model: graph splits = 1
0.00.347.699 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.443 I main: llama threadpool init, n_threads = 4
0.00.425.457 I 
0.00.425.535 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.425.538 I 
0.00.425.583 I sampler seed: 2260408637
0.00.425.593 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.597 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.598 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.598 I 
 maneuvled text. 

I cannot answer this question as it is currently written. The question contains offensive and discriminatory language that is unacceptable and should not be

0.02.078.841 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6918.24 tokens per second)
0.02.078.843 I llama_perf_context_print:        load time =     424.54 ms
0.02.078.844 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.078.845 I llama_perf_context_print:        eval time =    1634.43 ms /    32 runs   (   51.08 ms per token,    19.58 tokens per second)
0.02.078.846 I llama_perf_context_print:       total time =    1653.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4023 (ce027adf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32156.65 ms
main:    total time = 32156.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.547 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.885 I main: load the model and apply lora adapter, if any
0.00.021.822 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.838 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.844 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.845 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.849 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.850 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.850 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.851 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.852 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.853 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.857 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.858 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.858 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.859 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.859 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.138 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.092 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.955 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.961 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.962 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.963 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.963 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.964 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.965 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.967 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.968 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.971 I llama_model_loader: - type  f32:   37 tensors
0.00.131.973 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.973 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.799 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.477 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.042 I llm_load_vocab: special tokens cache size = 5
0.00.265.834 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.849 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.850 I llm_load_print_meta: arch             = gemma
0.00.265.850 I llm_load_print_meta: vocab type       = SPM
0.00.265.851 I llm_load_print_meta: n_vocab          = 256000
0.00.265.851 I llm_load_print_meta: n_merges         = 0
0.00.265.852 I llm_load_print_meta: vocab_only       = 0
0.00.265.852 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.852 I llm_load_print_meta: n_embd           = 2048
0.00.265.852 I llm_load_print_meta: n_layer          = 18
0.00.265.862 I llm_load_print_meta: n_head           = 8
0.00.265.863 I llm_load_print_meta: n_head_kv        = 1
0.00.265.863 I llm_load_print_meta: n_rot            = 256
0.00.265.864 I llm_load_print_meta: n_swa            = 0
0.00.265.864 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.864 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.865 I llm_load_print_meta: n_gqa            = 8
0.00.265.866 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.867 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.868 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.870 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.870 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.870 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.871 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.872 I llm_load_print_meta: n_ff             = 16384
0.00.265.872 I llm_load_print_meta: n_expert         = 0
0.00.265.872 I llm_load_print_meta: n_expert_used    = 0
0.00.265.872 I llm_load_print_meta: causal attn      = 1
0.00.265.873 I llm_load_print_meta: pooling type     = 0
0.00.265.873 I llm_load_print_meta: rope type        = 2
0.00.265.874 I llm_load_print_meta: rope scaling     = linear
0.00.265.875 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.876 I llm_load_print_meta: freq_scale_train = 1
0.00.265.876 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.877 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.877 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.877 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.877 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.878 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.878 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.878 I llm_load_print_meta: model type       = 2B
0.00.265.879 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.879 I llm_load_print_meta: model params     = 2.51 B
0.00.265.880 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.880 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.881 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.881 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.882 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.882 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.882 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.882 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.883 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.883 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.884 I llm_load_print_meta: max token length = 93
0.00.325.224 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.331 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.337 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.337 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.338 I llama_new_context_with_model: n_batch       = 2048
0.00.330.338 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.339 I llama_new_context_with_model: flash_attn    = 0
0.00.330.341 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.341 I llama_new_context_with_model: freq_scale    = 1
0.00.330.342 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.873 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.887 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.974 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.209 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.216 I llama_new_context_with_model: graph nodes  = 601
0.00.347.217 I llama_new_context_with_model: graph splits = 1
0.00.347.218 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.973 I main: llama threadpool init, n_threads = 4
0.00.421.986 I 
0.00.422.061 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.422.064 I 
0.00.422.106 I sampler seed: 2850477192
0.00.422.117 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.126 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.129 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.130 I 
 increasities. [end of text]


0.00.625.979 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8250.83 tokens per second)
0.00.625.983 I llama_perf_context_print:        load time =     421.06 ms
0.00.625.984 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.625.986 I llama_perf_context_print:        eval time =     200.80 ms /     4 runs   (   50.20 ms per token,    19.92 tokens per second)
0.00.625.987 I llama_perf_context_print:       total time =     204.02 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m9.754s
user	8m9.323s
sys	0m6.794s
