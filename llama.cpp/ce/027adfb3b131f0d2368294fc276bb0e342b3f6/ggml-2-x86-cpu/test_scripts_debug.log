+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.001.112 I main: load the model and apply lora adapter, if any
0.00.023.505 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.518 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.611 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.623 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.625 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.629 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.630 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.631 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.633 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.634 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.642 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.650 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.653 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.654 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.655 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.657 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.984 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.674 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.181 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.192 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.193 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.194 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.195 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.196 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.207 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.218 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.220 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.221 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.227 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.229 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.237 I llama_model_loader: - type  f32:   37 tensors
0.00.268.240 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.096 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.970 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.910 I llm_load_vocab: special tokens cache size = 5
0.00.611.364 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.433 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.437 I llm_load_print_meta: arch             = gemma
0.00.611.438 I llm_load_print_meta: vocab type       = SPM
0.00.611.439 I llm_load_print_meta: n_vocab          = 256000
0.00.611.442 I llm_load_print_meta: n_merges         = 0
0.00.611.442 I llm_load_print_meta: vocab_only       = 0
0.00.611.443 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.443 I llm_load_print_meta: n_embd           = 2048
0.00.611.443 I llm_load_print_meta: n_layer          = 18
0.00.611.508 I llm_load_print_meta: n_head           = 8
0.00.611.519 I llm_load_print_meta: n_head_kv        = 1
0.00.611.519 I llm_load_print_meta: n_rot            = 256
0.00.611.519 I llm_load_print_meta: n_swa            = 0
0.00.611.520 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.520 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.525 I llm_load_print_meta: n_gqa            = 8
0.00.611.530 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.535 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.536 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.538 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.538 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.539 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.540 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.545 I llm_load_print_meta: n_ff             = 16384
0.00.611.545 I llm_load_print_meta: n_expert         = 0
0.00.611.548 I llm_load_print_meta: n_expert_used    = 0
0.00.611.549 I llm_load_print_meta: causal attn      = 1
0.00.611.549 I llm_load_print_meta: pooling type     = 0
0.00.611.549 I llm_load_print_meta: rope type        = 2
0.00.611.550 I llm_load_print_meta: rope scaling     = linear
0.00.611.551 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.552 I llm_load_print_meta: freq_scale_train = 1
0.00.611.552 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.552 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.553 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.553 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.553 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.553 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.554 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.556 I llm_load_print_meta: model type       = 2B
0.00.611.557 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.557 I llm_load_print_meta: model params     = 2.51 B
0.00.611.574 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.575 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.576 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.576 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.577 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.578 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.578 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.591 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.597 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.599 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.600 I llm_load_print_meta: max token length = 93
0.00.714.987 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.714.995 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.714.996 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.714.996 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.714.997 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.714.997 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.720.858 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.866 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.867 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.867 I llama_new_context_with_model: n_batch       = 2048
0.00.720.867 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.868 I llama_new_context_with_model: flash_attn    = 0
0.00.720.871 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.872 I llama_new_context_with_model: freq_scale    = 1
0.00.720.873 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.737.071 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.737.107 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.230 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.770 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.739.774 I llama_new_context_with_model: graph nodes  = 601
0.00.739.775 I llama_new_context_with_model: graph splits = 1
0.00.739.799 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.962 I main: llama threadpool init, n_threads = 4
0.01.347.975 I 
0.01.348.079 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.083 I 
0.01.348.314 I sampler seed: 249966114
0.01.348.327 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.334 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.337 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.337 I 
 seconde.

**Assistant**

I understand. I will be mindful of using inclusive language and avoid making assumptions about individuals or groups. [end of text]


0.13.576.351 I llama_perf_sampler_print:    sampling time =      44.55 ms /    30 runs   (    1.48 ms per token,   673.46 tokens per second)
0.13.576.373 I llama_perf_context_print:        load time =    1346.75 ms
0.13.576.375 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.576.376 I llama_perf_context_print:        eval time =   12146.83 ms /    29 runs   (  418.86 ms per token,     2.39 tokens per second)
0.13.576.377 I llama_perf_context_print:       total time =   12228.40 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.001.123 I main: load the model and apply lora adapter, if any
0.00.023.694 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.794 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.809 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.811 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.815 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.819 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.820 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.821 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.822 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.823 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.831 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.833 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.834 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.836 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.837 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.221 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.948 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.214 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.222 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.223 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.224 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.225 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.227 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.228 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.232 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.233 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.234 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.235 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.236 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.243 I llama_model_loader: - type  f32:   37 tensors
0.00.269.246 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.157 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.707 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.594 I llm_load_vocab: special tokens cache size = 5
0.00.613.185 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.255 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.259 I llm_load_print_meta: arch             = gemma
0.00.613.260 I llm_load_print_meta: vocab type       = SPM
0.00.613.261 I llm_load_print_meta: n_vocab          = 256000
0.00.613.264 I llm_load_print_meta: n_merges         = 0
0.00.613.264 I llm_load_print_meta: vocab_only       = 0
0.00.613.265 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.265 I llm_load_print_meta: n_embd           = 2048
0.00.613.265 I llm_load_print_meta: n_layer          = 18
0.00.613.327 I llm_load_print_meta: n_head           = 8
0.00.613.338 I llm_load_print_meta: n_head_kv        = 1
0.00.613.339 I llm_load_print_meta: n_rot            = 256
0.00.613.339 I llm_load_print_meta: n_swa            = 0
0.00.613.340 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.340 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.345 I llm_load_print_meta: n_gqa            = 8
0.00.613.351 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.357 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.359 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.361 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.361 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.362 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.363 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.368 I llm_load_print_meta: n_ff             = 16384
0.00.613.370 I llm_load_print_meta: n_expert         = 0
0.00.613.370 I llm_load_print_meta: n_expert_used    = 0
0.00.613.371 I llm_load_print_meta: causal attn      = 1
0.00.613.374 I llm_load_print_meta: pooling type     = 0
0.00.613.375 I llm_load_print_meta: rope type        = 2
0.00.613.375 I llm_load_print_meta: rope scaling     = linear
0.00.613.377 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.377 I llm_load_print_meta: freq_scale_train = 1
0.00.613.378 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.378 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.378 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.379 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.379 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.379 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.379 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.380 I llm_load_print_meta: model type       = 2B
0.00.613.381 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.394 I llm_load_print_meta: model params     = 2.51 B
0.00.613.404 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.405 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.406 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.406 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.407 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.408 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.408 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.409 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.415 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.417 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.417 I llm_load_print_meta: max token length = 93
0.00.713.965 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.719.880 I llama_new_context_with_model: n_seq_max     = 1
0.00.719.888 I llama_new_context_with_model: n_ctx         = 4096
0.00.719.888 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.719.889 I llama_new_context_with_model: n_batch       = 2048
0.00.719.889 I llama_new_context_with_model: n_ubatch      = 512
0.00.719.889 I llama_new_context_with_model: flash_attn    = 0
0.00.719.892 I llama_new_context_with_model: freq_base     = 10000.0
0.00.719.893 I llama_new_context_with_model: freq_scale    = 1
0.00.719.894 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.736.736 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.736.777 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.736.902 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.444 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.739.448 I llama_new_context_with_model: graph nodes  = 601
0.00.739.448 I llama_new_context_with_model: graph splits = 1
0.00.739.471 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.616 I main: llama threadpool init, n_threads = 4
0.01.348.627 I 
0.01.348.733 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.737 I 
0.01.348.965 I sampler seed: 604872981
0.01.348.978 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.984 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.988 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.988 I 
 seconary tasks to the primary task. This will allow for concurrent processing and quicker execution.

**Example:**

* **Primary task:** Download a large file

0.15.060.202 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.34 tokens per second)
0.15.060.205 I llama_perf_context_print:        load time =    1347.39 ms
0.15.060.206 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.060.208 I llama_perf_context_print:        eval time =   13621.22 ms /    32 runs   (  425.66 ms per token,     2.35 tokens per second)
0.15.060.209 I llama_perf_context_print:       total time =   13711.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.001.088 I main: load the model and apply lora adapter, if any
0.00.023.728 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.739 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.829 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.840 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.842 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.846 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.850 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.851 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.852 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.853 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.854 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.860 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.862 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.864 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.865 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.866 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.805 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.193 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.305 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.313 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.314 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.315 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.316 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.318 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.319 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.322 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.323 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.324 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.325 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.327 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.334 I llama_model_loader: - type  f32:   37 tensors
0.00.268.336 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.278 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.412 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.369 I llm_load_vocab: special tokens cache size = 5
0.00.610.469 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.541 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.542 I llm_load_print_meta: arch             = gemma
0.00.610.543 I llm_load_print_meta: vocab type       = SPM
0.00.610.544 I llm_load_print_meta: n_vocab          = 256000
0.00.610.546 I llm_load_print_meta: n_merges         = 0
0.00.610.547 I llm_load_print_meta: vocab_only       = 0
0.00.610.547 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.548 I llm_load_print_meta: n_embd           = 2048
0.00.610.548 I llm_load_print_meta: n_layer          = 18
0.00.610.615 I llm_load_print_meta: n_head           = 8
0.00.610.623 I llm_load_print_meta: n_head_kv        = 1
0.00.610.624 I llm_load_print_meta: n_rot            = 256
0.00.610.625 I llm_load_print_meta: n_swa            = 0
0.00.610.625 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.626 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.630 I llm_load_print_meta: n_gqa            = 8
0.00.610.636 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.641 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.645 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.647 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.648 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.648 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.649 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.654 I llm_load_print_meta: n_ff             = 16384
0.00.610.655 I llm_load_print_meta: n_expert         = 0
0.00.610.655 I llm_load_print_meta: n_expert_used    = 0
0.00.610.659 I llm_load_print_meta: causal attn      = 1
0.00.610.659 I llm_load_print_meta: pooling type     = 0
0.00.610.659 I llm_load_print_meta: rope type        = 2
0.00.610.660 I llm_load_print_meta: rope scaling     = linear
0.00.610.661 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.662 I llm_load_print_meta: freq_scale_train = 1
0.00.610.663 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.663 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.663 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.663 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.664 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.664 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.664 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.665 I llm_load_print_meta: model type       = 2B
0.00.610.667 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.668 I llm_load_print_meta: model params     = 2.51 B
0.00.610.677 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.677 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.678 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.678 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.679 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.679 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.680 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.681 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.687 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.698 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.701 I llm_load_print_meta: max token length = 93
0.00.707.384 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.707.391 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.707.392 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.707.393 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.707.394 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.707.394 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.713.169 I llama_new_context_with_model: n_seq_max     = 1
0.00.713.176 I llama_new_context_with_model: n_ctx         = 4096
0.00.713.177 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.713.177 I llama_new_context_with_model: n_batch       = 2048
0.00.713.177 I llama_new_context_with_model: n_ubatch      = 512
0.00.713.178 I llama_new_context_with_model: flash_attn    = 0
0.00.713.180 I llama_new_context_with_model: freq_base     = 10000.0
0.00.713.181 I llama_new_context_with_model: freq_scale    = 1
0.00.713.182 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.730.567 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.730.607 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.730.740 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.294 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.733.298 I llama_new_context_with_model: graph nodes  = 601
0.00.733.298 I llama_new_context_with_model: graph splits = 1
0.00.733.323 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.051 I main: llama threadpool init, n_threads = 4
0.01.345.063 I 
0.01.345.167 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.171 I 
0.01.345.401 I sampler seed: 548815662
0.01.345.413 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.420 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.424 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.425 I 
 increasities as a way to find common ground in a seemingly intractable conflict.

**Arguments in favor:**

* Can facilitate dialogue and understanding where communication has been

0.14.829.532 I llama_perf_sampler_print:    sampling time =      49.75 ms /    33 runs   (    1.51 ms per token,   663.36 tokens per second)
0.14.829.536 I llama_perf_context_print:        load time =    1343.87 ms
0.14.829.538 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.829.540 I llama_perf_context_print:        eval time =   13392.71 ms /    32 runs   (  418.52 ms per token,     2.39 tokens per second)
0.14.829.541 I llama_perf_context_print:       total time =   13484.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.001.153 I main: load the model and apply lora adapter, if any
0.00.023.473 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.487 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.578 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.590 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.592 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.596 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.600 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.601 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.602 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.604 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.605 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.612 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.613 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.614 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.616 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.617 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.634 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.135 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.546 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.554 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.555 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.556 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.557 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.559 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.560 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.564 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.565 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.566 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.567 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.569 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.576 I llama_model_loader: - type  f32:   37 tensors
0.00.267.578 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.216 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.049 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.980 I llm_load_vocab: special tokens cache size = 5
0.00.599.027 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.094 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.095 I llm_load_print_meta: arch             = gemma
0.00.599.096 I llm_load_print_meta: vocab type       = SPM
0.00.599.097 I llm_load_print_meta: n_vocab          = 256000
0.00.599.099 I llm_load_print_meta: n_merges         = 0
0.00.599.100 I llm_load_print_meta: vocab_only       = 0
0.00.599.100 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.101 I llm_load_print_meta: n_embd           = 2048
0.00.599.101 I llm_load_print_meta: n_layer          = 18
0.00.599.166 I llm_load_print_meta: n_head           = 8
0.00.599.174 I llm_load_print_meta: n_head_kv        = 1
0.00.599.176 I llm_load_print_meta: n_rot            = 256
0.00.599.176 I llm_load_print_meta: n_swa            = 0
0.00.599.176 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.177 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.181 I llm_load_print_meta: n_gqa            = 8
0.00.599.186 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.192 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.194 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.196 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.197 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.197 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.198 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.206 I llm_load_print_meta: n_ff             = 16384
0.00.599.206 I llm_load_print_meta: n_expert         = 0
0.00.599.207 I llm_load_print_meta: n_expert_used    = 0
0.00.599.207 I llm_load_print_meta: causal attn      = 1
0.00.599.218 I llm_load_print_meta: pooling type     = 0
0.00.599.219 I llm_load_print_meta: rope type        = 2
0.00.599.219 I llm_load_print_meta: rope scaling     = linear
0.00.599.220 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.221 I llm_load_print_meta: freq_scale_train = 1
0.00.599.222 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.234 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.235 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.235 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.235 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.235 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.236 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.237 I llm_load_print_meta: model type       = 2B
0.00.599.238 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.239 I llm_load_print_meta: model params     = 2.51 B
0.00.599.249 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.249 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.250 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.258 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.259 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.259 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.260 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.260 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.266 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.268 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.277 I llm_load_print_meta: max token length = 93
0.00.672.370 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.672.379 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.678.181 I llama_new_context_with_model: n_seq_max     = 1
0.00.678.189 I llama_new_context_with_model: n_ctx         = 4096
0.00.678.190 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.678.190 I llama_new_context_with_model: n_batch       = 2048
0.00.678.191 I llama_new_context_with_model: n_ubatch      = 512
0.00.678.191 I llama_new_context_with_model: flash_attn    = 0
0.00.678.194 I llama_new_context_with_model: freq_base     = 10000.0
0.00.678.194 I llama_new_context_with_model: freq_scale    = 1
0.00.678.195 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.694.496 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.694.538 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.694.666 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.697.198 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.697.202 I llama_new_context_with_model: graph nodes  = 601
0.00.697.203 I llama_new_context_with_model: graph splits = 1
0.00.697.227 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.305.204 I main: llama threadpool init, n_threads = 4
0.01.305.217 I 
0.01.305.322 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.305.322 I 
0.01.305.565 I sampler seed: 1969276794
0.01.305.579 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.585 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.305.589 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.305.589 I 
 seconally, and explain the meaning of each term.

**Assistant**

An individual employed by an organization to provide direct and indirect support to the organization'

0.14.797.430 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.11 tokens per second)
0.14.797.434 I llama_perf_context_print:        load time =    1303.95 ms
0.14.797.436 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.797.438 I llama_perf_context_print:        eval time =   13401.84 ms /    32 runs   (  418.81 ms per token,     2.39 tokens per second)
0.14.797.439 I llama_perf_context_print:       total time =   13492.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.084s
user	3m44.329s
sys	0m9.473s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4023 (ce027adf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199264.88 ms
main:    total time = 199264.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.001.126 I main: load the model and apply lora adapter, if any
0.00.023.675 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.688 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.786 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.799 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.801 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.806 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.810 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.811 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.812 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.813 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.815 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.823 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.824 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.826 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.827 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.828 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.347 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.972 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.348 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.355 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.357 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.358 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.359 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.360 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.361 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.365 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.366 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.367 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.368 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.369 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.376 I llama_model_loader: - type  f32:   37 tensors
0.00.268.378 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.379 I llama_model_loader: - type q6_K:   19 tensors
0.00.430.195 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.489.309 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.490.265 I llm_load_vocab: special tokens cache size = 5
0.00.584.352 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.584.429 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.584.430 I llm_load_print_meta: arch             = gemma
0.00.584.431 I llm_load_print_meta: vocab type       = SPM
0.00.584.432 I llm_load_print_meta: n_vocab          = 256000
0.00.584.434 I llm_load_print_meta: n_merges         = 0
0.00.584.435 I llm_load_print_meta: vocab_only       = 0
0.00.584.435 I llm_load_print_meta: n_ctx_train      = 8192
0.00.584.436 I llm_load_print_meta: n_embd           = 2048
0.00.584.436 I llm_load_print_meta: n_layer          = 18
0.00.584.502 I llm_load_print_meta: n_head           = 8
0.00.584.510 I llm_load_print_meta: n_head_kv        = 1
0.00.584.514 I llm_load_print_meta: n_rot            = 256
0.00.584.514 I llm_load_print_meta: n_swa            = 0
0.00.584.515 I llm_load_print_meta: n_embd_head_k    = 256
0.00.584.515 I llm_load_print_meta: n_embd_head_v    = 256
0.00.584.520 I llm_load_print_meta: n_gqa            = 8
0.00.584.524 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.584.529 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.584.530 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.584.532 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.584.533 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.584.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.584.534 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.584.539 I llm_load_print_meta: n_ff             = 16384
0.00.584.539 I llm_load_print_meta: n_expert         = 0
0.00.584.540 I llm_load_print_meta: n_expert_used    = 0
0.00.584.540 I llm_load_print_meta: causal attn      = 1
0.00.584.541 I llm_load_print_meta: pooling type     = 0
0.00.584.543 I llm_load_print_meta: rope type        = 2
0.00.584.544 I llm_load_print_meta: rope scaling     = linear
0.00.584.545 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.584.546 I llm_load_print_meta: freq_scale_train = 1
0.00.584.546 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.584.547 I llm_load_print_meta: rope_finetuned   = unknown
0.00.584.547 I llm_load_print_meta: ssm_d_conv       = 0
0.00.584.547 I llm_load_print_meta: ssm_d_inner      = 0
0.00.584.547 I llm_load_print_meta: ssm_d_state      = 0
0.00.584.548 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.584.548 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.584.549 I llm_load_print_meta: model type       = 2B
0.00.584.550 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.584.551 I llm_load_print_meta: model params     = 2.51 B
0.00.584.561 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.584.561 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.584.562 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.584.563 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.584.563 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.584.563 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.584.564 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.584.565 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.584.571 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.584.572 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.584.573 I llm_load_print_meta: max token length = 93
0.00.649.561 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.649.571 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.649.572 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.649.572 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.649.573 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.649.574 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.655.392 I llama_new_context_with_model: n_seq_max     = 1
0.00.655.400 I llama_new_context_with_model: n_ctx         = 4096
0.00.655.401 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.655.401 I llama_new_context_with_model: n_batch       = 2048
0.00.655.401 I llama_new_context_with_model: n_ubatch      = 512
0.00.655.402 I llama_new_context_with_model: flash_attn    = 0
0.00.655.405 I llama_new_context_with_model: freq_base     = 10000.0
0.00.655.406 I llama_new_context_with_model: freq_scale    = 1
0.00.655.406 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.671.836 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.671.876 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.671.995 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.674.549 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.674.553 I llama_new_context_with_model: graph nodes  = 601
0.00.674.553 I llama_new_context_with_model: graph splits = 1
0.00.674.579 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.247.987 I main: llama threadpool init, n_threads = 4
0.01.248.002 I 
0.01.248.106 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.248.109 I 
0.01.248.343 I sampler seed: 2302871163
0.01.248.355 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.248.361 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.248.365 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.248.365 I 
 seconded the sentence, "The future belongs to those who believe in the beauty of their dreams." This belief is the foundation of our journey."

This is

0.12.141.162 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.52 tokens per second)
0.12.141.176 I llama_perf_context_print:        load time =    1246.77 ms
0.12.141.178 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.141.180 I llama_perf_context_print:        eval time =   10803.18 ms /    32 runs   (  337.60 ms per token,     2.96 tokens per second)
0.12.141.181 I llama_perf_context_print:       total time =   10893.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4023 (ce027adf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199286.82 ms
main:    total time = 199286.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4023 (ce027adf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.001.098 I main: load the model and apply lora adapter, if any
0.00.023.384 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.476 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.489 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.490 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.494 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.495 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.496 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.499 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.500 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.502 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.508 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.510 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.511 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.520 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.524 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.161 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.106 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.570 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.579 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.580 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.582 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.583 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.585 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.586 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.590 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.591 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.599 I llama_model_loader: - type  f32:   37 tensors
0.00.267.602 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.602 I llama_model_loader: - type q6_K:   19 tensors
0.00.443.471 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.250 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.087 I llm_load_vocab: special tokens cache size = 5
0.00.599.442 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.514 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.515 I llm_load_print_meta: arch             = gemma
0.00.599.516 I llm_load_print_meta: vocab type       = SPM
0.00.599.517 I llm_load_print_meta: n_vocab          = 256000
0.00.599.519 I llm_load_print_meta: n_merges         = 0
0.00.599.520 I llm_load_print_meta: vocab_only       = 0
0.00.599.520 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.521 I llm_load_print_meta: n_embd           = 2048
0.00.599.521 I llm_load_print_meta: n_layer          = 18
0.00.599.587 I llm_load_print_meta: n_head           = 8
0.00.599.609 I llm_load_print_meta: n_head_kv        = 1
0.00.599.610 I llm_load_print_meta: n_rot            = 256
0.00.599.610 I llm_load_print_meta: n_swa            = 0
0.00.599.611 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.611 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.616 I llm_load_print_meta: n_gqa            = 8
0.00.599.621 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.626 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.642 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.644 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.644 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.645 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.650 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.655 I llm_load_print_meta: n_ff             = 16384
0.00.599.656 I llm_load_print_meta: n_expert         = 0
0.00.599.657 I llm_load_print_meta: n_expert_used    = 0
0.00.599.658 I llm_load_print_meta: causal attn      = 1
0.00.599.658 I llm_load_print_meta: pooling type     = 0
0.00.599.659 I llm_load_print_meta: rope type        = 2
0.00.599.659 I llm_load_print_meta: rope scaling     = linear
0.00.599.661 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.661 I llm_load_print_meta: freq_scale_train = 1
0.00.599.662 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.662 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.663 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.663 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.664 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.664 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.664 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.673 I llm_load_print_meta: model type       = 2B
0.00.599.675 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.599.676 I llm_load_print_meta: model params     = 2.51 B
0.00.599.688 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.599.688 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.690 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.690 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.691 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.691 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.692 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.692 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.698 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.701 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.701 I llm_load_print_meta: max token length = 93
0.00.658.949 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.664.760 I llama_new_context_with_model: n_seq_max     = 1
0.00.664.766 I llama_new_context_with_model: n_ctx         = 4096
0.00.664.767 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.664.767 I llama_new_context_with_model: n_batch       = 2048
0.00.664.767 I llama_new_context_with_model: n_ubatch      = 512
0.00.664.768 I llama_new_context_with_model: flash_attn    = 0
0.00.664.770 I llama_new_context_with_model: freq_base     = 10000.0
0.00.664.771 I llama_new_context_with_model: freq_scale    = 1
0.00.664.771 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.682.393 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.682.437 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.682.560 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.685.149 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.685.153 I llama_new_context_with_model: graph nodes  = 601
0.00.685.153 I llama_new_context_with_model: graph splits = 1
0.00.685.177 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.255.559 I main: llama threadpool init, n_threads = 4
0.01.255.574 I 
0.01.255.679 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.255.682 I 
0.01.255.918 I sampler seed: 1228887876
0.01.255.931 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.255.938 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.255.941 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.255.942 I 
 maneupers. [end of text]


0.02.608.330 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.83 tokens per second)
0.02.608.333 I llama_perf_context_print:        load time =    1254.37 ms
0.02.608.345 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.608.347 I llama_perf_context_print:        eval time =    1339.66 ms /     4 runs   (  334.92 ms per token,     2.99 tokens per second)
0.02.608.348 I llama_perf_context_print:       total time =    1352.78 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m56.203s
user	49m33.989s
sys	0m6.365s
