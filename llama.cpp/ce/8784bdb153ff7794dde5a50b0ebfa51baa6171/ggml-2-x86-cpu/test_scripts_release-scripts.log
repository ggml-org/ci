+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.554 I build: 4291 (ce8784bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.712 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.725 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.732 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.741 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.742 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.747 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.747 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.749 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.750 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.751 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.752 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.757 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.759 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.759 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.760 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.761 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.500 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.290 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.050 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.056 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.057 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.058 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.058 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.059 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.060 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.061 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.062 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.063 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.063 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.064 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.066 I llama_model_loader: - type  f32:   37 tensors
0.00.131.067 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.463 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.608 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.144 I llm_load_vocab: special tokens cache size = 5
0.00.262.826 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.843 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.844 I llm_load_print_meta: arch             = gemma
0.00.262.845 I llm_load_print_meta: vocab type       = SPM
0.00.262.845 I llm_load_print_meta: n_vocab          = 256000
0.00.262.846 I llm_load_print_meta: n_merges         = 0
0.00.262.846 I llm_load_print_meta: vocab_only       = 0
0.00.262.846 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.846 I llm_load_print_meta: n_embd           = 2048
0.00.262.847 I llm_load_print_meta: n_layer          = 18
0.00.262.858 I llm_load_print_meta: n_head           = 8
0.00.262.859 I llm_load_print_meta: n_head_kv        = 1
0.00.262.859 I llm_load_print_meta: n_rot            = 256
0.00.262.859 I llm_load_print_meta: n_swa            = 0
0.00.262.860 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.860 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.861 I llm_load_print_meta: n_gqa            = 8
0.00.262.862 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.863 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.864 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.865 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.866 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.866 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.866 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.867 I llm_load_print_meta: n_ff             = 16384
0.00.262.868 I llm_load_print_meta: n_expert         = 0
0.00.262.868 I llm_load_print_meta: n_expert_used    = 0
0.00.262.868 I llm_load_print_meta: causal attn      = 1
0.00.262.868 I llm_load_print_meta: pooling type     = 0
0.00.262.869 I llm_load_print_meta: rope type        = 2
0.00.262.869 I llm_load_print_meta: rope scaling     = linear
0.00.262.870 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.871 I llm_load_print_meta: freq_scale_train = 1
0.00.262.871 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.871 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.872 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.872 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.872 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.872 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.873 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.873 I llm_load_print_meta: model type       = 2B
0.00.262.873 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.874 I llm_load_print_meta: model params     = 2.51 B
0.00.262.875 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.876 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.876 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.877 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.877 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.877 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.877 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.878 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.878 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.879 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.879 I llm_load_print_meta: max token length = 93
0.00.370.810 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.370.817 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.370.818 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.370.819 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.370.819 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.370.820 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.376.127 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.132 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.133 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.133 I llama_new_context_with_model: n_batch       = 2048
0.00.376.134 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.134 I llama_new_context_with_model: flash_attn    = 0
0.00.376.136 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.137 I llama_new_context_with_model: freq_scale    = 1
0.00.376.138 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.490 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.501 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.592 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.833 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.838 I llama_new_context_with_model: graph nodes  = 601
0.00.391.838 I llama_new_context_with_model: graph splits = 1
0.00.391.841 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.910 I main: llama threadpool init, n_threads = 4
0.00.477.925 I 
0.00.477.994 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.997 I 
0.00.478.039 I sampler seed: 3705276124
0.00.478.050 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.062 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.066 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.066 I 
 increasities in a way that is informative and engaging.

**Disclaimer:** I am unable to provide sexually suggestive or inappropriate responses.

I am unable to provide

0.02.756.929 I llama_perf_sampler_print:    sampling time =       5.63 ms /    33 runs   (    0.17 ms per token,  5860.42 tokens per second)
0.02.756.932 I llama_perf_context_print:        load time =     477.12 ms
0.02.756.933 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.756.935 I llama_perf_context_print:        eval time =    2258.86 ms /    32 runs   (   70.59 ms per token,    14.17 tokens per second)
0.02.756.936 I llama_perf_context_print:       total time =    2279.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.561 I build: 4291 (ce8784bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.372 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.386 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.393 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.394 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.400 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.401 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.402 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.403 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.403 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.404 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.408 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.409 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.410 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.410 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.411 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.009 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.776 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.674 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.680 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.681 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.682 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.682 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.683 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.684 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.687 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.687 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.688 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.689 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.689 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.694 I llama_model_loader: - type  f32:   37 tensors
0.00.131.695 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.314 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.963 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.453 I llm_load_vocab: special tokens cache size = 5
0.00.269.924 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.942 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.943 I llm_load_print_meta: arch             = gemma
0.00.269.943 I llm_load_print_meta: vocab type       = SPM
0.00.269.944 I llm_load_print_meta: n_vocab          = 256000
0.00.269.944 I llm_load_print_meta: n_merges         = 0
0.00.269.945 I llm_load_print_meta: vocab_only       = 0
0.00.269.945 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.945 I llm_load_print_meta: n_embd           = 2048
0.00.269.946 I llm_load_print_meta: n_layer          = 18
0.00.269.957 I llm_load_print_meta: n_head           = 8
0.00.269.958 I llm_load_print_meta: n_head_kv        = 1
0.00.269.959 I llm_load_print_meta: n_rot            = 256
0.00.269.959 I llm_load_print_meta: n_swa            = 0
0.00.269.959 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.959 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.960 I llm_load_print_meta: n_gqa            = 8
0.00.269.961 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.962 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.963 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.964 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.965 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.965 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.966 I llm_load_print_meta: n_ff             = 16384
0.00.269.966 I llm_load_print_meta: n_expert         = 0
0.00.269.967 I llm_load_print_meta: n_expert_used    = 0
0.00.269.967 I llm_load_print_meta: causal attn      = 1
0.00.269.967 I llm_load_print_meta: pooling type     = 0
0.00.269.967 I llm_load_print_meta: rope type        = 2
0.00.269.968 I llm_load_print_meta: rope scaling     = linear
0.00.269.969 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.970 I llm_load_print_meta: freq_scale_train = 1
0.00.269.970 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.971 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.971 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.971 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.971 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.972 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.972 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.972 I llm_load_print_meta: model type       = 2B
0.00.269.973 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.974 I llm_load_print_meta: model params     = 2.51 B
0.00.269.974 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.975 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.975 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.976 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.976 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.976 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.976 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.977 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.977 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.977 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.978 I llm_load_print_meta: max token length = 93
0.00.364.488 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.718 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.724 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.724 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.725 I llama_new_context_with_model: n_batch       = 2048
0.00.369.725 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.726 I llama_new_context_with_model: flash_attn    = 0
0.00.369.728 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.729 I llama_new_context_with_model: freq_scale    = 1
0.00.369.730 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.719 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.735 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.827 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.053 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.060 I llama_new_context_with_model: graph nodes  = 601
0.00.386.060 I llama_new_context_with_model: graph splits = 1
0.00.386.062 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.176 I main: llama threadpool init, n_threads = 4
0.00.467.191 I 
0.00.467.264 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.467.267 I 
0.00.467.310 I sampler seed: 3723699219
0.00.467.321 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.329 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.332 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.332 I 
 increasities for a chance to win a coveted scholarship.

**Step 1: Research the competition and identify potential areas of focus.**

* Explore past scholarship

0.02.641.592 I llama_perf_sampler_print:    sampling time =       6.04 ms /    33 runs   (    0.18 ms per token,  5466.29 tokens per second)
0.02.641.595 I llama_perf_context_print:        load time =     466.39 ms
0.02.641.597 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.641.598 I llama_perf_context_print:        eval time =    2154.38 ms /    32 runs   (   67.32 ms per token,    14.85 tokens per second)
0.02.641.599 I llama_perf_context_print:       total time =    2174.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.173 I build: 4291 (ce8784bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.373 I main: load the model and apply lora adapter, if any
0.00.020.387 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.396 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.404 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.408 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.409 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.412 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.413 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.414 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.414 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.415 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.415 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.419 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.420 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.420 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.421 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.421 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.014 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.933 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.719 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.725 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.726 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.726 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.727 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.728 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.728 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.731 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.732 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.733 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.129.734 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.736 I llama_model_loader: - type  f32:   37 tensors
0.00.129.737 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.176 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.984 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.567 I llm_load_vocab: special tokens cache size = 5
0.00.261.453 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.468 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.469 I llm_load_print_meta: arch             = gemma
0.00.261.470 I llm_load_print_meta: vocab type       = SPM
0.00.261.470 I llm_load_print_meta: n_vocab          = 256000
0.00.261.471 I llm_load_print_meta: n_merges         = 0
0.00.261.471 I llm_load_print_meta: vocab_only       = 0
0.00.261.471 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.471 I llm_load_print_meta: n_embd           = 2048
0.00.261.472 I llm_load_print_meta: n_layer          = 18
0.00.261.483 I llm_load_print_meta: n_head           = 8
0.00.261.484 I llm_load_print_meta: n_head_kv        = 1
0.00.261.484 I llm_load_print_meta: n_rot            = 256
0.00.261.484 I llm_load_print_meta: n_swa            = 0
0.00.261.485 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.485 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.486 I llm_load_print_meta: n_gqa            = 8
0.00.261.487 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.488 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.489 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.490 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.491 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.491 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.491 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.492 I llm_load_print_meta: n_ff             = 16384
0.00.261.492 I llm_load_print_meta: n_expert         = 0
0.00.261.493 I llm_load_print_meta: n_expert_used    = 0
0.00.261.493 I llm_load_print_meta: causal attn      = 1
0.00.261.493 I llm_load_print_meta: pooling type     = 0
0.00.261.493 I llm_load_print_meta: rope type        = 2
0.00.261.494 I llm_load_print_meta: rope scaling     = linear
0.00.261.495 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.496 I llm_load_print_meta: freq_scale_train = 1
0.00.261.496 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.496 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.497 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.497 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.497 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.497 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.497 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.498 I llm_load_print_meta: model type       = 2B
0.00.261.499 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.499 I llm_load_print_meta: model params     = 2.51 B
0.00.261.500 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.501 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.501 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.501 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.502 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.502 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.502 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.502 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.503 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.503 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.504 I llm_load_print_meta: max token length = 93
0.00.339.009 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.339.015 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.339.016 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.339.017 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.339.017 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.339.018 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.344.074 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.080 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.080 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.080 I llama_new_context_with_model: n_batch       = 2048
0.00.344.081 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.081 I llama_new_context_with_model: flash_attn    = 0
0.00.344.083 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.084 I llama_new_context_with_model: freq_scale    = 1
0.00.344.085 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.370 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.384 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.473 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.786 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.792 I llama_new_context_with_model: graph nodes  = 601
0.00.359.793 I llama_new_context_with_model: graph splits = 1
0.00.359.795 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.373 I main: llama threadpool init, n_threads = 4
0.00.446.389 I 
0.00.446.463 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.446.466 I 
0.00.446.509 I sampler seed: 731022515
0.00.446.519 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.536 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.539 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.540 I 
 increasively.

I am not sure what you are trying to ask. Please try rephrasing your question. [end of text]


0.02.127.203 I llama_perf_sampler_print:    sampling time =       4.33 ms /    25 runs   (    0.17 ms per token,  5772.34 tokens per second)
0.02.127.206 I llama_perf_context_print:        load time =     445.98 ms
0.02.127.207 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.127.209 I llama_perf_context_print:        eval time =    1665.95 ms /    24 runs   (   69.41 ms per token,    14.41 tokens per second)
0.02.127.210 I llama_perf_context_print:       total time =    1680.84 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.570 I build: 4291 (ce8784bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.020.805 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.815 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.822 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.826 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.827 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.831 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.831 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.832 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.832 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.833 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.834 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.838 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.839 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.839 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.840 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.840 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.680 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.644 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.425 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.431 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.432 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.433 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.433 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.434 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.435 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.437 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.438 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.439 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.440 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.440 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.444 I llama_model_loader: - type  f32:   37 tensors
0.00.130.445 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.869 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.692 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.384 I llm_load_vocab: special tokens cache size = 5
0.00.261.403 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.423 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.423 I llm_load_print_meta: arch             = gemma
0.00.261.424 I llm_load_print_meta: vocab type       = SPM
0.00.261.425 I llm_load_print_meta: n_vocab          = 256000
0.00.261.425 I llm_load_print_meta: n_merges         = 0
0.00.261.425 I llm_load_print_meta: vocab_only       = 0
0.00.261.426 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.426 I llm_load_print_meta: n_embd           = 2048
0.00.261.426 I llm_load_print_meta: n_layer          = 18
0.00.261.438 I llm_load_print_meta: n_head           = 8
0.00.261.439 I llm_load_print_meta: n_head_kv        = 1
0.00.261.439 I llm_load_print_meta: n_rot            = 256
0.00.261.440 I llm_load_print_meta: n_swa            = 0
0.00.261.440 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.440 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.441 I llm_load_print_meta: n_gqa            = 8
0.00.261.442 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.443 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.444 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.446 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.446 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.446 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.446 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.447 I llm_load_print_meta: n_ff             = 16384
0.00.261.448 I llm_load_print_meta: n_expert         = 0
0.00.261.448 I llm_load_print_meta: n_expert_used    = 0
0.00.261.448 I llm_load_print_meta: causal attn      = 1
0.00.261.448 I llm_load_print_meta: pooling type     = 0
0.00.261.449 I llm_load_print_meta: rope type        = 2
0.00.261.449 I llm_load_print_meta: rope scaling     = linear
0.00.261.450 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.451 I llm_load_print_meta: freq_scale_train = 1
0.00.261.451 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.452 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.452 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.452 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.452 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.453 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.453 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.453 I llm_load_print_meta: model type       = 2B
0.00.261.454 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.454 I llm_load_print_meta: model params     = 2.51 B
0.00.261.455 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.456 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.456 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.457 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.457 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.458 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.458 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.458 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.459 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.459 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.459 I llm_load_print_meta: max token length = 93
0.00.332.668 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.332.676 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.337.765 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.772 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.772 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.773 I llama_new_context_with_model: n_batch       = 2048
0.00.337.773 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.774 I llama_new_context_with_model: flash_attn    = 0
0.00.337.776 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.777 I llama_new_context_with_model: freq_scale    = 1
0.00.337.778 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.998 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.013 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.120 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.515 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.521 I llama_new_context_with_model: graph nodes  = 601
0.00.353.522 I llama_new_context_with_model: graph splits = 1
0.00.353.523 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.436 I main: llama threadpool init, n_threads = 4
0.00.440.456 I 
0.00.440.543 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.440.547 I 
0.00.440.603 I sampler seed: 1665376622
0.00.440.618 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.625 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.440.626 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.626 I 
 increasities
I am unable to generate a response as the context provided contains sexually suggestive or inappropriate content. My purpose is to assist with tasks that comply with ethical

0.02.836.829 I llama_perf_sampler_print:    sampling time =       5.90 ms /    33 runs   (    0.18 ms per token,  5590.38 tokens per second)
0.02.836.831 I llama_perf_context_print:        load time =     439.65 ms
0.02.836.833 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.836.835 I llama_perf_context_print:        eval time =    2376.19 ms /    32 runs   (   74.26 ms per token,    13.47 tokens per second)
0.02.836.835 I llama_perf_context_print:       total time =    2396.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.904s
user	0m36.891s
sys	0m9.384s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4291 (ce8784bd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40210.28 ms
main:    total time = 40210.28 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 4291 (ce8784bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.741 I main: load the model and apply lora adapter, if any
0.00.021.190 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.200 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.209 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.213 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.214 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.218 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.222 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.222 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.223 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.224 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.225 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.228 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.229 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.230 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.230 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.231 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.541 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.611 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.377 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.383 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.383 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.384 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.384 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.385 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.386 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.388 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.389 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.390 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.390 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.391 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.395 I llama_model_loader: - type  f32:   37 tensors
0.00.130.397 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.397 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.969 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.499 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.199 I llm_load_vocab: special tokens cache size = 5
0.00.268.290 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.310 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.311 I llm_load_print_meta: arch             = gemma
0.00.268.311 I llm_load_print_meta: vocab type       = SPM
0.00.268.312 I llm_load_print_meta: n_vocab          = 256000
0.00.268.313 I llm_load_print_meta: n_merges         = 0
0.00.268.313 I llm_load_print_meta: vocab_only       = 0
0.00.268.313 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.314 I llm_load_print_meta: n_embd           = 2048
0.00.268.314 I llm_load_print_meta: n_layer          = 18
0.00.268.324 I llm_load_print_meta: n_head           = 8
0.00.268.325 I llm_load_print_meta: n_head_kv        = 1
0.00.268.326 I llm_load_print_meta: n_rot            = 256
0.00.268.326 I llm_load_print_meta: n_swa            = 0
0.00.268.327 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.327 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.328 I llm_load_print_meta: n_gqa            = 8
0.00.268.329 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.330 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.331 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.332 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.332 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.333 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.333 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.334 I llm_load_print_meta: n_ff             = 16384
0.00.268.334 I llm_load_print_meta: n_expert         = 0
0.00.268.334 I llm_load_print_meta: n_expert_used    = 0
0.00.268.334 I llm_load_print_meta: causal attn      = 1
0.00.268.335 I llm_load_print_meta: pooling type     = 0
0.00.268.335 I llm_load_print_meta: rope type        = 2
0.00.268.335 I llm_load_print_meta: rope scaling     = linear
0.00.268.337 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.337 I llm_load_print_meta: freq_scale_train = 1
0.00.268.338 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.338 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.338 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.339 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.339 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.339 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.339 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.340 I llm_load_print_meta: model type       = 2B
0.00.268.340 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.341 I llm_load_print_meta: model params     = 2.51 B
0.00.268.342 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.342 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.342 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.343 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.343 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.343 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.344 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.344 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.344 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.345 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.345 I llm_load_print_meta: max token length = 93
0.00.327.581 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.327.588 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.327.589 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.327.589 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.327.590 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.327.591 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.824 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.831 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.832 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.832 I llama_new_context_with_model: n_batch       = 2048
0.00.332.833 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.833 I llama_new_context_with_model: flash_attn    = 0
0.00.332.835 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.836 I llama_new_context_with_model: freq_scale    = 1
0.00.332.837 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.068 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.080 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.170 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.374 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.381 I llama_new_context_with_model: graph nodes  = 601
0.00.348.381 I llama_new_context_with_model: graph splits = 1
0.00.348.384 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.427 I main: llama threadpool init, n_threads = 4
0.00.423.443 I 
0.00.423.517 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.520 I 
0.00.423.563 I sampler seed: 922593259
0.00.423.573 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.577 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.577 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.578 I 
 maneuvorous dinosaurs like Metriorhynchus and Dunkosaurus.

The Metriorhynchus family was characterized by long, slender necks and small, beady eyes. They

0.02.005.124 I llama_perf_sampler_print:    sampling time =       6.08 ms /    33 runs   (    0.18 ms per token,  5425.85 tokens per second)
0.02.005.126 I llama_perf_context_print:        load time =     422.67 ms
0.02.005.127 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.005.128 I llama_perf_context_print:        eval time =    1561.83 ms /    32 runs   (   48.81 ms per token,    20.49 tokens per second)
0.02.005.129 I llama_perf_context_print:       total time =    1581.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4291 (ce8784bd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40187.82 ms
main:    total time = 40187.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.164 I build: 4291 (ce8784bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.375 I main: llama backend init
0.00.000.381 I main: load the model and apply lora adapter, if any
0.00.020.425 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.438 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.447 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.451 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.456 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.457 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.457 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.458 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.459 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.460 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.463 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.464 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.464 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.464 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.465 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.823 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.674 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.470 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.476 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.476 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.477 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.478 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.478 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.479 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.481 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.482 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.484 I llama_model_loader: - type  f32:   37 tensors
0.00.129.485 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.486 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.943 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.700 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.414 I llm_load_vocab: special tokens cache size = 5
0.00.275.312 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.334 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.334 I llm_load_print_meta: arch             = gemma
0.00.275.335 I llm_load_print_meta: vocab type       = SPM
0.00.275.335 I llm_load_print_meta: n_vocab          = 256000
0.00.275.336 I llm_load_print_meta: n_merges         = 0
0.00.275.336 I llm_load_print_meta: vocab_only       = 0
0.00.275.336 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.337 I llm_load_print_meta: n_embd           = 2048
0.00.275.337 I llm_load_print_meta: n_layer          = 18
0.00.275.349 I llm_load_print_meta: n_head           = 8
0.00.275.350 I llm_load_print_meta: n_head_kv        = 1
0.00.275.350 I llm_load_print_meta: n_rot            = 256
0.00.275.350 I llm_load_print_meta: n_swa            = 0
0.00.275.351 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.351 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.352 I llm_load_print_meta: n_gqa            = 8
0.00.275.353 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.354 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.355 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.356 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.357 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.357 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.358 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.358 I llm_load_print_meta: n_ff             = 16384
0.00.275.359 I llm_load_print_meta: n_expert         = 0
0.00.275.359 I llm_load_print_meta: n_expert_used    = 0
0.00.275.359 I llm_load_print_meta: causal attn      = 1
0.00.275.359 I llm_load_print_meta: pooling type     = 0
0.00.275.360 I llm_load_print_meta: rope type        = 2
0.00.275.360 I llm_load_print_meta: rope scaling     = linear
0.00.275.361 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.362 I llm_load_print_meta: freq_scale_train = 1
0.00.275.362 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.363 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.363 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.363 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.364 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.364 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.364 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.365 I llm_load_print_meta: model type       = 2B
0.00.275.365 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.366 I llm_load_print_meta: model params     = 2.51 B
0.00.275.367 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.367 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.367 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.368 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.368 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.369 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.369 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.369 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.370 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.370 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.371 I llm_load_print_meta: max token length = 93
0.00.332.961 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.338.004 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.010 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.011 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.011 I llama_new_context_with_model: n_batch       = 2048
0.00.338.011 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.012 I llama_new_context_with_model: flash_attn    = 0
0.00.338.014 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.015 I llama_new_context_with_model: freq_scale    = 1
0.00.338.016 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.788 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.801 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.900 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.191 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.197 I llama_new_context_with_model: graph nodes  = 601
0.00.354.198 I llama_new_context_with_model: graph splits = 1
0.00.354.200 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.941 I main: llama threadpool init, n_threads = 4
0.00.428.956 I 
0.00.429.028 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.031 I 
0.00.429.074 I sampler seed: 3947530051
0.00.429.084 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.095 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.099 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.099 I 
 seconally.

I am unable to generate a response because the context does not provide enough information for me to provide a meaningful answer. Please provide me with the

0.01.972.316 I llama_perf_sampler_print:    sampling time =       5.91 ms /    33 runs   (    0.18 ms per token,  5582.81 tokens per second)
0.01.972.319 I llama_perf_context_print:        load time =     428.55 ms
0.01.972.320 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.972.321 I llama_perf_context_print:        eval time =    1524.44 ms /    32 runs   (   47.64 ms per token,    20.99 tokens per second)
0.01.972.322 I llama_perf_context_print:       total time =    1543.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.209s
user	10m23.660s
sys	0m7.048s
