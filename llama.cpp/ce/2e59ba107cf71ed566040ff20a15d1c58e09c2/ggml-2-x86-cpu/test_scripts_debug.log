+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4119 (ce2e59ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.000.908 I main: load the model and apply lora adapter, if any
0.00.023.810 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.823 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.921 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.933 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.935 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.942 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.943 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.944 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.945 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.946 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.947 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.955 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.956 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.957 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.958 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.959 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.371 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.660 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.661 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.669 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.670 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.671 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.672 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.673 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.675 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.679 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.680 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.681 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.682 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.683 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.691 I llama_model_loader: - type  f32:   37 tensors
0.00.269.694 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.799 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.330 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.325 I llm_load_vocab: special tokens cache size = 5
0.00.621.823 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.621.892 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.621.893 I llm_load_print_meta: arch             = gemma
0.00.621.894 I llm_load_print_meta: vocab type       = SPM
0.00.621.895 I llm_load_print_meta: n_vocab          = 256000
0.00.621.897 I llm_load_print_meta: n_merges         = 0
0.00.621.897 I llm_load_print_meta: vocab_only       = 0
0.00.621.898 I llm_load_print_meta: n_ctx_train      = 8192
0.00.621.898 I llm_load_print_meta: n_embd           = 2048
0.00.621.898 I llm_load_print_meta: n_layer          = 18
0.00.621.962 I llm_load_print_meta: n_head           = 8
0.00.621.970 I llm_load_print_meta: n_head_kv        = 1
0.00.621.970 I llm_load_print_meta: n_rot            = 256
0.00.621.971 I llm_load_print_meta: n_swa            = 0
0.00.621.972 I llm_load_print_meta: n_embd_head_k    = 256
0.00.621.974 I llm_load_print_meta: n_embd_head_v    = 256
0.00.621.989 I llm_load_print_meta: n_gqa            = 8
0.00.621.996 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.003 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.005 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.007 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.008 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.009 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.009 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.020 I llm_load_print_meta: n_ff             = 16384
0.00.622.020 I llm_load_print_meta: n_expert         = 0
0.00.622.024 I llm_load_print_meta: n_expert_used    = 0
0.00.622.025 I llm_load_print_meta: causal attn      = 1
0.00.622.025 I llm_load_print_meta: pooling type     = 0
0.00.622.026 I llm_load_print_meta: rope type        = 2
0.00.622.027 I llm_load_print_meta: rope scaling     = linear
0.00.622.029 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.030 I llm_load_print_meta: freq_scale_train = 1
0.00.622.030 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.031 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.031 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.032 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.032 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.033 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.033 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.034 I llm_load_print_meta: model type       = 2B
0.00.622.035 I llm_load_print_meta: model ftype      = Q8_0
0.00.622.036 I llm_load_print_meta: model params     = 2.51 B
0.00.622.045 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.622.046 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.047 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.047 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.048 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.049 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.049 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.051 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.056 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.058 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.058 I llm_load_print_meta: max token length = 93
0.00.722.419 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.722.429 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.722.429 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.722.430 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.722.431 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.722.431 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.728.412 I llama_new_context_with_model: n_seq_max     = 1
0.00.728.419 I llama_new_context_with_model: n_ctx         = 4096
0.00.728.420 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.728.420 I llama_new_context_with_model: n_batch       = 2048
0.00.728.421 I llama_new_context_with_model: n_ubatch      = 512
0.00.728.421 I llama_new_context_with_model: flash_attn    = 0
0.00.728.424 I llama_new_context_with_model: freq_base     = 10000.0
0.00.728.425 I llama_new_context_with_model: freq_scale    = 1
0.00.728.425 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.742.909 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.742.950 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.743.074 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.664 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.745.669 I llama_new_context_with_model: graph nodes  = 601
0.00.745.669 I llama_new_context_with_model: graph splits = 1
0.00.745.692 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.351.785 I main: llama threadpool init, n_threads = 4
0.01.351.801 I 
0.01.351.909 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.351.913 I 
0.01.352.149 I sampler seed: 50568772
0.01.352.162 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.172 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.352.173 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.173 I 
 increasities in the 18th century, but these were eventually suppressed by the British government.

**Answer:** The British government suppressed the excesses of the

0.14.963.032 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.71 tokens per second)
0.14.963.036 I llama_perf_context_print:        load time =    1350.77 ms
0.14.963.038 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.963.040 I llama_perf_context_print:        eval time =   13521.82 ms /    32 runs   (  422.56 ms per token,     2.37 tokens per second)
0.14.963.041 I llama_perf_context_print:       total time =   13611.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4119 (ce2e59ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.023.661 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.767 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.785 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.789 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.796 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.797 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.799 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.801 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.802 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.803 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.811 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.815 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.816 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.817 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.826 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.041 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.820 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.805 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.814 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.815 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.816 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.817 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.820 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.821 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.825 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.826 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.828 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.830 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.831 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.838 I llama_model_loader: - type  f32:   37 tensors
0.00.269.840 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.512 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.825 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.781 I llm_load_vocab: special tokens cache size = 5
0.00.611.553 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.624 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.628 I llm_load_print_meta: arch             = gemma
0.00.611.629 I llm_load_print_meta: vocab type       = SPM
0.00.611.630 I llm_load_print_meta: n_vocab          = 256000
0.00.611.632 I llm_load_print_meta: n_merges         = 0
0.00.611.633 I llm_load_print_meta: vocab_only       = 0
0.00.611.633 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.633 I llm_load_print_meta: n_embd           = 2048
0.00.611.634 I llm_load_print_meta: n_layer          = 18
0.00.611.697 I llm_load_print_meta: n_head           = 8
0.00.611.707 I llm_load_print_meta: n_head_kv        = 1
0.00.611.708 I llm_load_print_meta: n_rot            = 256
0.00.611.708 I llm_load_print_meta: n_swa            = 0
0.00.611.709 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.710 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.716 I llm_load_print_meta: n_gqa            = 8
0.00.611.721 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.729 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.730 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.732 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.732 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.732 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.733 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.738 I llm_load_print_meta: n_ff             = 16384
0.00.611.738 I llm_load_print_meta: n_expert         = 0
0.00.611.739 I llm_load_print_meta: n_expert_used    = 0
0.00.611.739 I llm_load_print_meta: causal attn      = 1
0.00.611.739 I llm_load_print_meta: pooling type     = 0
0.00.611.740 I llm_load_print_meta: rope type        = 2
0.00.611.749 I llm_load_print_meta: rope scaling     = linear
0.00.611.751 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.752 I llm_load_print_meta: freq_scale_train = 1
0.00.611.753 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.753 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.754 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.754 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.755 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.755 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.756 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.757 I llm_load_print_meta: model type       = 2B
0.00.611.758 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.759 I llm_load_print_meta: model params     = 2.51 B
0.00.611.768 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.768 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.769 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.769 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.770 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.771 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.771 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.772 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.779 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.780 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.781 I llm_load_print_meta: max token length = 93
0.00.708.661 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.714.447 I llama_new_context_with_model: n_seq_max     = 1
0.00.714.454 I llama_new_context_with_model: n_ctx         = 4096
0.00.714.455 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.714.455 I llama_new_context_with_model: n_batch       = 2048
0.00.714.455 I llama_new_context_with_model: n_ubatch      = 512
0.00.714.456 I llama_new_context_with_model: flash_attn    = 0
0.00.714.458 I llama_new_context_with_model: freq_base     = 10000.0
0.00.714.459 I llama_new_context_with_model: freq_scale    = 1
0.00.714.460 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.729.527 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.729.569 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.729.696 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.732.192 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.732.196 I llama_new_context_with_model: graph nodes  = 601
0.00.732.197 I llama_new_context_with_model: graph splits = 1
0.00.732.219 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.507 I main: llama threadpool init, n_threads = 4
0.01.340.522 I 
0.01.340.639 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.644 I 
0.01.340.907 I sampler seed: 75910692
0.01.340.924 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.933 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.340.938 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.938 I 
 increably in the sentence, defying expectations.

**Explanation:**

The sentence is about an individual who defies expectations. The individual's actions defy the expectations

0.15.037.618 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.38 tokens per second)
0.15.037.622 I llama_perf_context_print:        load time =    1339.52 ms
0.15.037.623 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.037.638 I llama_perf_context_print:        eval time =   13608.03 ms /    32 runs   (  425.25 ms per token,     2.35 tokens per second)
0.15.037.640 I llama_perf_context_print:       total time =   13697.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4119 (ce2e59ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.000.876 I main: load the model and apply lora adapter, if any
0.00.024.986 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.000 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.097 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.111 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.122 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.130 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.131 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.132 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.133 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.135 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.146 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.147 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.148 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.149 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.150 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.546 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.804 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.991 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.000 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.001 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.002 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.003 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.006 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.027 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.030 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.031 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.033 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.035 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.043 I llama_model_loader: - type  f32:   37 tensors
0.00.271.045 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.034 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.133 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.026 I llm_load_vocab: special tokens cache size = 5
0.00.624.570 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.642 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.643 I llm_load_print_meta: arch             = gemma
0.00.624.644 I llm_load_print_meta: vocab type       = SPM
0.00.624.645 I llm_load_print_meta: n_vocab          = 256000
0.00.624.647 I llm_load_print_meta: n_merges         = 0
0.00.624.648 I llm_load_print_meta: vocab_only       = 0
0.00.624.648 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.649 I llm_load_print_meta: n_embd           = 2048
0.00.624.649 I llm_load_print_meta: n_layer          = 18
0.00.624.714 I llm_load_print_meta: n_head           = 8
0.00.624.721 I llm_load_print_meta: n_head_kv        = 1
0.00.624.722 I llm_load_print_meta: n_rot            = 256
0.00.624.722 I llm_load_print_meta: n_swa            = 0
0.00.624.722 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.722 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.728 I llm_load_print_meta: n_gqa            = 8
0.00.624.733 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.738 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.739 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.741 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.741 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.741 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.742 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.746 I llm_load_print_meta: n_ff             = 16384
0.00.624.747 I llm_load_print_meta: n_expert         = 0
0.00.624.747 I llm_load_print_meta: n_expert_used    = 0
0.00.624.748 I llm_load_print_meta: causal attn      = 1
0.00.624.748 I llm_load_print_meta: pooling type     = 0
0.00.624.748 I llm_load_print_meta: rope type        = 2
0.00.624.749 I llm_load_print_meta: rope scaling     = linear
0.00.624.750 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.751 I llm_load_print_meta: freq_scale_train = 1
0.00.624.772 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.774 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.774 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.775 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.775 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.775 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.782 I llm_load_print_meta: model type       = 2B
0.00.624.783 I llm_load_print_meta: model ftype      = Q8_0
0.00.624.784 I llm_load_print_meta: model params     = 2.51 B
0.00.624.793 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.624.794 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.795 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.796 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.796 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.804 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.805 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.806 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.812 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.813 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.814 I llm_load_print_meta: max token length = 93
0.00.702.451 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.702.460 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.702.461 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.702.461 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.702.462 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.702.462 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.708.253 I llama_new_context_with_model: n_seq_max     = 1
0.00.708.259 I llama_new_context_with_model: n_ctx         = 4096
0.00.708.259 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.708.260 I llama_new_context_with_model: n_batch       = 2048
0.00.708.260 I llama_new_context_with_model: n_ubatch      = 512
0.00.708.261 I llama_new_context_with_model: flash_attn    = 0
0.00.708.263 I llama_new_context_with_model: freq_base     = 10000.0
0.00.708.264 I llama_new_context_with_model: freq_scale    = 1
0.00.708.265 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.723.307 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.723.348 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.723.475 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.033 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.726.037 I llama_new_context_with_model: graph nodes  = 601
0.00.726.037 I llama_new_context_with_model: graph splits = 1
0.00.726.061 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.784 I main: llama threadpool init, n_threads = 4
0.01.335.799 I 
0.01.335.902 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.335.906 I 
0.01.336.137 I sampler seed: 554211640
0.01.336.150 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.336.157 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.336.160 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.336.160 I 
 increadibly, and he is a force to be reckoned with.

The man is arrogant and condescending. He believes he is better than everyone else and he talks

0.14.917.339 I llama_perf_sampler_print:    sampling time =      49.29 ms /    33 runs   (    1.49 ms per token,   669.49 tokens per second)
0.14.917.342 I llama_perf_context_print:        load time =    1334.81 ms
0.14.917.343 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.917.345 I llama_perf_context_print:        eval time =   13492.68 ms /    32 runs   (  421.65 ms per token,     2.37 tokens per second)
0.14.917.347 I llama_perf_context_print:       total time =   13581.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.615 I build: 4119 (ce2e59ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.000.824 I main: load the model and apply lora adapter, if any
0.00.023.651 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.662 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.748 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.760 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.762 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.766 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.769 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.770 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.771 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.772 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.773 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.784 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.785 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.786 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.787 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.788 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.649 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.259 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.361 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.371 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.372 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.373 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.374 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.375 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.376 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.403 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.408 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.410 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.413 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.414 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.423 I llama_model_loader: - type  f32:   37 tensors
0.00.270.425 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.308 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.243 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.189 I llm_load_vocab: special tokens cache size = 5
0.00.606.336 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.411 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.412 I llm_load_print_meta: arch             = gemma
0.00.606.413 I llm_load_print_meta: vocab type       = SPM
0.00.606.414 I llm_load_print_meta: n_vocab          = 256000
0.00.606.416 I llm_load_print_meta: n_merges         = 0
0.00.606.416 I llm_load_print_meta: vocab_only       = 0
0.00.606.417 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.417 I llm_load_print_meta: n_embd           = 2048
0.00.606.418 I llm_load_print_meta: n_layer          = 18
0.00.606.481 I llm_load_print_meta: n_head           = 8
0.00.606.488 I llm_load_print_meta: n_head_kv        = 1
0.00.606.489 I llm_load_print_meta: n_rot            = 256
0.00.606.489 I llm_load_print_meta: n_swa            = 0
0.00.606.489 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.490 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.495 I llm_load_print_meta: n_gqa            = 8
0.00.606.499 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.505 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.506 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.509 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.509 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.509 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.510 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.516 I llm_load_print_meta: n_ff             = 16384
0.00.606.516 I llm_load_print_meta: n_expert         = 0
0.00.606.516 I llm_load_print_meta: n_expert_used    = 0
0.00.606.517 I llm_load_print_meta: causal attn      = 1
0.00.606.518 I llm_load_print_meta: pooling type     = 0
0.00.606.519 I llm_load_print_meta: rope type        = 2
0.00.606.519 I llm_load_print_meta: rope scaling     = linear
0.00.606.521 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.522 I llm_load_print_meta: freq_scale_train = 1
0.00.606.531 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.532 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.537 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.537 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.538 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.538 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.538 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.539 I llm_load_print_meta: model type       = 2B
0.00.606.540 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.541 I llm_load_print_meta: model params     = 2.51 B
0.00.606.550 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.550 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.552 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.552 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.553 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.553 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.554 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.565 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.572 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.574 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.574 I llm_load_print_meta: max token length = 93
0.00.678.946 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.678.953 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.684.721 I llama_new_context_with_model: n_seq_max     = 1
0.00.684.728 I llama_new_context_with_model: n_ctx         = 4096
0.00.684.729 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.684.729 I llama_new_context_with_model: n_batch       = 2048
0.00.684.729 I llama_new_context_with_model: n_ubatch      = 512
0.00.684.730 I llama_new_context_with_model: flash_attn    = 0
0.00.684.732 I llama_new_context_with_model: freq_base     = 10000.0
0.00.684.733 I llama_new_context_with_model: freq_scale    = 1
0.00.684.733 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.699.126 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.699.167 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.699.294 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.701.999 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.702.004 I llama_new_context_with_model: graph nodes  = 601
0.00.702.004 I llama_new_context_with_model: graph splits = 1
0.00.702.028 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.305 I main: llama threadpool init, n_threads = 4
0.01.311.320 I 
0.01.311.429 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.433 I 
0.01.311.668 I sampler seed: 3608468216
0.01.311.681 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.311.690 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.311.693 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.311.693 I 
 increably. 

**Assistant**

I understand. I will ensure to use respectful and appropriate language in all of my responses. [end of text]


0.13.272.858 I llama_perf_sampler_print:    sampling time =      43.07 ms /    29 runs   (    1.49 ms per token,   673.29 tokens per second)
0.13.272.874 I llama_perf_context_print:        load time =    1310.39 ms
0.13.272.876 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.272.878 I llama_perf_context_print:        eval time =   11883.50 ms /    28 runs   (  424.41 ms per token,     2.36 tokens per second)
0.13.272.878 I llama_perf_context_print:       total time =   11961.56 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m7.936s
user	3m44.130s
sys	0m9.278s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4119 (ce2e59ba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 188249.10 ms
main:    total time = 188249.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4119 (ce2e59ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.836 I main: load the model and apply lora adapter, if any
0.00.023.562 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.574 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.679 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.692 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.694 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.699 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.701 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.703 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.704 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.705 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.707 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.713 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.714 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.722 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.725 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.726 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.232 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.224 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.250 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.258 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.259 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.261 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.262 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.263 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.265 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.269 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.271 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.272 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.273 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.282 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.290 I llama_model_loader: - type  f32:   37 tensors
0.00.269.292 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.303 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.650 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.502 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.432 I llm_load_vocab: special tokens cache size = 5
0.00.605.170 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.241 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.244 I llm_load_print_meta: arch             = gemma
0.00.605.245 I llm_load_print_meta: vocab type       = SPM
0.00.605.246 I llm_load_print_meta: n_vocab          = 256000
0.00.605.248 I llm_load_print_meta: n_merges         = 0
0.00.605.249 I llm_load_print_meta: vocab_only       = 0
0.00.605.249 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.249 I llm_load_print_meta: n_embd           = 2048
0.00.605.250 I llm_load_print_meta: n_layer          = 18
0.00.605.314 I llm_load_print_meta: n_head           = 8
0.00.605.324 I llm_load_print_meta: n_head_kv        = 1
0.00.605.325 I llm_load_print_meta: n_rot            = 256
0.00.605.326 I llm_load_print_meta: n_swa            = 0
0.00.605.327 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.327 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.332 I llm_load_print_meta: n_gqa            = 8
0.00.605.337 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.345 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.346 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.348 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.348 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.349 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.357 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.363 I llm_load_print_meta: n_ff             = 16384
0.00.605.364 I llm_load_print_meta: n_expert         = 0
0.00.605.365 I llm_load_print_meta: n_expert_used    = 0
0.00.605.365 I llm_load_print_meta: causal attn      = 1
0.00.605.366 I llm_load_print_meta: pooling type     = 0
0.00.605.366 I llm_load_print_meta: rope type        = 2
0.00.605.367 I llm_load_print_meta: rope scaling     = linear
0.00.605.368 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.369 I llm_load_print_meta: freq_scale_train = 1
0.00.605.370 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.371 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.371 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.372 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.373 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.373 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.375 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.376 I llm_load_print_meta: model type       = 2B
0.00.605.377 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.605.379 I llm_load_print_meta: model params     = 2.51 B
0.00.605.390 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.605.390 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.391 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.392 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.393 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.396 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.397 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.398 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.405 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.409 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.410 I llm_load_print_meta: max token length = 93
0.00.666.315 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.666.328 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.666.328 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.666.329 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.666.330 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.666.330 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.672.612 I llama_new_context_with_model: n_seq_max     = 1
0.00.672.621 I llama_new_context_with_model: n_ctx         = 4096
0.00.672.622 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.672.622 I llama_new_context_with_model: n_batch       = 2048
0.00.672.623 I llama_new_context_with_model: n_ubatch      = 512
0.00.672.623 I llama_new_context_with_model: flash_attn    = 0
0.00.672.626 I llama_new_context_with_model: freq_base     = 10000.0
0.00.672.627 I llama_new_context_with_model: freq_scale    = 1
0.00.672.627 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.688.105 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.688.146 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.688.273 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.690.888 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.690.892 I llama_new_context_with_model: graph nodes  = 601
0.00.690.893 I llama_new_context_with_model: graph splits = 1
0.00.690.915 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.789 I main: llama threadpool init, n_threads = 4
0.01.274.805 I 
0.01.274.911 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.916 I 
0.01.275.147 I sampler seed: 1778073369
0.01.275.160 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.166 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.275.169 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.275.170 I 
 seconally to the question and provide the answer.

**Question:** What is the difference between a covalent bond and an ionic bond?

**Answer:**



0.12.402.053 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.24 tokens per second)
0.12.402.057 I llama_perf_context_print:        load time =    1273.86 ms
0.12.402.058 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.402.060 I llama_perf_context_print:        eval time =   11038.11 ms /    32 runs   (  344.94 ms per token,     2.90 tokens per second)
0.12.402.061 I llama_perf_context_print:       total time =   11127.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4119 (ce2e59ba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187276.51 ms
main:    total time = 187276.51 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 4119 (ce2e59ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.023.160 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.260 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.273 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.275 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.280 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.281 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.283 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.284 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.286 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.286 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.292 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.293 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.295 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.296 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.297 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.455 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.893 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.996 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.005 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.006 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.007 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.008 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.010 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.011 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.014 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.015 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.023 I llama_model_loader: - type  f32:   37 tensors
0.00.270.025 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.026 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.220 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.625 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.595 I llm_load_vocab: special tokens cache size = 5
0.00.603.172 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.237 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.238 I llm_load_print_meta: arch             = gemma
0.00.603.239 I llm_load_print_meta: vocab type       = SPM
0.00.603.240 I llm_load_print_meta: n_vocab          = 256000
0.00.603.242 I llm_load_print_meta: n_merges         = 0
0.00.603.243 I llm_load_print_meta: vocab_only       = 0
0.00.603.243 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.244 I llm_load_print_meta: n_embd           = 2048
0.00.603.244 I llm_load_print_meta: n_layer          = 18
0.00.603.310 I llm_load_print_meta: n_head           = 8
0.00.603.317 I llm_load_print_meta: n_head_kv        = 1
0.00.603.318 I llm_load_print_meta: n_rot            = 256
0.00.603.318 I llm_load_print_meta: n_swa            = 0
0.00.603.318 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.319 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.323 I llm_load_print_meta: n_gqa            = 8
0.00.603.328 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.332 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.334 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.352 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.353 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.353 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.354 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.361 I llm_load_print_meta: n_ff             = 16384
0.00.603.362 I llm_load_print_meta: n_expert         = 0
0.00.603.362 I llm_load_print_meta: n_expert_used    = 0
0.00.603.363 I llm_load_print_meta: causal attn      = 1
0.00.603.363 I llm_load_print_meta: pooling type     = 0
0.00.603.364 I llm_load_print_meta: rope type        = 2
0.00.603.364 I llm_load_print_meta: rope scaling     = linear
0.00.603.365 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.373 I llm_load_print_meta: freq_scale_train = 1
0.00.603.374 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.374 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.374 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.386 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.387 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.392 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.400 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.402 I llm_load_print_meta: model type       = 2B
0.00.603.403 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.603.404 I llm_load_print_meta: model params     = 2.51 B
0.00.603.415 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.603.416 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.417 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.417 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.418 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.418 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.419 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.419 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.428 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.430 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.430 I llm_load_print_meta: max token length = 93
0.00.661.911 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.667.591 I llama_new_context_with_model: n_seq_max     = 1
0.00.667.598 I llama_new_context_with_model: n_ctx         = 4096
0.00.667.598 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.667.599 I llama_new_context_with_model: n_batch       = 2048
0.00.667.599 I llama_new_context_with_model: n_ubatch      = 512
0.00.667.600 I llama_new_context_with_model: flash_attn    = 0
0.00.667.602 I llama_new_context_with_model: freq_base     = 10000.0
0.00.667.602 I llama_new_context_with_model: freq_scale    = 1
0.00.667.603 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.682.118 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.682.158 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.682.277 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.684.875 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.684.878 I llama_new_context_with_model: graph nodes  = 601
0.00.684.879 I llama_new_context_with_model: graph splits = 1
0.00.684.903 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.270.706 I main: llama threadpool init, n_threads = 4
0.01.270.722 I 
0.01.270.831 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.270.835 I 
0.01.271.067 I sampler seed: 4008372905
0.01.271.080 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.087 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.271.088 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.271.090 I 
 encompate this excerpt from the article:

**Summary:**

The excerpt discusses the importance of considering diverse perspectives and experiences in decision-making processes. It highlights

0.12.382.825 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.66 tokens per second)
0.12.382.829 I llama_perf_context_print:        load time =    1269.79 ms
0.12.382.831 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.382.833 I llama_perf_context_print:        eval time =   11023.44 ms /    32 runs   (  344.48 ms per token,     2.90 tokens per second)
0.12.382.834 I llama_perf_context_print:       total time =   11112.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m43.205s
user	47m2.315s
sys	0m6.290s
