+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4108 (ce65dfe2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.023.131 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.142 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.231 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.243 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.245 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.250 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.251 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.253 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.262 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.264 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.265 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.271 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.275 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.276 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.277 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.278 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.643 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.474 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.787 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.798 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.799 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.801 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.802 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.803 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.805 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.808 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.809 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.811 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.811 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.813 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.822 I llama_model_loader: - type  f32:   37 tensors
0.00.271.825 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.919 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.033 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.909 I llm_load_vocab: special tokens cache size = 5
0.00.610.650 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.716 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.716 I llm_load_print_meta: arch             = gemma
0.00.610.717 I llm_load_print_meta: vocab type       = SPM
0.00.610.718 I llm_load_print_meta: n_vocab          = 256000
0.00.610.721 I llm_load_print_meta: n_merges         = 0
0.00.610.721 I llm_load_print_meta: vocab_only       = 0
0.00.610.721 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.722 I llm_load_print_meta: n_embd           = 2048
0.00.610.722 I llm_load_print_meta: n_layer          = 18
0.00.610.784 I llm_load_print_meta: n_head           = 8
0.00.610.792 I llm_load_print_meta: n_head_kv        = 1
0.00.610.794 I llm_load_print_meta: n_rot            = 256
0.00.610.794 I llm_load_print_meta: n_swa            = 0
0.00.610.794 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.795 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.800 I llm_load_print_meta: n_gqa            = 8
0.00.610.804 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.809 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.811 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.812 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.813 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.813 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.814 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.819 I llm_load_print_meta: n_ff             = 16384
0.00.610.819 I llm_load_print_meta: n_expert         = 0
0.00.610.820 I llm_load_print_meta: n_expert_used    = 0
0.00.610.821 I llm_load_print_meta: causal attn      = 1
0.00.610.821 I llm_load_print_meta: pooling type     = 0
0.00.610.832 I llm_load_print_meta: rope type        = 2
0.00.610.834 I llm_load_print_meta: rope scaling     = linear
0.00.610.846 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.851 I llm_load_print_meta: freq_scale_train = 1
0.00.610.851 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.851 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.852 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.852 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.853 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.854 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.854 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.855 I llm_load_print_meta: model type       = 2B
0.00.610.857 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.866 I llm_load_print_meta: model params     = 2.51 B
0.00.610.867 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.867 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.868 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.868 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.872 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.872 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.873 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.873 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.889 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.905 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.908 I llm_load_print_meta: max token length = 93
0.00.711.639 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.711.647 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.711.648 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.711.649 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.711.650 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.711.651 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.717.454 I llama_new_context_with_model: n_seq_max     = 1
0.00.717.461 I llama_new_context_with_model: n_ctx         = 4096
0.00.717.461 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.717.461 I llama_new_context_with_model: n_batch       = 2048
0.00.717.462 I llama_new_context_with_model: n_ubatch      = 512
0.00.717.462 I llama_new_context_with_model: flash_attn    = 0
0.00.717.464 I llama_new_context_with_model: freq_base     = 10000.0
0.00.717.465 I llama_new_context_with_model: freq_scale    = 1
0.00.717.466 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.731.758 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.731.796 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.731.921 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.625 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.734.629 I llama_new_context_with_model: graph nodes  = 601
0.00.734.630 I llama_new_context_with_model: graph splits = 1
0.00.734.651 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.932 I main: llama threadpool init, n_threads = 4
0.01.339.947 I 
0.01.340.049 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.053 I 
0.01.340.282 I sampler seed: 115679626
0.01.340.295 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.301 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.340.304 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.304 I 
 seconally in a way that is clear and concise.

I am unable to provide you with an answer as the prompt contains inappropriate content and violates our guidelines.

0.14.860.808 I llama_perf_sampler_print:    sampling time =      49.29 ms /    33 runs   (    1.49 ms per token,   669.56 tokens per second)
0.14.860.832 I llama_perf_context_print:        load time =    1338.99 ms
0.14.860.834 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.860.836 I llama_perf_context_print:        eval time =   13431.50 ms /    32 runs   (  419.73 ms per token,     2.38 tokens per second)
0.14.860.838 I llama_perf_context_print:       total time =   13520.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.702 I build: 4108 (ce65dfe2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.911 I main: llama backend init
0.00.000.919 I main: load the model and apply lora adapter, if any
0.00.023.498 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.595 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.609 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.611 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.616 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.618 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.619 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.620 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.622 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.624 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.640 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.645 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.647 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.648 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.650 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.484 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.539 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.944 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.955 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.956 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.957 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.958 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.959 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.960 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.964 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.965 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.966 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.967 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.274.969 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.977 I llama_model_loader: - type  f32:   37 tensors
0.00.274.979 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.009 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.527.738 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.528.711 I llm_load_vocab: special tokens cache size = 5
0.00.624.274 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.343 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.344 I llm_load_print_meta: arch             = gemma
0.00.624.345 I llm_load_print_meta: vocab type       = SPM
0.00.624.346 I llm_load_print_meta: n_vocab          = 256000
0.00.624.348 I llm_load_print_meta: n_merges         = 0
0.00.624.349 I llm_load_print_meta: vocab_only       = 0
0.00.624.349 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.349 I llm_load_print_meta: n_embd           = 2048
0.00.624.350 I llm_load_print_meta: n_layer          = 18
0.00.624.414 I llm_load_print_meta: n_head           = 8
0.00.624.422 I llm_load_print_meta: n_head_kv        = 1
0.00.624.422 I llm_load_print_meta: n_rot            = 256
0.00.624.423 I llm_load_print_meta: n_swa            = 0
0.00.624.423 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.425 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.430 I llm_load_print_meta: n_gqa            = 8
0.00.624.435 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.440 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.452 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.454 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.455 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.455 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.456 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.462 I llm_load_print_meta: n_ff             = 16384
0.00.624.462 I llm_load_print_meta: n_expert         = 0
0.00.624.463 I llm_load_print_meta: n_expert_used    = 0
0.00.624.464 I llm_load_print_meta: causal attn      = 1
0.00.624.464 I llm_load_print_meta: pooling type     = 0
0.00.624.465 I llm_load_print_meta: rope type        = 2
0.00.624.465 I llm_load_print_meta: rope scaling     = linear
0.00.624.467 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.468 I llm_load_print_meta: freq_scale_train = 1
0.00.624.468 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.469 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.469 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.470 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.470 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.470 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.482 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.483 I llm_load_print_meta: model type       = 2B
0.00.624.484 I llm_load_print_meta: model ftype      = Q8_0
0.00.624.493 I llm_load_print_meta: model params     = 2.51 B
0.00.624.494 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.624.495 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.496 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.496 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.497 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.498 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.498 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.499 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.505 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.507 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.507 I llm_load_print_meta: max token length = 93
0.00.721.885 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.729.031 I llama_new_context_with_model: n_seq_max     = 1
0.00.729.037 I llama_new_context_with_model: n_ctx         = 4096
0.00.729.038 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.729.038 I llama_new_context_with_model: n_batch       = 2048
0.00.729.039 I llama_new_context_with_model: n_ubatch      = 512
0.00.729.039 I llama_new_context_with_model: flash_attn    = 0
0.00.729.041 I llama_new_context_with_model: freq_base     = 10000.0
0.00.729.042 I llama_new_context_with_model: freq_scale    = 1
0.00.729.043 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.743.929 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.743.970 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.744.102 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.818 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.746.823 I llama_new_context_with_model: graph nodes  = 601
0.00.746.823 I llama_new_context_with_model: graph splits = 1
0.00.746.846 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.355.082 I main: llama threadpool init, n_threads = 4
0.01.355.099 I 
0.01.355.219 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.233 I 
0.01.355.470 I sampler seed: 2007822383
0.01.355.484 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.493 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.355.496 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.496 I 
 increably. [end of text]


0.03.047.379 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.34 tokens per second)
0.03.047.397 I llama_perf_context_print:        load time =    1354.07 ms
0.03.047.399 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.047.400 I llama_perf_context_print:        eval time =    1679.25 ms /     4 runs   (  419.81 ms per token,     2.38 tokens per second)
0.03.047.411 I llama_perf_context_print:       total time =    1692.31 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.615 I build: 4108 (ce65dfe2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.821 I main: llama backend init
0.00.000.829 I main: load the model and apply lora adapter, if any
0.00.023.342 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.353 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.445 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.457 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.459 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.465 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.469 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.472 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.474 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.476 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.477 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.484 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.486 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.489 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.491 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.493 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.128 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.966 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.740 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.758 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.759 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.761 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.762 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.763 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.764 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.788 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.792 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.794 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.796 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.273.798 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.809 I llama_model_loader: - type  f32:   37 tensors
0.00.273.813 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.462 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.693 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.692 I llm_load_vocab: special tokens cache size = 5
0.00.612.042 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.114 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.115 I llm_load_print_meta: arch             = gemma
0.00.612.116 I llm_load_print_meta: vocab type       = SPM
0.00.612.116 I llm_load_print_meta: n_vocab          = 256000
0.00.612.118 I llm_load_print_meta: n_merges         = 0
0.00.612.119 I llm_load_print_meta: vocab_only       = 0
0.00.612.119 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.119 I llm_load_print_meta: n_embd           = 2048
0.00.612.120 I llm_load_print_meta: n_layer          = 18
0.00.612.182 I llm_load_print_meta: n_head           = 8
0.00.612.191 I llm_load_print_meta: n_head_kv        = 1
0.00.612.192 I llm_load_print_meta: n_rot            = 256
0.00.612.192 I llm_load_print_meta: n_swa            = 0
0.00.612.193 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.194 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.202 I llm_load_print_meta: n_gqa            = 8
0.00.612.209 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.215 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.217 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.219 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.219 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.240 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.241 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.250 I llm_load_print_meta: n_ff             = 16384
0.00.612.251 I llm_load_print_meta: n_expert         = 0
0.00.612.252 I llm_load_print_meta: n_expert_used    = 0
0.00.612.253 I llm_load_print_meta: causal attn      = 1
0.00.612.254 I llm_load_print_meta: pooling type     = 0
0.00.612.255 I llm_load_print_meta: rope type        = 2
0.00.612.256 I llm_load_print_meta: rope scaling     = linear
0.00.612.258 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.259 I llm_load_print_meta: freq_scale_train = 1
0.00.612.261 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.261 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.262 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.262 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.264 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.264 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.265 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.266 I llm_load_print_meta: model type       = 2B
0.00.612.272 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.281 I llm_load_print_meta: model params     = 2.51 B
0.00.612.282 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.283 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.284 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.284 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.285 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.286 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.287 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.287 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.294 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.296 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.297 I llm_load_print_meta: max token length = 93
0.00.691.008 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.691.017 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.691.018 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.691.019 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.691.019 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.691.020 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.697.105 I llama_new_context_with_model: n_seq_max     = 1
0.00.697.113 I llama_new_context_with_model: n_ctx         = 4096
0.00.697.113 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.697.114 I llama_new_context_with_model: n_batch       = 2048
0.00.697.114 I llama_new_context_with_model: n_ubatch      = 512
0.00.697.115 I llama_new_context_with_model: flash_attn    = 0
0.00.697.117 I llama_new_context_with_model: freq_base     = 10000.0
0.00.697.118 I llama_new_context_with_model: freq_scale    = 1
0.00.697.119 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.711.609 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.711.649 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.711.779 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.371 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.714.375 I llama_new_context_with_model: graph nodes  = 601
0.00.714.375 I llama_new_context_with_model: graph splits = 1
0.00.714.399 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.681 I main: llama threadpool init, n_threads = 4
0.01.352.701 I 
0.01.352.842 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.847 I 
0.01.353.087 I sampler seed: 2815407321
0.01.353.100 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.106 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.353.107 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.107 I 
 increasements:

**Part 1: The Basics**
- Briefly explain the purpose of a Joomla website.
- Outline the key features and functionalities of

0.14.990.623 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.11 tokens per second)
0.14.990.637 I llama_perf_context_print:        load time =    1351.76 ms
0.14.990.639 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.990.641 I llama_perf_context_print:        eval time =   13548.60 ms /    32 runs   (  423.39 ms per token,     2.36 tokens per second)
0.14.990.642 I llama_perf_context_print:       total time =   13637.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4108 (ce65dfe2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.025.859 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.870 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.957 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.968 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.970 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.977 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.981 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.982 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.983 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.985 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.985 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.991 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.992 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.993 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.994 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.996 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.573 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.611 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.765 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.773 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.774 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.775 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.776 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.778 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.780 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.783 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.784 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.785 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.786 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.273.787 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.795 I llama_model_loader: - type  f32:   37 tensors
0.00.273.797 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.611 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.851 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.738 I llm_load_vocab: special tokens cache size = 5
0.00.629.981 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.630.053 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.630.058 I llm_load_print_meta: arch             = gemma
0.00.630.059 I llm_load_print_meta: vocab type       = SPM
0.00.630.060 I llm_load_print_meta: n_vocab          = 256000
0.00.630.062 I llm_load_print_meta: n_merges         = 0
0.00.630.062 I llm_load_print_meta: vocab_only       = 0
0.00.630.063 I llm_load_print_meta: n_ctx_train      = 8192
0.00.630.063 I llm_load_print_meta: n_embd           = 2048
0.00.630.063 I llm_load_print_meta: n_layer          = 18
0.00.630.127 I llm_load_print_meta: n_head           = 8
0.00.630.137 I llm_load_print_meta: n_head_kv        = 1
0.00.630.138 I llm_load_print_meta: n_rot            = 256
0.00.630.139 I llm_load_print_meta: n_swa            = 0
0.00.630.139 I llm_load_print_meta: n_embd_head_k    = 256
0.00.630.140 I llm_load_print_meta: n_embd_head_v    = 256
0.00.630.144 I llm_load_print_meta: n_gqa            = 8
0.00.630.149 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.630.154 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.630.158 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.630.159 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.630.160 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.630.160 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.630.160 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.630.165 I llm_load_print_meta: n_ff             = 16384
0.00.630.166 I llm_load_print_meta: n_expert         = 0
0.00.630.167 I llm_load_print_meta: n_expert_used    = 0
0.00.630.167 I llm_load_print_meta: causal attn      = 1
0.00.630.168 I llm_load_print_meta: pooling type     = 0
0.00.630.169 I llm_load_print_meta: rope type        = 2
0.00.630.169 I llm_load_print_meta: rope scaling     = linear
0.00.630.171 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.630.171 I llm_load_print_meta: freq_scale_train = 1
0.00.630.172 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.630.173 I llm_load_print_meta: rope_finetuned   = unknown
0.00.630.173 I llm_load_print_meta: ssm_d_conv       = 0
0.00.630.173 I llm_load_print_meta: ssm_d_inner      = 0
0.00.630.174 I llm_load_print_meta: ssm_d_state      = 0
0.00.630.174 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.630.175 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.630.176 I llm_load_print_meta: model type       = 2B
0.00.630.177 I llm_load_print_meta: model ftype      = Q8_0
0.00.630.186 I llm_load_print_meta: model params     = 2.51 B
0.00.630.187 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.630.189 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.630.189 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.630.190 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.630.194 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.630.194 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.630.195 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.630.196 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.630.203 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.630.205 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.630.206 I llm_load_print_meta: max token length = 93
0.00.702.678 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.702.689 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.708.780 I llama_new_context_with_model: n_seq_max     = 1
0.00.708.787 I llama_new_context_with_model: n_ctx         = 4096
0.00.708.787 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.708.788 I llama_new_context_with_model: n_batch       = 2048
0.00.708.788 I llama_new_context_with_model: n_ubatch      = 512
0.00.708.788 I llama_new_context_with_model: flash_attn    = 0
0.00.708.790 I llama_new_context_with_model: freq_base     = 10000.0
0.00.708.791 I llama_new_context_with_model: freq_scale    = 1
0.00.708.791 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.723.324 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.723.362 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.723.483 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.078 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.726.082 I llama_new_context_with_model: graph nodes  = 601
0.00.726.083 I llama_new_context_with_model: graph splits = 1
0.00.726.105 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.336.711 I main: llama threadpool init, n_threads = 4
0.01.336.727 I 
0.01.336.837 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.336.840 I 
0.01.337.085 I sampler seed: 774594261
0.01.337.098 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.337.105 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.337.106 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.337.106 I 
 increamically.

I cannot answer this question as it contains inappropriate language. [end of text]


0.08.113.897 I llama_perf_sampler_print:    sampling time =      24.70 ms /    17 runs   (    1.45 ms per token,   688.31 tokens per second)
0.08.113.899 I llama_perf_context_print:        load time =    1335.77 ms
0.08.113.901 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.113.902 I llama_perf_context_print:        eval time =    6731.43 ms /    16 runs   (  420.71 ms per token,     2.38 tokens per second)
0.08.113.902 I llama_perf_context_print:       total time =    6777.19 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m50.497s
user	2m35.281s
sys	0m9.343s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4108 (ce65dfe2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187240.19 ms
main:    total time = 187240.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4108 (ce65dfe2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.024.003 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.017 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.116 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.129 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.131 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.137 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.139 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.140 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.141 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.142 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.144 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.155 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.159 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.160 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.161 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.162 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.268 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.668 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.857 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.866 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.868 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.869 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.870 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.871 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.873 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.876 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.877 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.879 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.880 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.881 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.888 I llama_model_loader: - type  f32:   37 tensors
0.00.272.890 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.891 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.413 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.367 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.240 I llm_load_vocab: special tokens cache size = 5
0.00.611.340 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.411 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.412 I llm_load_print_meta: arch             = gemma
0.00.611.412 I llm_load_print_meta: vocab type       = SPM
0.00.611.413 I llm_load_print_meta: n_vocab          = 256000
0.00.611.415 I llm_load_print_meta: n_merges         = 0
0.00.611.415 I llm_load_print_meta: vocab_only       = 0
0.00.611.416 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.416 I llm_load_print_meta: n_embd           = 2048
0.00.611.417 I llm_load_print_meta: n_layer          = 18
0.00.611.481 I llm_load_print_meta: n_head           = 8
0.00.611.488 I llm_load_print_meta: n_head_kv        = 1
0.00.611.489 I llm_load_print_meta: n_rot            = 256
0.00.611.489 I llm_load_print_meta: n_swa            = 0
0.00.611.490 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.490 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.494 I llm_load_print_meta: n_gqa            = 8
0.00.611.500 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.505 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.506 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.507 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.508 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.508 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.509 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.513 I llm_load_print_meta: n_ff             = 16384
0.00.611.514 I llm_load_print_meta: n_expert         = 0
0.00.611.514 I llm_load_print_meta: n_expert_used    = 0
0.00.611.514 I llm_load_print_meta: causal attn      = 1
0.00.611.515 I llm_load_print_meta: pooling type     = 0
0.00.611.515 I llm_load_print_meta: rope type        = 2
0.00.611.515 I llm_load_print_meta: rope scaling     = linear
0.00.611.517 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.518 I llm_load_print_meta: freq_scale_train = 1
0.00.611.518 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.519 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.519 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.519 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.519 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.520 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.520 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.521 I llm_load_print_meta: model type       = 2B
0.00.611.523 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.531 I llm_load_print_meta: model params     = 2.51 B
0.00.611.532 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.533 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.537 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.538 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.538 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.538 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.555 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.557 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.564 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.565 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.566 I llm_load_print_meta: max token length = 93
0.00.673.996 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.674.005 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.674.006 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.674.007 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.674.007 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.674.008 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.679.808 I llama_new_context_with_model: n_seq_max     = 1
0.00.679.815 I llama_new_context_with_model: n_ctx         = 4096
0.00.679.815 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.679.816 I llama_new_context_with_model: n_batch       = 2048
0.00.679.816 I llama_new_context_with_model: n_ubatch      = 512
0.00.679.817 I llama_new_context_with_model: flash_attn    = 0
0.00.679.819 I llama_new_context_with_model: freq_base     = 10000.0
0.00.679.819 I llama_new_context_with_model: freq_scale    = 1
0.00.679.820 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.694.224 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.694.260 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.694.383 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.697.112 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.697.116 I llama_new_context_with_model: graph nodes  = 601
0.00.697.117 I llama_new_context_with_model: graph splits = 1
0.00.697.139 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.318 I main: llama threadpool init, n_threads = 4
0.01.280.333 I 
0.01.280.441 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.280.445 I 
0.01.280.677 I sampler seed: 3727862918
0.01.280.689 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.696 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.280.699 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.280.700 I 
 maneuvously.

I am unable to generate a response as the prompt contains inappropriate and sexually suggestive language. I am programmed to adhere to ethical guidelines and cannot

0.12.401.539 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.87 tokens per second)
0.12.401.542 I llama_perf_context_print:        load time =    1279.35 ms
0.12.401.543 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.401.545 I llama_perf_context_print:        eval time =   11032.88 ms /    32 runs   (  344.78 ms per token,     2.90 tokens per second)
0.12.401.546 I llama_perf_context_print:       total time =   11121.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4108 (ce65dfe2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186404.25 ms
main:    total time = 186404.25 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4108 (ce65dfe2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.833 I main: load the model and apply lora adapter, if any
0.00.023.150 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.253 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.266 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.268 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.273 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.280 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.281 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.282 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.283 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.284 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.289 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.290 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.291 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.292 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.293 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.586 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.101 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.369 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.389 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.390 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.391 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.392 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.393 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.394 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.398 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.399 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.408 I llama_model_loader: - type  f32:   37 tensors
0.00.271.411 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.411 I llama_model_loader: - type q6_K:   19 tensors
0.00.469.521 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.533.983 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.534.917 I llm_load_vocab: special tokens cache size = 5
0.00.644.236 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.644.307 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.644.308 I llm_load_print_meta: arch             = gemma
0.00.644.309 I llm_load_print_meta: vocab type       = SPM
0.00.644.310 I llm_load_print_meta: n_vocab          = 256000
0.00.644.312 I llm_load_print_meta: n_merges         = 0
0.00.644.313 I llm_load_print_meta: vocab_only       = 0
0.00.644.313 I llm_load_print_meta: n_ctx_train      = 8192
0.00.644.314 I llm_load_print_meta: n_embd           = 2048
0.00.644.314 I llm_load_print_meta: n_layer          = 18
0.00.644.378 I llm_load_print_meta: n_head           = 8
0.00.644.386 I llm_load_print_meta: n_head_kv        = 1
0.00.644.387 I llm_load_print_meta: n_rot            = 256
0.00.644.388 I llm_load_print_meta: n_swa            = 0
0.00.644.389 I llm_load_print_meta: n_embd_head_k    = 256
0.00.644.393 I llm_load_print_meta: n_embd_head_v    = 256
0.00.644.398 I llm_load_print_meta: n_gqa            = 8
0.00.644.403 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.644.409 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.644.410 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.644.412 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.644.413 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.644.413 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.644.417 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.644.421 I llm_load_print_meta: n_ff             = 16384
0.00.644.422 I llm_load_print_meta: n_expert         = 0
0.00.644.422 I llm_load_print_meta: n_expert_used    = 0
0.00.644.423 I llm_load_print_meta: causal attn      = 1
0.00.644.423 I llm_load_print_meta: pooling type     = 0
0.00.644.434 I llm_load_print_meta: rope type        = 2
0.00.644.437 I llm_load_print_meta: rope scaling     = linear
0.00.644.439 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.644.440 I llm_load_print_meta: freq_scale_train = 1
0.00.644.440 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.644.441 I llm_load_print_meta: rope_finetuned   = unknown
0.00.644.441 I llm_load_print_meta: ssm_d_conv       = 0
0.00.644.441 I llm_load_print_meta: ssm_d_inner      = 0
0.00.644.442 I llm_load_print_meta: ssm_d_state      = 0
0.00.644.442 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.644.442 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.644.453 I llm_load_print_meta: model type       = 2B
0.00.644.455 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.644.464 I llm_load_print_meta: model params     = 2.51 B
0.00.644.465 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.644.465 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.644.467 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.644.467 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.644.468 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.644.469 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.644.469 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.644.470 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.644.476 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.644.477 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.644.478 I llm_load_print_meta: max token length = 93
0.00.703.298 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.709.038 I llama_new_context_with_model: n_seq_max     = 1
0.00.709.045 I llama_new_context_with_model: n_ctx         = 4096
0.00.709.046 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.709.046 I llama_new_context_with_model: n_batch       = 2048
0.00.709.047 I llama_new_context_with_model: n_ubatch      = 512
0.00.709.047 I llama_new_context_with_model: flash_attn    = 0
0.00.709.049 I llama_new_context_with_model: freq_base     = 10000.0
0.00.709.050 I llama_new_context_with_model: freq_scale    = 1
0.00.709.051 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.723.655 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.723.696 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.723.818 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.315 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.726.319 I llama_new_context_with_model: graph nodes  = 601
0.00.726.320 I llama_new_context_with_model: graph splits = 1
0.00.726.341 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.044 I main: llama threadpool init, n_threads = 4
0.01.311.062 I 
0.01.311.170 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.173 I 
0.01.311.423 I sampler seed: 2719219290
0.01.311.437 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.311.443 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.311.446 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.311.447 I 
 encompassing.

**Answer:**

I understand. However, I need more context to provide an accurate and relevant response. Please provide me with more information about

0.12.439.186 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.37 tokens per second)
0.12.439.189 I llama_perf_context_print:        load time =    1310.12 ms
0.12.439.190 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.439.205 I llama_perf_context_print:        eval time =   11039.25 ms /    32 runs   (  344.98 ms per token,     2.90 tokens per second)
0.12.439.207 I llama_perf_context_print:       total time =   11128.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.330s
user	47m0.513s
sys	0m6.100s
